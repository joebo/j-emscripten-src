// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB;
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  getFunctionTables: function (module) {
    if (!module) module = Module;
    var tables = {};
    for (var t in module) {
      if (/^FUNCTION_TABLE_.*/.test(t)) {
        var table = module[t];
        if (typeof table === 'object') tables[t.substr('FUNCTION_TABLE_'.length)] = table;
      }
    }
    return tables;
  },
  alignFunctionTables: function (module) {
    var tables = Runtime.getFunctionTables(module);
    var maxx = 0;
    for (var sig in tables) {
      maxx = Math.max(maxx, tables[sig].length);
    }
    assert(maxx >= 0);
    for (var sig in tables) {
      var table = tables[sig];
      while (table.length < maxx) table.push(0);
    }
    return maxx;
  },
  registerFunctions: function (sigs, newModule) {
    sigs.forEach(function(sig) {
      if (!Module['FUNCTION_TABLE_' + sig]) {
        Module['FUNCTION_TABLE_' + sig] = [];
      }
    });
    var oldMaxx = Runtime.alignFunctionTables(); // align the new tables we may have just added
    var newMaxx = Runtime.alignFunctionTables(newModule);
    var maxx = oldMaxx + newMaxx;
    sigs.forEach(function(sig) {
      var newTable = newModule['FUNCTION_TABLE_' + sig];
      var oldTable = Module['FUNCTION_TABLE_' + sig];
      assert(newTable !== oldTable);
      assert(oldTable.length === oldMaxx);
      for (var i = 0; i < newTable.length; i++) {
        oldTable.push(newTable[i]);
      }
      assert(oldTable.length === maxx);
    });
    assert(maxx === Runtime.alignFunctionTables()); // align the ones we didn't touch
  },
  functionPointers: [],
  addFunction: function (func) {
    Runtime.alignFunctionTables(); // XXX we should rely on this being an invariant
    var tables = Runtime.getFunctionTables();
    var ret = -1;
    for (var sig in tables) {
      var table = tables[sig];
      if (ret < 0) ret = table.length;
      else assert(ret === table.length);
      table.push(func);
    }
    return ret;
  },
  removeFunction: function (index) {
    Runtime.alignFunctionTables(); // XXX we should rely on this being an invariant
    var tables = Runtime.getFunctionTables();
    for (var sig in tables) {
      tables[sig][index] = null;
    }
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret; return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (typeof _sbrk !== 'undefined' && !_sbrk.called) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the a given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);

HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;

// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 10016;
  /* global initializers */ __ATINIT__.push();
  

var memoryInitializer = "a.out.js.mem";




/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(lookup.node.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }function _rewind(stream) {
      // void rewind(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rewind.html
      _fseek(stream, 0, 0);  // SEEK_SET.
      var streamObj = FS.getStreamFromPtr(stream);
      if (streamObj) streamObj.error = false;
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_memset"] = _memset;

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      return _close(fd);
    }

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return 0;
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != 10; i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error || (streamObj.eof && i == 0)) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[(((s)+(i))>>0)]=byte_;
      }
      HEAP8[(((s)+(i))>>0)]=0;
      return s;
    }

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

   
  Module["_strlen"] = _strlen;

   
  Module["_strncpy"] = _strncpy;

  
  
  function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

   
  Module["_i64Add"] = _i64Add;

  var _fabs=Math_abs;

  var _floor=Math_floor;

  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }


  function _system(command) {
      // int system(const char *command);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/system.html
      // Can't call external programs.
      ___setErrNo(ERRNO_CODES.EAGAIN);
      return -1;
    }

  var _sqrt=Math_sqrt;

  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }

  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _tmpnam(s, dir, prefix) {
      // char *tmpnam(char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpnam.html
      // NOTE: The dir and prefix arguments are for internal use only.
      dir = dir || '/tmp';
      var folder = FS.findObject(dir);
      if (!folder || !folder.isFolder) {
        dir = '/tmp';
        folder = FS.findObject(dir);
        if (!folder || !folder.isFolder) return 0;
      }
      var name = prefix || 'file';
      do {
        name += String.fromCharCode(65 + (Math.random() * 25)|0);
      } while (name in folder.contents);
      var result = dir + '/' + name;
      if (!_tmpnam.buffer) _tmpnam.buffer = _malloc(256);
      if (!s) s = _tmpnam.buffer;
      assert(result.length <= 255);
      writeAsciiToMemory(result, s);
      return s;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  var _sin=Math_sin;

  
  var ___tm_current=allocate(44, "i8", ALLOC_STATIC);
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  
  
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((_tzname)>>2)]=summerNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
      }
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // DST is in December in South
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((_tzname)+(dst ? Runtime.QUANTUM_SIZE : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;


  function _isatty(fildes) {
      // int isatty(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/isatty.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      // HACK - implement tcgetattr
      if (!stream.tty) {
        ___setErrNo(ERRNO_CODES.ENOTTY);
        return 0;
      }
      return 1;
    }

  var _BDtoILow=true;

  function _ferror(stream) {
      // int ferror(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ferror.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.error);
    }

  var _BDtoIHigh=true;

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }

  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _log=Math_log;


  var _cos=Math_cos;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

  function _signal(sig, func) {
      Module.printErr('Calling stub instead of signal()');
      return 0;
    }

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

  var _atan2=Math_atan2;

   
  Module["_strcpy"] = _strcpy;

  var _exp=Math_exp;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }


FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
__ATINIT__.push(function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


var debug_table_iiii = ["0", "asm['_monad']", "0", "0", "asm['_dyad']", "0", "0", "asm['_adv']", "0", "0", "asm['_conj978']", "0", "0", "asm['_forkv']", "0", "0", "asm['_hookv']", "0", "0", "asm['_formo']", "0", "0", "asm['_curry']", "0", "0", "asm['_is']", "0", "asm['_punc']", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "asm['_numasm['_sn_write']", "0", "0", "asm['_bool2']", "0", "0", "asm['_oprod']", "0", "0", "asm['_merge2']", "0", "asm['_swap2']", "0", "asm['_unquo2']", "0", "0", "0", "0", "0", "asm['_key']", "0", "0", "asm['_infix']", "0", "0", "asm['_outfix']", "0", "0", "0", "0", "0", "0", "asm['_on2']", "0", "asm['_under2']", "asm['_upon2']", "0", "asm['_obv2']", "0", "asm['_ad2']", "0", "asm['_dotprod']", "0", "0", "asm['_cut02']", "0", "0", "asm['_cut2']", "0", "0", "asm['_deriv2']", "0", "0", "0", "asm['_fitct2']", "0", "asm['_fitctv']", "0", "0", "asm['_shift2']", "0", "asm['_fitexp2']", "asm['_fitfill']", "0", "0", "0", "0", "asm['_con2']", "0", "0", "asm['_case2']", "0", "0", "asm['_gcr2']", "asm['_gcl2']", "0", "asm['_gav2']", "0", "asm['_ply2']", "0", "0", "asm['_powv2']", "0", "0", "asm['_rank2']", "asm['_rank2a']", "asm['_cons2']", "0", "asm['_cons2a']", "0", "asm['_fork2']", "0", "asm['_hook2']", "0", "asm['_taca']", "asm['_tacc']", "asm['_tcaa']", "asm['_tcca']", "asm['_tccc']", "asm['_tcvc']", "0", "0", "asm['_tca']", "0", "0", "asm['_xconj']", "0", "0", "asm['_xv2']", "asm['_xn2']", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "asm['_eqx']", "asm['_eqj']", "0", "0", "asm['_eqa']", "0", "asm['_eqd']", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "asm['_numd']", "asm['_numj']", "asm['_numbpx']", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_viasm['_sigint
var debug_table_viiasm['_fmtB']", "asm['_fmtI']", "asm['_fmtD']", "asm['_fmtZ']", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "asm['_jconjug']", "asm['_isignum']", "asm['_dsignum']", "asm['_jsignum']", "asm['_dmag']", "asm['_imag']", "asm['_jmag']", "asm['_dfloor']", "asm['_jfloor']", "asm['_dceil']", "asm['_jceil']", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "asm['_dexp']", "asm['_jexp']", "asm['_jlog']", "asm['_jsqrt']", "asm['_dfact']", "asm['_znonce
var debug_table_ii = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "asm['_fact']", "0", "0", "asm['_tally']", "0", "asm['_shape']", "0", "asm['_recip']", "0", "0", "asm['_signum']", "0", "asm['_conjug']", "0", "asm['_ravel']", "0", "asm['_negate']", "0", "0", "asm['_slash']", "0", "asm['_raze']", "0", "asm['_box']", "0", "asm['_sclass']", "0", "asm['_ope']", "0", "asm['_roll']", "0", "0", "asm['_left1']", "0", "asm['_bslash']", "asm['_right1']", "0", "asm['_expn1']", "0", "0", "asm['_catalog']", "0", "asm['_mag']", "0", "asm['_rbrace']", "asm['_swap']", "asm['_floor1']", "0", "asm['_decrem']", "0", "asm['_ceil1']", "0", "asm['_increm']", "0", "0", "0", "asm['_rect']", "0", "asm['_duble']", "0", "asm['_polar']", "0", "asm['_square']", "0", "asm['_not']", "0", "asm['_halve']", "0", "asm['_minv']", "0", "asm['_sqroot']", "0", "asm['_logar1']", "0", "0", "asm['_self1']", "0", "asm['_nub']", "asm['_nubsieve']", "0", "asm['_reverse']", "0", "asm['_cant1']", "0", "0", "0", "0", "0", "asm['_table']", "0", "asm['_lamin1']", "0", "0", "asm['_words']", "asm['_base1']", "0", "asm['_abase1']", "0", "0", "0", "asm['_sldot']", "asm['_grade1']", "0", "asm['_bsdot']", "asm['_dgrade1']", "0", "0", "0", "asm['_head']", "0", "asm['_tail']", "asm['_behead']", "0", "asm['_curtail']", "0", "asm['_exec1']", "0", "asm['_thorn1']", "0", "0", "0", "0", "0", "asm['_adot1']", "0", "asm['_bool']", "asm['_eig1']", "0", "asm['_cdot1']", "0", "0", "asm['_razein']", "0", "0", "asm['_fix']", "asm['_iota']", "0", "asm['_jdot1']", "0", "asm['_pix']", "0", "asm['_poly1']", "0", "asm['_rdot1']", "0", "asm['_taylor']", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "asm['_fixa']", "asm['_aro']", "asm['_shr']", "asm['_shl']", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "asm['_fx']", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "asm['_tokens']", "asm['_label']", "0", "0", "0", "0", "asm['_matth1']", "0", "0", "0", "asm['_sr1']", "asm['_drr']", "asm['_trr']", "asm['_ncx']", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "asm['_pinv']", "0", "0", "asm['_rfd']", "asm['_dfr']", "0", "0", "0", "0", "0", "asm['_host']", "asm['_hostne']", "asm['_script1']", "0", "asm['_sscript1']", "0", "asm['_line1']", "0", "asm['_sline1']", "0", "asm['_joff']", "asm['_jfdir']", "asm['_jfread']", "0", "0", "asm['_jfsize']", "asm['_jiread']", "0", "asm['_jferase']", "0", "asm['_wnl']", "asm['_save1']", "0", "asm['_psave1']", "0", "asm['_copy1']", "0", "asm['_pcopy1']", "0", "0", "asm['_stype']", "asm['_ir']", "asm['_ri']", "asm['_nl1']", "0", "asm['_ex55']", "asm['_ex56']", "asm['_fxx']", "asm['_arx']", "asm['_drx']", "asm['_srx']", "asm['_trx']", "asm['_lrx']", "asm['_ts']", "asm['_tss']", "asm['_tsit1']", "0", "asm['_dl']", "asm['_sp']", "asm['_sps']", "asm['_spit']", "asm['_rlq']", "asm['_rls']", "asm['_dispq']", "asm['_disps']", "asm['_promptq']", "asm['_prompts']", "asm['_boxq']", "asm['_boxs']", "asm['_evmq']", "asm['_evms']", "asm['_dbr']", "asm['_dbs']", "asm['_dbsq']", "asm['_dbss']", "asm['_dbrun']", "asm['_dbnxt']", "asm['_dbret']", "asm['_dbpop']", "asm['_qr']", "asm['_rinv']", "asm['_rankle']", "asm['_catsp']", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_viiiasm['_ble']", "asm['_dbin']", "asm['_jbin']", "asm['_ddiv']", "asm['_jdiv']", "asm['_bdiv']", "asm['_idiv']", "asm['_band']", "asm['_dtymes']", "asm['_jtymes']", "asm['_itymes']", "asm['_bplus']", "asm['_dplus']", "asm['_jplus']", "asm['_bplus2']", "asm['_iplus']", "asm['_bminus']", "asm['_dminus']", "asm['_jminus']", "asm['_bminus2']", "asm['_iminus']", "asm['_blt']", "asm['_ilt']", "asm['_dlt']", "asm['_beq']", "asm['_ieq']", "asm['_deq']", "asm['_jeq']", "asm['_bgt']", "asm['_igt']", "asm['_dgt']", "asm['_bge']", "asm['_jpow']", "asm['_irem']", "asm['_dren']", "asm['_jrem']", "asm['_imin']", "asm['_dmin']", "asm['_ile']", "asm['_dle']", "asm['_bor']", "asm['_imax']", "asm['_dmax']", "asm['_ige']", "asm['_dge']", "asm['_igcd']", "asm['_dgcd']", "asm['_jgcd']", "asm['_bnor']", "asm['_dlcm']", "asm['_jlcm']", "asm['_ilcm']", "asm['_bnand']", "asm['_bne']", "asm['_ine']", "asm['_dne']", "asm['_jne']", "asm['_jcirasm['_nne']", "asm['_neq']", "asm['_keq']", "asm['_aeq']", "asm['_kne']", "asm['_ane']", "asm['_ceq']", "asm['_cne
var debug_table_iii = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "asm['_outof']", "asm['_qq']", "0", "asm['_repeat']", "0", "asm['_reitem']", "0", "asm['_divide']", "asm['_amp']", "0", "asm['_tymes']", "0", "asm['_plus']", "0", "asm['_over']", "0", "asm['_minus']", "asm['_dot']", "0", "asm['_colon']", "0", "asm['_link']", "0", "asm['_lt']", "0", "asm['_eq']", "0", "asm['_gt']", "0", "asm['_deal']", "asm['_atop']", "0", "asm['_left2']", "0", "0", "asm['_right2']", "0", "asm['_expn2']", "asm['_tie']", "0", "asm['_from']", "0", "asm['_residue']", "0", "0", "0", "asm['_minimum']", "0", "asm['_le']", "0", "asm['_maximum']", "0", "asm['_ge']", "asm['_num1']", "0", "0", "asm['_gcd']", "0", "asm['_nor']", "0", "asm['_lcm']", "0", "asm['_nand']", "0", "asm['_less']", "0", "asm['_match']", "0", "asm['_mdiv']", "0", "asm['_root']", "0", "asm['_logar2']", "asm['_powop']", "0", "asm['_self2']", "0", "0", "asm['_ne']", "0", "asm['_rotate']", "0", "asm['_cant2']", "asm['_even']", "asm['_odd']", "asm['_obverse']", "asm['_adverse']", "0", "asm['_overr']", "0", "asm['_lamin2']", "asm['_cut']", "0", "0", "asm['_base2']", "0", "asm['_abase2']", "asm['_agenda']", "asm['_atco']", "0", "0", "asm['_grade2']", "0", "0", "asm['_dgrade2']", "asm['_lev']", "asm['_dex']", "0", "asm['_take']", "0", "0", "asm['_drop']", "0", "asm['_evger']", "0", "asm['_exec2']", "0", "asm['_thorn2']", "asm['_under']", "asm['_ampco']", "asm['_fit']", "asm['_foreign']", "0", "asm['_adot2']", "0", "0", "asm['_eig2']", "0", "asm['_cdot2']", "asm['_ddot']", "0", "asm['_eps']", "asm['_ebar']", "0", "0", "asm['_indexof']", "0", "asm['_jdot2']", "0", "asm['_circle']", "0", "asm['_poly2']", "0", "asm['_rdot2']", "0", "asm['_tayn']", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "asm['_basis1']", "asm['_bool1']", "0", "asm['_reduce']", "asm['_areduce']", "0", "asm['_catred']", "asm['_merge1']", "0", "asm['_swap1']", "0", "asm['_unquo1']", "0", "0", "0", "0", "0", "asm['_oblique']", "0", "asm['_prefix']", "asm['_pscan']", "0", "asm['_suffix']", "asm['_sscan']", "0", "asm['_osub']", "asm['_seg']", "asm['_domerr']", "asm['_withl']", "asm['_withr']", "asm['_on1']", "0", "asm['_under1']", "0", "0", "asm['_obv1']", "0", "asm['_ad1']", "0", "asm['_pdt']", "0", "asm['_det']", "asm['_cut01']", "0", "asm['_cut1']", "asm['_cut1x']", "0", "asm['_pind']", "asm['_deriv1']", "0", "asm['_taylor1']", "asm['_tayn1']", "asm['_fitct1']", "0", "asm['_fitope']", "0", "asm['_fitbox']", "asm['_shift1']", "0", "asm['_fitexp1']", "0", "0", "asm['_fitpp1']", "asm['_reshape']", "0", "asm['_con1']", "0", "asm['_insert']", "asm['_case1']", "0", "asm['_gcr1']", "asm['_gcl1']", "0", "0", "asm['_gav1']", "0", "asm['_ply1']", "0", "asm['_inv1']", "asm['_powv1']", "0", "asm['_rank1']", "asm['_cons1']", "0", "0", "0", "asm['_cons1a']", "0", "asm['_fork1']", "0", "asm['_hook1']", "0", "asm['_taaa']", "0", "0", "0", "0", "0", "0", "asm['_taa']", "asm['_tac']", "0", "asm['_aform']", "asm['_xadv']", "0", "asm['_xv1']", "asm['_xn1']", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "asm['_isg']", "asm['_isl']", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "asm['_wt']", "asm['_compD']", "asm['_compI']", "asm['_compUC']", "0", "0", "asm['_hix']", "asm['_hid']", "0", "asm['_hia']", "0", "0", "0", "0", "0", "0", "0", "0", "asm['_pfill']", "asm['_dfc']", "0", "0", "asm['_afrom']", "asm['_afi']", "0", "0", "0", "0", "0", "0", "asm['_script2']", "0", "asm['_sscript2']", "0", "asm['_line2']", "0", "asm['_sline2']", "0", "0", "0", "asm['_jfwrite']", "asm['_jfappend']", "0", "0", "asm['_jiwrite']", "0", "asm['_wnc']", "0", "0", "asm['_save2']", "0", "asm['_psave2']", "0", "asm['_copy2']", "0", "asm['_pcopy2']", "asm['_wex']", "0", "0", "0", "0", "asm['_nl2']", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "asm['_tsit2']", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_viiii = ["0", "0", "asm['_vmonad']", "asm['_cmonad']", "0", "asm['_vdyad']", "asm['_cdyad']", "0", "asm['_vadv']", "asm['_cadv']", "0", "asm['_vconj']", "asm['_cconj']", "0", "asm['_vforkv']", "asm['_cforkv']", "0", "asm['_vhookv']", "asm['_chookv']", "0", "asm['_vformo']", "asm['_cformo']", "0", "asm['_vcurry']", "asm['_ccurry']", "0", "asm['_vis']", "0", "asm['_vpunc']", "0", "0", "0"];
function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  "); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  "); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  "); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  "); abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function ftCall_iiii(x, a0, a1, a2) {
  if (x < 0 || x >= FUNCTION_TABLE_iiii.length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  ");  ; abort(x) }
  return FUNCTION_TABLE_iiii[x](a0, a1, a2);
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function ftCall_vi(x, a0) {
  if (x < 0 || x >= FUNCTION_TABLE_vi.length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  ");  ; abort(x) }
  return FUNCTION_TABLE_vi[x](a0);
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function ftCall_vii(x, a0, a1) {
  if (x < 0 || x >= FUNCTION_TABLE_vii.length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  ");  ; abort(x) }
  return FUNCTION_TABLE_vii[x](a0, a1);
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function ftCall_ii(x, a0) {
  if (x < 0 || x >= FUNCTION_TABLE_ii.length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  ");  ; abort(x) }
  return FUNCTION_TABLE_ii[x](a0);
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function ftCall_viii(x, a0, a1, a2) {
  if (x < 0 || x >= FUNCTION_TABLE_viii.length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  ");  ; abort(x) }
  return FUNCTION_TABLE_viii[x](a0, a1, a2);
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function ftCall_iii(x, a0, a1) {
  if (x < 0 || x >= FUNCTION_TABLE_iii.length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  ");  ; abort(x) }
  return FUNCTION_TABLE_iii[x](a0, a1);
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function ftCall_viiii(x, a0, a1, a2, a3) {
  if (x < 0 || x >= FUNCTION_TABLE_viiii.length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  ");  ; abort(x) }
  return FUNCTION_TABLE_viiii[x](a0, a1, a2, a3);
}


var dynCall_iiii = ftCall_iiii;


var dynCall_vi = ftCall_vi;


var dynCall_vii = ftCall_vii;


var dynCall_ii = ftCall_ii;


var dynCall_viii = ftCall_viii;


var dynCall_iii = ftCall_iii;


var dynCall_viiii = ftCall_viiii;


Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "ftCall_iiii": ftCall_iiii, "invoke_vi": invoke_vi, "ftCall_vi": ftCall_vi, "invoke_vii": invoke_vii, "ftCall_vii": ftCall_vii, "invoke_ii": invoke_ii, "ftCall_ii": ftCall_ii, "invoke_viii": invoke_viii, "ftCall_viii": ftCall_viii, "invoke_iii": invoke_iii, "ftCall_iii": ftCall_iii, "invoke_viiii": invoke_viiii, "ftCall_viiii": ftCall_viiii, "_fabs": _fabs, "_sin": _sin, "_exp": _exp, "_send": _send, "_signal": _signal, "_fread": _fread, "_abort": _abort, "_lseek": _lseek, "___setErrNo": ___setErrNo, "_system": _system, "_fopen": _fopen, "_floor": _floor, "_fflush": _fflush, "_tmpnam": _tmpnam, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_localtime_r": _localtime_r, "_tzset": _tzset, "_open": _open, "_sbrk": _sbrk, "_strerror": _strerror, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "_unlink": _unlink, "_sysconf": _sysconf, "_close": _close, "_ferror": _ferror, "_rewind": _rewind, "_cos": _cos, "_fseek": _fseek, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_pread": _pread, "_mkport": _mkport, "_fclose": _fclose, "_log": _log, "_write": _write, "_ftell": _ftell, "___errno_location": ___errno_location, "_recv": _recv, "_fgetc": _fgetc, "_fputc": _fputc, "__exit": __exit, "_read": _read, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_isatty": _isatty, "_fwrite": _fwrite, "_time": _time, "_atan2": _atan2, "_gettimeofday": _gettimeofday, "_fgets": _fgets, "_fputs": _fputs, "_sqrt": _sqrt, "_localtime": _localtime, "_exit": _exit, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "_stdin": _stdin, "_stdout": _stdout };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var ftCall_iiii=env.ftCall_iiii;
  var invoke_vi=env.invoke_vi;
  var ftCall_vi=env.ftCall_vi;
  var invoke_vii=env.invoke_vii;
  var ftCall_vii=env.ftCall_vii;
  var invoke_ii=env.invoke_ii;
  var ftCall_ii=env.ftCall_ii;
  var invoke_viii=env.invoke_viii;
  var ftCall_viii=env.ftCall_viii;
  var invoke_iii=env.invoke_iii;
  var ftCall_iii=env.ftCall_iii;
  var invoke_viiii=env.invoke_viiii;
  var ftCall_viiii=env.ftCall_viiii;
  var _fabs=env._fabs;
  var _sin=env._sin;
  var _exp=env._exp;
  var _send=env._send;
  var _signal=env._signal;
  var _fread=env._fread;
  var _abort=env._abort;
  var _lseek=env._lseek;
  var ___setErrNo=env.___setErrNo;
  var _system=env._system;
  var _fopen=env._fopen;
  var _floor=env._floor;
  var _fflush=env._fflush;
  var _tmpnam=env._tmpnam;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _localtime_r=env._localtime_r;
  var _tzset=env._tzset;
  var _open=env._open;
  var _sbrk=env._sbrk;
  var _strerror=env._strerror;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var _unlink=env._unlink;
  var _sysconf=env._sysconf;
  var _close=env._close;
  var _ferror=env._ferror;
  var _rewind=env._rewind;
  var _cos=env._cos;
  var _fseek=env._fseek;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _pread=env._pread;
  var _mkport=env._mkport;
  var _fclose=env._fclose;
  var _log=env._log;
  var _write=env._write;
  var _ftell=env._ftell;
  var ___errno_location=env.___errno_location;
  var _recv=env._recv;
  var _fgetc=env._fgetc;
  var _fputc=env._fputc;
  var __exit=env.__exit;
  var _read=env._read;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _isatty=env._isatty;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _atan2=env._atan2;
  var _gettimeofday=env._gettimeofday;
  var _fgets=env._fgets;
  var _fputs=env._fputs;
  var _sqrt=env._sqrt;
  var _localtime=env._localtime;
  var _exit=env._exit;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function _printf_core($f, $fmt, $ap, $nl_arg, $nl_type) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $nl_arg = $nl_arg | 0;
 $nl_type = $nl_type | 0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i104$i = 0, $$0$lcssa$i128$i = 0, $$0$lcssa$i143$i = 0, $$0$lcssa$i39$i = 0, $$0$lcssa$i46 = 0, $$0$lcssa$i46$i = 0, $$0$lcssa$i48$i = 0, $$0$lcssa$i51 = 0, $$0$lcssa$i53 = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i61 = 0, $$0$lcssa$i63$i = 0, $$0$lcssa$i68 = 0, $$0$lcssa$i69$i = 0, $$0$lcssa$i75 = 0, $$0$lcssa$i76$i = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i85 = 0, $$0$lcssa$i97$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i102$i = 0, $$01$i126$i = 0, $$01$i141$i = 0, $$01$i37$i = 0, $$01$i44 = 0, $$01$i44$i = 0, $$01$i54$i = 0, $$01$i59 = 0, $$01$i61$i = 0, $$01$i66 = 0, $$01$i67$i = 0, $$01$i73 = 0, $$01$i74$i = 0, $$01$i83 = 0, $$01$i95$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i85$i = 0, $$012$i = 0, $$013$i = 0, $$03$i48 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i79$i = 0, $$07$i = 0.0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i112$i = 0, $$114$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i110$i = 0, $$12$i119$i = 0, $$12$i134$i = 0, $$12$i134$i$lcssa = 0, $$12$i87$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$i = 0, $$23$i = 0, $$3$i = 0.0, $$31$i = 0, $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$412184$i = 0, $$5196$i = 0, $$92 = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us304$i = 0, $$a$3306$i = 0, $$fl$4 = 0, $$lcssa106 = 0, $$lcssa275$i = 0, $$lcssa450 = 0, $$lcssa451 = 0, $$lcssa455 = 0, $$lcssa457 = 0, $$lcssa458 = 0, $$lcssa459 = 0, $$lcssa460 = 0, $$lcssa461 = 0, $$lcssa463 = 0, $$lcssa464 = 0, $$lcssa470 = 0, $$lcssa474 = 0, $$lcssa476 = 0, $$lcssa479 = 0, $$lcssa480 = 0, $$lcssa483 = 0.0, $$lcssa484 = 0, $$lcssa487 = 0, $$lcssa491 = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr146$i = 0, $$pre$phi302$iZ2D = 0, $$pre300$i = 0, $$z$4$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1003 = 0, $1005 = 0, $1007 = 0, $1009 = 0, $1010 = 0, $1018 = 0, $1026 = 0, $1034 = 0, $1044 = 0, $1047 = 0, $105 = 0, $1054 = 0, $1055 = 0, $1061 = 0, $1062 = 0, $1065 = 0, $107 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $108 = 0, $1085 = 0, $1086 = 0, $1088 = 0, $1091 = 0, $1092 = 0, $11 = 0, $110 = 0, $1101 = 0, $1102 = 0, $1104 = 0, $1107 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1127 = 0, $1128 = 0, $1130 = 0, $1133 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1153 = 0, $1154 = 0.0, $1160 = 0, $1161 = 0.0, $1169 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1179 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1185 = 0, $1187 = 0, $12 = 0, $13 = 0, $134 = 0, $135 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $144 = 0, $146 = 0, $148 = 0, $15 = 0, $150 = 0, $151 = 0, $156 = 0, $158 = 0, $16 = 0, $168 = 0, $169 = 0, $176 = 0, $177 = 0, $185 = 0, $186 = 0, $192 = 0, $193 = 0, $195 = 0, $198 = 0, $2 = 0, $204 = 0, $205 = 0, $216 = 0, $217 = 0, $22 = 0, $223 = 0, $224 = 0, $23 = 0, $235 = 0, $236 = 0, $242 = 0, $243 = 0.0, $25 = 0, $251 = 0, $252 = 0.0, $256 = 0, $26 = 0, $263 = 0, $264 = 0, $270 = 0, $28 = 0, $282 = 0, $289 = 0, $291 = 0, $295 = 0, $3 = 0, $301 = 0, $302 = 0, $31 = 0, $314 = 0, $316 = 0, $319 = 0, $32 = 0, $320 = 0, $330 = 0, $334 = 0, $336 = 0, $338 = 0, $343 = 0, $344 = 0, $345 = 0, $349 = 0, $350 = 0, $361 = 0, $366 = 0, $368 = 0, $37 = 0, $370 = 0, $376 = 0, $385 = 0, $386 = 0, $39 = 0, $391 = 0, $393 = 0, $395 = 0, $4 = 0, $40 = 0, $400 = 0, $403 = 0, $405 = 0, $406 = 0, $414 = 0, $416 = 0, $422 = 0, $430 = 0.0, $435 = 0, $439 = 0, $44 = 0, $446 = 0, $448 = 0, $450 = 0, $453 = 0, $454 = 0, $46 = 0, $463 = 0, $47 = 0, $472 = 0.0, $473 = 0, $476 = 0, $478 = 0, $481 = 0, $483 = 0, $487 = 0.0, $497 = 0, $5 = 0, $500 = 0, $504 = 0, $505 = 0, $506 = 0, $51 = 0, $510 = 0, $511 = 0, $522 = 0, $534 = 0, $537 = 0, $543 = 0, $552 = 0, $558 = 0, $56 = 0, $567 = 0, $573 = 0, $59 = 0, $591 = 0, $592 = 0, $594 = 0, $595 = 0, $6 = 0, $60 = 0, $603 = 0, $61 = 0, $610 = 0, $612 = 0, $614 = 0, $623 = 0, $633 = 0, $634 = 0, $636 = 0, $637 = 0, $638 = 0, $644 = 0, $646 = 0, $649 = 0, $65 = 0, $651 = 0, $652 = 0, $653 = 0, $655 = 0, $659 = 0, $661 = 0, $665 = 0, $67 = 0, $670 = 0, $672 = 0, $673 = 0, $674 = 0, $676 = 0, $693 = 0, $695 = 0, $698 = 0, $699 = 0, $7 = 0, $703 = 0, $704 = 0, $706 = 0, $712 = 0, $713 = 0, $714 = 0, $718 = 0, $739 = 0, $740 = 0, $743 = 0, $748 = 0, $749 = 0, $751 = 0, $758 = 0, $759 = 0, $760 = 0, $763 = 0, $764 = 0, $765 = 0, $772 = 0, $782 = 0, $785 = 0, $787 = 0, $789 = 0, $791 = 0, $796 = 0, $797 = 0, $8 = 0, $800 = 0, $802 = 0, $804 = 0, $806 = 0, $817 = 0, $820 = 0, $825 = 0, $834 = 0, $835 = 0, $839 = 0, $842 = 0, $844 = 0, $846 = 0, $850 = 0, $854 = 0, $855 = 0, $856 = 0, $860 = 0, $861 = 0, $872 = 0, $878 = 0, $888 = 0, $893 = 0, $894 = 0, $896 = 0, $897 = 0, $9 = 0, $905 = 0, $91 = 0, $913 = 0, $918 = 0, $92 = 0, $923 = 0, $928 = 0, $934 = 0, $939 = 0, $943 = 0, $945 = 0, $948 = 0, $960 = 0, $961 = 0, $966 = 0, $972 = 0, $976 = 0, $979 = 0, $98 = 0, $99 = 0, $994 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1253$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3240$i = 0, $a$3240$us$i = 0, $a$5$lcssa$i = 0, $a$5215$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0246$i = 0, $carry3$0234$i = 0, $carry3$0234$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0245$i = 0, $d$0247$i = 0, $d$1233$i = 0, $d$1233$us$i = 0, $d$2$lcssa$i = 0, $d$2214$i = 0, $d$3$i = 0, $d$4191$i = 0, $d$5183$i = 0, $d$6195$i = 0, $e$0229$i = 0, $e$1$i = 0, $e$2210$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1201$i = 0, $estr$2$i = 0, $fl$0110 = 0, $fl$0170 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa273 = 0, $i$0175 = 0, $i$0228$i = 0, $i$03$i = 0, $i$03$i30 = 0, $i$1$lcssa$i = 0, $i$1186 = 0, $i$1222$i = 0, $i$2162 = 0, $i$2162$lcssa = 0, $i$2209$i = 0, $i$3160 = 0, $i$3205$i = 0, $isdigittmp = 0, $isdigittmp1$i = 0, $isdigittmp1$i27 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i29 = 0, $isdigittmp9 = 0, $j$0221$i = 0, $j$0223$i = 0, $j$1206$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1174 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $or$cond19 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$4272 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$1179$i = 0, $round$0178$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s1$0$i = 0, $s7$0188$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0180$i = 0, $s9$0$i = 0, $s9$1192$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa456 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge8169 = 0, $t$0 = 0, $t$1 = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0176 = 0, $ws$1187 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i109$i = 0, $y$03$i118$i = 0, $y$03$i133$i = 0, $y$03$i86$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0163 = 0, $z$1$lcssa$i = 0, $z$1252$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3239$i = 0, $z$3239$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $big$i = sp + 16 | 0;
 $e2$i = sp + 8 | 0;
 $buf$i = sp + 836 | 0;
 $0 = $buf$i;
 $ebuf0$i = sp + 824 | 0;
 $pad$i = sp + 568 | 0;
 $buf = sp + 528 | 0;
 $wc = sp;
 $mb = sp + 520 | 0;
 $1 = ($f | 0) != 0;
 $2 = $buf + 40 | 0;
 $3 = $2;
 $4 = $buf + 39 | 0;
 $5 = $wc + 4 | 0;
 $6 = $wc;
 $7 = $ebuf0$i + 12 | 0;
 $8 = $ebuf0$i + 11 | 0;
 $9 = $7;
 $10 = $9 - $0 | 0;
 $11 = -2 - $0 | 0;
 $12 = $9 + 2 | 0;
 $13 = $big$i + 288 | 0;
 $14 = $buf$i + 9 | 0;
 $15 = $14;
 $16 = $buf$i + 8 | 0;
 $1169 = 0;
 $1170 = 0;
 $23 = $fmt;
 $cnt$0 = 0;
 $l$0 = 0;
 $l10n$0 = 0;
 L1 : while (1) {
  do if (($cnt$0 | 0) > -1) if (($l$0 | 0) > (2147483647 - $cnt$0 | 0)) {
   HEAP32[(___errno_location() | 0) >> 2] = 75;
   $cnt$1 = -1;
   break;
  } else {
   $cnt$1 = $l$0 + $cnt$0 | 0;
   break;
  } else $cnt$1 = $cnt$0; while (0);
  $22 = HEAP8[$23 >> 0] | 0;
  if (!($22 << 24 >> 24)) {
   $cnt$1$lcssa = $cnt$1;
   $l10n$0$lcssa = $l10n$0;
   label = 344;
   break;
  } else {
   $1171 = $22;
   $26 = $23;
  }
  while (1) {
   if (!($1171 << 24 >> 24)) {
    $$lcssa106 = $26;
    $z$0$lcssa = $26;
    break;
   } else if ($1171 << 24 >> 24 == 37) {
    $28 = $26;
    $z$0163 = $26;
    label = 9;
    break;
   }
   $25 = $26 + 1 | 0;
   $1171 = HEAP8[$25 >> 0] | 0;
   $26 = $25;
  }
  L12 : do if ((label | 0) == 9) while (1) {
   label = 0;
   if ((HEAP8[$28 + 1 >> 0] | 0) != 37) {
    $$lcssa106 = $28;
    $z$0$lcssa = $z$0163;
    break L12;
   }
   $31 = $z$0163 + 1 | 0;
   $32 = $28 + 2 | 0;
   if ((HEAP8[$32 >> 0] | 0) == 37) {
    $28 = $32;
    $z$0163 = $31;
    label = 9;
   } else {
    $$lcssa106 = $32;
    $z$0$lcssa = $31;
    break;
   }
  } while (0);
  $37 = $z$0$lcssa - $23 | 0;
  if ($1) ___fwritex($23, $37, $f) | 0;
  if (($z$0$lcssa | 0) != ($23 | 0)) {
   $23 = $$lcssa106;
   $cnt$0 = $cnt$1;
   $l$0 = $37;
   continue;
  }
  $39 = $$lcssa106 + 1 | 0;
  $40 = HEAP8[$39 >> 0] | 0;
  $isdigittmp = ($40 << 24 >> 24) + -48 | 0;
  if ($isdigittmp >>> 0 < 10) {
   $44 = (HEAP8[$$lcssa106 + 2 >> 0] | 0) == 36;
   $$92 = $44 ? $$lcssa106 + 3 | 0 : $39;
   $47 = HEAP8[$$92 >> 0] | 0;
   $argpos$0 = $44 ? $isdigittmp : -1;
   $l10n$1 = $44 ? 1 : $l10n$0;
   $storemerge = $$92;
  } else {
   $47 = $40;
   $argpos$0 = -1;
   $l10n$1 = $l10n$0;
   $storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  L24 : do if (($46 & -32 | 0) == 32) {
   $51 = $46;
   $56 = $47;
   $fl$0170 = 0;
   $storemerge8169 = $storemerge;
   while (1) {
    if (!(1 << $51 + -32 & 75913)) {
     $65 = $56;
     $fl$0110 = $fl$0170;
     $storemerge8108 = $storemerge8169;
     break L24;
    }
    $59 = 1 << ($56 << 24 >> 24) + -32 | $fl$0170;
    $60 = $storemerge8169 + 1 | 0;
    $61 = HEAP8[$60 >> 0] | 0;
    $51 = $61 << 24 >> 24;
    if (($51 & -32 | 0) != 32) {
     $65 = $61;
     $fl$0110 = $59;
     $storemerge8108 = $60;
     break;
    } else {
     $56 = $61;
     $fl$0170 = $59;
     $storemerge8169 = $60;
    }
   }
  } else {
   $65 = $47;
   $fl$0110 = 0;
   $storemerge8108 = $storemerge;
  } while (0);
  do if ($65 << 24 >> 24 == 42) {
   $67 = $storemerge8108 + 1 | 0;
   $isdigittmp11 = (HEAP8[$67 >> 0] | 0) + -48 | 0;
   if ($isdigittmp11 >>> 0 < 10) if ((HEAP8[$storemerge8108 + 2 >> 0] | 0) == 36) {
    HEAP32[$nl_type + ($isdigittmp11 << 2) >> 2] = 10;
    $l10n$2 = 1;
    $storemerge13 = $storemerge8108 + 3 | 0;
    $w$0 = HEAP32[$nl_arg + ((HEAP8[$67 >> 0] | 0) + -48 << 3) >> 2] | 0;
   } else label = 23; else label = 23;
   if ((label | 0) == 23) {
    label = 0;
    if ($l10n$1) {
     $$0 = -1;
     label = 363;
     break L1;
    }
    if (!$1) {
     $105 = $67;
     $fl$1 = $fl$0110;
     $l10n$3 = 0;
     $w$1 = 0;
     break;
    }
    $91 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $92 = HEAP32[$91 >> 2] | 0;
    HEAP32[$ap >> 2] = $91 + 4;
    $l10n$2 = 0;
    $storemerge13 = $67;
    $w$0 = $92;
   }
   if (($w$0 | 0) < 0) {
    $105 = $storemerge13;
    $fl$1 = $fl$0110 | 8192;
    $l10n$3 = $l10n$2;
    $w$1 = 0 - $w$0 | 0;
   } else {
    $105 = $storemerge13;
    $fl$1 = $fl$0110;
    $l10n$3 = $l10n$2;
    $w$1 = $w$0;
   }
  } else {
   $isdigittmp1$i = ($65 << 24 >> 24) + -48 | 0;
   if ($isdigittmp1$i >>> 0 < 10) {
    $100 = $storemerge8108;
    $i$03$i = 0;
    $isdigittmp4$i = $isdigittmp1$i;
    while (1) {
     $98 = ($i$03$i * 10 | 0) + $isdigittmp4$i | 0;
     $99 = $100 + 1 | 0;
     $isdigittmp4$i = (HEAP8[$99 >> 0] | 0) + -48 | 0;
     if ($isdigittmp4$i >>> 0 >= 10) {
      $$lcssa450 = $98;
      $$lcssa451 = $99;
      break;
     } else {
      $100 = $99;
      $i$03$i = $98;
     }
    }
    if (($$lcssa450 | 0) < 0) {
     $$0 = -1;
     label = 363;
     break L1;
    } else {
     $105 = $$lcssa451;
     $fl$1 = $fl$0110;
     $l10n$3 = $l10n$1;
     $w$1 = $$lcssa450;
    }
   } else {
    $105 = $storemerge8108;
    $fl$1 = $fl$0110;
    $l10n$3 = $l10n$1;
    $w$1 = 0;
   }
  } while (0);
  L45 : do if ((HEAP8[$105 >> 0] | 0) == 46) {
   $107 = $105 + 1 | 0;
   $108 = HEAP8[$107 >> 0] | 0;
   if ($108 << 24 >> 24 != 42) {
    $isdigittmp1$i27 = ($108 << 24 >> 24) + -48 | 0;
    if ($isdigittmp1$i27 >>> 0 < 10) {
     $140 = $107;
     $i$03$i30 = 0;
     $isdigittmp4$i29 = $isdigittmp1$i27;
    } else {
     $1172 = $107;
     $p$0 = 0;
     break;
    }
    while (1) {
     $138 = ($i$03$i30 * 10 | 0) + $isdigittmp4$i29 | 0;
     $139 = $140 + 1 | 0;
     $isdigittmp4$i29 = (HEAP8[$139 >> 0] | 0) + -48 | 0;
     if ($isdigittmp4$i29 >>> 0 >= 10) {
      $1172 = $139;
      $p$0 = $138;
      break L45;
     } else {
      $140 = $139;
      $i$03$i30 = $138;
     }
    }
   }
   $110 = $105 + 2 | 0;
   $isdigittmp9 = (HEAP8[$110 >> 0] | 0) + -48 | 0;
   if ($isdigittmp9 >>> 0 < 10) if ((HEAP8[$105 + 3 >> 0] | 0) == 36) {
    HEAP32[$nl_type + ($isdigittmp9 << 2) >> 2] = 10;
    $1172 = $105 + 4 | 0;
    $p$0 = HEAP32[$nl_arg + ((HEAP8[$110 >> 0] | 0) + -48 << 3) >> 2] | 0;
    break;
   }
   if ($l10n$3) {
    $$0 = -1;
    label = 363;
    break L1;
   }
   if ($1) {
    $134 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $135 = HEAP32[$134 >> 2] | 0;
    HEAP32[$ap >> 2] = $134 + 4;
    $1172 = $110;
    $p$0 = $135;
   } else {
    $1172 = $110;
    $p$0 = 0;
   }
  } else {
   $1172 = $105;
   $p$0 = -1;
  } while (0);
  $144 = $1172;
  $st$0 = 0;
  while (1) {
   $146 = (HEAP8[$144 >> 0] | 0) + -65 | 0;
   if ($146 >>> 0 > 57) {
    $$0 = -1;
    label = 363;
    break L1;
   }
   $148 = $144 + 1 | 0;
   $150 = HEAP8[9448 + ($st$0 * 58 | 0) + $146 >> 0] | 0;
   $151 = $150 & 255;
   if (($151 + -1 | 0) >>> 0 < 8) {
    $144 = $148;
    $st$0 = $151;
   } else {
    $$lcssa455 = $144;
    $$lcssa457 = $148;
    $$lcssa458 = $150;
    $$lcssa459 = $151;
    $st$0$lcssa456 = $st$0;
    break;
   }
  }
  if (!($$lcssa458 << 24 >> 24)) {
   $$0 = -1;
   label = 363;
   break;
  }
  $156 = ($argpos$0 | 0) > -1;
  L64 : do if ($$lcssa458 << 24 >> 24 == 19) if ($156) {
   $$0 = -1;
   label = 363;
   break L1;
  } else {
   $1173 = $1169;
   $1174 = $1170;
   label = 62;
  } else {
   if ($156) {
    HEAP32[$nl_type + ($argpos$0 << 2) >> 2] = $$lcssa459;
    $158 = $nl_arg + ($argpos$0 << 3) | 0;
    $1173 = HEAP32[$158 + 4 >> 2] | 0;
    $1174 = HEAP32[$158 >> 2] | 0;
    label = 62;
    break;
   }
   if (!$1) {
    $$0 = 0;
    label = 363;
    break L1;
   }
   if (($$lcssa458 & 255) > 20) {
    $264 = $1170;
    $291 = $1169;
   } else do switch ($$lcssa459 | 0) {
   case 12:
    {
     $192 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
     $193 = $192;
     $195 = HEAP32[$193 >> 2] | 0;
     $198 = HEAP32[$193 + 4 >> 2] | 0;
     HEAP32[$ap >> 2] = $192 + 8;
     $264 = $195;
     $291 = $198;
     break L64;
     break;
    }
   case 11:
    {
     $185 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $186 = HEAP32[$185 >> 2] | 0;
     HEAP32[$ap >> 2] = $185 + 4;
     $264 = $186;
     $291 = 0;
     break L64;
     break;
    }
   case 15:
    {
     $223 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $224 = HEAP32[$223 >> 2] | 0;
     HEAP32[$ap >> 2] = $223 + 4;
     $264 = $224 << 24 >> 24;
     $291 = ((($224 & 255) << 24 >> 24 | 0) < 0) << 31 >> 31;
     break L64;
     break;
    }
   case 10:
    {
     $176 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $177 = HEAP32[$176 >> 2] | 0;
     HEAP32[$ap >> 2] = $176 + 4;
     $264 = $177;
     $291 = (($177 | 0) < 0) << 31 >> 31;
     break L64;
     break;
    }
   case 16:
    {
     $235 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $236 = HEAP32[$235 >> 2] | 0;
     HEAP32[$ap >> 2] = $235 + 4;
     $264 = $236 & 255;
     $291 = 0;
     break L64;
     break;
    }
   case 18:
    {
     $251 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
     $252 = +HEAPF64[$251 >> 3];
     HEAP32[$ap >> 2] = $251 + 8;
     HEAPF64[tempDoublePtr >> 3] = $252;
     $264 = HEAP32[tempDoublePtr >> 2] | 0;
     $291 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
     break L64;
     break;
    }
   case 14:
    {
     $216 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $217 = HEAP32[$216 >> 2] | 0;
     HEAP32[$ap >> 2] = $216 + 4;
     $264 = $217 & 65535;
     $291 = 0;
     break L64;
     break;
    }
   case 17:
    {
     $242 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
     $243 = +HEAPF64[$242 >> 3];
     HEAP32[$ap >> 2] = $242 + 8;
     HEAPF64[tempDoublePtr >> 3] = $243;
     $264 = HEAP32[tempDoublePtr >> 2] | 0;
     $291 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
     break L64;
     break;
    }
   case 9:
    {
     $168 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $169 = HEAP32[$168 >> 2] | 0;
     HEAP32[$ap >> 2] = $168 + 4;
     $264 = $169;
     $291 = $1169;
     break L64;
     break;
    }
   case 13:
    {
     $204 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $205 = HEAP32[$204 >> 2] | 0;
     HEAP32[$ap >> 2] = $204 + 4;
     $264 = $205 << 16 >> 16;
     $291 = ((($205 & 65535) << 16 >> 16 | 0) < 0) << 31 >> 31;
     break L64;
     break;
    }
   default:
    {
     $264 = $1170;
     $291 = $1169;
     break L64;
    }
   } while (0);
  } while (0);
  if ((label | 0) == 62) {
   label = 0;
   if ($1) {
    $264 = $1174;
    $291 = $1173;
   } else {
    $1169 = $1173;
    $1170 = $1174;
    $23 = $$lcssa457;
    $cnt$0 = $cnt$1;
    $l$0 = $37;
    $l10n$0 = $l10n$3;
    continue;
   }
  }
  $256 = HEAP8[$$lcssa455 >> 0] | 0;
  $t$0 = ($st$0$lcssa456 | 0) != 0 & ($256 & 15 | 0) == 3 ? $256 & -33 : $256;
  $263 = $fl$1 & -65537;
  $fl$1$ = ($fl$1 & 8192 | 0) == 0 ? $fl$1 : $263;
  L86 : do switch ($t$0 | 0) {
  case 65:
  case 71:
  case 70:
  case 69:
  case 97:
  case 103:
  case 102:
  case 101:
   {
    HEAP32[tempDoublePtr >> 2] = $264;
    HEAP32[tempDoublePtr + 4 >> 2] = $291;
    $430 = +HEAPF64[tempDoublePtr >> 3];
    HEAP32[$e2$i >> 2] = 0;
    if (($291 | 0) < 0) {
     $$07$i = -$430;
     $pl$0$i = 1;
     $prefix$0$i = 9952;
    } else if (!($fl$1$ & 2048)) {
     $435 = $fl$1$ & 1;
     $$07$i = $430;
     $pl$0$i = $435;
     $prefix$0$i = ($435 | 0) == 0 ? 9953 : 9958;
    } else {
     $$07$i = $430;
     $pl$0$i = 1;
     $prefix$0$i = 9955;
    }
    HEAPF64[tempDoublePtr >> 3] = $$07$i;
    $439 = HEAP32[tempDoublePtr + 4 >> 2] & 2146435072;
    do if ($439 >>> 0 < 2146435072 | ($439 | 0) == 2146435072 & 0 < 0) {
     $472 = +_frexpl($$07$i, $e2$i) * 2.0;
     $473 = $472 != 0.0;
     if ($473) HEAP32[$e2$i >> 2] = (HEAP32[$e2$i >> 2] | 0) + -1;
     $476 = $t$0 | 32;
     if (($476 | 0) == 97) {
      $478 = $t$0 & 32;
      $prefix$0$$i = ($478 | 0) == 0 ? $prefix$0$i : $prefix$0$i + 9 | 0;
      $481 = $pl$0$i | 2;
      $483 = 12 - $p$0 | 0;
      do if ($p$0 >>> 0 > 11 | ($483 | 0) == 0) $$1$i = $472; else {
       $re$1179$i = $483;
       $round$0178$i = 8.0;
       while (1) {
        $re$1179$i = $re$1179$i + -1 | 0;
        $487 = $round$0178$i * 16.0;
        if (!$re$1179$i) {
         $$lcssa483 = $487;
         break;
        } else $round$0178$i = $487;
       }
       if ((HEAP8[$prefix$0$$i >> 0] | 0) == 45) {
        $$1$i = -($$lcssa483 + (-$472 - $$lcssa483));
        break;
       } else {
        $$1$i = $472 + $$lcssa483 - $$lcssa483;
        break;
       }
      } while (0);
      $497 = HEAP32[$e2$i >> 2] | 0;
      $500 = ($497 | 0) < 0 ? 0 - $497 | 0 : $497;
      if (($500 | 0) < 0) {
       $$05$i$i = $7;
       $504 = $500;
       $505 = (($500 | 0) < 0) << 31 >> 31;
       while (1) {
        $506 = ___uremdi3($504 | 0, $505 | 0, 10, 0) | 0;
        $510 = $$05$i$i + -1 | 0;
        HEAP8[$510 >> 0] = $506 | 48;
        $511 = ___udivdi3($504 | 0, $505 | 0, 10, 0) | 0;
        if ($505 >>> 0 > 9 | ($505 | 0) == 9 & $504 >>> 0 > 4294967295) {
         $$05$i$i = $510;
         $504 = $511;
         $505 = tempRet0;
        } else {
         $$lcssa484 = $510;
         $1183 = $511;
         break;
        }
       }
       $$0$lcssa$i48$i = $$lcssa484;
       $$01$lcssa$off0$i$i = $1183;
      } else {
       $$0$lcssa$i48$i = $7;
       $$01$lcssa$off0$i$i = $500;
      }
      if (!$$01$lcssa$off0$i$i) $$1$lcssa$i$i = $$0$lcssa$i48$i; else {
       $$12$i$i = $$0$lcssa$i48$i;
       $y$03$i$i = $$01$lcssa$off0$i$i;
       while (1) {
        $522 = $$12$i$i + -1 | 0;
        HEAP8[$522 >> 0] = ($y$03$i$i >>> 0) % 10 | 0 | 48;
        if ($y$03$i$i >>> 0 < 10) {
         $$1$lcssa$i$i = $522;
         break;
        } else {
         $$12$i$i = $522;
         $y$03$i$i = ($y$03$i$i >>> 0) / 10 | 0;
        }
       }
      }
      if (($$1$lcssa$i$i | 0) == ($7 | 0)) {
       HEAP8[$8 >> 0] = 48;
       $estr$0$i = $8;
      } else $estr$0$i = $$1$lcssa$i$i;
      HEAP8[$estr$0$i + -1 >> 0] = (HEAP32[$e2$i >> 2] >> 31 & 2) + 43;
      $534 = $estr$0$i + -2 | 0;
      HEAP8[$534 >> 0] = $t$0 + 15;
      if (!($fl$1$ & 8)) if (($p$0 | 0) < 1) {
       $$2$us$us$i = $$1$i;
       $s$0$us$us$i = $buf$i;
       while (1) {
        $537 = ~~$$2$us$us$i;
        $543 = $s$0$us$us$i + 1 | 0;
        HEAP8[$s$0$us$us$i >> 0] = HEAPU8[9912 + $537 >> 0] | $478;
        $$2$us$us$i = ($$2$us$us$i - +($537 | 0)) * 16.0;
        if (($543 - $0 | 0) != 1 | $$2$us$us$i == 0.0) $s$1$us$us$i = $543; else {
         HEAP8[$543 >> 0] = 46;
         $s$1$us$us$i = $s$0$us$us$i + 2 | 0;
        }
        if (!($$2$us$us$i != 0.0)) {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        } else $s$0$us$us$i = $s$1$us$us$i;
       }
      } else {
       $$2$us$i = $$1$i;
       $s$0$us$i = $buf$i;
       while (1) {
        $552 = ~~$$2$us$i;
        $558 = $s$0$us$i + 1 | 0;
        HEAP8[$s$0$us$i >> 0] = HEAPU8[9912 + $552 >> 0] | $478;
        $$2$us$i = ($$2$us$i - +($552 | 0)) * 16.0;
        if (($558 - $0 | 0) == 1) {
         HEAP8[$558 >> 0] = 46;
         $s$1$us$i = $s$0$us$i + 2 | 0;
        } else $s$1$us$i = $558;
        if (!($$2$us$i != 0.0)) {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        } else $s$0$us$i = $s$1$us$i;
       }
      } else {
       $$2$i = $$1$i;
       $s$0$i = $buf$i;
       while (1) {
        $567 = ~~$$2$i;
        $573 = $s$0$i + 1 | 0;
        HEAP8[$s$0$i >> 0] = HEAPU8[9912 + $567 >> 0] | $478;
        $$2$i = ($$2$i - +($567 | 0)) * 16.0;
        if (($573 - $0 | 0) == 1) {
         HEAP8[$573 >> 0] = 46;
         $s$1$i = $s$0$i + 2 | 0;
        } else $s$1$i = $573;
        if (!($$2$i != 0.0)) {
         $s$1$lcssa$i = $s$1$i;
         break;
        } else $s$0$i = $s$1$i;
       }
      }
      $$pre300$i = $s$1$lcssa$i;
      $l$0$i = ($p$0 | 0) != 0 & ($11 + $$pre300$i | 0) < ($p$0 | 0) ? $12 + $p$0 - $534 | 0 : $10 - $534 + $$pre300$i | 0;
      $591 = $l$0$i + $481 | 0;
      $592 = $fl$1$ & 73728;
      $594 = ($w$1 | 0) > ($591 | 0);
      if (($592 | 0) == 0 & $594) {
       $595 = $w$1 - $591 | 0;
       _memset($pad$i | 0, 32, ($595 >>> 0 > 256 ? 256 : $595) | 0) | 0;
       if ($595 >>> 0 > 255) {
        $$01$i54$i = $595;
        do {
         ___fwritex($pad$i, 256, $f) | 0;
         $$01$i54$i = $$01$i54$i + -256 | 0;
        } while ($$01$i54$i >>> 0 > 255);
        $$0$lcssa$i56$i = $595 & 255;
       } else $$0$lcssa$i56$i = $595;
       ___fwritex($pad$i, $$0$lcssa$i56$i, $f) | 0;
      }
      ___fwritex($prefix$0$$i, $481, $f) | 0;
      if (($592 | 0) == 65536 & $594) {
       $603 = $w$1 - $591 | 0;
       _memset($pad$i | 0, 48, ($603 >>> 0 > 256 ? 256 : $603) | 0) | 0;
       if ($603 >>> 0 > 255) {
        $$01$i61$i = $603;
        do {
         ___fwritex($pad$i, 256, $f) | 0;
         $$01$i61$i = $$01$i61$i + -256 | 0;
        } while ($$01$i61$i >>> 0 > 255);
        $$0$lcssa$i63$i = $603 & 255;
       } else $$0$lcssa$i63$i = $603;
       ___fwritex($pad$i, $$0$lcssa$i63$i, $f) | 0;
      }
      $610 = $$pre300$i - $0 | 0;
      ___fwritex($buf$i, $610, $f) | 0;
      $612 = $9 - $534 | 0;
      $614 = $l$0$i - $612 - $610 | 0;
      if (($614 | 0) > 0) {
       _memset($pad$i | 0, 48, ($614 >>> 0 > 256 ? 256 : $614) | 0) | 0;
       if ($614 >>> 0 > 255) {
        $$01$i67$i = $614;
        do {
         ___fwritex($pad$i, 256, $f) | 0;
         $$01$i67$i = $$01$i67$i + -256 | 0;
        } while ($$01$i67$i >>> 0 > 255);
        $$0$lcssa$i69$i = $614 & 255;
       } else $$0$lcssa$i69$i = $614;
       ___fwritex($pad$i, $$0$lcssa$i69$i, $f) | 0;
      }
      ___fwritex($534, $612, $f) | 0;
      if (($592 | 0) == 8192 & $594) {
       $623 = $w$1 - $591 | 0;
       _memset($pad$i | 0, 32, ($623 >>> 0 > 256 ? 256 : $623) | 0) | 0;
       if ($623 >>> 0 > 255) {
        $$01$i74$i = $623;
        do {
         ___fwritex($pad$i, 256, $f) | 0;
         $$01$i74$i = $$01$i74$i + -256 | 0;
        } while ($$01$i74$i >>> 0 > 255);
        $$0$lcssa$i76$i = $623 & 255;
       } else $$0$lcssa$i76$i = $623;
       ___fwritex($pad$i, $$0$lcssa$i76$i, $f) | 0;
      }
      $$0$i = $594 ? $w$1 : $591;
      break;
     }
     $$p$i = ($p$0 | 0) < 0 ? 6 : $p$0;
     if ($473) {
      $633 = (HEAP32[$e2$i >> 2] | 0) + -28 | 0;
      HEAP32[$e2$i >> 2] = $633;
      $$3$i = $472 * 268435456.0;
      $634 = $633;
     } else {
      $$3$i = $472;
      $634 = HEAP32[$e2$i >> 2] | 0;
     }
     $$31$i = ($634 | 0) < 0 ? $big$i : $13;
     $636 = $$31$i;
     $$4$i = $$3$i;
     $z$0$i = $$31$i;
     while (1) {
      $637 = ~~$$4$i >>> 0;
      HEAP32[$z$0$i >> 2] = $637;
      $638 = $z$0$i + 4 | 0;
      $$4$i = ($$4$i - +($637 >>> 0)) * 1.0e9;
      if (!($$4$i != 0.0)) {
       $$lcssa460 = $638;
       break;
      } else $z$0$i = $638;
     }
     $$pr$i = HEAP32[$e2$i >> 2] | 0;
     if (($$pr$i | 0) > 0) {
      $644 = $$pr$i;
      $a$1253$i = $$31$i;
      $z$1252$i = $$lcssa460;
      while (1) {
       $646 = ($644 | 0) > 29 ? 29 : $644;
       $d$0245$i = $z$1252$i + -4 | 0;
       do if ($d$0245$i >>> 0 < $a$1253$i >>> 0) $a$2$ph$i = $a$1253$i; else {
        $carry$0246$i = 0;
        $d$0247$i = $d$0245$i;
        while (1) {
         $649 = _bitshift64Shl(HEAP32[$d$0247$i >> 2] | 0, 0, $646 | 0) | 0;
         $651 = _i64Add($649 | 0, tempRet0 | 0, $carry$0246$i | 0, 0) | 0;
         $652 = tempRet0;
         $653 = ___uremdi3($651 | 0, $652 | 0, 1e9, 0) | 0;
         HEAP32[$d$0247$i >> 2] = $653;
         $655 = ___udivdi3($651 | 0, $652 | 0, 1e9, 0) | 0;
         $d$0247$i = $d$0247$i + -4 | 0;
         if ($d$0247$i >>> 0 < $a$1253$i >>> 0) {
          $$lcssa461 = $655;
          break;
         } else $carry$0246$i = $655;
        }
        if (!$$lcssa461) {
         $a$2$ph$i = $a$1253$i;
         break;
        }
        $659 = $a$1253$i + -4 | 0;
        HEAP32[$659 >> 2] = $$lcssa461;
        $a$2$ph$i = $659;
       } while (0);
       $z$2$i = $z$1252$i;
       while (1) {
        if ($z$2$i >>> 0 <= $a$2$ph$i >>> 0) {
         $z$2$i$lcssa = $z$2$i;
         break;
        }
        $661 = $z$2$i + -4 | 0;
        if (!(HEAP32[$661 >> 2] | 0)) $z$2$i = $661; else {
         $z$2$i$lcssa = $z$2$i;
         break;
        }
       }
       $665 = (HEAP32[$e2$i >> 2] | 0) - $646 | 0;
       HEAP32[$e2$i >> 2] = $665;
       if (($665 | 0) > 0) {
        $644 = $665;
        $a$1253$i = $a$2$ph$i;
        $z$1252$i = $z$2$i$lcssa;
       } else {
        $$pr146$i = $665;
        $a$1$lcssa$i = $a$2$ph$i;
        $z$1$lcssa$i = $z$2$i$lcssa;
        break;
       }
      }
     } else {
      $$pr146$i = $$pr$i;
      $a$1$lcssa$i = $$31$i;
      $z$1$lcssa$i = $$lcssa460;
     }
     L212 : do if (($$pr146$i | 0) < 0) {
      $670 = (($$p$i + 25 | 0) / 9 | 0) + 1 | 0;
      if (($476 | 0) != 102) {
       $704 = $$pr146$i;
       $a$3240$i = $a$1$lcssa$i;
       $z$3239$i = $z$1$lcssa$i;
       while (1) {
        $703 = 0 - $704 | 0;
        $706 = ($703 | 0) > 9 ? 9 : $703;
        do if ($a$3240$i >>> 0 < $z$3239$i >>> 0) {
         $712 = (1 << $706) + -1 | 0;
         $713 = 1e9 >>> $706;
         $carry3$0234$i = 0;
         $d$1233$i = $a$3240$i;
         while (1) {
          $714 = HEAP32[$d$1233$i >> 2] | 0;
          HEAP32[$d$1233$i >> 2] = ($714 >>> $706) + $carry3$0234$i;
          $718 = Math_imul($714 & $712, $713) | 0;
          $d$1233$i = $d$1233$i + 4 | 0;
          if ($d$1233$i >>> 0 >= $z$3239$i >>> 0) {
           $$lcssa463 = $718;
           break;
          } else $carry3$0234$i = $718;
         }
         $$a$3$i = (HEAP32[$a$3240$i >> 2] | 0) == 0 ? $a$3240$i + 4 | 0 : $a$3240$i;
         if (!$$lcssa463) {
          $$a$3306$i = $$a$3$i;
          $z$4$i = $z$3239$i;
          break;
         }
         HEAP32[$z$3239$i >> 2] = $$lcssa463;
         $$a$3306$i = $$a$3$i;
         $z$4$i = $z$3239$i + 4 | 0;
        } else {
         $$a$3306$i = (HEAP32[$a$3240$i >> 2] | 0) == 0 ? $a$3240$i + 4 | 0 : $a$3240$i;
         $z$4$i = $z$3239$i;
        } while (0);
        $$z$4$i = ($z$4$i - $$a$3306$i >> 2 | 0) > ($670 | 0) ? $$a$3306$i + ($670 << 2) | 0 : $z$4$i;
        $704 = (HEAP32[$e2$i >> 2] | 0) + $706 | 0;
        HEAP32[$e2$i >> 2] = $704;
        if (($704 | 0) >= 0) {
         $a$3$lcssa$i = $$a$3306$i;
         $z$3$lcssa$i = $$z$4$i;
         break L212;
        } else {
         $a$3240$i = $$a$3306$i;
         $z$3239$i = $$z$4$i;
        }
       }
      }
      $672 = $$31$i + ($670 << 2) | 0;
      $674 = $$pr146$i;
      $a$3240$us$i = $a$1$lcssa$i;
      $z$3239$us$i = $z$1$lcssa$i;
      while (1) {
       $673 = 0 - $674 | 0;
       $676 = ($673 | 0) > 9 ? 9 : $673;
       do if ($a$3240$us$i >>> 0 < $z$3239$us$i >>> 0) {
        $695 = (1 << $676) + -1 | 0;
        $699 = 1e9 >>> $676;
        $carry3$0234$us$i = 0;
        $d$1233$us$i = $a$3240$us$i;
        while (1) {
         $693 = HEAP32[$d$1233$us$i >> 2] | 0;
         HEAP32[$d$1233$us$i >> 2] = ($693 >>> $676) + $carry3$0234$us$i;
         $698 = Math_imul($693 & $695, $699) | 0;
         $d$1233$us$i = $d$1233$us$i + 4 | 0;
         if ($d$1233$us$i >>> 0 >= $z$3239$us$i >>> 0) {
          $$lcssa464 = $698;
          break;
         } else $carry3$0234$us$i = $698;
        }
        $$a$3$us$i = (HEAP32[$a$3240$us$i >> 2] | 0) == 0 ? $a$3240$us$i + 4 | 0 : $a$3240$us$i;
        if (!$$lcssa464) {
         $$a$3$us304$i = $$a$3$us$i;
         $z$4$us$i = $z$3239$us$i;
         break;
        }
        HEAP32[$z$3239$us$i >> 2] = $$lcssa464;
        $$a$3$us304$i = $$a$3$us$i;
        $z$4$us$i = $z$3239$us$i + 4 | 0;
       } else {
        $$a$3$us304$i = (HEAP32[$a$3240$us$i >> 2] | 0) == 0 ? $a$3240$us$i + 4 | 0 : $a$3240$us$i;
        $z$4$us$i = $z$3239$us$i;
       } while (0);
       $$z$4$us$i = ($z$4$us$i - $636 >> 2 | 0) > ($670 | 0) ? $672 : $z$4$us$i;
       $674 = (HEAP32[$e2$i >> 2] | 0) + $676 | 0;
       HEAP32[$e2$i >> 2] = $674;
       if (($674 | 0) >= 0) {
        $a$3$lcssa$i = $$a$3$us304$i;
        $z$3$lcssa$i = $$z$4$us$i;
        break;
       } else {
        $a$3240$us$i = $$a$3$us304$i;
        $z$3239$us$i = $$z$4$us$i;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;
      $z$3$lcssa$i = $z$1$lcssa$i;
     } while (0);
     do if ($a$3$lcssa$i >>> 0 < $z$3$lcssa$i >>> 0) {
      $739 = ($636 - $a$3$lcssa$i >> 2) * 9 | 0;
      $740 = HEAP32[$a$3$lcssa$i >> 2] | 0;
      if ($740 >>> 0 < 10) {
       $e$1$i = $739;
       break;
      } else {
       $e$0229$i = $739;
       $i$0228$i = 10;
      }
      while (1) {
       $i$0228$i = $i$0228$i * 10 | 0;
       $743 = $e$0229$i + 1 | 0;
       if ($740 >>> 0 < $i$0228$i >>> 0) {
        $e$1$i = $743;
        break;
       } else $e$0229$i = $743;
      }
     } else $e$1$i = 0; while (0);
     $748 = ($476 | 0) == 103;
     $749 = ($$p$i | 0) != 0;
     $751 = $$p$i - (($476 | 0) != 102 ? $e$1$i : 0) + (($749 & $748) << 31 >> 31) | 0;
     if (($751 | 0) < ((($z$3$lcssa$i - $636 >> 2) * 9 | 0) + -9 | 0)) {
      $758 = $751 + 9216 | 0;
      $759 = ($758 | 0) / 9 | 0;
      $760 = $$31$i + ($759 + -1023 << 2) | 0;
      $j$0221$i = (($758 | 0) % 9 | 0) + 1 | 0;
      if (($j$0221$i | 0) < 9) {
       $i$1222$i = 10;
       $j$0223$i = $j$0221$i;
       while (1) {
        $763 = $i$1222$i * 10 | 0;
        $j$0223$i = $j$0223$i + 1 | 0;
        if (($j$0223$i | 0) == 9) {
         $i$1$lcssa$i = $763;
         break;
        } else $i$1222$i = $763;
       }
      } else $i$1$lcssa$i = 10;
      $764 = HEAP32[$760 >> 2] | 0;
      $765 = ($764 >>> 0) % ($i$1$lcssa$i >>> 0) | 0;
      if (!$765) if (($$31$i + ($759 + -1022 << 2) | 0) == ($z$3$lcssa$i | 0)) {
       $a$7$i = $a$3$lcssa$i;
       $d$3$i = $760;
       $e$3$i = $e$1$i;
      } else label = 221; else label = 221;
      do if ((label | 0) == 221) {
       label = 0;
       $$20$i = ((($764 >>> 0) / ($i$1$lcssa$i >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
       $772 = ($i$1$lcssa$i | 0) / 2 | 0;
       do if ($765 >>> 0 < $772 >>> 0) $small$0$i = .5; else {
        if (($765 | 0) == ($772 | 0)) if (($$31$i + ($759 + -1022 << 2) | 0) == ($z$3$lcssa$i | 0)) {
         $small$0$i = 1.0;
         break;
        }
        $small$0$i = 1.5;
       } while (0);
       do if (!$pl$0$i) {
        $round6$1$i = $$20$i;
        $small$1$i = $small$0$i;
       } else {
        if ((HEAP8[$prefix$0$i >> 0] | 0) != 45) {
         $round6$1$i = $$20$i;
         $small$1$i = $small$0$i;
         break;
        }
        $round6$1$i = -$$20$i;
        $small$1$i = -$small$0$i;
       } while (0);
       $782 = $764 - $765 | 0;
       HEAP32[$760 >> 2] = $782;
       if (!($round6$1$i + $small$1$i != $round6$1$i)) {
        $a$7$i = $a$3$lcssa$i;
        $d$3$i = $760;
        $e$3$i = $e$1$i;
        break;
       }
       $785 = $782 + $i$1$lcssa$i | 0;
       HEAP32[$760 >> 2] = $785;
       if ($785 >>> 0 > 999999999) {
        $a$5215$i = $a$3$lcssa$i;
        $d$2214$i = $760;
        while (1) {
         $787 = $d$2214$i + -4 | 0;
         HEAP32[$d$2214$i >> 2] = 0;
         if ($787 >>> 0 < $a$5215$i >>> 0) {
          $789 = $a$5215$i + -4 | 0;
          HEAP32[$789 >> 2] = 0;
          $a$6$i = $789;
         } else $a$6$i = $a$5215$i;
         $791 = (HEAP32[$787 >> 2] | 0) + 1 | 0;
         HEAP32[$787 >> 2] = $791;
         if ($791 >>> 0 > 999999999) {
          $a$5215$i = $a$6$i;
          $d$2214$i = $787;
         } else {
          $a$5$lcssa$i = $a$6$i;
          $d$2$lcssa$i = $787;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;
        $d$2$lcssa$i = $760;
       }
       $796 = ($636 - $a$5$lcssa$i >> 2) * 9 | 0;
       $797 = HEAP32[$a$5$lcssa$i >> 2] | 0;
       if ($797 >>> 0 < 10) {
        $a$7$i = $a$5$lcssa$i;
        $d$3$i = $d$2$lcssa$i;
        $e$3$i = $796;
        break;
       } else {
        $e$2210$i = $796;
        $i$2209$i = 10;
       }
       while (1) {
        $i$2209$i = $i$2209$i * 10 | 0;
        $800 = $e$2210$i + 1 | 0;
        if ($797 >>> 0 < $i$2209$i >>> 0) {
         $a$7$i = $a$5$lcssa$i;
         $d$3$i = $d$2$lcssa$i;
         $e$3$i = $800;
         break;
        } else $e$2210$i = $800;
       }
      } while (0);
      $802 = $d$3$i + 4 | 0;
      $a$8$ph$i = $a$7$i;
      $e$4$ph$i = $e$3$i;
      $z$6$ph$i = $z$3$lcssa$i >>> 0 > $802 >>> 0 ? $802 : $z$3$lcssa$i;
     } else {
      $a$8$ph$i = $a$3$lcssa$i;
      $e$4$ph$i = $e$1$i;
      $z$6$ph$i = $z$3$lcssa$i;
     }
     $804 = 0 - $e$4$ph$i | 0;
     $z$6$i = $z$6$ph$i;
     while (1) {
      if ($z$6$i >>> 0 <= $a$8$ph$i >>> 0) {
       $$lcssa275$i = 0;
       $z$6$i$lcssa = $z$6$i;
       break;
      }
      $806 = $z$6$i + -4 | 0;
      if (!(HEAP32[$806 >> 2] | 0)) $z$6$i = $806; else {
       $$lcssa275$i = 1;
       $z$6$i$lcssa = $z$6$i;
       break;
      }
     }
     do if ($748) {
      $$p$$i = ($749 & 1 ^ 1) + $$p$i | 0;
      if (($$p$$i | 0) > ($e$4$ph$i | 0) & ($e$4$ph$i | 0) > -5) {
       $$013$i = $t$0 + -1 | 0;
       $$210$i = $$p$$i + -1 - $e$4$ph$i | 0;
      } else {
       $$013$i = $t$0 + -2 | 0;
       $$210$i = $$p$$i + -1 | 0;
      }
      $817 = $fl$1$ & 8;
      if ($817) {
       $$114$i = $$013$i;
       $$311$i = $$210$i;
       $$pre$phi302$iZ2D = $817;
       break;
      }
      do if ($$lcssa275$i) {
       $820 = HEAP32[$z$6$i$lcssa + -4 >> 2] | 0;
       if (!$820) {
        $j$2$i = 9;
        break;
       }
       if (!(($820 >>> 0) % 10 | 0)) {
        $i$3205$i = 10;
        $j$1206$i = 0;
       } else {
        $j$2$i = 0;
        break;
       }
       while (1) {
        $i$3205$i = $i$3205$i * 10 | 0;
        $825 = $j$1206$i + 1 | 0;
        if (($820 >>> 0) % ($i$3205$i >>> 0) | 0) {
         $j$2$i = $825;
         break;
        } else $j$1206$i = $825;
       }
      } else $j$2$i = 9; while (0);
      $834 = (($z$6$i$lcssa - $636 >> 2) * 9 | 0) + -9 | 0;
      if (($$013$i | 32 | 0) == 102) {
       $835 = $834 - $j$2$i | 0;
       $$21$i = ($835 | 0) < 0 ? 0 : $835;
       $$114$i = $$013$i;
       $$311$i = ($$210$i | 0) < ($$21$i | 0) ? $$210$i : $$21$i;
       $$pre$phi302$iZ2D = 0;
       break;
      } else {
       $839 = $834 + $e$4$ph$i - $j$2$i | 0;
       $$23$i = ($839 | 0) < 0 ? 0 : $839;
       $$114$i = $$013$i;
       $$311$i = ($$210$i | 0) < ($$23$i | 0) ? $$210$i : $$23$i;
       $$pre$phi302$iZ2D = 0;
       break;
      }
     } else {
      $$114$i = $t$0;
      $$311$i = $$p$i;
      $$pre$phi302$iZ2D = $fl$1$ & 8;
     } while (0);
     $842 = $$311$i | $$pre$phi302$iZ2D;
     $844 = ($842 | 0) != 0 & 1;
     $846 = ($$114$i | 32 | 0) == 102;
     if ($846) {
      $$pn$i = ($e$4$ph$i | 0) > 0 ? $e$4$ph$i : 0;
      $estr$2$i = 0;
     } else {
      $850 = ($e$4$ph$i | 0) < 0 ? $804 : $e$4$ph$i;
      if (($850 | 0) < 0) {
       $$05$i79$i = $7;
       $854 = $850;
       $855 = (($850 | 0) < 0) << 31 >> 31;
       while (1) {
        $856 = ___uremdi3($854 | 0, $855 | 0, 10, 0) | 0;
        $860 = $$05$i79$i + -1 | 0;
        HEAP8[$860 >> 0] = $856 | 48;
        $861 = ___udivdi3($854 | 0, $855 | 0, 10, 0) | 0;
        if ($855 >>> 0 > 9 | ($855 | 0) == 9 & $854 >>> 0 > 4294967295) {
         $$05$i79$i = $860;
         $854 = $861;
         $855 = tempRet0;
        } else {
         $$lcssa470 = $860;
         $1185 = $861;
         break;
        }
       }
       $$0$lcssa$i84$i = $$lcssa470;
       $$01$lcssa$off0$i85$i = $1185;
      } else {
       $$0$lcssa$i84$i = $7;
       $$01$lcssa$off0$i85$i = $850;
      }
      if (!$$01$lcssa$off0$i85$i) $estr$1$ph$i = $$0$lcssa$i84$i; else {
       $$12$i87$i = $$0$lcssa$i84$i;
       $y$03$i86$i = $$01$lcssa$off0$i85$i;
       while (1) {
        $872 = $$12$i87$i + -1 | 0;
        HEAP8[$872 >> 0] = ($y$03$i86$i >>> 0) % 10 | 0 | 48;
        if ($y$03$i86$i >>> 0 < 10) {
         $estr$1$ph$i = $872;
         break;
        } else {
         $$12$i87$i = $872;
         $y$03$i86$i = ($y$03$i86$i >>> 0) / 10 | 0;
        }
       }
      }
      if (($9 - $estr$1$ph$i | 0) < 2) {
       $estr$1201$i = $estr$1$ph$i;
       while (1) {
        $878 = $estr$1201$i + -1 | 0;
        HEAP8[$878 >> 0] = 48;
        if (($9 - $878 | 0) < 2) $estr$1201$i = $878; else {
         $estr$1$lcssa$i = $878;
         break;
        }
       }
      } else $estr$1$lcssa$i = $estr$1$ph$i;
      HEAP8[$estr$1$lcssa$i + -1 >> 0] = ($e$4$ph$i >> 31 & 2) + 43;
      $888 = $estr$1$lcssa$i + -2 | 0;
      HEAP8[$888 >> 0] = $$114$i;
      $$pn$i = $9 - $888 | 0;
      $estr$2$i = $888;
     }
     $893 = $pl$0$i + 1 + $$311$i + $844 + $$pn$i | 0;
     $894 = $fl$1$ & 73728;
     $896 = ($w$1 | 0) > ($893 | 0);
     if (($894 | 0) == 0 & $896) {
      $897 = $w$1 - $893 | 0;
      _memset($pad$i | 0, 32, ($897 >>> 0 > 256 ? 256 : $897) | 0) | 0;
      if ($897 >>> 0 > 255) {
       $$01$i95$i = $897;
       do {
        ___fwritex($pad$i, 256, $f) | 0;
        $$01$i95$i = $$01$i95$i + -256 | 0;
       } while ($$01$i95$i >>> 0 > 255);
       $$0$lcssa$i97$i = $897 & 255;
      } else $$0$lcssa$i97$i = $897;
      ___fwritex($pad$i, $$0$lcssa$i97$i, $f) | 0;
     }
     ___fwritex($prefix$0$i, $pl$0$i, $f) | 0;
     if (($894 | 0) == 65536 & $896) {
      $905 = $w$1 - $893 | 0;
      _memset($pad$i | 0, 48, ($905 >>> 0 > 256 ? 256 : $905) | 0) | 0;
      if ($905 >>> 0 > 255) {
       $$01$i102$i = $905;
       do {
        ___fwritex($pad$i, 256, $f) | 0;
        $$01$i102$i = $$01$i102$i + -256 | 0;
       } while ($$01$i102$i >>> 0 > 255);
       $$0$lcssa$i104$i = $905 & 255;
      } else $$0$lcssa$i104$i = $905;
      ___fwritex($pad$i, $$0$lcssa$i104$i, $f) | 0;
     }
     if ($846) {
      $r$0$a$8$i = $a$8$ph$i >>> 0 > $$31$i >>> 0 ? $$31$i : $a$8$ph$i;
      $d$4191$i = $r$0$a$8$i;
      while (1) {
       $913 = HEAP32[$d$4191$i >> 2] | 0;
       if (!$913) $$1$lcssa$i112$i = $14; else {
        $$12$i110$i = $14;
        $y$03$i109$i = $913;
        while (1) {
         $918 = $$12$i110$i + -1 | 0;
         HEAP8[$918 >> 0] = ($y$03$i109$i >>> 0) % 10 | 0 | 48;
         if ($y$03$i109$i >>> 0 < 10) {
          $$1$lcssa$i112$i = $918;
          break;
         } else {
          $$12$i110$i = $918;
          $y$03$i109$i = ($y$03$i109$i >>> 0) / 10 | 0;
         }
        }
       }
       do if (($d$4191$i | 0) == ($r$0$a$8$i | 0)) {
        if (($$1$lcssa$i112$i | 0) != ($14 | 0)) {
         $s7$1$i = $$1$lcssa$i112$i;
         break;
        }
        HEAP8[$16 >> 0] = 48;
        $s7$1$i = $16;
       } else {
        if ($$1$lcssa$i112$i >>> 0 > $buf$i >>> 0) $s7$0188$i = $$1$lcssa$i112$i; else {
         $s7$1$i = $$1$lcssa$i112$i;
         break;
        }
        while (1) {
         $923 = $s7$0188$i + -1 | 0;
         HEAP8[$923 >> 0] = 48;
         if ($923 >>> 0 > $buf$i >>> 0) $s7$0188$i = $923; else {
          $s7$1$i = $923;
          break;
         }
        }
       } while (0);
       ___fwritex($s7$1$i, $15 - $s7$1$i | 0, $f) | 0;
       $928 = $d$4191$i + 4 | 0;
       if ($928 >>> 0 > $$31$i >>> 0) {
        $$lcssa479 = $928;
        break;
       } else $d$4191$i = $928;
      }
      if ($842) ___fwritex(10008, 1, $f) | 0;
      if (($$311$i | 0) > 0 & $$lcssa479 >>> 0 < $z$6$i$lcssa >>> 0) {
       $$412184$i = $$311$i;
       $d$5183$i = $$lcssa479;
       while (1) {
        $934 = HEAP32[$d$5183$i >> 2] | 0;
        if (!$934) {
         $s8$0180$i = $14;
         label = 289;
        } else {
         $$12$i119$i = $14;
         $y$03$i118$i = $934;
         while (1) {
          $939 = $$12$i119$i + -1 | 0;
          HEAP8[$939 >> 0] = ($y$03$i118$i >>> 0) % 10 | 0 | 48;
          if ($y$03$i118$i >>> 0 < 10) {
           $$lcssa480 = $939;
           break;
          } else {
           $$12$i119$i = $939;
           $y$03$i118$i = ($y$03$i118$i >>> 0) / 10 | 0;
          }
         }
         if ($$lcssa480 >>> 0 > $buf$i >>> 0) {
          $s8$0180$i = $$lcssa480;
          label = 289;
         } else $s8$0$lcssa$i = $$lcssa480;
        }
        if ((label | 0) == 289) while (1) {
         label = 0;
         $943 = $s8$0180$i + -1 | 0;
         HEAP8[$943 >> 0] = 48;
         if ($943 >>> 0 > $buf$i >>> 0) {
          $s8$0180$i = $943;
          label = 289;
         } else {
          $s8$0$lcssa$i = $943;
          break;
         }
        }
        $945 = ($$412184$i | 0) > 9;
        ___fwritex($s8$0$lcssa$i, $945 ? 9 : $$412184$i, $f) | 0;
        $d$5183$i = $d$5183$i + 4 | 0;
        $948 = $$412184$i + -9 | 0;
        if (!($945 & $d$5183$i >>> 0 < $z$6$i$lcssa >>> 0)) {
         $$412$lcssa$i = $948;
         break;
        } else $$412184$i = $948;
       }
      } else $$412$lcssa$i = $$311$i;
      if (($$412$lcssa$i | 0) > 0) {
       _memset($pad$i | 0, 48, ($$412$lcssa$i >>> 0 > 256 ? 256 : $$412$lcssa$i) | 0) | 0;
       if ($$412$lcssa$i >>> 0 > 255) {
        $$01$i126$i = $$412$lcssa$i;
        do {
         ___fwritex($pad$i, 256, $f) | 0;
         $$01$i126$i = $$01$i126$i + -256 | 0;
        } while ($$01$i126$i >>> 0 > 255);
        $$0$lcssa$i128$i = $$412$lcssa$i & 255;
       } else $$0$lcssa$i128$i = $$412$lcssa$i;
       ___fwritex($pad$i, $$0$lcssa$i128$i, $f) | 0;
      }
     } else {
      $z$6$$i = $$lcssa275$i ? $z$6$i$lcssa : $a$8$ph$i + 4 | 0;
      do if (($$311$i | 0) > -1) {
       $960 = ($$pre$phi302$iZ2D | 0) == 0;
       $$5196$i = $$311$i;
       $d$6195$i = $a$8$ph$i;
       while (1) {
        $961 = HEAP32[$d$6195$i >> 2] | 0;
        if (!$961) label = 303; else {
         $$12$i134$i = $14;
         $y$03$i133$i = $961;
         while (1) {
          $966 = $$12$i134$i + -1 | 0;
          HEAP8[$966 >> 0] = ($y$03$i133$i >>> 0) % 10 | 0 | 48;
          if ($y$03$i133$i >>> 0 < 10) {
           $$12$i134$i$lcssa = $$12$i134$i;
           $$lcssa474 = $966;
           break;
          } else {
           $$12$i134$i = $966;
           $y$03$i133$i = ($y$03$i133$i >>> 0) / 10 | 0;
          }
         }
         if (($$lcssa474 | 0) == ($14 | 0)) label = 303; else {
          $1187 = $$12$i134$i$lcssa;
          $s9$0$i = $$lcssa474;
         }
        }
        if ((label | 0) == 303) {
         label = 0;
         HEAP8[$16 >> 0] = 48;
         $1187 = $14;
         $s9$0$i = $16;
        }
        do if (($d$6195$i | 0) == ($a$8$ph$i | 0)) {
         ___fwritex($s9$0$i, 1, $f) | 0;
         if ($960 & ($$5196$i | 0) < 1) {
          $s9$2$i = $1187;
          break;
         }
         ___fwritex(10008, 1, $f) | 0;
         $s9$2$i = $1187;
        } else {
         if ($s9$0$i >>> 0 > $buf$i >>> 0) $s9$1192$i = $s9$0$i; else {
          $s9$2$i = $s9$0$i;
          break;
         }
         while (1) {
          $972 = $s9$1192$i + -1 | 0;
          HEAP8[$972 >> 0] = 48;
          if ($972 >>> 0 > $buf$i >>> 0) $s9$1192$i = $972; else {
           $s9$2$i = $972;
           break;
          }
         }
        } while (0);
        $976 = $15 - $s9$2$i | 0;
        ___fwritex($s9$2$i, ($$5196$i | 0) > ($976 | 0) ? $976 : $$5196$i, $f) | 0;
        $979 = $$5196$i - $976 | 0;
        $d$6195$i = $d$6195$i + 4 | 0;
        if (!($d$6195$i >>> 0 < $z$6$$i >>> 0 & ($979 | 0) > -1)) {
         $$lcssa476 = $979;
         break;
        } else $$5196$i = $979;
       }
       if (($$lcssa476 | 0) <= 0) break;
       _memset($pad$i | 0, 48, ($$lcssa476 >>> 0 > 256 ? 256 : $$lcssa476) | 0) | 0;
       if ($$lcssa476 >>> 0 > 255) {
        $$01$i141$i = $$lcssa476;
        do {
         ___fwritex($pad$i, 256, $f) | 0;
         $$01$i141$i = $$01$i141$i + -256 | 0;
        } while ($$01$i141$i >>> 0 > 255);
        $$0$lcssa$i143$i = $$lcssa476 & 255;
       } else $$0$lcssa$i143$i = $$lcssa476;
       ___fwritex($pad$i, $$0$lcssa$i143$i, $f) | 0;
      } else {} while (0);
      ___fwritex($estr$2$i, $9 - $estr$2$i | 0, $f) | 0;
     }
     if (($894 | 0) == 8192 & $896) {
      $994 = $w$1 - $893 | 0;
      _memset($pad$i | 0, 32, ($994 >>> 0 > 256 ? 256 : $994) | 0) | 0;
      if ($994 >>> 0 > 255) {
       $$01$i$i = $994;
       do {
        ___fwritex($pad$i, 256, $f) | 0;
        $$01$i$i = $$01$i$i + -256 | 0;
       } while ($$01$i$i >>> 0 > 255);
       $$0$lcssa$i$i = $994 & 255;
      } else $$0$lcssa$i$i = $994;
      ___fwritex($pad$i, $$0$lcssa$i$i, $f) | 0;
     }
     $$0$i = $896 ? $w$1 : $893;
    } else {
     $446 = ($t$0 & 32 | 0) != 0;
     $448 = $$07$i != $$07$i | 0.0 != 0.0;
     $pl$1$i = $448 ? 0 : $pl$0$i;
     $s1$0$i = $448 ? ($446 ? 9992 : 1e4) : $446 ? 9976 : 9984;
     $450 = $pl$1$i + 3 | 0;
     $453 = ($w$1 | 0) > ($450 | 0);
     if (($fl$1$ & 8192 | 0) == 0 & $453) {
      $454 = $w$1 - $450 | 0;
      _memset($pad$i | 0, 32, ($454 >>> 0 > 256 ? 256 : $454) | 0) | 0;
      if ($454 >>> 0 > 255) {
       $$01$i37$i = $454;
       do {
        ___fwritex($pad$i, 256, $f) | 0;
        $$01$i37$i = $$01$i37$i + -256 | 0;
       } while ($$01$i37$i >>> 0 > 255);
       $$0$lcssa$i39$i = $454 & 255;
      } else $$0$lcssa$i39$i = $454;
      ___fwritex($pad$i, $$0$lcssa$i39$i, $f) | 0;
     }
     ___fwritex($prefix$0$i, $pl$1$i, $f) | 0;
     ___fwritex($s1$0$i, 3, $f) | 0;
     if (($fl$1$ & 73728 | 0) == 8192 & $453) {
      $463 = $w$1 - $450 | 0;
      _memset($pad$i | 0, 32, ($463 >>> 0 > 256 ? 256 : $463) | 0) | 0;
      if ($463 >>> 0 > 255) {
       $$01$i44$i = $463;
       do {
        ___fwritex($pad$i, 256, $f) | 0;
        $$01$i44$i = $$01$i44$i + -256 | 0;
       } while ($$01$i44$i >>> 0 > 255);
       $$0$lcssa$i46$i = $463 & 255;
      } else $$0$lcssa$i46$i = $463;
      ___fwritex($pad$i, $$0$lcssa$i46$i, $f) | 0;
     }
     $$0$i = $453 ? $w$1 : $450;
    } while (0);
    $1169 = $291;
    $1170 = $264;
    $23 = $$lcssa457;
    $cnt$0 = $cnt$1;
    $l$0 = $$0$i;
    $l10n$0 = $l10n$3;
    continue L1;
    break;
   }
  case 105:
  case 100:
   {
    if (($291 | 0) < 0) {
     $330 = _i64Subtract(0, 0, $264 | 0, $291 | 0) | 0;
     $336 = tempRet0;
     $338 = $330;
     $pl$0 = 1;
     $prefix$0 = 9928;
     label = 84;
     break L86;
    }
    if (!($fl$1$ & 2048)) {
     $334 = $fl$1$ & 1;
     $336 = $291;
     $338 = $264;
     $pl$0 = $334;
     $prefix$0 = ($334 | 0) == 0 ? 9928 : 9930;
     label = 84;
    } else {
     $336 = $291;
     $338 = $264;
     $pl$0 = 1;
     $prefix$0 = 9929;
     label = 84;
    }
    break;
   }
  case 88:
  case 120:
   {
    $fl$3 = $fl$1$;
    $p$1 = $p$0;
    $t$1 = $t$0;
    label = 73;
    break;
   }
  case 110:
   {
    switch ($st$0$lcssa456 | 0) {
    case 0:
     {
      HEAP32[$264 >> 2] = $cnt$1;
      $1169 = $291;
      $1170 = $264;
      $23 = $$lcssa457;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 1:
     {
      HEAP32[$264 >> 2] = $cnt$1;
      $1169 = $291;
      $1170 = $264;
      $23 = $$lcssa457;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 2:
     {
      $270 = $264;
      HEAP32[$270 >> 2] = $cnt$1;
      HEAP32[$270 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
      $1169 = $291;
      $1170 = $264;
      $23 = $$lcssa457;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 3:
     {
      HEAP16[$264 >> 1] = $cnt$1;
      $1169 = $291;
      $1170 = $264;
      $23 = $$lcssa457;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 4:
     {
      HEAP8[$264 >> 0] = $cnt$1;
      $1169 = $291;
      $1170 = $264;
      $23 = $$lcssa457;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 6:
     {
      HEAP32[$264 >> 2] = $cnt$1;
      $1169 = $291;
      $1170 = $264;
      $23 = $$lcssa457;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 7:
     {
      $282 = $264;
      HEAP32[$282 >> 2] = $cnt$1;
      HEAP32[$282 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
      $1169 = $291;
      $1170 = $264;
      $23 = $$lcssa457;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    default:
     {
      $1169 = $291;
      $1170 = $264;
      $23 = $$lcssa457;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
     }
    }
    break;
   }
  case 117:
   {
    $336 = $291;
    $338 = $264;
    $pl$0 = 0;
    $prefix$0 = 9928;
    label = 84;
    break;
   }
  case 111:
   {
    $314 = ($264 | 0) == 0 & ($291 | 0) == 0;
    if ($314) $$0$lcssa$i51 = $2; else {
     $$03$i48 = $2;
     $316 = $264;
     $320 = $291;
     while (1) {
      $319 = $$03$i48 + -1 | 0;
      HEAP8[$319 >> 0] = $316 & 7 | 48;
      $316 = _bitshift64Lshr($316 | 0, $320 | 0, 3) | 0;
      $320 = tempRet0;
      if (($316 | 0) == 0 & ($320 | 0) == 0) {
       $$0$lcssa$i51 = $319;
       break;
      } else $$03$i48 = $319;
     }
    }
    $or$cond19 = ($fl$1$ & 8 | 0) == 0 | $314;
    $366 = $264;
    $368 = $291;
    $a$0 = $$0$lcssa$i51;
    $fl$4 = $fl$1$;
    $p$2 = $p$0;
    $pl$1 = $or$cond19 & 1 ^ 1;
    $prefix$1 = $or$cond19 ? 9928 : 9933;
    label = 89;
    break;
   }
  case 112:
   {
    $fl$3 = $fl$1$ | 8;
    $p$1 = $p$0 >>> 0 > 8 ? $p$0 : 8;
    $t$1 = 120;
    label = 73;
    break;
   }
  case 109:
   {
    $a$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
    label = 94;
    break;
   }
  case 115:
   {
    $a$1 = ($264 | 0) != 0 ? $264 : 9944;
    label = 94;
    break;
   }
  case 67:
   {
    HEAP32[$wc >> 2] = $264;
    HEAP32[$5 >> 2] = 0;
    $1179 = $wc;
    $1180 = $6;
    $p$4272 = -1;
    label = 97;
    break;
   }
  case 83:
   {
    $391 = $264;
    if (!$p$0) {
     $1181 = $264;
     $1182 = $391;
     $i$0$lcssa273 = 0;
     label = 102;
    } else {
     $1179 = $391;
     $1180 = $264;
     $p$4272 = $p$0;
     label = 97;
    }
    break;
   }
  case 99:
   {
    HEAP8[$4 >> 0] = $264;
    $1175 = $291;
    $1176 = $264;
    $a$2 = $4;
    $fl$6 = $263;
    $p$5 = 1;
    $pl$2 = 0;
    $prefix$2 = 9928;
    $z$2 = $2;
    break;
   }
  default:
   {
    $1175 = $291;
    $1176 = $264;
    $a$2 = $23;
    $fl$6 = $fl$1$;
    $p$5 = $p$0;
    $pl$2 = 0;
    $prefix$2 = 9928;
    $z$2 = $2;
   }
  } while (0);
  if ((label | 0) == 73) {
   label = 0;
   $289 = $t$1 & 32;
   if (($264 | 0) == 0 & ($291 | 0) == 0) {
    $366 = $264;
    $368 = $291;
    $a$0 = $2;
    $fl$4 = $fl$3;
    $p$2 = $p$1;
    $pl$1 = 0;
    $prefix$1 = 9928;
    label = 89;
   } else {
    $$012$i = $2;
    $295 = $264;
    $302 = $291;
    while (1) {
     $301 = $$012$i + -1 | 0;
     HEAP8[$301 >> 0] = HEAPU8[9912 + ($295 & 15) >> 0] | $289;
     $295 = _bitshift64Lshr($295 | 0, $302 | 0, 4) | 0;
     $302 = tempRet0;
     if (($295 | 0) == 0 & ($302 | 0) == 0) {
      $$lcssa491 = $301;
      break;
     } else $$012$i = $301;
    }
    if (!($fl$3 & 8)) {
     $366 = $264;
     $368 = $291;
     $a$0 = $$lcssa491;
     $fl$4 = $fl$3;
     $p$2 = $p$1;
     $pl$1 = 0;
     $prefix$1 = 9928;
     label = 89;
    } else {
     $366 = $264;
     $368 = $291;
     $a$0 = $$lcssa491;
     $fl$4 = $fl$3;
     $p$2 = $p$1;
     $pl$1 = 2;
     $prefix$1 = 9928 + ($t$1 >> 4) | 0;
     label = 89;
    }
   }
  } else if ((label | 0) == 84) {
   label = 0;
   if ($336 >>> 0 > 0 | ($336 | 0) == 0 & $338 >>> 0 > 4294967295) {
    $$05$i = $2;
    $343 = $338;
    $344 = $336;
    while (1) {
     $345 = ___uremdi3($343 | 0, $344 | 0, 10, 0) | 0;
     $349 = $$05$i + -1 | 0;
     HEAP8[$349 >> 0] = $345 | 48;
     $350 = ___udivdi3($343 | 0, $344 | 0, 10, 0) | 0;
     if ($344 >>> 0 > 9 | ($344 | 0) == 9 & $343 >>> 0 > 4294967295) {
      $$05$i = $349;
      $343 = $350;
      $344 = tempRet0;
     } else {
      $$lcssa487 = $349;
      $1177 = $350;
      break;
     }
    }
    $$0$lcssa$i53 = $$lcssa487;
    $$01$lcssa$off0$i = $1177;
   } else {
    $$0$lcssa$i53 = $2;
    $$01$lcssa$off0$i = $338;
   }
   if (!$$01$lcssa$off0$i) {
    $366 = $338;
    $368 = $336;
    $a$0 = $$0$lcssa$i53;
    $fl$4 = $fl$1$;
    $p$2 = $p$0;
    $pl$1 = $pl$0;
    $prefix$1 = $prefix$0;
    label = 89;
   } else {
    $$12$i = $$0$lcssa$i53;
    $y$03$i = $$01$lcssa$off0$i;
    while (1) {
     $361 = $$12$i + -1 | 0;
     HEAP8[$361 >> 0] = ($y$03$i >>> 0) % 10 | 0 | 48;
     if ($y$03$i >>> 0 < 10) {
      $366 = $338;
      $368 = $336;
      $a$0 = $361;
      $fl$4 = $fl$1$;
      $p$2 = $p$0;
      $pl$1 = $pl$0;
      $prefix$1 = $prefix$0;
      label = 89;
      break;
     } else {
      $$12$i = $361;
      $y$03$i = ($y$03$i >>> 0) / 10 | 0;
     }
    }
   }
  } else if ((label | 0) == 94) {
   label = 0;
   $385 = _memchr($a$1, 0, $p$0) | 0;
   $386 = ($385 | 0) == 0;
   $1175 = $291;
   $1176 = $264;
   $a$2 = $a$1;
   $fl$6 = $263;
   $p$5 = $386 ? $p$0 : $385 - $a$1 | 0;
   $pl$2 = 0;
   $prefix$2 = 9928;
   $z$2 = $386 ? $a$1 + $p$0 | 0 : $385;
  } else if ((label | 0) == 97) {
   label = 0;
   $i$0175 = 0;
   $l$1174 = 0;
   $ws$0176 = $1179;
   while (1) {
    $393 = HEAP32[$ws$0176 >> 2] | 0;
    if (!$393) {
     $i$0$lcssa = $i$0175;
     $l$2 = $l$1174;
     break;
    }
    $395 = _wctomb($mb, $393) | 0;
    if (($395 | 0) < 0 | $395 >>> 0 > ($p$4272 - $i$0175 | 0) >>> 0) {
     $i$0$lcssa = $i$0175;
     $l$2 = $395;
     break;
    }
    $400 = $395 + $i$0175 | 0;
    if ($p$4272 >>> 0 > $400 >>> 0) {
     $i$0175 = $400;
     $l$1174 = $395;
     $ws$0176 = $ws$0176 + 4 | 0;
    } else {
     $i$0$lcssa = $400;
     $l$2 = $395;
     break;
    }
   }
   if (($l$2 | 0) < 0) {
    $$0 = -1;
    label = 363;
    break;
   } else {
    $1181 = $1180;
    $1182 = $1179;
    $i$0$lcssa273 = $i$0$lcssa;
    label = 102;
   }
  }
  if ((label | 0) == 89) {
   label = 0;
   $$fl$4 = ($p$2 | 0) > -1 ? $fl$4 & -65537 : $fl$4;
   $370 = ($366 | 0) != 0 | ($368 | 0) != 0;
   if ($370 | ($p$2 | 0) != 0) {
    $376 = ($370 & 1 ^ 1) + ($3 - $a$0) | 0;
    $1175 = $368;
    $1176 = $366;
    $a$2 = $a$0;
    $fl$6 = $$fl$4;
    $p$5 = ($p$2 | 0) > ($376 | 0) ? $p$2 : $376;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $2;
   } else {
    $1175 = $368;
    $1176 = $366;
    $a$2 = $2;
    $fl$6 = $$fl$4;
    $p$5 = 0;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $2;
   }
  } else if ((label | 0) == 102) {
   label = 0;
   $403 = $fl$1$ & 73728;
   $405 = ($w$1 | 0) > ($i$0$lcssa273 | 0);
   if (($403 | 0) == 0 & $405) {
    $406 = $w$1 - $i$0$lcssa273 | 0;
    _memset($pad$i | 0, 32, ($406 >>> 0 > 256 ? 256 : $406) | 0) | 0;
    if ($406 >>> 0 > 255) {
     $$01$i66 = $406;
     do {
      ___fwritex($pad$i, 256, $f) | 0;
      $$01$i66 = $$01$i66 + -256 | 0;
     } while ($$01$i66 >>> 0 > 255);
     $$0$lcssa$i68 = $406 & 255;
    } else $$0$lcssa$i68 = $406;
    ___fwritex($pad$i, $$0$lcssa$i68, $f) | 0;
   }
   L463 : do if ($i$0$lcssa273) {
    $i$1186 = 0;
    $ws$1187 = $1182;
    while (1) {
     $414 = HEAP32[$ws$1187 >> 2] | 0;
     if (!$414) break L463;
     $416 = _wctomb($mb, $414) | 0;
     $i$1186 = $416 + $i$1186 | 0;
     if (($i$1186 | 0) > ($i$0$lcssa273 | 0)) break L463;
     ___fwritex($mb, $416, $f) | 0;
     if ($i$1186 >>> 0 >= $i$0$lcssa273 >>> 0) break; else $ws$1187 = $ws$1187 + 4 | 0;
    }
   } while (0);
   if (($403 | 0) == 8192 & $405) {
    $422 = $w$1 - $i$0$lcssa273 | 0;
    _memset($pad$i | 0, 32, ($422 >>> 0 > 256 ? 256 : $422) | 0) | 0;
    if ($422 >>> 0 > 255) {
     $$01$i73 = $422;
     do {
      ___fwritex($pad$i, 256, $f) | 0;
      $$01$i73 = $$01$i73 + -256 | 0;
     } while ($$01$i73 >>> 0 > 255);
     $$0$lcssa$i75 = $422 & 255;
    } else $$0$lcssa$i75 = $422;
    ___fwritex($pad$i, $$0$lcssa$i75, $f) | 0;
   }
   $1169 = $291;
   $1170 = $1181;
   $23 = $$lcssa457;
   $cnt$0 = $cnt$1;
   $l$0 = $405 ? $w$1 : $i$0$lcssa273;
   $l10n$0 = $l10n$3;
   continue;
  }
  $1003 = $z$2 - $a$2 | 0;
  $$p$5 = ($p$5 | 0) < ($1003 | 0) ? $1003 : $p$5;
  $1005 = $pl$2 + $$p$5 | 0;
  $w$2 = ($w$1 | 0) < ($1005 | 0) ? $1005 : $w$1;
  $1007 = $fl$6 & 73728;
  $1009 = ($w$2 | 0) > ($1005 | 0);
  if (($1007 | 0) == 0 & $1009) {
   $1010 = $w$2 - $1005 | 0;
   _memset($pad$i | 0, 32, ($1010 >>> 0 > 256 ? 256 : $1010) | 0) | 0;
   if ($1010 >>> 0 > 255) {
    $$01$i83 = $1010;
    do {
     ___fwritex($pad$i, 256, $f) | 0;
     $$01$i83 = $$01$i83 + -256 | 0;
    } while ($$01$i83 >>> 0 > 255);
    $$0$lcssa$i85 = $1010 & 255;
   } else $$0$lcssa$i85 = $1010;
   ___fwritex($pad$i, $$0$lcssa$i85, $f) | 0;
  }
  ___fwritex($prefix$2, $pl$2, $f) | 0;
  if (($1007 | 0) == 65536 & $1009) {
   $1018 = $w$2 - $1005 | 0;
   _memset($pad$i | 0, 48, ($1018 >>> 0 > 256 ? 256 : $1018) | 0) | 0;
   if ($1018 >>> 0 > 255) {
    $$01$i59 = $1018;
    do {
     ___fwritex($pad$i, 256, $f) | 0;
     $$01$i59 = $$01$i59 + -256 | 0;
    } while ($$01$i59 >>> 0 > 255);
    $$0$lcssa$i61 = $1018 & 255;
   } else $$0$lcssa$i61 = $1018;
   ___fwritex($pad$i, $$0$lcssa$i61, $f) | 0;
  }
  if (($$p$5 | 0) > ($1003 | 0)) {
   $1026 = $$p$5 - $1003 | 0;
   _memset($pad$i | 0, 48, ($1026 >>> 0 > 256 ? 256 : $1026) | 0) | 0;
   if ($1026 >>> 0 > 255) {
    $$01$i44 = $1026;
    do {
     ___fwritex($pad$i, 256, $f) | 0;
     $$01$i44 = $$01$i44 + -256 | 0;
    } while ($$01$i44 >>> 0 > 255);
    $$0$lcssa$i46 = $1026 & 255;
   } else $$0$lcssa$i46 = $1026;
   ___fwritex($pad$i, $$0$lcssa$i46, $f) | 0;
  }
  ___fwritex($a$2, $1003, $f) | 0;
  if (($1007 | 0) == 8192 & $1009) {
   $1034 = $w$2 - $1005 | 0;
   _memset($pad$i | 0, 32, ($1034 >>> 0 > 256 ? 256 : $1034) | 0) | 0;
   if ($1034 >>> 0 > 255) {
    $$01$i = $1034;
    do {
     ___fwritex($pad$i, 256, $f) | 0;
     $$01$i = $$01$i + -256 | 0;
    } while ($$01$i >>> 0 > 255);
    $$0$lcssa$i = $1034 & 255;
   } else $$0$lcssa$i = $1034;
   ___fwritex($pad$i, $$0$lcssa$i, $f) | 0;
  }
  $1169 = $1175;
  $1170 = $1176;
  $23 = $$lcssa457;
  $cnt$0 = $cnt$1;
  $l$0 = $w$2;
  $l10n$0 = $l10n$3;
 }
 if ((label | 0) == 344) {
  if ($f) {
   $$0 = $cnt$1$lcssa;
   STACKTOP = sp;
   return $$0 | 0;
  }
  if (!$l10n$0$lcssa) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else $i$2162 = 1;
  while (1) {
   $1044 = HEAP32[$nl_type + ($i$2162 << 2) >> 2] | 0;
   if (!$1044) {
    $i$2162$lcssa = $i$2162;
    break;
   }
   $1047 = $nl_arg + ($i$2162 << 3) | 0;
   L522 : do if ($1044 >>> 0 <= 20) do switch ($1044 | 0) {
   case 9:
    {
     $1054 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $1055 = HEAP32[$1054 >> 2] | 0;
     HEAP32[$ap >> 2] = $1054 + 4;
     HEAP32[$1047 >> 2] = $1055;
     break L522;
     break;
    }
   case 10:
    {
     $1061 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $1062 = HEAP32[$1061 >> 2] | 0;
     HEAP32[$ap >> 2] = $1061 + 4;
     $1065 = $1047;
     HEAP32[$1065 >> 2] = $1062;
     HEAP32[$1065 + 4 >> 2] = (($1062 | 0) < 0) << 31 >> 31;
     break L522;
     break;
    }
   case 11:
    {
     $1074 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $1075 = HEAP32[$1074 >> 2] | 0;
     HEAP32[$ap >> 2] = $1074 + 4;
     $1076 = $1047;
     HEAP32[$1076 >> 2] = $1075;
     HEAP32[$1076 + 4 >> 2] = 0;
     break L522;
     break;
    }
   case 12:
    {
     $1085 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
     $1086 = $1085;
     $1088 = HEAP32[$1086 >> 2] | 0;
     $1091 = HEAP32[$1086 + 4 >> 2] | 0;
     HEAP32[$ap >> 2] = $1085 + 8;
     $1092 = $1047;
     HEAP32[$1092 >> 2] = $1088;
     HEAP32[$1092 + 4 >> 2] = $1091;
     break L522;
     break;
    }
   case 13:
    {
     $1101 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $1102 = HEAP32[$1101 >> 2] | 0;
     HEAP32[$ap >> 2] = $1101 + 4;
     $1104 = ($1102 & 65535) << 16 >> 16;
     $1107 = $1047;
     HEAP32[$1107 >> 2] = $1104;
     HEAP32[$1107 + 4 >> 2] = (($1104 | 0) < 0) << 31 >> 31;
     break L522;
     break;
    }
   case 14:
    {
     $1116 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $1117 = HEAP32[$1116 >> 2] | 0;
     HEAP32[$ap >> 2] = $1116 + 4;
     $1118 = $1047;
     HEAP32[$1118 >> 2] = $1117 & 65535;
     HEAP32[$1118 + 4 >> 2] = 0;
     break L522;
     break;
    }
   case 15:
    {
     $1127 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $1128 = HEAP32[$1127 >> 2] | 0;
     HEAP32[$ap >> 2] = $1127 + 4;
     $1130 = ($1128 & 255) << 24 >> 24;
     $1133 = $1047;
     HEAP32[$1133 >> 2] = $1130;
     HEAP32[$1133 + 4 >> 2] = (($1130 | 0) < 0) << 31 >> 31;
     break L522;
     break;
    }
   case 16:
    {
     $1142 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $1143 = HEAP32[$1142 >> 2] | 0;
     HEAP32[$ap >> 2] = $1142 + 4;
     $1144 = $1047;
     HEAP32[$1144 >> 2] = $1143 & 255;
     HEAP32[$1144 + 4 >> 2] = 0;
     break L522;
     break;
    }
   case 17:
    {
     $1153 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
     $1154 = +HEAPF64[$1153 >> 3];
     HEAP32[$ap >> 2] = $1153 + 8;
     HEAPF64[$1047 >> 3] = $1154;
     break L522;
     break;
    }
   case 18:
    {
     $1160 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
     $1161 = +HEAPF64[$1160 >> 3];
     HEAP32[$ap >> 2] = $1160 + 8;
     HEAPF64[$1047 >> 3] = $1161;
     break L522;
     break;
    }
   default:
    break L522;
   } while (0); while (0);
   $i$2162 = $i$2162 + 1 | 0;
   if (($i$2162 | 0) >= 10) {
    $$0 = 1;
    label = 363;
    break;
   }
  }
  if ((label | 0) == 363) {
   STACKTOP = sp;
   return $$0 | 0;
  }
  if (($i$2162$lcssa | 0) < 10) $i$3160 = $i$2162$lcssa; else {
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
  while (1) {
   if (HEAP32[$nl_type + ($i$3160 << 2) >> 2] | 0) {
    $$0 = -1;
    label = 363;
    break;
   }
   $i$3160 = $i$3160 + 1 | 0;
   if (($i$3160 | 0) >= 10) {
    $$0 = 1;
    label = 363;
    break;
   }
  }
  if ((label | 0) == 363) {
   STACKTOP = sp;
   return $$0 | 0;
  }
 } else if ((label | 0) == 363) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$rsize$3$i = 0, $$sum$i19$i = 0, $$sum2$i21$i = 0, $$sum3132$i$i = 0, $$sum67$i$i = 0, $100 = 0, $1000 = 0, $1002 = 0, $1005 = 0, $1010 = 0, $1016 = 0, $1019 = 0, $1020 = 0, $1027 = 0, $1039 = 0, $1044 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $106 = 0, $1060 = 0, $1062 = 0, $1063 = 0, $110 = 0, $112 = 0, $113 = 0, $115 = 0, $117 = 0, $119 = 0, $12 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $13 = 0, $132 = 0, $138 = 0, $14 = 0, $141 = 0, $144 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $151 = 0, $154 = 0, $156 = 0, $159 = 0, $16 = 0, $161 = 0, $164 = 0, $167 = 0, $168 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $18 = 0, $182 = 0, $183 = 0, $192 = 0, $197 = 0, $201 = 0, $207 = 0, $214 = 0, $217 = 0, $225 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $236 = 0, $237 = 0, $245 = 0, $246 = 0, $247 = 0, $249 = 0, $25 = 0, $250 = 0, $255 = 0, $256 = 0, $259 = 0, $261 = 0, $264 = 0, $269 = 0, $276 = 0, $28 = 0, $285 = 0, $286 = 0, $290 = 0, $300 = 0, $303 = 0, $307 = 0, $309 = 0, $31 = 0, $310 = 0, $312 = 0, $314 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $334 = 0, $335 = 0, $337 = 0, $34 = 0, $346 = 0, $348 = 0, $351 = 0, $353 = 0, $356 = 0, $358 = 0, $361 = 0, $364 = 0, $365 = 0, $367 = 0, $368 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $379 = 0, $38 = 0, $380 = 0, $389 = 0, $394 = 0, $398 = 0, $4 = 0, $404 = 0, $41 = 0, $411 = 0, $414 = 0, $422 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $431 = 0, $432 = 0, $438 = 0, $44 = 0, $443 = 0, $444 = 0, $447 = 0, $449 = 0, $452 = 0, $457 = 0, $46 = 0, $463 = 0, $467 = 0, $468 = 0, $47 = 0, $475 = 0, $487 = 0, $49 = 0, $492 = 0, $499 = 0, $5 = 0, $500 = 0, $501 = 0, $509 = 0, $51 = 0, $511 = 0, $512 = 0, $522 = 0, $526 = 0, $528 = 0, $529 = 0, $53 = 0, $538 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $561 = 0, $563 = 0, $565 = 0, $57 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $584 = 0, $585 = 0, $588 = 0, $59 = 0, $592 = 0, $593 = 0, $596 = 0, $598 = 0, $6 = 0, $602 = 0, $604 = 0, $608 = 0, $61 = 0, $612 = 0, $621 = 0, $622 = 0, $628 = 0, $630 = 0, $632 = 0, $635 = 0, $637 = 0, $64 = 0, $641 = 0, $642 = 0, $648 = 0, $65 = 0, $653 = 0, $655 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $67 = 0, $676 = 0, $678 = 0, $68 = 0, $683 = 0, $685 = 0, $69 = 0, $690 = 0, $692 = 0, $7 = 0, $70 = 0, $702 = 0, $706 = 0, $711 = 0, $714 = 0, $719 = 0, $720 = 0, $724 = 0, $725 = 0, $730 = 0, $736 = 0, $741 = 0, $744 = 0, $745 = 0, $748 = 0, $750 = 0, $752 = 0, $755 = 0, $766 = 0, $77 = 0, $771 = 0, $773 = 0, $776 = 0, $778 = 0, $781 = 0, $784 = 0, $785 = 0, $787 = 0, $788 = 0, $790 = 0, $791 = 0, $793 = 0, $794 = 0, $799 = 0, $80 = 0, $800 = 0, $809 = 0, $81 = 0, $814 = 0, $818 = 0, $824 = 0, $832 = 0, $838 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $847 = 0, $848 = 0, $854 = 0, $859 = 0, $860 = 0, $863 = 0, $865 = 0, $868 = 0, $873 = 0, $879 = 0, $88 = 0, $883 = 0, $884 = 0, $891 = 0, $90 = 0, $903 = 0, $908 = 0, $91 = 0, $915 = 0, $916 = 0, $917 = 0, $92 = 0, $925 = 0, $928 = 0, $929 = 0, $93 = 0, $934 = 0, $94 = 0, $940 = 0, $941 = 0, $943 = 0, $944 = 0, $947 = 0, $95 = 0, $952 = 0, $954 = 0, $959 = 0, $960 = 0, $964 = 0, $970 = 0, $975 = 0, $977 = 0, $978 = 0, $979 = 0, $980 = 0, $984 = 0, $985 = 0, $99 = 0, $991 = 0, $996 = 0, $997 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0, $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, $964$looptemp = 0;
 do if ($bytes >>> 0 < 245) {
  $4 = $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8;
  $5 = $4 >>> 3;
  $6 = HEAP32[2128] | 0;
  $7 = $6 >>> $5;
  if ($7 & 3) {
   $12 = ($7 & 1 ^ 1) + $5 | 0;
   $13 = $12 << 1;
   $14 = 8552 + ($13 << 2) | 0;
   $15 = 8552 + ($13 + 2 << 2) | 0;
   $16 = HEAP32[$15 >> 2] | 0;
   $17 = $16 + 8 | 0;
   $18 = HEAP32[$17 >> 2] | 0;
   do if (($14 | 0) == ($18 | 0)) HEAP32[2128] = $6 & ~(1 << $12); else {
    if ($18 >>> 0 < (HEAP32[2132] | 0) >>> 0) _abort();
    $25 = $18 + 12 | 0;
    if ((HEAP32[$25 >> 2] | 0) == ($16 | 0)) {
     HEAP32[$25 >> 2] = $14;
     HEAP32[$15 >> 2] = $18;
     break;
    } else _abort();
   } while (0);
   $28 = $12 << 3;
   HEAP32[$16 + 4 >> 2] = $28 | 3;
   $31 = $16 + ($28 | 4) | 0;
   HEAP32[$31 >> 2] = HEAP32[$31 >> 2] | 1;
   $mem$0 = $17;
   return $mem$0 | 0;
  }
  $34 = HEAP32[2130] | 0;
  if ($4 >>> 0 > $34 >>> 0) {
   if ($7) {
    $38 = 2 << $5;
    $41 = $7 << $5 & ($38 | 0 - $38);
    $44 = ($41 & 0 - $41) + -1 | 0;
    $46 = $44 >>> 12 & 16;
    $47 = $44 >>> $46;
    $49 = $47 >>> 5 & 8;
    $51 = $47 >>> $49;
    $53 = $51 >>> 2 & 4;
    $55 = $51 >>> $53;
    $57 = $55 >>> 1 & 2;
    $59 = $55 >>> $57;
    $61 = $59 >>> 1 & 1;
    $64 = ($49 | $46 | $53 | $57 | $61) + ($59 >>> $61) | 0;
    $65 = $64 << 1;
    $66 = 8552 + ($65 << 2) | 0;
    $67 = 8552 + ($65 + 2 << 2) | 0;
    $68 = HEAP32[$67 >> 2] | 0;
    $69 = $68 + 8 | 0;
    $70 = HEAP32[$69 >> 2] | 0;
    do if (($66 | 0) == ($70 | 0)) {
     HEAP32[2128] = $6 & ~(1 << $64);
     $88 = $34;
    } else {
     if ($70 >>> 0 < (HEAP32[2132] | 0) >>> 0) _abort();
     $77 = $70 + 12 | 0;
     if ((HEAP32[$77 >> 2] | 0) == ($68 | 0)) {
      HEAP32[$77 >> 2] = $66;
      HEAP32[$67 >> 2] = $70;
      $88 = HEAP32[2130] | 0;
      break;
     } else _abort();
    } while (0);
    $80 = $64 << 3;
    $81 = $80 - $4 | 0;
    HEAP32[$68 + 4 >> 2] = $4 | 3;
    $84 = $68 + $4 | 0;
    HEAP32[$68 + ($4 | 4) >> 2] = $81 | 1;
    HEAP32[$68 + $80 >> 2] = $81;
    if ($88) {
     $90 = HEAP32[2133] | 0;
     $91 = $88 >>> 3;
     $92 = $91 << 1;
     $93 = 8552 + ($92 << 2) | 0;
     $94 = HEAP32[2128] | 0;
     $95 = 1 << $91;
     if (!($94 & $95)) {
      HEAP32[2128] = $94 | $95;
      $$pre$phiZ2D = 8552 + ($92 + 2 << 2) | 0;
      $F4$0 = $93;
     } else {
      $99 = 8552 + ($92 + 2 << 2) | 0;
      $100 = HEAP32[$99 >> 2] | 0;
      if ($100 >>> 0 < (HEAP32[2132] | 0) >>> 0) _abort(); else {
       $$pre$phiZ2D = $99;
       $F4$0 = $100;
      }
     }
     HEAP32[$$pre$phiZ2D >> 2] = $90;
     HEAP32[$F4$0 + 12 >> 2] = $90;
     HEAP32[$90 + 8 >> 2] = $F4$0;
     HEAP32[$90 + 12 >> 2] = $93;
    }
    HEAP32[2130] = $81;
    HEAP32[2133] = $84;
    $mem$0 = $69;
    return $mem$0 | 0;
   }
   $106 = HEAP32[2129] | 0;
   if (!$106) $nb$0 = $4; else {
    $110 = ($106 & 0 - $106) + -1 | 0;
    $112 = $110 >>> 12 & 16;
    $113 = $110 >>> $112;
    $115 = $113 >>> 5 & 8;
    $117 = $113 >>> $115;
    $119 = $117 >>> 2 & 4;
    $121 = $117 >>> $119;
    $123 = $121 >>> 1 & 2;
    $125 = $121 >>> $123;
    $127 = $125 >>> 1 & 1;
    $132 = HEAP32[8816 + (($115 | $112 | $119 | $123 | $127) + ($125 >>> $127) << 2) >> 2] | 0;
    $rsize$0$i = (HEAP32[$132 + 4 >> 2] & -8) - $4 | 0;
    $t$0$i = $132;
    $v$0$i = $132;
    while (1) {
     $138 = HEAP32[$t$0$i + 16 >> 2] | 0;
     if (!$138) {
      $141 = HEAP32[$t$0$i + 20 >> 2] | 0;
      if (!$141) {
       $rsize$0$i$lcssa = $rsize$0$i;
       $v$0$i$lcssa = $v$0$i;
       break;
      } else $144 = $141;
     } else $144 = $138;
     $147 = (HEAP32[$144 + 4 >> 2] & -8) - $4 | 0;
     $148 = $147 >>> 0 < $rsize$0$i >>> 0;
     $rsize$0$i = $148 ? $147 : $rsize$0$i;
     $t$0$i = $144;
     $v$0$i = $148 ? $144 : $v$0$i;
    }
    $149 = HEAP32[2132] | 0;
    if ($v$0$i$lcssa >>> 0 < $149 >>> 0) _abort();
    $151 = $v$0$i$lcssa + $4 | 0;
    if ($v$0$i$lcssa >>> 0 >= $151 >>> 0) _abort();
    $154 = HEAP32[$v$0$i$lcssa + 24 >> 2] | 0;
    $156 = HEAP32[$v$0$i$lcssa + 12 >> 2] | 0;
    do if (($156 | 0) == ($v$0$i$lcssa | 0)) {
     $167 = $v$0$i$lcssa + 20 | 0;
     $168 = HEAP32[$167 >> 2] | 0;
     if (!$168) {
      $170 = $v$0$i$lcssa + 16 | 0;
      $171 = HEAP32[$170 >> 2] | 0;
      if (!$171) {
       $R$1$i = 0;
       break;
      } else {
       $R$0$i = $171;
       $RP$0$i = $170;
      }
     } else {
      $R$0$i = $168;
      $RP$0$i = $167;
     }
     while (1) {
      $173 = $R$0$i + 20 | 0;
      $174 = HEAP32[$173 >> 2] | 0;
      if ($174) {
       $R$0$i = $174;
       $RP$0$i = $173;
       continue;
      }
      $176 = $R$0$i + 16 | 0;
      $177 = HEAP32[$176 >> 2] | 0;
      if (!$177) {
       $R$0$i$lcssa = $R$0$i;
       $RP$0$i$lcssa = $RP$0$i;
       break;
      } else {
       $R$0$i = $177;
       $RP$0$i = $176;
      }
     }
     if ($RP$0$i$lcssa >>> 0 < $149 >>> 0) _abort(); else {
      HEAP32[$RP$0$i$lcssa >> 2] = 0;
      $R$1$i = $R$0$i$lcssa;
      break;
     }
    } else {
     $159 = HEAP32[$v$0$i$lcssa + 8 >> 2] | 0;
     if ($159 >>> 0 < $149 >>> 0) _abort();
     $161 = $159 + 12 | 0;
     if ((HEAP32[$161 >> 2] | 0) != ($v$0$i$lcssa | 0)) _abort();
     $164 = $156 + 8 | 0;
     if ((HEAP32[$164 >> 2] | 0) == ($v$0$i$lcssa | 0)) {
      HEAP32[$161 >> 2] = $156;
      HEAP32[$164 >> 2] = $159;
      $R$1$i = $156;
      break;
     } else _abort();
    } while (0);
    do if ($154) {
     $182 = HEAP32[$v$0$i$lcssa + 28 >> 2] | 0;
     $183 = 8816 + ($182 << 2) | 0;
     if (($v$0$i$lcssa | 0) == (HEAP32[$183 >> 2] | 0)) {
      HEAP32[$183 >> 2] = $R$1$i;
      if (!$R$1$i) {
       HEAP32[2129] = HEAP32[2129] & ~(1 << $182);
       break;
      }
     } else {
      if ($154 >>> 0 < (HEAP32[2132] | 0) >>> 0) _abort();
      $192 = $154 + 16 | 0;
      if ((HEAP32[$192 >> 2] | 0) == ($v$0$i$lcssa | 0)) HEAP32[$192 >> 2] = $R$1$i; else HEAP32[$154 + 20 >> 2] = $R$1$i;
      if (!$R$1$i) break;
     }
     $197 = HEAP32[2132] | 0;
     if ($R$1$i >>> 0 < $197 >>> 0) _abort();
     HEAP32[$R$1$i + 24 >> 2] = $154;
     $201 = HEAP32[$v$0$i$lcssa + 16 >> 2] | 0;
     do if ($201) if ($201 >>> 0 < $197 >>> 0) _abort(); else {
      HEAP32[$R$1$i + 16 >> 2] = $201;
      HEAP32[$201 + 24 >> 2] = $R$1$i;
      break;
     } while (0);
     $207 = HEAP32[$v$0$i$lcssa + 20 >> 2] | 0;
     if ($207) if ($207 >>> 0 < (HEAP32[2132] | 0) >>> 0) _abort(); else {
      HEAP32[$R$1$i + 20 >> 2] = $207;
      HEAP32[$207 + 24 >> 2] = $R$1$i;
      break;
     }
    } while (0);
    if ($rsize$0$i$lcssa >>> 0 < 16) {
     $214 = $rsize$0$i$lcssa + $4 | 0;
     HEAP32[$v$0$i$lcssa + 4 >> 2] = $214 | 3;
     $217 = $v$0$i$lcssa + ($214 + 4) | 0;
     HEAP32[$217 >> 2] = HEAP32[$217 >> 2] | 1;
    } else {
     HEAP32[$v$0$i$lcssa + 4 >> 2] = $4 | 3;
     HEAP32[$v$0$i$lcssa + ($4 | 4) >> 2] = $rsize$0$i$lcssa | 1;
     HEAP32[$v$0$i$lcssa + ($rsize$0$i$lcssa + $4) >> 2] = $rsize$0$i$lcssa;
     $225 = HEAP32[2130] | 0;
     if ($225) {
      $227 = HEAP32[2133] | 0;
      $228 = $225 >>> 3;
      $229 = $228 << 1;
      $230 = 8552 + ($229 << 2) | 0;
      $231 = HEAP32[2128] | 0;
      $232 = 1 << $228;
      if (!($231 & $232)) {
       HEAP32[2128] = $231 | $232;
       $$pre$phi$iZ2D = 8552 + ($229 + 2 << 2) | 0;
       $F1$0$i = $230;
      } else {
       $236 = 8552 + ($229 + 2 << 2) | 0;
       $237 = HEAP32[$236 >> 2] | 0;
       if ($237 >>> 0 < (HEAP32[2132] | 0) >>> 0) _abort(); else {
        $$pre$phi$iZ2D = $236;
        $F1$0$i = $237;
       }
      }
      HEAP32[$$pre$phi$iZ2D >> 2] = $227;
      HEAP32[$F1$0$i + 12 >> 2] = $227;
      HEAP32[$227 + 8 >> 2] = $F1$0$i;
      HEAP32[$227 + 12 >> 2] = $230;
     }
     HEAP32[2130] = $rsize$0$i$lcssa;
     HEAP32[2133] = $151;
    }
    $mem$0 = $v$0$i$lcssa + 8 | 0;
    return $mem$0 | 0;
   }
  } else $nb$0 = $4;
 } else if ($bytes >>> 0 > 4294967231) $nb$0 = -1; else {
  $245 = $bytes + 11 | 0;
  $246 = $245 & -8;
  $247 = HEAP32[2129] | 0;
  if (!$247) $nb$0 = $246; else {
   $249 = 0 - $246 | 0;
   $250 = $245 >>> 8;
   if (!$250) $idx$0$i = 0; else if ($246 >>> 0 > 16777215) $idx$0$i = 31; else {
    $255 = ($250 + 1048320 | 0) >>> 16 & 8;
    $256 = $250 << $255;
    $259 = ($256 + 520192 | 0) >>> 16 & 4;
    $261 = $256 << $259;
    $264 = ($261 + 245760 | 0) >>> 16 & 2;
    $269 = 14 - ($259 | $255 | $264) + ($261 << $264 >>> 15) | 0;
    $idx$0$i = $246 >>> ($269 + 7 | 0) & 1 | $269 << 1;
   }
   $276 = HEAP32[8816 + ($idx$0$i << 2) >> 2] | 0;
   L123 : do if (!$276) {
    $rsize$2$i = $249;
    $t$1$i = 0;
    $v$2$i = 0;
    label = 86;
   } else {
    $rsize$0$i15 = $249;
    $rst$0$i = 0;
    $sizebits$0$i = $246 << (($idx$0$i | 0) == 31 ? 0 : 25 - ($idx$0$i >>> 1) | 0);
    $t$0$i14 = $276;
    $v$0$i16 = 0;
    while (1) {
     $285 = HEAP32[$t$0$i14 + 4 >> 2] & -8;
     $286 = $285 - $246 | 0;
     if ($286 >>> 0 < $rsize$0$i15 >>> 0) if (($285 | 0) == ($246 | 0)) {
      $rsize$331$i = $286;
      $t$230$i = $t$0$i14;
      $v$332$i = $t$0$i14;
      label = 90;
      break L123;
     } else {
      $rsize$1$i = $286;
      $v$1$i = $t$0$i14;
     } else {
      $rsize$1$i = $rsize$0$i15;
      $v$1$i = $v$0$i16;
     }
     $290 = HEAP32[$t$0$i14 + 20 >> 2] | 0;
     $t$0$i14 = HEAP32[$t$0$i14 + 16 + ($sizebits$0$i >>> 31 << 2) >> 2] | 0;
     $rst$1$i = ($290 | 0) == 0 | ($290 | 0) == ($t$0$i14 | 0) ? $rst$0$i : $290;
     if (!$t$0$i14) {
      $rsize$2$i = $rsize$1$i;
      $t$1$i = $rst$1$i;
      $v$2$i = $v$1$i;
      label = 86;
      break;
     } else {
      $rsize$0$i15 = $rsize$1$i;
      $rst$0$i = $rst$1$i;
      $sizebits$0$i = $sizebits$0$i << 1;
      $v$0$i16 = $v$1$i;
     }
    }
   } while (0);
   if ((label | 0) == 86) {
    if (($t$1$i | 0) == 0 & ($v$2$i | 0) == 0) {
     $300 = 2 << $idx$0$i;
     $303 = $247 & ($300 | 0 - $300);
     if (!$303) {
      $nb$0 = $246;
      break;
     }
     $307 = ($303 & 0 - $303) + -1 | 0;
     $309 = $307 >>> 12 & 16;
     $310 = $307 >>> $309;
     $312 = $310 >>> 5 & 8;
     $314 = $310 >>> $312;
     $316 = $314 >>> 2 & 4;
     $318 = $314 >>> $316;
     $320 = $318 >>> 1 & 2;
     $322 = $318 >>> $320;
     $324 = $322 >>> 1 & 1;
     $t$2$ph$i = HEAP32[8816 + (($312 | $309 | $316 | $320 | $324) + ($322 >>> $324) << 2) >> 2] | 0;
     $v$3$ph$i = 0;
    } else {
     $t$2$ph$i = $t$1$i;
     $v$3$ph$i = $v$2$i;
    }
    if (!$t$2$ph$i) {
     $rsize$3$lcssa$i = $rsize$2$i;
     $v$3$lcssa$i = $v$3$ph$i;
    } else {
     $rsize$331$i = $rsize$2$i;
     $t$230$i = $t$2$ph$i;
     $v$332$i = $v$3$ph$i;
     label = 90;
    }
   }
   if ((label | 0) == 90) while (1) {
    label = 0;
    $334 = (HEAP32[$t$230$i + 4 >> 2] & -8) - $246 | 0;
    $335 = $334 >>> 0 < $rsize$331$i >>> 0;
    $$rsize$3$i = $335 ? $334 : $rsize$331$i;
    $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
    $337 = HEAP32[$t$230$i + 16 >> 2] | 0;
    if ($337) {
     $rsize$331$i = $$rsize$3$i;
     $t$230$i = $337;
     $v$332$i = $t$2$v$3$i;
     label = 90;
     continue;
    }
    $t$230$i = HEAP32[$t$230$i + 20 >> 2] | 0;
    if (!$t$230$i) {
     $rsize$3$lcssa$i = $$rsize$3$i;
     $v$3$lcssa$i = $t$2$v$3$i;
     break;
    } else {
     $rsize$331$i = $$rsize$3$i;
     $v$332$i = $t$2$v$3$i;
     label = 90;
    }
   }
   if (!$v$3$lcssa$i) $nb$0 = $246; else if ($rsize$3$lcssa$i >>> 0 < ((HEAP32[2130] | 0) - $246 | 0) >>> 0) {
    $346 = HEAP32[2132] | 0;
    if ($v$3$lcssa$i >>> 0 < $346 >>> 0) _abort();
    $348 = $v$3$lcssa$i + $246 | 0;
    if ($v$3$lcssa$i >>> 0 >= $348 >>> 0) _abort();
    $351 = HEAP32[$v$3$lcssa$i + 24 >> 2] | 0;
    $353 = HEAP32[$v$3$lcssa$i + 12 >> 2] | 0;
    do if (($353 | 0) == ($v$3$lcssa$i | 0)) {
     $364 = $v$3$lcssa$i + 20 | 0;
     $365 = HEAP32[$364 >> 2] | 0;
     if (!$365) {
      $367 = $v$3$lcssa$i + 16 | 0;
      $368 = HEAP32[$367 >> 2] | 0;
      if (!$368) {
       $R$1$i20 = 0;
       break;
      } else {
       $R$0$i18 = $368;
       $RP$0$i17 = $367;
      }
     } else {
      $R$0$i18 = $365;
      $RP$0$i17 = $364;
     }
     while (1) {
      $370 = $R$0$i18 + 20 | 0;
      $371 = HEAP32[$370 >> 2] | 0;
      if ($371) {
       $R$0$i18 = $371;
       $RP$0$i17 = $370;
       continue;
      }
      $373 = $R$0$i18 + 16 | 0;
      $374 = HEAP32[$373 >> 2] | 0;
      if (!$374) {
       $R$0$i18$lcssa = $R$0$i18;
       $RP$0$i17$lcssa = $RP$0$i17;
       break;
      } else {
       $R$0$i18 = $374;
       $RP$0$i17 = $373;
      }
     }
     if ($RP$0$i17$lcssa >>> 0 < $346 >>> 0) _abort(); else {
      HEAP32[$RP$0$i17$lcssa >> 2] = 0;
      $R$1$i20 = $R$0$i18$lcssa;
      break;
     }
    } else {
     $356 = HEAP32[$v$3$lcssa$i + 8 >> 2] | 0;
     if ($356 >>> 0 < $346 >>> 0) _abort();
     $358 = $356 + 12 | 0;
     if ((HEAP32[$358 >> 2] | 0) != ($v$3$lcssa$i | 0)) _abort();
     $361 = $353 + 8 | 0;
     if ((HEAP32[$361 >> 2] | 0) == ($v$3$lcssa$i | 0)) {
      HEAP32[$358 >> 2] = $353;
      HEAP32[$361 >> 2] = $356;
      $R$1$i20 = $353;
      break;
     } else _abort();
    } while (0);
    do if ($351) {
     $379 = HEAP32[$v$3$lcssa$i + 28 >> 2] | 0;
     $380 = 8816 + ($379 << 2) | 0;
     if (($v$3$lcssa$i | 0) == (HEAP32[$380 >> 2] | 0)) {
      HEAP32[$380 >> 2] = $R$1$i20;
      if (!$R$1$i20) {
       HEAP32[2129] = HEAP32[2129] & ~(1 << $379);
       break;
      }
     } else {
      if ($351 >>> 0 < (HEAP32[2132] | 0) >>> 0) _abort();
      $389 = $351 + 16 | 0;
      if ((HEAP32[$389 >> 2] | 0) == ($v$3$lcssa$i | 0)) HEAP32[$389 >> 2] = $R$1$i20; else HEAP32[$351 + 20 >> 2] = $R$1$i20;
      if (!$R$1$i20) break;
     }
     $394 = HEAP32[2132] | 0;
     if ($R$1$i20 >>> 0 < $394 >>> 0) _abort();
     HEAP32[$R$1$i20 + 24 >> 2] = $351;
     $398 = HEAP32[$v$3$lcssa$i + 16 >> 2] | 0;
     do if ($398) if ($398 >>> 0 < $394 >>> 0) _abort(); else {
      HEAP32[$R$1$i20 + 16 >> 2] = $398;
      HEAP32[$398 + 24 >> 2] = $R$1$i20;
      break;
     } while (0);
     $404 = HEAP32[$v$3$lcssa$i + 20 >> 2] | 0;
     if ($404) if ($404 >>> 0 < (HEAP32[2132] | 0) >>> 0) _abort(); else {
      HEAP32[$R$1$i20 + 20 >> 2] = $404;
      HEAP32[$404 + 24 >> 2] = $R$1$i20;
      break;
     }
    } while (0);
    L199 : do if ($rsize$3$lcssa$i >>> 0 < 16) {
     $411 = $rsize$3$lcssa$i + $246 | 0;
     HEAP32[$v$3$lcssa$i + 4 >> 2] = $411 | 3;
     $414 = $v$3$lcssa$i + ($411 + 4) | 0;
     HEAP32[$414 >> 2] = HEAP32[$414 >> 2] | 1;
    } else {
     HEAP32[$v$3$lcssa$i + 4 >> 2] = $246 | 3;
     HEAP32[$v$3$lcssa$i + ($246 | 4) >> 2] = $rsize$3$lcssa$i | 1;
     HEAP32[$v$3$lcssa$i + ($rsize$3$lcssa$i + $246) >> 2] = $rsize$3$lcssa$i;
     $422 = $rsize$3$lcssa$i >>> 3;
     if ($rsize$3$lcssa$i >>> 0 < 256) {
      $424 = $422 << 1;
      $425 = 8552 + ($424 << 2) | 0;
      $426 = HEAP32[2128] | 0;
      $427 = 1 << $422;
      if (!($426 & $427)) {
       HEAP32[2128] = $426 | $427;
       $$pre$phi$i26Z2D = 8552 + ($424 + 2 << 2) | 0;
       $F5$0$i = $425;
      } else {
       $431 = 8552 + ($424 + 2 << 2) | 0;
       $432 = HEAP32[$431 >> 2] | 0;
       if ($432 >>> 0 < (HEAP32[2132] | 0) >>> 0) _abort(); else {
        $$pre$phi$i26Z2D = $431;
        $F5$0$i = $432;
       }
      }
      HEAP32[$$pre$phi$i26Z2D >> 2] = $348;
      HEAP32[$F5$0$i + 12 >> 2] = $348;
      HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $F5$0$i;
      HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $425;
      break;
     }
     $438 = $rsize$3$lcssa$i >>> 8;
     if (!$438) $I7$0$i = 0; else if ($rsize$3$lcssa$i >>> 0 > 16777215) $I7$0$i = 31; else {
      $443 = ($438 + 1048320 | 0) >>> 16 & 8;
      $444 = $438 << $443;
      $447 = ($444 + 520192 | 0) >>> 16 & 4;
      $449 = $444 << $447;
      $452 = ($449 + 245760 | 0) >>> 16 & 2;
      $457 = 14 - ($447 | $443 | $452) + ($449 << $452 >>> 15) | 0;
      $I7$0$i = $rsize$3$lcssa$i >>> ($457 + 7 | 0) & 1 | $457 << 1;
     }
     $463 = 8816 + ($I7$0$i << 2) | 0;
     HEAP32[$v$3$lcssa$i + ($246 + 28) >> 2] = $I7$0$i;
     HEAP32[$v$3$lcssa$i + ($246 + 20) >> 2] = 0;
     HEAP32[$v$3$lcssa$i + ($246 + 16) >> 2] = 0;
     $467 = HEAP32[2129] | 0;
     $468 = 1 << $I7$0$i;
     if (!($467 & $468)) {
      HEAP32[2129] = $467 | $468;
      HEAP32[$463 >> 2] = $348;
      HEAP32[$v$3$lcssa$i + ($246 + 24) >> 2] = $463;
      HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $348;
      HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $348;
      break;
     }
     $475 = HEAP32[$463 >> 2] | 0;
     L217 : do if ((HEAP32[$475 + 4 >> 2] & -8 | 0) == ($rsize$3$lcssa$i | 0)) $T$0$lcssa$i = $475; else {
      $K12$029$i = $rsize$3$lcssa$i << (($I7$0$i | 0) == 31 ? 0 : 25 - ($I7$0$i >>> 1) | 0);
      $T$028$i = $475;
      while (1) {
       $492 = $T$028$i + 16 + ($K12$029$i >>> 31 << 2) | 0;
       $487 = HEAP32[$492 >> 2] | 0;
       if (!$487) {
        $$lcssa232 = $492;
        $T$028$i$lcssa = $T$028$i;
        break;
       }
       if ((HEAP32[$487 + 4 >> 2] & -8 | 0) == ($rsize$3$lcssa$i | 0)) {
        $T$0$lcssa$i = $487;
        break L217;
       } else {
        $K12$029$i = $K12$029$i << 1;
        $T$028$i = $487;
       }
      }
      if ($$lcssa232 >>> 0 < (HEAP32[2132] | 0) >>> 0) _abort(); else {
       HEAP32[$$lcssa232 >> 2] = $348;
       HEAP32[$v$3$lcssa$i + ($246 + 24) >> 2] = $T$028$i$lcssa;
       HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $348;
       HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $348;
       break L199;
      }
     } while (0);
     $499 = $T$0$lcssa$i + 8 | 0;
     $500 = HEAP32[$499 >> 2] | 0;
     $501 = HEAP32[2132] | 0;
     if ($500 >>> 0 >= $501 >>> 0 & $T$0$lcssa$i >>> 0 >= $501 >>> 0) {
      HEAP32[$500 + 12 >> 2] = $348;
      HEAP32[$499 >> 2] = $348;
      HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $500;
      HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $T$0$lcssa$i;
      HEAP32[$v$3$lcssa$i + ($246 + 24) >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $mem$0 = $v$3$lcssa$i + 8 | 0;
    return $mem$0 | 0;
   } else $nb$0 = $246;
  }
 } while (0);
 $509 = HEAP32[2130] | 0;
 if ($509 >>> 0 >= $nb$0 >>> 0) {
  $511 = $509 - $nb$0 | 0;
  $512 = HEAP32[2133] | 0;
  if ($511 >>> 0 > 15) {
   HEAP32[2133] = $512 + $nb$0;
   HEAP32[2130] = $511;
   HEAP32[$512 + ($nb$0 + 4) >> 2] = $511 | 1;
   HEAP32[$512 + $509 >> 2] = $511;
   HEAP32[$512 + 4 >> 2] = $nb$0 | 3;
  } else {
   HEAP32[2130] = 0;
   HEAP32[2133] = 0;
   HEAP32[$512 + 4 >> 2] = $509 | 3;
   $522 = $512 + ($509 + 4) | 0;
   HEAP32[$522 >> 2] = HEAP32[$522 >> 2] | 1;
  }
  $mem$0 = $512 + 8 | 0;
  return $mem$0 | 0;
 }
 $526 = HEAP32[2131] | 0;
 if ($526 >>> 0 > $nb$0 >>> 0) {
  $528 = $526 - $nb$0 | 0;
  HEAP32[2131] = $528;
  $529 = HEAP32[2134] | 0;
  HEAP32[2134] = $529 + $nb$0;
  HEAP32[$529 + ($nb$0 + 4) >> 2] = $528 | 1;
  HEAP32[$529 + 4 >> 2] = $nb$0 | 3;
  $mem$0 = $529 + 8 | 0;
  return $mem$0 | 0;
 }
 do if (!(HEAP32[2246] | 0)) {
  $538 = _sysconf(30) | 0;
  if (!($538 + -1 & $538)) {
   HEAP32[2248] = $538;
   HEAP32[2247] = $538;
   HEAP32[2249] = -1;
   HEAP32[2250] = -1;
   HEAP32[2251] = 0;
   HEAP32[2239] = 0;
   HEAP32[2246] = (_time(0) | 0) & -16 ^ 1431655768;
   break;
  } else _abort();
 } while (0);
 $545 = $nb$0 + 48 | 0;
 $546 = HEAP32[2248] | 0;
 $547 = $nb$0 + 47 | 0;
 $548 = $546 + $547 | 0;
 $549 = 0 - $546 | 0;
 $550 = $548 & $549;
 if ($550 >>> 0 <= $nb$0 >>> 0) {
  $mem$0 = 0;
  return $mem$0 | 0;
 }
 $552 = HEAP32[2238] | 0;
 if ($552) {
  $554 = HEAP32[2236] | 0;
  $555 = $554 + $550 | 0;
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $mem$0 = 0;
   return $mem$0 | 0;
  }
 }
 L258 : do if (!(HEAP32[2239] & 4)) {
  $561 = HEAP32[2134] | 0;
  L260 : do if (!$561) label = 174; else {
   $sp$0$i$i = 8960;
   while (1) {
    $563 = HEAP32[$sp$0$i$i >> 2] | 0;
    if ($563 >>> 0 <= $561 >>> 0) {
     $565 = $sp$0$i$i + 4 | 0;
     if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
      $$lcssa228 = $sp$0$i$i;
      $$lcssa230 = $565;
      break;
     }
    }
    $sp$0$i$i = HEAP32[$sp$0$i$i + 8 >> 2] | 0;
    if (!$sp$0$i$i) {
     label = 174;
     break L260;
    }
   }
   $596 = $548 - (HEAP32[2131] | 0) & $549;
   if ($596 >>> 0 < 2147483647) {
    $598 = _sbrk($596 | 0) | 0;
    $602 = ($598 | 0) == ((HEAP32[$$lcssa228 >> 2] | 0) + (HEAP32[$$lcssa230 >> 2] | 0) | 0);
    $$3$i = $602 ? $596 : 0;
    if ($602) if (($598 | 0) == (-1 | 0)) $tsize$0323944$i = $$3$i; else {
     $tbase$255$i = $598;
     $tsize$254$i = $$3$i;
     label = 194;
     break L258;
    } else {
     $br$0$ph$i = $598;
     $ssize$1$ph$i = $596;
     $tsize$0$ph$i = $$3$i;
     label = 184;
    }
   } else $tsize$0323944$i = 0;
  } while (0);
  do if ((label | 0) == 174) {
   $572 = _sbrk(0) | 0;
   if (($572 | 0) == (-1 | 0)) $tsize$0323944$i = 0; else {
    $574 = $572;
    $575 = HEAP32[2247] | 0;
    $576 = $575 + -1 | 0;
    if (!($576 & $574)) $ssize$0$i = $550; else $ssize$0$i = $550 - $574 + ($576 + $574 & 0 - $575) | 0;
    $584 = HEAP32[2236] | 0;
    $585 = $584 + $ssize$0$i | 0;
    if ($ssize$0$i >>> 0 > $nb$0 >>> 0 & $ssize$0$i >>> 0 < 2147483647) {
     $588 = HEAP32[2238] | 0;
     if ($588) if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
      $tsize$0323944$i = 0;
      break;
     }
     $592 = _sbrk($ssize$0$i | 0) | 0;
     $593 = ($592 | 0) == ($572 | 0);
     $ssize$0$$i = $593 ? $ssize$0$i : 0;
     if ($593) {
      $tbase$255$i = $572;
      $tsize$254$i = $ssize$0$$i;
      label = 194;
      break L258;
     } else {
      $br$0$ph$i = $592;
      $ssize$1$ph$i = $ssize$0$i;
      $tsize$0$ph$i = $ssize$0$$i;
      label = 184;
     }
    } else $tsize$0323944$i = 0;
   }
  } while (0);
  L280 : do if ((label | 0) == 184) {
   $604 = 0 - $ssize$1$ph$i | 0;
   do if ($545 >>> 0 > $ssize$1$ph$i >>> 0 & ($ssize$1$ph$i >>> 0 < 2147483647 & ($br$0$ph$i | 0) != (-1 | 0))) {
    $608 = HEAP32[2248] | 0;
    $612 = $547 - $ssize$1$ph$i + $608 & 0 - $608;
    if ($612 >>> 0 < 2147483647) if ((_sbrk($612 | 0) | 0) == (-1 | 0)) {
     _sbrk($604 | 0) | 0;
     $tsize$0323944$i = $tsize$0$ph$i;
     break L280;
    } else {
     $ssize$2$i = $612 + $ssize$1$ph$i | 0;
     break;
    } else $ssize$2$i = $ssize$1$ph$i;
   } else $ssize$2$i = $ssize$1$ph$i; while (0);
   if (($br$0$ph$i | 0) == (-1 | 0)) $tsize$0323944$i = $tsize$0$ph$i; else {
    $tbase$255$i = $br$0$ph$i;
    $tsize$254$i = $ssize$2$i;
    label = 194;
    break L258;
   }
  } while (0);
  HEAP32[2239] = HEAP32[2239] | 4;
  $tsize$1$i = $tsize$0323944$i;
  label = 191;
 } else {
  $tsize$1$i = 0;
  label = 191;
 } while (0);
 if ((label | 0) == 191) if ($550 >>> 0 < 2147483647) {
  $621 = _sbrk($550 | 0) | 0;
  $622 = _sbrk(0) | 0;
  if ($621 >>> 0 < $622 >>> 0 & (($621 | 0) != (-1 | 0) & ($622 | 0) != (-1 | 0))) {
   $628 = $622 - $621 | 0;
   $630 = $628 >>> 0 > ($nb$0 + 40 | 0) >>> 0;
   if ($630) {
    $tbase$255$i = $621;
    $tsize$254$i = $630 ? $628 : $tsize$1$i;
    label = 194;
   }
  }
 }
 if ((label | 0) == 194) {
  $632 = (HEAP32[2236] | 0) + $tsize$254$i | 0;
  HEAP32[2236] = $632;
  if ($632 >>> 0 > (HEAP32[2237] | 0) >>> 0) HEAP32[2237] = $632;
  $635 = HEAP32[2134] | 0;
  L299 : do if (!$635) {
   $637 = HEAP32[2132] | 0;
   if (($637 | 0) == 0 | $tbase$255$i >>> 0 < $637 >>> 0) HEAP32[2132] = $tbase$255$i;
   HEAP32[2240] = $tbase$255$i;
   HEAP32[2241] = $tsize$254$i;
   HEAP32[2243] = 0;
   HEAP32[2137] = HEAP32[2246];
   HEAP32[2136] = -1;
   $i$02$i$i = 0;
   do {
    $641 = $i$02$i$i << 1;
    $642 = 8552 + ($641 << 2) | 0;
    HEAP32[8552 + ($641 + 3 << 2) >> 2] = $642;
    HEAP32[8552 + ($641 + 2 << 2) >> 2] = $642;
    $i$02$i$i = $i$02$i$i + 1 | 0;
   } while (($i$02$i$i | 0) != 32);
   $648 = $tbase$255$i + 8 | 0;
   $653 = ($648 & 7 | 0) == 0 ? 0 : 0 - $648 & 7;
   $655 = $tsize$254$i + -40 - $653 | 0;
   HEAP32[2134] = $tbase$255$i + $653;
   HEAP32[2131] = $655;
   HEAP32[$tbase$255$i + ($653 + 4) >> 2] = $655 | 1;
   HEAP32[$tbase$255$i + ($tsize$254$i + -36) >> 2] = 40;
   HEAP32[2135] = HEAP32[2250];
  } else {
   $sp$084$i = 8960;
   do {
    $660 = HEAP32[$sp$084$i >> 2] | 0;
    $661 = $sp$084$i + 4 | 0;
    $662 = HEAP32[$661 >> 2] | 0;
    if (($tbase$255$i | 0) == ($660 + $662 | 0)) {
     $$lcssa222 = $660;
     $$lcssa224 = $661;
     $$lcssa226 = $662;
     $sp$084$i$lcssa = $sp$084$i;
     label = 204;
     break;
    }
    $sp$084$i = HEAP32[$sp$084$i + 8 >> 2] | 0;
   } while (($sp$084$i | 0) != 0);
   if ((label | 0) == 204) if (!(HEAP32[$sp$084$i$lcssa + 12 >> 2] & 8)) if ($635 >>> 0 < $tbase$255$i >>> 0 & $635 >>> 0 >= $$lcssa222 >>> 0) {
    HEAP32[$$lcssa224 >> 2] = $$lcssa226 + $tsize$254$i;
    $676 = (HEAP32[2131] | 0) + $tsize$254$i | 0;
    $678 = $635 + 8 | 0;
    $683 = ($678 & 7 | 0) == 0 ? 0 : 0 - $678 & 7;
    $685 = $676 - $683 | 0;
    HEAP32[2134] = $635 + $683;
    HEAP32[2131] = $685;
    HEAP32[$635 + ($683 + 4) >> 2] = $685 | 1;
    HEAP32[$635 + ($676 + 4) >> 2] = 40;
    HEAP32[2135] = HEAP32[2250];
    break;
   }
   $690 = HEAP32[2132] | 0;
   if ($tbase$255$i >>> 0 < $690 >>> 0) {
    HEAP32[2132] = $tbase$255$i;
    $755 = $tbase$255$i;
   } else $755 = $690;
   $692 = $tbase$255$i + $tsize$254$i | 0;
   $sp$183$i = 8960;
   while (1) {
    if ((HEAP32[$sp$183$i >> 2] | 0) == ($692 | 0)) {
     $$lcssa219 = $sp$183$i;
     $sp$183$i$lcssa = $sp$183$i;
     label = 212;
     break;
    }
    $sp$183$i = HEAP32[$sp$183$i + 8 >> 2] | 0;
    if (!$sp$183$i) {
     $sp$0$i$i$i = 8960;
     break;
    }
   }
   if ((label | 0) == 212) if (!(HEAP32[$sp$183$i$lcssa + 12 >> 2] & 8)) {
    HEAP32[$$lcssa219 >> 2] = $tbase$255$i;
    $702 = $sp$183$i$lcssa + 4 | 0;
    HEAP32[$702 >> 2] = (HEAP32[$702 >> 2] | 0) + $tsize$254$i;
    $706 = $tbase$255$i + 8 | 0;
    $711 = ($706 & 7 | 0) == 0 ? 0 : 0 - $706 & 7;
    $714 = $tbase$255$i + ($tsize$254$i + 8) | 0;
    $719 = ($714 & 7 | 0) == 0 ? 0 : 0 - $714 & 7;
    $720 = $tbase$255$i + ($719 + $tsize$254$i) | 0;
    $$sum$i19$i = $711 + $nb$0 | 0;
    $724 = $tbase$255$i + $$sum$i19$i | 0;
    $725 = $720 - ($tbase$255$i + $711) - $nb$0 | 0;
    HEAP32[$tbase$255$i + ($711 + 4) >> 2] = $nb$0 | 3;
    L324 : do if (($720 | 0) == ($635 | 0)) {
     $730 = (HEAP32[2131] | 0) + $725 | 0;
     HEAP32[2131] = $730;
     HEAP32[2134] = $724;
     HEAP32[$tbase$255$i + ($$sum$i19$i + 4) >> 2] = $730 | 1;
    } else {
     if (($720 | 0) == (HEAP32[2133] | 0)) {
      $736 = (HEAP32[2130] | 0) + $725 | 0;
      HEAP32[2130] = $736;
      HEAP32[2133] = $724;
      HEAP32[$tbase$255$i + ($$sum$i19$i + 4) >> 2] = $736 | 1;
      HEAP32[$tbase$255$i + ($736 + $$sum$i19$i) >> 2] = $736;
      break;
     }
     $$sum2$i21$i = $tsize$254$i + 4 | 0;
     $741 = HEAP32[$tbase$255$i + ($$sum2$i21$i + $719) >> 2] | 0;
     if (($741 & 3 | 0) == 1) {
      $744 = $741 & -8;
      $745 = $741 >>> 3;
      L331 : do if ($741 >>> 0 < 256) {
       $748 = HEAP32[$tbase$255$i + (($719 | 8) + $tsize$254$i) >> 2] | 0;
       $750 = HEAP32[$tbase$255$i + ($tsize$254$i + 12 + $719) >> 2] | 0;
       $752 = 8552 + ($745 << 1 << 2) | 0;
       do if (($748 | 0) != ($752 | 0)) {
        if ($748 >>> 0 < $755 >>> 0) _abort();
        if ((HEAP32[$748 + 12 >> 2] | 0) == ($720 | 0)) break;
        _abort();
       } while (0);
       if (($750 | 0) == ($748 | 0)) {
        HEAP32[2128] = HEAP32[2128] & ~(1 << $745);
        break;
       }
       do if (($750 | 0) == ($752 | 0)) $$pre$phi58$i$iZ2D = $750 + 8 | 0; else {
        if ($750 >>> 0 < $755 >>> 0) _abort();
        $766 = $750 + 8 | 0;
        if ((HEAP32[$766 >> 2] | 0) == ($720 | 0)) {
         $$pre$phi58$i$iZ2D = $766;
         break;
        }
        _abort();
       } while (0);
       HEAP32[$748 + 12 >> 2] = $750;
       HEAP32[$$pre$phi58$i$iZ2D >> 2] = $748;
      } else {
       $771 = HEAP32[$tbase$255$i + (($719 | 24) + $tsize$254$i) >> 2] | 0;
       $773 = HEAP32[$tbase$255$i + ($tsize$254$i + 12 + $719) >> 2] | 0;
       do if (($773 | 0) == ($720 | 0)) {
        $$sum67$i$i = $719 | 16;
        $784 = $tbase$255$i + ($$sum2$i21$i + $$sum67$i$i) | 0;
        $785 = HEAP32[$784 >> 2] | 0;
        if (!$785) {
         $787 = $tbase$255$i + ($$sum67$i$i + $tsize$254$i) | 0;
         $788 = HEAP32[$787 >> 2] | 0;
         if (!$788) {
          $R$1$i$i = 0;
          break;
         } else {
          $R$0$i$i = $788;
          $RP$0$i$i = $787;
         }
        } else {
         $R$0$i$i = $785;
         $RP$0$i$i = $784;
        }
        while (1) {
         $790 = $R$0$i$i + 20 | 0;
         $791 = HEAP32[$790 >> 2] | 0;
         if ($791) {
          $R$0$i$i = $791;
          $RP$0$i$i = $790;
          continue;
         }
         $793 = $R$0$i$i + 16 | 0;
         $794 = HEAP32[$793 >> 2] | 0;
         if (!$794) {
          $R$0$i$i$lcssa = $R$0$i$i;
          $RP$0$i$i$lcssa = $RP$0$i$i;
          break;
         } else {
          $R$0$i$i = $794;
          $RP$0$i$i = $793;
         }
        }
        if ($RP$0$i$i$lcssa >>> 0 < $755 >>> 0) _abort(); else {
         HEAP32[$RP$0$i$i$lcssa >> 2] = 0;
         $R$1$i$i = $R$0$i$i$lcssa;
         break;
        }
       } else {
        $776 = HEAP32[$tbase$255$i + (($719 | 8) + $tsize$254$i) >> 2] | 0;
        if ($776 >>> 0 < $755 >>> 0) _abort();
        $778 = $776 + 12 | 0;
        if ((HEAP32[$778 >> 2] | 0) != ($720 | 0)) _abort();
        $781 = $773 + 8 | 0;
        if ((HEAP32[$781 >> 2] | 0) == ($720 | 0)) {
         HEAP32[$778 >> 2] = $773;
         HEAP32[$781 >> 2] = $776;
         $R$1$i$i = $773;
         break;
        } else _abort();
       } while (0);
       if (!$771) break;
       $799 = HEAP32[$tbase$255$i + ($tsize$254$i + 28 + $719) >> 2] | 0;
       $800 = 8816 + ($799 << 2) | 0;
       do if (($720 | 0) == (HEAP32[$800 >> 2] | 0)) {
        HEAP32[$800 >> 2] = $R$1$i$i;
        if ($R$1$i$i) break;
        HEAP32[2129] = HEAP32[2129] & ~(1 << $799);
        break L331;
       } else {
        if ($771 >>> 0 < (HEAP32[2132] | 0) >>> 0) _abort();
        $809 = $771 + 16 | 0;
        if ((HEAP32[$809 >> 2] | 0) == ($720 | 0)) HEAP32[$809 >> 2] = $R$1$i$i; else HEAP32[$771 + 20 >> 2] = $R$1$i$i;
        if (!$R$1$i$i) break L331;
       } while (0);
       $814 = HEAP32[2132] | 0;
       if ($R$1$i$i >>> 0 < $814 >>> 0) _abort();
       HEAP32[$R$1$i$i + 24 >> 2] = $771;
       $$sum3132$i$i = $719 | 16;
       $818 = HEAP32[$tbase$255$i + ($$sum3132$i$i + $tsize$254$i) >> 2] | 0;
       do if ($818) if ($818 >>> 0 < $814 >>> 0) _abort(); else {
        HEAP32[$R$1$i$i + 16 >> 2] = $818;
        HEAP32[$818 + 24 >> 2] = $R$1$i$i;
        break;
       } while (0);
       $824 = HEAP32[$tbase$255$i + ($$sum2$i21$i + $$sum3132$i$i) >> 2] | 0;
       if (!$824) break;
       if ($824 >>> 0 < (HEAP32[2132] | 0) >>> 0) _abort(); else {
        HEAP32[$R$1$i$i + 20 >> 2] = $824;
        HEAP32[$824 + 24 >> 2] = $R$1$i$i;
        break;
       }
      } while (0);
      $oldfirst$0$i$i = $tbase$255$i + (($744 | $719) + $tsize$254$i) | 0;
      $qsize$0$i$i = $744 + $725 | 0;
     } else {
      $oldfirst$0$i$i = $720;
      $qsize$0$i$i = $725;
     }
     $832 = $oldfirst$0$i$i + 4 | 0;
     HEAP32[$832 >> 2] = HEAP32[$832 >> 2] & -2;
     HEAP32[$tbase$255$i + ($$sum$i19$i + 4) >> 2] = $qsize$0$i$i | 1;
     HEAP32[$tbase$255$i + ($qsize$0$i$i + $$sum$i19$i) >> 2] = $qsize$0$i$i;
     $838 = $qsize$0$i$i >>> 3;
     if ($qsize$0$i$i >>> 0 < 256) {
      $840 = $838 << 1;
      $841 = 8552 + ($840 << 2) | 0;
      $842 = HEAP32[2128] | 0;
      $843 = 1 << $838;
      do if (!($842 & $843)) {
       HEAP32[2128] = $842 | $843;
       $$pre$phi$i23$iZ2D = 8552 + ($840 + 2 << 2) | 0;
       $F4$0$i$i = $841;
      } else {
       $847 = 8552 + ($840 + 2 << 2) | 0;
       $848 = HEAP32[$847 >> 2] | 0;
       if ($848 >>> 0 >= (HEAP32[2132] | 0) >>> 0) {
        $$pre$phi$i23$iZ2D = $847;
        $F4$0$i$i = $848;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i23$iZ2D >> 2] = $724;
      HEAP32[$F4$0$i$i + 12 >> 2] = $724;
      HEAP32[$tbase$255$i + ($$sum$i19$i + 8) >> 2] = $F4$0$i$i;
      HEAP32[$tbase$255$i + ($$sum$i19$i + 12) >> 2] = $841;
      break;
     }
     $854 = $qsize$0$i$i >>> 8;
     do if (!$854) $I7$0$i$i = 0; else {
      if ($qsize$0$i$i >>> 0 > 16777215) {
       $I7$0$i$i = 31;
       break;
      }
      $859 = ($854 + 1048320 | 0) >>> 16 & 8;
      $860 = $854 << $859;
      $863 = ($860 + 520192 | 0) >>> 16 & 4;
      $865 = $860 << $863;
      $868 = ($865 + 245760 | 0) >>> 16 & 2;
      $873 = 14 - ($863 | $859 | $868) + ($865 << $868 >>> 15) | 0;
      $I7$0$i$i = $qsize$0$i$i >>> ($873 + 7 | 0) & 1 | $873 << 1;
     } while (0);
     $879 = 8816 + ($I7$0$i$i << 2) | 0;
     HEAP32[$tbase$255$i + ($$sum$i19$i + 28) >> 2] = $I7$0$i$i;
     HEAP32[$tbase$255$i + ($$sum$i19$i + 20) >> 2] = 0;
     HEAP32[$tbase$255$i + ($$sum$i19$i + 16) >> 2] = 0;
     $883 = HEAP32[2129] | 0;
     $884 = 1 << $I7$0$i$i;
     if (!($883 & $884)) {
      HEAP32[2129] = $883 | $884;
      HEAP32[$879 >> 2] = $724;
      HEAP32[$tbase$255$i + ($$sum$i19$i + 24) >> 2] = $879;
      HEAP32[$tbase$255$i + ($$sum$i19$i + 12) >> 2] = $724;
      HEAP32[$tbase$255$i + ($$sum$i19$i + 8) >> 2] = $724;
      break;
     }
     $891 = HEAP32[$879 >> 2] | 0;
     L417 : do if ((HEAP32[$891 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) $T$0$lcssa$i25$i = $891; else {
      $K8$051$i$i = $qsize$0$i$i << (($I7$0$i$i | 0) == 31 ? 0 : 25 - ($I7$0$i$i >>> 1) | 0);
      $T$050$i$i = $891;
      while (1) {
       $908 = $T$050$i$i + 16 + ($K8$051$i$i >>> 31 << 2) | 0;
       $903 = HEAP32[$908 >> 2] | 0;
       if (!$903) {
        $$lcssa = $908;
        $T$050$i$i$lcssa = $T$050$i$i;
        break;
       }
       if ((HEAP32[$903 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
        $T$0$lcssa$i25$i = $903;
        break L417;
       } else {
        $K8$051$i$i = $K8$051$i$i << 1;
        $T$050$i$i = $903;
       }
      }
      if ($$lcssa >>> 0 < (HEAP32[2132] | 0) >>> 0) _abort(); else {
       HEAP32[$$lcssa >> 2] = $724;
       HEAP32[$tbase$255$i + ($$sum$i19$i + 24) >> 2] = $T$050$i$i$lcssa;
       HEAP32[$tbase$255$i + ($$sum$i19$i + 12) >> 2] = $724;
       HEAP32[$tbase$255$i + ($$sum$i19$i + 8) >> 2] = $724;
       break L324;
      }
     } while (0);
     $915 = $T$0$lcssa$i25$i + 8 | 0;
     $916 = HEAP32[$915 >> 2] | 0;
     $917 = HEAP32[2132] | 0;
     if ($916 >>> 0 >= $917 >>> 0 & $T$0$lcssa$i25$i >>> 0 >= $917 >>> 0) {
      HEAP32[$916 + 12 >> 2] = $724;
      HEAP32[$915 >> 2] = $724;
      HEAP32[$tbase$255$i + ($$sum$i19$i + 8) >> 2] = $916;
      HEAP32[$tbase$255$i + ($$sum$i19$i + 12) >> 2] = $T$0$lcssa$i25$i;
      HEAP32[$tbase$255$i + ($$sum$i19$i + 24) >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $mem$0 = $tbase$255$i + ($711 | 8) | 0;
    return $mem$0 | 0;
   } else $sp$0$i$i$i = 8960;
   while (1) {
    $925 = HEAP32[$sp$0$i$i$i >> 2] | 0;
    if ($925 >>> 0 <= $635 >>> 0) {
     $928 = HEAP32[$sp$0$i$i$i + 4 >> 2] | 0;
     $929 = $925 + $928 | 0;
     if ($929 >>> 0 > $635 >>> 0) {
      $$lcssa215 = $925;
      $$lcssa216 = $928;
      $$lcssa217 = $929;
      break;
     }
    }
    $sp$0$i$i$i = HEAP32[$sp$0$i$i$i + 8 >> 2] | 0;
   }
   $934 = $$lcssa215 + ($$lcssa216 + -39) | 0;
   $940 = $$lcssa215 + ($$lcssa216 + -47 + (($934 & 7 | 0) == 0 ? 0 : 0 - $934 & 7)) | 0;
   $941 = $635 + 16 | 0;
   $943 = $940 >>> 0 < $941 >>> 0 ? $635 : $940;
   $944 = $943 + 8 | 0;
   $947 = $tbase$255$i + 8 | 0;
   $952 = ($947 & 7 | 0) == 0 ? 0 : 0 - $947 & 7;
   $954 = $tsize$254$i + -40 - $952 | 0;
   HEAP32[2134] = $tbase$255$i + $952;
   HEAP32[2131] = $954;
   HEAP32[$tbase$255$i + ($952 + 4) >> 2] = $954 | 1;
   HEAP32[$tbase$255$i + ($tsize$254$i + -36) >> 2] = 40;
   HEAP32[2135] = HEAP32[2250];
   $959 = $943 + 4 | 0;
   HEAP32[$959 >> 2] = 27;
   HEAP32[$944 >> 2] = HEAP32[2240];
   HEAP32[$944 + 4 >> 2] = HEAP32[2241];
   HEAP32[$944 + 8 >> 2] = HEAP32[2242];
   HEAP32[$944 + 12 >> 2] = HEAP32[2243];
   HEAP32[2240] = $tbase$255$i;
   HEAP32[2241] = $tsize$254$i;
   HEAP32[2243] = 0;
   HEAP32[2242] = $944;
   $960 = $943 + 28 | 0;
   HEAP32[$960 >> 2] = 7;
   if (($943 + 32 | 0) >>> 0 < $$lcssa217 >>> 0) {
    $964 = $960;
    do {
     $964$looptemp = $964;
     $964 = $964 + 4 | 0;
     HEAP32[$964 >> 2] = 7;
    } while (($964$looptemp + 8 | 0) >>> 0 < $$lcssa217 >>> 0);
   }
   if (($943 | 0) != ($635 | 0)) {
    $970 = $943 - $635 | 0;
    HEAP32[$959 >> 2] = HEAP32[$959 >> 2] & -2;
    HEAP32[$635 + 4 >> 2] = $970 | 1;
    HEAP32[$943 >> 2] = $970;
    $975 = $970 >>> 3;
    if ($970 >>> 0 < 256) {
     $977 = $975 << 1;
     $978 = 8552 + ($977 << 2) | 0;
     $979 = HEAP32[2128] | 0;
     $980 = 1 << $975;
     if (!($979 & $980)) {
      HEAP32[2128] = $979 | $980;
      $$pre$phi$i$iZ2D = 8552 + ($977 + 2 << 2) | 0;
      $F$0$i$i = $978;
     } else {
      $984 = 8552 + ($977 + 2 << 2) | 0;
      $985 = HEAP32[$984 >> 2] | 0;
      if ($985 >>> 0 < (HEAP32[2132] | 0) >>> 0) _abort(); else {
       $$pre$phi$i$iZ2D = $984;
       $F$0$i$i = $985;
      }
     }
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $635;
     HEAP32[$F$0$i$i + 12 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $F$0$i$i;
     HEAP32[$635 + 12 >> 2] = $978;
     break;
    }
    $991 = $970 >>> 8;
    if (!$991) $I1$0$i$i = 0; else if ($970 >>> 0 > 16777215) $I1$0$i$i = 31; else {
     $996 = ($991 + 1048320 | 0) >>> 16 & 8;
     $997 = $991 << $996;
     $1000 = ($997 + 520192 | 0) >>> 16 & 4;
     $1002 = $997 << $1000;
     $1005 = ($1002 + 245760 | 0) >>> 16 & 2;
     $1010 = 14 - ($1000 | $996 | $1005) + ($1002 << $1005 >>> 15) | 0;
     $I1$0$i$i = $970 >>> ($1010 + 7 | 0) & 1 | $1010 << 1;
    }
    $1016 = 8816 + ($I1$0$i$i << 2) | 0;
    HEAP32[$635 + 28 >> 2] = $I1$0$i$i;
    HEAP32[$635 + 20 >> 2] = 0;
    HEAP32[$941 >> 2] = 0;
    $1019 = HEAP32[2129] | 0;
    $1020 = 1 << $I1$0$i$i;
    if (!($1019 & $1020)) {
     HEAP32[2129] = $1019 | $1020;
     HEAP32[$1016 >> 2] = $635;
     HEAP32[$635 + 24 >> 2] = $1016;
     HEAP32[$635 + 12 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $635;
     break;
    }
    $1027 = HEAP32[$1016 >> 2] | 0;
    L459 : do if ((HEAP32[$1027 + 4 >> 2] & -8 | 0) == ($970 | 0)) $T$0$lcssa$i$i = $1027; else {
     $K2$07$i$i = $970 << (($I1$0$i$i | 0) == 31 ? 0 : 25 - ($I1$0$i$i >>> 1) | 0);
     $T$06$i$i = $1027;
     while (1) {
      $1044 = $T$06$i$i + 16 + ($K2$07$i$i >>> 31 << 2) | 0;
      $1039 = HEAP32[$1044 >> 2] | 0;
      if (!$1039) {
       $$lcssa211 = $1044;
       $T$06$i$i$lcssa = $T$06$i$i;
       break;
      }
      if ((HEAP32[$1039 + 4 >> 2] & -8 | 0) == ($970 | 0)) {
       $T$0$lcssa$i$i = $1039;
       break L459;
      } else {
       $K2$07$i$i = $K2$07$i$i << 1;
       $T$06$i$i = $1039;
      }
     }
     if ($$lcssa211 >>> 0 < (HEAP32[2132] | 0) >>> 0) _abort(); else {
      HEAP32[$$lcssa211 >> 2] = $635;
      HEAP32[$635 + 24 >> 2] = $T$06$i$i$lcssa;
      HEAP32[$635 + 12 >> 2] = $635;
      HEAP32[$635 + 8 >> 2] = $635;
      break L299;
     }
    } while (0);
    $1051 = $T$0$lcssa$i$i + 8 | 0;
    $1052 = HEAP32[$1051 >> 2] | 0;
    $1053 = HEAP32[2132] | 0;
    if ($1052 >>> 0 >= $1053 >>> 0 & $T$0$lcssa$i$i >>> 0 >= $1053 >>> 0) {
     HEAP32[$1052 + 12 >> 2] = $635;
     HEAP32[$1051 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $1052;
     HEAP32[$635 + 12 >> 2] = $T$0$lcssa$i$i;
     HEAP32[$635 + 24 >> 2] = 0;
     break;
    } else _abort();
   }
  } while (0);
  $1060 = HEAP32[2131] | 0;
  if ($1060 >>> 0 > $nb$0 >>> 0) {
   $1062 = $1060 - $nb$0 | 0;
   HEAP32[2131] = $1062;
   $1063 = HEAP32[2134] | 0;
   HEAP32[2134] = $1063 + $nb$0;
   HEAP32[$1063 + ($nb$0 + 4) >> 2] = $1062 | 1;
   HEAP32[$1063 + 4 >> 2] = $nb$0 | 3;
   $mem$0 = $1063 + 8 | 0;
   return $mem$0 | 0;
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12;
 $mem$0 = 0;
 return $mem$0 | 0;
}

function ___floatscan($f, $prec, $pok) {
 $f = $f | 0;
 $prec = $prec | 0;
 $pok = $pok | 0;
 var $$0 = 0.0, $$0$i25 = 0.0, $$010$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$18$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3121$i = 0, $$in = 0, $$lcssa = 0, $$lcssa288 = 0, $$lcssa289 = 0, $$lcssa308 = 0, $$lcssa308$lcssa = 0, $$lcssa309 = 0, $$lcssa309$lcssa = 0, $$lcssa322 = 0, $$lcssa323 = 0, $$lcssa333 = 0, $$lcssa50$i = 0, $$not$i = 0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi42$iZ2D = 0.0, $$sink$off0$us$i = 0, $$sink$off0$us93$i = 0, $0 = 0, $1 = 0, $100 = 0, $109 = 0, $117 = 0, $119 = 0, $126 = 0, $133 = 0, $141 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $158 = 0, $16 = 0, $162 = 0, $164 = 0, $177 = 0.0, $184 = 0, $186 = 0, $195 = 0, $199 = 0, $2 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $217 = 0, $218 = 0, $219 = 0, $229 = 0, $230 = 0, $243 = 0, $245 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $264 = 0, $266 = 0, $277 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $289 = 0, $29 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $304 = 0.0, $316 = 0.0, $324 = 0, $325 = 0, $332 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $352 = 0, $354 = 0, $356 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $365 = 0, $370 = 0, $371 = 0, $375 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $396 = 0, $397 = 0, $406 = 0, $407 = 0, $408 = 0, $416 = 0, $42 = 0, $420 = 0, $422 = 0, $423 = 0, $425 = 0, $438 = 0, $440 = 0, $45 = 0, $450 = 0, $452 = 0, $46 = 0, $464 = 0, $465 = 0, $466 = 0, $488 = 0, $500 = 0, $504 = 0, $507 = 0, $509 = 0, $510 = 0, $511 = 0, $514 = 0, $515 = 0, $528 = 0, $531 = 0, $533 = 0, $535 = 0, $536 = 0, $54 = 0, $542 = 0, $544 = 0, $549 = 0, $552 = 0, $557 = 0, $559 = 0, $561 = 0, $562 = 0, $568 = 0, $570 = 0, $575 = 0, $578 = 0, $582 = 0, $585 = 0, $590 = 0, $594 = 0, $595 = 0, $597 = 0, $601 = 0, $603 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $612 = 0, $613 = 0, $621 = 0, $627 = 0, $628 = 0, $63 = 0, $635 = 0, $637 = 0.0, $639 = 0, $643 = 0.0, $644 = 0.0, $647 = 0.0, $651 = 0, $654 = 0, $661 = 0.0, $679 = 0.0, $681 = 0, $687 = 0, $688 = 0, $698 = 0, $70 = 0, $709 = 0, $712 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $750 = 0, $76 = 0, $84 = 0, $9 = 0, $93 = 0, $99 = 0, $a$0$lcssa177$i = 0, $a$0101$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph38$i = 0, $a$3$i = 0, $a$3$i$lcssa300 = 0, $a$3$i301 = 0, $a$3$ph$i = 0, $a$3$ph183$i = 0, $a$478$i = 0, $a$5$i = 0, $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i23 = 0.0, $bits$0$ph = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$185 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$4 = 0, $c$4$1 = 0, $c$6 = 0, $carry$0103$i = 0, $carry1$0$us$i = 0, $carry1$0$us89$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us$i$lcssa = 0, $carry1$1$us94$i = 0, $carry1$1$us94$i$lcssa = 0, $carry3$081$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us84$i = 0, $e2$1$i = 0, $e2$1$i298 = 0, $e2$1$ph$i = 0, $e2$1$ph182$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa294 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa331 = 0, $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3117$i = 0, $gotdig$3117$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1118$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$084 = 0, $i$1 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0120$i = 0, $j$0120$i$lcssa = 0, $j$067$i = 0, $j$068$i = 0, $j$069$i = 0, $j$2$i = 0, $j$3110$i = 0, $k$0$lcssa$i = 0, $k$0119$i = 0, $k$0119$i$lcssa = 0, $k$063$i = 0, $k$064$i = 0, $k$065$i = 0, $k$2$i = 0, $k$3$i = 0, $k$4102$i = 0, $k$5$in$us$i = 0, $k$5$in$us88$i = 0, $k$5$us$i = 0, $k$5$us90$i = 0, $k$679$i = 0, $lnz$0$lcssa$i = 0, $lnz$0116$i = 0, $lnz$0116$i$lcssa = 0, $lnz$057$i = 0, $lnz$058$i = 0, $lnz$059$i = 0, $lnz$2$i = 0, $or$cond16$i = 0, $or$cond19$i = 0, $or$cond9$i = 0, $rp$0$lcssa178$i = 0, $rp$0100$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph36$i = 0, $rp$3$ph$i = 0, $rp$3$ph34$i = 0, $rp$477$i = 0, $rp$5$i = 0, $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$i = 0, $y$0$i = 0.0, $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i22 = 0.0, $y$2$i = 0.0, $y$2$i24 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $z$0$i = 0, $z$1$ph37$i = 0, $z$1$us$i = 0, $z$1$us85$i = 0, $z$2$us$i = 0, $z$2$us87$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us$i$lcssa = 0, $z$3$us97$i = 0, $z$3$us97$i$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $x$i = sp;
 if (!$prec) {
  $bits$0$ph = 24;
  $emin$0$ph = -149;
 } else if (($prec | 0) == 1) {
  $bits$0$ph = 53;
  $emin$0$ph = -1074;
 } else if (($prec | 0) == 2) {
  $bits$0$ph = 53;
  $emin$0$ph = -1074;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;
  return +$$0;
 }
 $0 = $f + 4 | 0;
 $1 = $f + 100 | 0;
 do {
  $2 = HEAP32[$0 >> 2] | 0;
  if ($2 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $2 + 1;
   $9 = HEAPU8[$2 >> 0] | 0;
  } else $9 = ___shgetc($f) | 0;
 } while ((_isspace($9) | 0) != 0);
 $$lcssa333 = $9;
 do if (($$lcssa333 | 0) == 43 | ($$lcssa333 | 0) == 45) {
  $15 = 1 - ((($$lcssa333 | 0) == 45 & 1) << 1) | 0;
  $16 = HEAP32[$0 >> 2] | 0;
  if ($16 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $16 + 1;
   $c$0 = HEAPU8[$16 >> 0] | 0;
   $sign$0 = $15;
   break;
  } else {
   $c$0 = ___shgetc($f) | 0;
   $sign$0 = $15;
   break;
  }
 } else {
  $c$0 = $$lcssa333;
  $sign$0 = 1;
 } while (0);
 $c$185 = $c$0;
 $i$084 = 0;
 while (1) {
  if (($c$185 | 32 | 0) != (HEAP8[9288 + $i$084 >> 0] | 0)) {
   $c$1$lcssa = $c$185;
   $i$0$lcssa = $i$084;
   break;
  }
  do if ($i$084 >>> 0 < 7) {
   $29 = HEAP32[$0 >> 2] | 0;
   if ($29 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $29 + 1;
    $c$2 = HEAPU8[$29 >> 0] | 0;
    break;
   } else {
    $c$2 = ___shgetc($f) | 0;
    break;
   }
  } else $c$2 = $c$185; while (0);
  $36 = $i$084 + 1 | 0;
  if ($36 >>> 0 < 8) {
   $c$185 = $c$2;
   $i$084 = $36;
  } else {
   $c$1$lcssa = $c$2;
   $i$0$lcssa = $36;
   break;
  }
 }
 do if (($i$0$lcssa | 0) == 3) label = 23; else if (($i$0$lcssa | 0) != 8) {
  $39 = ($pok | 0) != 0;
  if ($39 & $i$0$lcssa >>> 0 > 3) if (($i$0$lcssa | 0) == 8) break; else {
   label = 23;
   break;
  }
  do if (!$i$0$lcssa) {
   if (($c$1$lcssa | 32 | 0) == 110) {
    $54 = HEAP32[$0 >> 2] | 0;
    if ($54 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $54 + 1;
     $c$4 = HEAPU8[$54 >> 0] | 0;
    } else $c$4 = ___shgetc($f) | 0;
    if (($c$4 | 32 | 0) != 97) break;
    $712 = HEAP32[$0 >> 2] | 0;
    if ($712 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $712 + 1;
     $c$4$1 = HEAPU8[$712 >> 0] | 0;
    } else $c$4$1 = ___shgetc($f) | 0;
    if (($c$4$1 | 32 | 0) != 110) break;
    $63 = HEAP32[$0 >> 2] | 0;
    if ($63 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $63 + 1;
     $70 = HEAPU8[$63 >> 0] | 0;
    } else $70 = ___shgetc($f) | 0;
    if (($70 | 0) == 40) $i$4 = 1; else {
     if (!(HEAP32[$1 >> 2] | 0)) {
      $$0 = nan;
      STACKTOP = sp;
      return +$$0;
     }
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
     $$0 = nan;
     STACKTOP = sp;
     return +$$0;
    }
    while (1) {
     $76 = HEAP32[$0 >> 2] | 0;
     if ($76 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
      HEAP32[$0 >> 2] = $76 + 1;
      $84 = HEAPU8[$76 >> 0] | 0;
     } else $84 = ___shgetc($f) | 0;
     if (!(($84 + -48 | 0) >>> 0 < 10 | ($84 + -65 | 0) >>> 0 < 26)) if (!(($84 | 0) == 95 | ($84 + -97 | 0) >>> 0 < 26)) {
      $$lcssa289 = $84;
      $i$4$lcssa = $i$4;
      break;
     }
     $i$4 = $i$4 + 1 | 0;
    }
    if (($$lcssa289 | 0) == 41) {
     $$0 = nan;
     STACKTOP = sp;
     return +$$0;
    }
    $93 = (HEAP32[$1 >> 2] | 0) == 0;
    if (!$93) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
    if (!$39) {
     HEAP32[(___errno_location() | 0) >> 2] = 22;
     ___shlim($f, 0);
     $$0 = 0.0;
     STACKTOP = sp;
     return +$$0;
    }
    if (($i$4$lcssa | 0) == 0 | $93) {
     $$0 = nan;
     STACKTOP = sp;
     return +$$0;
    }
    $$in = $i$4$lcssa;
    $100 = HEAP32[$0 >> 2] | 0;
    while (1) {
     $$in = $$in + -1 | 0;
     $99 = $100 + -1 | 0;
     if (!$$in) {
      $$lcssa288 = $99;
      break;
     } else $100 = $99;
    }
    HEAP32[$0 >> 2] = $$lcssa288;
    $$0 = nan;
    STACKTOP = sp;
    return +$$0;
   }
   do if (($c$1$lcssa | 0) == 48) {
    $109 = HEAP32[$0 >> 2] | 0;
    if ($109 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $109 + 1;
     $117 = HEAPU8[$109 >> 0] | 0;
    } else $117 = ___shgetc($f) | 0;
    if (($117 | 32 | 0) != 120) {
     if (!(HEAP32[$1 >> 2] | 0)) {
      $c$6 = 48;
      break;
     }
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
     $c$6 = 48;
     break;
    }
    $119 = HEAP32[$0 >> 2] | 0;
    if ($119 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $119 + 1;
     $c$0$i = HEAPU8[$119 >> 0] | 0;
     $gotdig$0$i = 0;
    } else {
     $c$0$i = ___shgetc($f) | 0;
     $gotdig$0$i = 0;
    }
    while (1) {
     if (($c$0$i | 0) == 46) {
      $gotdig$0$i$lcssa294 = $gotdig$0$i;
      label = 71;
      break;
     } else if (($c$0$i | 0) != 48) {
      $162 = 0;
      $164 = 0;
      $721 = 0;
      $722 = 0;
      $c$2$i = $c$0$i;
      $gotdig$2$i = $gotdig$0$i;
      $gotrad$0$i = 0;
      $gottail$0$i = 0;
      $scale$0$i = 1.0;
      $x$0$i = 0;
      $y$0$i = 0.0;
      break;
     }
     $126 = HEAP32[$0 >> 2] | 0;
     if ($126 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
      HEAP32[$0 >> 2] = $126 + 1;
      $c$0$i = HEAPU8[$126 >> 0] | 0;
      $gotdig$0$i = 1;
      continue;
     } else {
      $c$0$i = ___shgetc($f) | 0;
      $gotdig$0$i = 1;
      continue;
     }
    }
    if ((label | 0) == 71) {
     $133 = HEAP32[$0 >> 2] | 0;
     if ($133 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
      HEAP32[$0 >> 2] = $133 + 1;
      $c$1$ph$i = HEAPU8[$133 >> 0] | 0;
     } else $c$1$ph$i = ___shgetc($f) | 0;
     if (($c$1$ph$i | 0) == 48) {
      $148 = 0;
      $149 = 0;
      while (1) {
       $141 = HEAP32[$0 >> 2] | 0;
       if ($141 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $141 + 1;
        $152 = HEAPU8[$141 >> 0] | 0;
       } else $152 = ___shgetc($f) | 0;
       $150 = _i64Add($148 | 0, $149 | 0, -1, -1) | 0;
       $151 = tempRet0;
       if (($152 | 0) == 48) {
        $148 = $150;
        $149 = $151;
       } else {
        $162 = 0;
        $164 = 0;
        $721 = $150;
        $722 = $151;
        $c$2$i = $152;
        $gotdig$2$i = 1;
        $gotrad$0$i = 1;
        $gottail$0$i = 0;
        $scale$0$i = 1.0;
        $x$0$i = 0;
        $y$0$i = 0.0;
        break;
       }
      }
     } else {
      $162 = 0;
      $164 = 0;
      $721 = 0;
      $722 = 0;
      $c$2$i = $c$1$ph$i;
      $gotdig$2$i = $gotdig$0$i$lcssa294;
      $gotrad$0$i = 1;
      $gottail$0$i = 0;
      $scale$0$i = 1.0;
      $x$0$i = 0;
      $y$0$i = 0.0;
     }
    }
    while (1) {
     $154 = $c$2$i + -48 | 0;
     $$pre$i = $c$2$i | 32;
     if ($154 >>> 0 < 10) label = 83; else {
      $158 = ($c$2$i | 0) == 46;
      if (!($158 | ($$pre$i + -97 | 0) >>> 0 < 6)) {
       $206 = $721;
       $207 = $164;
       $209 = $722;
       $210 = $162;
       $c$2$lcssa$i = $c$2$i;
       $gotdig$2$i$lcssa = $gotdig$2$i;
       $gotrad$0$i$lcssa = $gotrad$0$i;
       $x$0$i$lcssa = $x$0$i;
       $y$0$i$lcssa = $y$0$i;
       break;
      }
      if ($158) if (!$gotrad$0$i) {
       $723 = $164;
       $724 = $162;
       $725 = $164;
       $726 = $162;
       $gotdig$3$i = $gotdig$2$i;
       $gotrad$1$i = 1;
       $gottail$2$i = $gottail$0$i;
       $scale$2$i = $scale$0$i;
       $x$2$i = $x$0$i;
       $y$2$i = $y$0$i;
      } else {
       $206 = $721;
       $207 = $164;
       $209 = $722;
       $210 = $162;
       $c$2$lcssa$i = 46;
       $gotdig$2$i$lcssa = $gotdig$2$i;
       $gotrad$0$i$lcssa = $gotrad$0$i;
       $x$0$i$lcssa = $x$0$i;
       $y$0$i$lcssa = $y$0$i;
       break;
      } else label = 83;
     }
     if ((label | 0) == 83) {
      label = 0;
      $d$0$i = ($c$2$i | 0) > 57 ? $$pre$i + -87 | 0 : $154;
      do if (($162 | 0) < 0 | ($162 | 0) == 0 & $164 >>> 0 < 8) {
       $gottail$1$i = $gottail$0$i;
       $scale$1$i = $scale$0$i;
       $x$1$i = $d$0$i + ($x$0$i << 4) | 0;
       $y$1$i = $y$0$i;
      } else {
       if (($162 | 0) < 0 | ($162 | 0) == 0 & $164 >>> 0 < 14) {
        $177 = $scale$0$i * .0625;
        $gottail$1$i = $gottail$0$i;
        $scale$1$i = $177;
        $x$1$i = $x$0$i;
        $y$1$i = $y$0$i + $177 * +($d$0$i | 0);
        break;
       }
       if (($gottail$0$i | 0) != 0 | ($d$0$i | 0) == 0) {
        $gottail$1$i = $gottail$0$i;
        $scale$1$i = $scale$0$i;
        $x$1$i = $x$0$i;
        $y$1$i = $y$0$i;
       } else {
        $gottail$1$i = 1;
        $scale$1$i = $scale$0$i;
        $x$1$i = $x$0$i;
        $y$1$i = $y$0$i + $scale$0$i * .5;
       }
      } while (0);
      $184 = _i64Add($164 | 0, $162 | 0, 1, 0) | 0;
      $723 = $721;
      $724 = $722;
      $725 = $184;
      $726 = tempRet0;
      $gotdig$3$i = 1;
      $gotrad$1$i = $gotrad$0$i;
      $gottail$2$i = $gottail$1$i;
      $scale$2$i = $scale$1$i;
      $x$2$i = $x$1$i;
      $y$2$i = $y$1$i;
     }
     $186 = HEAP32[$0 >> 2] | 0;
     if ($186 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
      HEAP32[$0 >> 2] = $186 + 1;
      $162 = $726;
      $164 = $725;
      $721 = $723;
      $722 = $724;
      $c$2$i = HEAPU8[$186 >> 0] | 0;
      $gotdig$2$i = $gotdig$3$i;
      $gotrad$0$i = $gotrad$1$i;
      $gottail$0$i = $gottail$2$i;
      $scale$0$i = $scale$2$i;
      $x$0$i = $x$2$i;
      $y$0$i = $y$2$i;
      continue;
     } else {
      $162 = $726;
      $164 = $725;
      $721 = $723;
      $722 = $724;
      $c$2$i = ___shgetc($f) | 0;
      $gotdig$2$i = $gotdig$3$i;
      $gotrad$0$i = $gotrad$1$i;
      $gottail$0$i = $gottail$2$i;
      $scale$0$i = $scale$2$i;
      $x$0$i = $x$2$i;
      $y$0$i = $y$2$i;
      continue;
     }
    }
    if (!$gotdig$2$i$lcssa) {
     $195 = (HEAP32[$1 >> 2] | 0) == 0;
     if (!$195) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
     if (!$pok) ___shlim($f, 0); else if (!$195) {
      $199 = HEAP32[$0 >> 2] | 0;
      HEAP32[$0 >> 2] = $199 + -1;
      if ($gotrad$0$i$lcssa) HEAP32[$0 >> 2] = $199 + -2;
     }
     $$0 = +($sign$0 | 0) * 0.0;
     STACKTOP = sp;
     return +$$0;
    }
    $205 = ($gotrad$0$i$lcssa | 0) == 0;
    $208 = $205 ? $207 : $206;
    $211 = $205 ? $210 : $209;
    if (($210 | 0) < 0 | ($210 | 0) == 0 & $207 >>> 0 < 8) {
     $218 = $207;
     $219 = $210;
     $x$324$i = $x$0$i$lcssa;
     while (1) {
      $217 = $x$324$i << 4;
      $218 = _i64Add($218 | 0, $219 | 0, 1, 0) | 0;
      $219 = tempRet0;
      if (!(($219 | 0) < 0 | ($219 | 0) == 0 & $218 >>> 0 < 8)) {
       $x$3$lcssa$i = $217;
       break;
      } else $x$324$i = $217;
     }
    } else $x$3$lcssa$i = $x$0$i$lcssa;
    do if (($c$2$lcssa$i | 32 | 0) == 112) {
     $229 = _scanexp($f, $pok) | 0;
     $230 = tempRet0;
     if (($229 | 0) == 0 & ($230 | 0) == -2147483648) if (!$pok) {
      ___shlim($f, 0);
      $$0 = 0.0;
      STACKTOP = sp;
      return +$$0;
     } else {
      if (!(HEAP32[$1 >> 2] | 0)) {
       $247 = 0;
       $248 = 0;
       break;
      }
      HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
      $247 = 0;
      $248 = 0;
      break;
     } else {
      $247 = $229;
      $248 = $230;
     }
    } else if (!(HEAP32[$1 >> 2] | 0)) {
     $247 = 0;
     $248 = 0;
    } else {
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
     $247 = 0;
     $248 = 0;
    } while (0);
    $243 = _bitshift64Shl($208 | 0, $211 | 0, 2) | 0;
    $245 = _i64Add($243 | 0, tempRet0 | 0, -32, -1) | 0;
    $249 = _i64Add($245 | 0, tempRet0 | 0, $247 | 0, $248 | 0) | 0;
    $250 = tempRet0;
    if (!$x$3$lcssa$i) {
     $$0 = +($sign$0 | 0) * 0.0;
     STACKTOP = sp;
     return +$$0;
    }
    if (($250 | 0) > 0 | ($250 | 0) == 0 & $249 >>> 0 > (0 - $emin$0$ph | 0) >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34;
     $$0 = +($sign$0 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
     STACKTOP = sp;
     return +$$0;
    }
    $264 = $emin$0$ph + -106 | 0;
    $266 = (($264 | 0) < 0) << 31 >> 31;
    if (($250 | 0) < ($266 | 0) | ($250 | 0) == ($266 | 0) & $249 >>> 0 < $264 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34;
     $$0 = +($sign$0 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
     STACKTOP = sp;
     return +$$0;
    }
    if (($x$3$lcssa$i | 0) > -1) {
     $282 = $249;
     $283 = $250;
     $x$419$i = $x$3$lcssa$i;
     $y$320$i = $y$0$i$lcssa;
     while (1) {
      $277 = !($y$320$i >= .5);
      $281 = $277 & 1 | $x$419$i << 1;
      $x$5$i = $281 ^ 1;
      $y$4$i = $y$320$i + ($277 ? $y$320$i : $y$320$i + -1.0);
      $284 = _i64Add($282 | 0, $283 | 0, -1, -1) | 0;
      $285 = tempRet0;
      if (($281 | 0) > -1) {
       $282 = $284;
       $283 = $285;
       $x$419$i = $x$5$i;
       $y$320$i = $y$4$i;
      } else {
       $291 = $284;
       $292 = $285;
       $x$4$lcssa$i = $x$5$i;
       $y$3$lcssa$i = $y$4$i;
       break;
      }
     }
    } else {
     $291 = $249;
     $292 = $250;
     $x$4$lcssa$i = $x$3$lcssa$i;
     $y$3$lcssa$i = $y$0$i$lcssa;
    }
    $289 = _i64Subtract(32, 0, $emin$0$ph | 0, (($emin$0$ph | 0) < 0) << 31 >> 31 | 0) | 0;
    $293 = _i64Add($291 | 0, $292 | 0, $289 | 0, tempRet0 | 0) | 0;
    $294 = tempRet0;
    if (0 > ($294 | 0) | 0 == ($294 | 0) & $bits$0$ph >>> 0 > $293 >>> 0) if (($293 | 0) < 0) {
     $$0710$i = 0;
     label = 124;
    } else {
     $$07$i = $293;
     label = 122;
    } else {
     $$07$i = $bits$0$ph;
     label = 122;
    }
    do if ((label | 0) == 122) {
     if (($$07$i | 0) < 53) {
      $$0710$i = $$07$i;
      label = 124;
      break;
     }
     $$0711$i = $$07$i;
     $$pre$phi42$iZ2D = +($sign$0 | 0);
     $bias$0$i = 0.0;
    } while (0);
    if ((label | 0) == 124) {
     $304 = +($sign$0 | 0);
     $$0711$i = $$0710$i;
     $$pre$phi42$iZ2D = $304;
     $bias$0$i = +_copysignl(+_scalbn(1.0, 84 - $$0710$i | 0), $304);
    }
    $or$cond9$i = ($x$4$lcssa$i & 1 | 0) == 0 & ($y$3$lcssa$i != 0.0 & ($$0711$i | 0) < 32);
    $316 = $$pre$phi42$iZ2D * ($or$cond9$i ? 0.0 : $y$3$lcssa$i) + ($bias$0$i + $$pre$phi42$iZ2D * +((($or$cond9$i & 1) + $x$4$lcssa$i | 0) >>> 0)) - $bias$0$i;
    if (!($316 != 0.0)) HEAP32[(___errno_location() | 0) >> 2] = 34;
    $$0 = +_scalbnl($316, $291);
    STACKTOP = sp;
    return +$$0;
   } else $c$6 = $c$1$lcssa; while (0);
   $sum$i = $emin$0$ph + $bits$0$ph | 0;
   $324 = 0 - $sum$i | 0;
   $$09$i = $c$6;
   $gotdig$0$i12 = 0;
   while (1) {
    if (($$09$i | 0) == 46) {
     $gotdig$0$i12$lcssa331 = $gotdig$0$i12;
     label = 135;
     break;
    } else if (($$09$i | 0) != 48) {
     $$2$i = $$09$i;
     $727 = 0;
     $728 = 0;
     $gotdig$2$i13 = $gotdig$0$i12;
     $gotrad$0$i14 = 0;
     break;
    }
    $325 = HEAP32[$0 >> 2] | 0;
    if ($325 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $325 + 1;
     $$09$i = HEAPU8[$325 >> 0] | 0;
     $gotdig$0$i12 = 1;
     continue;
    } else {
     $$09$i = ___shgetc($f) | 0;
     $gotdig$0$i12 = 1;
     continue;
    }
   }
   if ((label | 0) == 135) {
    $332 = HEAP32[$0 >> 2] | 0;
    if ($332 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $332 + 1;
     $$1$ph$i = HEAPU8[$332 >> 0] | 0;
    } else $$1$ph$i = ___shgetc($f) | 0;
    if (($$1$ph$i | 0) == 48) {
     $340 = 0;
     $341 = 0;
     while (1) {
      $342 = _i64Add($340 | 0, $341 | 0, -1, -1) | 0;
      $343 = tempRet0;
      $344 = HEAP32[$0 >> 2] | 0;
      if ($344 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
       HEAP32[$0 >> 2] = $344 + 1;
       $$1$be$i = HEAPU8[$344 >> 0] | 0;
      } else $$1$be$i = ___shgetc($f) | 0;
      if (($$1$be$i | 0) == 48) {
       $340 = $342;
       $341 = $343;
      } else {
       $$2$i = $$1$be$i;
       $727 = $342;
       $728 = $343;
       $gotdig$2$i13 = 1;
       $gotrad$0$i14 = 1;
       break;
      }
     }
    } else {
     $$2$i = $$1$ph$i;
     $727 = 0;
     $728 = 0;
     $gotdig$2$i13 = $gotdig$0$i12$lcssa331;
     $gotrad$0$i14 = 1;
    }
   }
   HEAP32[$x$i >> 2] = 0;
   $352 = $$2$i + -48 | 0;
   $354 = ($$2$i | 0) == 46;
   L214 : do if ($354 | $352 >>> 0 < 10) {
    $356 = $x$i + 496 | 0;
    $$3121$i = $$2$i;
    $359 = 0;
    $360 = 0;
    $729 = $354;
    $730 = $352;
    $731 = $727;
    $732 = $728;
    $gotdig$3117$i = $gotdig$2$i13;
    $gotrad$1118$i = $gotrad$0$i14;
    $j$0120$i = 0;
    $k$0119$i = 0;
    $lnz$0116$i = 0;
    L216 : while (1) {
     do if ($729) if (!$gotrad$1118$i) {
      $733 = $359;
      $734 = $360;
      $735 = $359;
      $736 = $360;
      $gotdig$4$i = $gotdig$3117$i;
      $gotrad$2$i = 1;
      $j$2$i = $j$0120$i;
      $k$2$i = $k$0119$i;
      $lnz$2$i = $lnz$0116$i;
     } else {
      $737 = $731;
      $738 = $732;
      $739 = $359;
      $740 = $360;
      $gotdig$3117$i$lcssa = $gotdig$3117$i;
      $j$0120$i$lcssa = $j$0120$i;
      $k$0119$i$lcssa = $k$0119$i;
      $lnz$0116$i$lcssa = $lnz$0116$i;
      break L216;
     } else {
      $361 = _i64Add($359 | 0, $360 | 0, 1, 0) | 0;
      $362 = tempRet0;
      $363 = ($$3121$i | 0) != 48;
      if (($k$0119$i | 0) >= 125) {
       if (!$363) {
        $733 = $731;
        $734 = $732;
        $735 = $361;
        $736 = $362;
        $gotdig$4$i = $gotdig$3117$i;
        $gotrad$2$i = $gotrad$1118$i;
        $j$2$i = $j$0120$i;
        $k$2$i = $k$0119$i;
        $lnz$2$i = $lnz$0116$i;
        break;
       }
       HEAP32[$356 >> 2] = HEAP32[$356 >> 2] | 1;
       $733 = $731;
       $734 = $732;
       $735 = $361;
       $736 = $362;
       $gotdig$4$i = $gotdig$3117$i;
       $gotrad$2$i = $gotrad$1118$i;
       $j$2$i = $j$0120$i;
       $k$2$i = $k$0119$i;
       $lnz$2$i = $lnz$0116$i;
       break;
      }
      $365 = $x$i + ($k$0119$i << 2) | 0;
      if (!$j$0120$i) $storemerge$i = $730; else $storemerge$i = $$3121$i + -48 + ((HEAP32[$365 >> 2] | 0) * 10 | 0) | 0;
      HEAP32[$365 >> 2] = $storemerge$i;
      $370 = $j$0120$i + 1 | 0;
      $371 = ($370 | 0) == 9;
      $733 = $731;
      $734 = $732;
      $735 = $361;
      $736 = $362;
      $gotdig$4$i = 1;
      $gotrad$2$i = $gotrad$1118$i;
      $j$2$i = $371 ? 0 : $370;
      $k$2$i = ($371 & 1) + $k$0119$i | 0;
      $lnz$2$i = $363 ? $361 : $lnz$0116$i;
     } while (0);
     $375 = HEAP32[$0 >> 2] | 0;
     if ($375 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
      HEAP32[$0 >> 2] = $375 + 1;
      $$3$be$i = HEAPU8[$375 >> 0] | 0;
     } else $$3$be$i = ___shgetc($f) | 0;
     $730 = $$3$be$i + -48 | 0;
     $729 = ($$3$be$i | 0) == 46;
     if (!($729 | $730 >>> 0 < 10)) {
      $$3$lcssa$i = $$3$be$i;
      $387 = $733;
      $388 = $735;
      $390 = $734;
      $391 = $736;
      $gotdig$3$lcssa$i = $gotdig$4$i;
      $gotrad$1$lcssa$i = $gotrad$2$i;
      $j$0$lcssa$i = $j$2$i;
      $k$0$lcssa$i = $k$2$i;
      $lnz$0$lcssa$i = $lnz$2$i;
      label = 158;
      break L214;
     } else {
      $$3121$i = $$3$be$i;
      $359 = $735;
      $360 = $736;
      $731 = $733;
      $732 = $734;
      $gotdig$3117$i = $gotdig$4$i;
      $gotrad$1118$i = $gotrad$2$i;
      $j$0120$i = $j$2$i;
      $k$0119$i = $k$2$i;
      $lnz$0116$i = $lnz$2$i;
     }
    }
    $741 = $739;
    $742 = $740;
    $743 = $737;
    $744 = $738;
    $745 = ($gotdig$3117$i$lcssa | 0) != 0;
    $j$069$i = $j$0120$i$lcssa;
    $k$065$i = $k$0119$i$lcssa;
    $lnz$059$i = $lnz$0116$i$lcssa;
    label = 166;
   } else {
    $$3$lcssa$i = $$2$i;
    $387 = $727;
    $388 = 0;
    $390 = $728;
    $391 = 0;
    $gotdig$3$lcssa$i = $gotdig$2$i13;
    $gotrad$1$lcssa$i = $gotrad$0$i14;
    $j$0$lcssa$i = 0;
    $k$0$lcssa$i = 0;
    $lnz$0$lcssa$i = 0;
    label = 158;
   } while (0);
   do if ((label | 0) == 158) {
    $386 = ($gotrad$1$lcssa$i | 0) == 0;
    $389 = $386 ? $388 : $387;
    $392 = $386 ? $391 : $390;
    $393 = ($gotdig$3$lcssa$i | 0) != 0;
    if (!(($$3$lcssa$i | 32 | 0) == 101 & $393)) if (($$3$lcssa$i | 0) > -1) {
     $741 = $388;
     $742 = $391;
     $743 = $389;
     $744 = $392;
     $745 = $393;
     $j$069$i = $j$0$lcssa$i;
     $k$065$i = $k$0$lcssa$i;
     $lnz$059$i = $lnz$0$lcssa$i;
     label = 166;
     break;
    } else {
     $746 = $388;
     $747 = $391;
     $748 = $393;
     $749 = $389;
     $750 = $392;
     $j$068$i = $j$0$lcssa$i;
     $k$064$i = $k$0$lcssa$i;
     $lnz$058$i = $lnz$0$lcssa$i;
     label = 168;
     break;
    }
    $396 = _scanexp($f, $pok) | 0;
    $397 = tempRet0;
    if (($396 | 0) == 0 & ($397 | 0) == -2147483648) {
     if (!$pok) {
      ___shlim($f, 0);
      $$0$i25 = 0.0;
      break;
     }
     if (!(HEAP32[$1 >> 2] | 0)) {
      $406 = 0;
      $407 = 0;
     } else {
      HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
      $406 = 0;
      $407 = 0;
     }
    } else {
     $406 = $396;
     $407 = $397;
    }
    $408 = _i64Add($406 | 0, $407 | 0, $389 | 0, $392 | 0) | 0;
    $420 = $408;
    $422 = $388;
    $423 = tempRet0;
    $425 = $391;
    $j$067$i = $j$0$lcssa$i;
    $k$063$i = $k$0$lcssa$i;
    $lnz$057$i = $lnz$0$lcssa$i;
    label = 170;
   } while (0);
   if ((label | 0) == 166) if (!(HEAP32[$1 >> 2] | 0)) {
    $746 = $741;
    $747 = $742;
    $748 = $745;
    $749 = $743;
    $750 = $744;
    $j$068$i = $j$069$i;
    $k$064$i = $k$065$i;
    $lnz$058$i = $lnz$059$i;
    label = 168;
   } else {
    HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
    if ($745) {
     $420 = $743;
     $422 = $741;
     $423 = $744;
     $425 = $742;
     $j$067$i = $j$069$i;
     $k$063$i = $k$065$i;
     $lnz$057$i = $lnz$059$i;
     label = 170;
    } else label = 169;
   }
   if ((label | 0) == 168) if ($748) {
    $420 = $749;
    $422 = $746;
    $423 = $750;
    $425 = $747;
    $j$067$i = $j$068$i;
    $k$063$i = $k$064$i;
    $lnz$057$i = $lnz$058$i;
    label = 170;
   } else label = 169;
   do if ((label | 0) == 169) {
    HEAP32[(___errno_location() | 0) >> 2] = 22;
    ___shlim($f, 0);
    $$0$i25 = 0.0;
   } else if ((label | 0) == 170) {
    $416 = HEAP32[$x$i >> 2] | 0;
    if (!$416) {
     $$0$i25 = +($sign$0 | 0) * 0.0;
     break;
    }
    if ((($425 | 0) < 0 | ($425 | 0) == 0 & $422 >>> 0 < 10) & (($420 | 0) == ($422 | 0) & ($423 | 0) == ($425 | 0))) if ($bits$0$ph >>> 0 > 30 | ($416 >>> $bits$0$ph | 0) == 0) {
     $$0$i25 = +($sign$0 | 0) * +($416 >>> 0);
     break;
    }
    $438 = ($emin$0$ph | 0) / -2 | 0;
    $440 = (($438 | 0) < 0) << 31 >> 31;
    if (($423 | 0) > ($440 | 0) | ($423 | 0) == ($440 | 0) & $420 >>> 0 > $438 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34;
     $$0$i25 = +($sign$0 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
     break;
    }
    $450 = $emin$0$ph + -106 | 0;
    $452 = (($450 | 0) < 0) << 31 >> 31;
    if (($423 | 0) < ($452 | 0) | ($423 | 0) == ($452 | 0) & $420 >>> 0 < $450 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34;
     $$0$i25 = +($sign$0 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
     break;
    }
    if (!$j$067$i) $k$3$i = $k$063$i; else {
     if (($j$067$i | 0) < 9) {
      $464 = $x$i + ($k$063$i << 2) | 0;
      $466 = HEAP32[$464 >> 2] | 0;
      $j$3110$i = $j$067$i;
      while (1) {
       $465 = $466 * 10 | 0;
       $j$3110$i = $j$3110$i + 1 | 0;
       if (($j$3110$i | 0) == 9) {
        $$lcssa323 = $465;
        break;
       } else $466 = $465;
      }
      HEAP32[$464 >> 2] = $$lcssa323;
     }
     $k$3$i = $k$063$i + 1 | 0;
    }
    if (($lnz$057$i | 0) < 9) if (($lnz$057$i | 0) <= ($420 | 0) & ($420 | 0) < 18) {
     if (($420 | 0) == 9) {
      $$0$i25 = +($sign$0 | 0) * +((HEAP32[$x$i >> 2] | 0) >>> 0);
      break;
     }
     if (($420 | 0) < 9) {
      $$0$i25 = +($sign$0 | 0) * +((HEAP32[$x$i >> 2] | 0) >>> 0) / +(HEAP32[9304 + (8 - $420 << 2) >> 2] | 0);
      break;
     }
     $488 = $bits$0$ph + 27 + (Math_imul($420, -3) | 0) | 0;
     $$pre$i17 = HEAP32[$x$i >> 2] | 0;
     if (($488 | 0) > 30 | ($$pre$i17 >>> $488 | 0) == 0) {
      $$0$i25 = +($sign$0 | 0) * +($$pre$i17 >>> 0) * +(HEAP32[9304 + ($420 + -10 << 2) >> 2] | 0);
      break;
     }
    }
    $500 = ($420 | 0) % 9 | 0;
    if (!$500) {
     $a$2$ph38$i = 0;
     $e2$0$ph$i = 0;
     $rp$2$ph36$i = $420;
     $z$1$ph37$i = $k$3$i;
    } else {
     $504 = ($420 | 0) > -1 ? $500 : $500 + 9 | 0;
     $507 = HEAP32[9304 + (8 - $504 << 2) >> 2] | 0;
     if (!$k$3$i) {
      $a$0$lcssa177$i = 0;
      $rp$0$lcssa178$i = $420;
      $z$0$i = 0;
     } else {
      $509 = 1e9 / ($507 | 0) | 0;
      $a$0101$i = 0;
      $carry$0103$i = 0;
      $k$4102$i = 0;
      $rp$0100$i = $420;
      while (1) {
       $510 = $x$i + ($k$4102$i << 2) | 0;
       $511 = HEAP32[$510 >> 2] | 0;
       $514 = (($511 >>> 0) / ($507 >>> 0) | 0) + $carry$0103$i | 0;
       HEAP32[$510 >> 2] = $514;
       $515 = Math_imul(($511 >>> 0) % ($507 >>> 0) | 0, $509) | 0;
       $or$cond16$i = ($k$4102$i | 0) == ($a$0101$i | 0) & ($514 | 0) == 0;
       $k$4102$i = $k$4102$i + 1 | 0;
       $rp$1$i18 = $or$cond16$i ? $rp$0100$i + -9 | 0 : $rp$0100$i;
       $a$1$i = $or$cond16$i ? $k$4102$i & 127 : $a$0101$i;
       if (($k$4102$i | 0) == ($k$3$i | 0)) {
        $$lcssa322 = $515;
        $a$1$i$lcssa = $a$1$i;
        $rp$1$i18$lcssa = $rp$1$i18;
        break;
       } else {
        $a$0101$i = $a$1$i;
        $carry$0103$i = $515;
        $rp$0100$i = $rp$1$i18;
       }
      }
      if (!$$lcssa322) {
       $a$0$lcssa177$i = $a$1$i$lcssa;
       $rp$0$lcssa178$i = $rp$1$i18$lcssa;
       $z$0$i = $k$3$i;
      } else {
       HEAP32[$x$i + ($k$3$i << 2) >> 2] = $$lcssa322;
       $a$0$lcssa177$i = $a$1$i$lcssa;
       $rp$0$lcssa178$i = $rp$1$i18$lcssa;
       $z$0$i = $k$3$i + 1 | 0;
      }
     }
     $a$2$ph38$i = $a$0$lcssa177$i;
     $e2$0$ph$i = 0;
     $rp$2$ph36$i = 9 - $504 + $rp$0$lcssa178$i | 0;
     $z$1$ph37$i = $z$0$i;
    }
    L296 : while (1) {
     $528 = $x$i + ($a$2$ph38$i << 2) | 0;
     if (($rp$2$ph36$i | 0) < 18) {
      $e2$0$us$i = $e2$0$ph$i;
      $z$1$us$i = $z$1$ph37$i;
      while (1) {
       $carry1$0$us$i = 0;
       $k$5$in$us$i = $z$1$us$i + 127 | 0;
       $z$2$us$i = $z$1$us$i;
       while (1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $531 = $x$i + ($k$5$us$i << 2) | 0;
        $533 = _bitshift64Shl(HEAP32[$531 >> 2] | 0, 0, 29) | 0;
        $535 = _i64Add($533 | 0, tempRet0 | 0, $carry1$0$us$i | 0, 0) | 0;
        $536 = tempRet0;
        if ($536 >>> 0 > 0 | ($536 | 0) == 0 & $535 >>> 0 > 1e9) {
         $542 = ___udivdi3($535 | 0, $536 | 0, 1e9, 0) | 0;
         $544 = ___uremdi3($535 | 0, $536 | 0, 1e9, 0) | 0;
         $$sink$off0$us$i = $544;
         $carry1$1$us$i = $542;
        } else {
         $$sink$off0$us$i = $535;
         $carry1$1$us$i = 0;
        }
        HEAP32[$531 >> 2] = $$sink$off0$us$i;
        $549 = ($k$5$us$i | 0) == ($a$2$ph38$i | 0);
        $z$3$us$i = ($k$5$us$i | 0) != ($z$2$us$i + 127 & 127 | 0) | $549 ? $z$2$us$i : ($$sink$off0$us$i | 0) == 0 ? $k$5$us$i : $z$2$us$i;
        if ($549) {
         $carry1$1$us$i$lcssa = $carry1$1$us$i;
         $z$3$us$i$lcssa = $z$3$us$i;
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;
         $k$5$in$us$i = $k$5$us$i + -1 | 0;
         $z$2$us$i = $z$3$us$i;
        }
       }
       $552 = $e2$0$us$i + -29 | 0;
       if (!$carry1$1$us$i$lcssa) {
        $e2$0$us$i = $552;
        $z$1$us$i = $z$3$us$i$lcssa;
       } else {
        $$lcssa50$i = $552;
        $carry1$1$lcssa$lcssa$i = $carry1$1$us$i$lcssa;
        $z$3$lcssa$lcssa$i = $z$3$us$i$lcssa;
        break;
       }
      }
     } else {
      if (($rp$2$ph36$i | 0) == 18) {
       $e2$0$us84$i = $e2$0$ph$i;
       $z$1$us85$i = $z$1$ph37$i;
      } else {
       $a$3$ph$i = $a$2$ph38$i;
       $e2$1$ph$i = $e2$0$ph$i;
       $rp$3$ph34$i = $rp$2$ph36$i;
       $z$5$ph$i = $z$1$ph37$i;
       break;
      }
      while (1) {
       if ((HEAP32[$528 >> 2] | 0) >>> 0 >= 9007199) {
        $a$3$ph$i = $a$2$ph38$i;
        $e2$1$ph$i = $e2$0$us84$i;
        $rp$3$ph34$i = 18;
        $z$5$ph$i = $z$1$us85$i;
        break L296;
       }
       $carry1$0$us89$i = 0;
       $k$5$in$us88$i = $z$1$us85$i + 127 | 0;
       $z$2$us87$i = $z$1$us85$i;
       while (1) {
        $k$5$us90$i = $k$5$in$us88$i & 127;
        $557 = $x$i + ($k$5$us90$i << 2) | 0;
        $559 = _bitshift64Shl(HEAP32[$557 >> 2] | 0, 0, 29) | 0;
        $561 = _i64Add($559 | 0, tempRet0 | 0, $carry1$0$us89$i | 0, 0) | 0;
        $562 = tempRet0;
        if ($562 >>> 0 > 0 | ($562 | 0) == 0 & $561 >>> 0 > 1e9) {
         $568 = ___udivdi3($561 | 0, $562 | 0, 1e9, 0) | 0;
         $570 = ___uremdi3($561 | 0, $562 | 0, 1e9, 0) | 0;
         $$sink$off0$us93$i = $570;
         $carry1$1$us94$i = $568;
        } else {
         $$sink$off0$us93$i = $561;
         $carry1$1$us94$i = 0;
        }
        HEAP32[$557 >> 2] = $$sink$off0$us93$i;
        $575 = ($k$5$us90$i | 0) == ($a$2$ph38$i | 0);
        $z$3$us97$i = ($k$5$us90$i | 0) != ($z$2$us87$i + 127 & 127 | 0) | $575 ? $z$2$us87$i : ($$sink$off0$us93$i | 0) == 0 ? $k$5$us90$i : $z$2$us87$i;
        if ($575) {
         $carry1$1$us94$i$lcssa = $carry1$1$us94$i;
         $z$3$us97$i$lcssa = $z$3$us97$i;
         break;
        } else {
         $carry1$0$us89$i = $carry1$1$us94$i;
         $k$5$in$us88$i = $k$5$us90$i + -1 | 0;
         $z$2$us87$i = $z$3$us97$i;
        }
       }
       $578 = $e2$0$us84$i + -29 | 0;
       if (!$carry1$1$us94$i$lcssa) {
        $e2$0$us84$i = $578;
        $z$1$us85$i = $z$3$us97$i$lcssa;
       } else {
        $$lcssa50$i = $578;
        $carry1$1$lcssa$lcssa$i = $carry1$1$us94$i$lcssa;
        $z$3$lcssa$lcssa$i = $z$3$us97$i$lcssa;
        break;
       }
      }
     }
     $582 = $a$2$ph38$i + 127 & 127;
     if (($582 | 0) == ($z$3$lcssa$lcssa$i | 0)) {
      $585 = $z$3$lcssa$lcssa$i + 127 & 127;
      $590 = $x$i + (($z$3$lcssa$lcssa$i + 126 & 127) << 2) | 0;
      HEAP32[$590 >> 2] = HEAP32[$590 >> 2] | HEAP32[$x$i + ($585 << 2) >> 2];
      $z$4$i = $585;
     } else $z$4$i = $z$3$lcssa$lcssa$i;
     HEAP32[$x$i + ($582 << 2) >> 2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph38$i = $582;
     $e2$0$ph$i = $$lcssa50$i;
     $rp$2$ph36$i = $rp$2$ph36$i + 9 | 0;
     $z$1$ph37$i = $z$4$i;
    }
    L321 : while (1) {
     $621 = $z$5$ph$i + 1 & 127;
     $627 = $x$i + (($z$5$ph$i + 127 & 127) << 2) | 0;
     $a$3$ph183$i = $a$3$ph$i;
     $e2$1$ph182$i = $e2$1$ph$i;
     $rp$3$ph$i = $rp$3$ph34$i;
     while (1) {
      $628 = ($rp$3$ph$i | 0) == 18;
      $$18$i = ($rp$3$ph$i | 0) > 27 ? 9 : 1;
      $$not$i = $628 ^ 1;
      $a$3$i = $a$3$ph183$i;
      $e2$1$i = $e2$1$ph182$i;
      while (1) {
       $594 = $a$3$i & 127;
       $595 = ($594 | 0) == ($z$5$ph$i | 0);
       do if ($595) label = 220; else {
        $597 = HEAP32[$x$i + ($594 << 2) >> 2] | 0;
        if ($597 >>> 0 < 9007199) {
         label = 220;
         break;
        }
        if ($597 >>> 0 > 9007199) break;
        $601 = $a$3$i + 1 & 127;
        if (($601 | 0) == ($z$5$ph$i | 0)) {
         label = 220;
         break;
        }
        $709 = HEAP32[$x$i + ($601 << 2) >> 2] | 0;
        if ($709 >>> 0 < 254740991) {
         label = 220;
         break;
        }
        if (!($709 >>> 0 > 254740991 | $$not$i)) {
         $635 = $594;
         $a$3$i301 = $a$3$i;
         $e2$1$i298 = $e2$1$i;
         $z$7$i = $z$5$ph$i;
         break L321;
        }
       } while (0);
       if ((label | 0) == 220) {
        label = 0;
        if ($628) {
         label = 221;
         break L321;
        }
       }
       $603 = $e2$1$i + $$18$i | 0;
       if (($a$3$i | 0) == ($z$5$ph$i | 0)) {
        $a$3$i = $z$5$ph$i;
        $e2$1$i = $603;
       } else {
        $$lcssa308 = $603;
        $a$3$i$lcssa300 = $a$3$i;
        break;
       }
      }
      $606 = (1 << $$18$i) + -1 | 0;
      $607 = 1e9 >>> $$18$i;
      $a$478$i = $a$3$i$lcssa300;
      $carry3$081$i = 0;
      $k$679$i = $a$3$i$lcssa300;
      $rp$477$i = $rp$3$ph$i;
      while (1) {
       $608 = $x$i + ($k$679$i << 2) | 0;
       $609 = HEAP32[$608 >> 2] | 0;
       $612 = ($609 >>> $$18$i) + $carry3$081$i | 0;
       HEAP32[$608 >> 2] = $612;
       $613 = Math_imul($609 & $606, $607) | 0;
       $or$cond19$i = ($k$679$i | 0) == ($a$478$i | 0) & ($612 | 0) == 0;
       $k$679$i = $k$679$i + 1 & 127;
       $rp$5$i = $or$cond19$i ? $rp$477$i + -9 | 0 : $rp$477$i;
       $a$5$i = $or$cond19$i ? $k$679$i : $a$478$i;
       if (($k$679$i | 0) == ($z$5$ph$i | 0)) {
        $$lcssa309 = $613;
        $a$5$i$lcssa = $a$5$i;
        $rp$5$i$lcssa = $rp$5$i;
        break;
       } else {
        $a$478$i = $a$5$i;
        $carry3$081$i = $613;
        $rp$477$i = $rp$5$i;
       }
      }
      if (!$$lcssa309) {
       $a$3$ph183$i = $a$5$i$lcssa;
       $e2$1$ph182$i = $$lcssa308;
       $rp$3$ph$i = $rp$5$i$lcssa;
       continue;
      }
      if (($621 | 0) != ($a$5$i$lcssa | 0)) {
       $$lcssa308$lcssa = $$lcssa308;
       $$lcssa309$lcssa = $$lcssa309;
       $a$5$i$lcssa$lcssa = $a$5$i$lcssa;
       $rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
       break;
      }
      HEAP32[$627 >> 2] = HEAP32[$627 >> 2] | 1;
      $a$3$ph183$i = $a$5$i$lcssa;
      $e2$1$ph182$i = $$lcssa308;
      $rp$3$ph$i = $rp$5$i$lcssa;
     }
     HEAP32[$x$i + ($z$5$ph$i << 2) >> 2] = $$lcssa309$lcssa;
     $a$3$ph$i = $a$5$i$lcssa$lcssa;
     $e2$1$ph$i = $$lcssa308$lcssa;
     $rp$3$ph34$i = $rp$5$i$lcssa$lcssa;
     $z$5$ph$i = $621;
    }
    if ((label | 0) == 221) if ($595) {
     HEAP32[$x$i + ($621 + -1 << 2) >> 2] = 0;
     $635 = $z$5$ph$i;
     $a$3$i301 = $a$3$i;
     $e2$1$i298 = $e2$1$i;
     $z$7$i = $621;
    } else {
     $635 = $594;
     $a$3$i301 = $a$3$i;
     $e2$1$i298 = $e2$1$i;
     $z$7$i = $z$5$ph$i;
    }
    $637 = +((HEAP32[$x$i + ($635 << 2) >> 2] | 0) >>> 0);
    $639 = $a$3$i301 + 1 & 127;
    if (($639 | 0) == ($z$7$i | 0)) {
     $698 = $a$3$i301 + 2 & 127;
     HEAP32[$x$i + ($698 + -1 << 2) >> 2] = 0;
     $z$7$1$i = $698;
    } else $z$7$1$i = $z$7$i;
    $661 = +($sign$0 | 0);
    $643 = $661 * ($637 * 1.0e9 + +((HEAP32[$x$i + ($639 << 2) >> 2] | 0) >>> 0));
    $681 = $e2$1$i298 + 53 | 0;
    $687 = $681 - $emin$0$ph | 0;
    $688 = ($687 | 0) < ($bits$0$ph | 0);
    $denormal$0$i = $688 & 1;
    $$010$i = $688 ? (($687 | 0) < 0 ? 0 : $687) : $bits$0$ph;
    if (($$010$i | 0) < 53) {
     $644 = +_copysignl(+_scalbn(1.0, 105 - $$010$i | 0), $643);
     $647 = +_fmodl($643, +_scalbn(1.0, 53 - $$010$i | 0));
     $bias$0$i23 = $644;
     $frac$0$i = $647;
     $y$1$i22 = $644 + ($643 - $647);
    } else {
     $bias$0$i23 = 0.0;
     $frac$0$i = 0.0;
     $y$1$i22 = $643;
    }
    $651 = $a$3$i301 + 2 & 127;
    do if (($651 | 0) == ($z$7$1$i | 0)) $frac$2$i = $frac$0$i; else {
     $654 = HEAP32[$x$i + ($651 << 2) >> 2] | 0;
     do if ($654 >>> 0 < 5e8) {
      if (!$654) if (($a$3$i301 + 3 & 127 | 0) == ($z$7$1$i | 0)) {
       $frac$1$i = $frac$0$i;
       break;
      }
      $frac$1$i = $661 * .25 + $frac$0$i;
     } else {
      if ($654 >>> 0 > 5e8) {
       $frac$1$i = $661 * .75 + $frac$0$i;
       break;
      }
      if (($a$3$i301 + 3 & 127 | 0) == ($z$7$1$i | 0)) {
       $frac$1$i = $661 * .5 + $frac$0$i;
       break;
      } else {
       $frac$1$i = $661 * .75 + $frac$0$i;
       break;
      }
     } while (0);
     if ((53 - $$010$i | 0) <= 1) {
      $frac$2$i = $frac$1$i;
      break;
     }
     if (+_fmodl($frac$1$i, 1.0) != 0.0) {
      $frac$2$i = $frac$1$i;
      break;
     }
     $frac$2$i = $frac$1$i + 1.0;
    } while (0);
    $679 = $y$1$i22 + $frac$2$i - $bias$0$i23;
    do if (($681 & 2147483647 | 0) > (-2 - $sum$i | 0)) {
     if (!(+Math_abs(+$679) >= 9007199254740992.0)) {
      $denormal$2$i = $denormal$0$i;
      $e2$2$i = $e2$1$i298;
      $y$2$i24 = $679;
     } else {
      $denormal$2$i = $688 & ($$010$i | 0) == ($687 | 0) ? 0 : $denormal$0$i;
      $e2$2$i = $e2$1$i298 + 1 | 0;
      $y$2$i24 = $679 * .5;
     }
     if (($e2$2$i + 50 | 0) <= ($324 | 0)) if (!($frac$2$i != 0.0 & ($denormal$2$i | 0) != 0)) {
      $e2$3$i = $e2$2$i;
      $y$3$i = $y$2$i24;
      break;
     }
     HEAP32[(___errno_location() | 0) >> 2] = 34;
     $e2$3$i = $e2$2$i;
     $y$3$i = $y$2$i24;
    } else {
     $e2$3$i = $e2$1$i298;
     $y$3$i = $679;
    } while (0);
    $$0$i25 = +_scalbnl($y$3$i, $e2$3$i);
   } while (0);
   $$0 = $$0$i25;
   STACKTOP = sp;
   return +$$0;
  } while (0);
  if (HEAP32[$1 >> 2] | 0) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  ___shlim($f, 0);
  $$0 = 0.0;
  STACKTOP = sp;
  return +$$0;
 } while (0);
 if ((label | 0) == 23) {
  $42 = (HEAP32[$1 >> 2] | 0) == 0;
  if (!$42) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
  if (!($i$0$lcssa >>> 0 < 4 | ($pok | 0) == 0 | $42)) {
   $46 = HEAP32[$0 >> 2] | 0;
   $i$1 = $i$0$lcssa;
   while (1) {
    $45 = $46 + -1 | 0;
    $i$1 = $i$1 + -1 | 0;
    if ($i$1 >>> 0 <= 3) {
     $$lcssa = $45;
     break;
    } else $46 = $45;
   }
   HEAP32[$0 >> 2] = $$lcssa;
  }
 }
 $$0 = +($sign$0 | 0) * inf;
 STACKTOP = sp;
 return +$$0;
}

function _zcir($agg$result, $u, $v) {
 $agg$result = $agg$result | 0;
 $u = $u | 0;
 $v = $v | 0;
 var $$byval_copy1 = 0, $0 = 0, $1 = 0, $103 = 0.0, $105 = 0.0, $106 = 0.0, $117 = 0.0, $119 = 0.0, $120 = 0.0, $121 = 0.0, $13 = 0.0, $137 = 0.0, $140 = 0.0, $143 = 0.0, $146 = 0.0, $147 = 0.0, $15 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $161 = 0.0, $17 = 0.0, $175 = 0, $176 = 0, $177 = 0.0, $18 = 0.0, $180 = 0.0, $184 = 0.0, $186 = 0, $188 = 0.0, $19 = 0.0, $190 = 0.0, $191 = 0.0, $2 = 0, $20 = 0.0, $202 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $21 = 0.0, $218 = 0.0, $219 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $236 = 0.0, $239 = 0.0, $240 = 0, $243 = 0.0, $244 = 0.0, $253 = 0.0, $255 = 0.0, $264 = 0.0, $265 = 0.0, $278 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $295 = 0.0, $296 = 0.0, $3 = 0.0, $309 = 0.0, $313 = 0.0, $319 = 0.0, $321 = 0.0, $323 = 0.0, $329 = 0.0, $330 = 0.0, $34 = 0.0, $343 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $359 = 0.0, $360 = 0.0, $37 = 0.0, $373 = 0.0, $376 = 0.0, $377 = 0.0, $38 = 0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $391 = 0.0, $4 = 0.0, $405 = 0, $406 = 0, $407 = 0.0, $41 = 0.0, $410 = 0.0, $414 = 0.0, $416 = 0, $418 = 0.0, $42 = 0.0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $438 = 0.0, $441 = 0.0, $442 = 0, $445 = 0.0, $446 = 0.0, $455 = 0.0, $457 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $470 = 0.0, $471 = 0.0, $484 = 0.0, $487 = 0.0, $488 = 0, $491 = 0.0, $492 = 0.0, $501 = 0.0, $503 = 0.0, $51 = 0.0, $517 = 0.0, $519 = 0.0, $522 = 0.0, $525 = 0.0, $526 = 0, $528 = 0.0, $53 = 0.0, $533 = 0.0, $538 = 0.0, $543 = 0.0, $545 = 0.0, $546 = 0.0, $547 = 0.0, $573 = 0.0, $576 = 0.0, $577 = 0, $579 = 0.0, $585 = 0.0, $588 = 0.0, $590 = 0.0, $591 = 0.0, $592 = 0.0, $604 = 0.0, $606 = 0.0, $607 = 0.0, $608 = 0.0, $619 = 0.0, $621 = 0.0, $623 = 0.0, $64 = 0.0, $67 = 0.0, $69 = 0.0, $70 = 0.0, $81 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $99 = 0.0, $a$0$i$i = 0.0, $a$0$i$i125 = 0.0, $a$0$i$i87 = 0.0, $b$0$i$i = 0.0, $b$0$i$i124 = 0.0, $b$0$i$i86 = 0.0, $c$0$i$i = 0.0, $c$0$i$i84 = 0.0, $d$0$i$i = 0.0, $d$0$i$i85 = 0.0, $p$0$i = 0.0, $p$0$i$i = 0.0, $p$0$i$i$i = 0.0, $p$0$i$i108 = 0.0, $p$0$i$i114 = 0.0, $p$0$i$i99 = 0.0, $v$0$val = 0.0, $v$010$val = 0.0, $v$012$val = 0.0, $v$014$val = 0.0, $v$018$val = 0.0, $v$022$val = 0.0, $v$024$val = 0.0, $v$026$val = 0.0, $v$028$val = 0.0, $v$030$val = 0.0, $v$032$val = 0.0, $v$034$val = 0.0, $v$04$val = 0.0, $v$08$val = 0.0, $v$1$val = 0.0, $v$111$val = 0.0, $v$113$val = 0.0, $v$115$val = 0.0, $v$119$val = 0.0, $v$123$val = 0.0, $v$125$val = 0.0, $v$127$val = 0.0, $v$129$val = 0.0, $v$131$val = 0.0, $v$133$val = 0.0, $v$135$val = 0.0, $v$15$val = 0.0, $v$19$val = 0.0, $z$sroa$0$0$i = 0.0, $z$sroa$4$0$i = 0.0, $zi$0$i = 0.0, $zi$0$i$i = 0.0, $zi$0$i$i$i = 0.0, $zi$0$i$i$i77 = 0.0, $zi$0$i$i102 = 0.0, $zi$0$i$i111 = 0.0, $zi$0$i$i42 = 0.0, $zi$0$i$i47 = 0.0, $zi$0$i$i58 = 0.0, $zi$0$i$i6$i = 0.0, $zi$0$i$i63 = 0.0, $zi$0$i$i72 = 0.0, $zi$0$i$i93 = 0.0, $zi$0$i121 = 0.0, $zi$0$i134 = 0.0, $zi$0$i39 = 0.0, $zi$0$i4$i = 0.0, $zi$0$i5$i = 0.0, $zi$0$i5$i$i = 0.0, $zi$0$i5$i$i82 = 0.0, $zi$0$i5$i107 = 0.0, $zi$0$i5$i52 = 0.0, $zi$0$i5$i56 = 0.0, $zi$0$i5$i68 = 0.0, $zi$0$i5$i98 = 0.0, $zr$0$i = 0.0, $zr$0$i$i = 0.0, $zr$0$i$i$i = 0.0, $zr$0$i$i$i76 = 0.0, $zr$0$i$i103 = 0.0, $zr$0$i$i112 = 0.0, $zr$0$i$i43 = 0.0, $zr$0$i$i46 = 0.0, $zr$0$i$i5$i = 0.0, $zr$0$i$i59 = 0.0, $zr$0$i$i62 = 0.0, $zr$0$i$i71 = 0.0, $zr$0$i$i94 = 0.0, $zr$0$i120 = 0.0, $zr$0$i133 = 0.0, $zr$0$i3$i = 0.0, $zr$0$i4$i = 0.0, $zr$0$i4$i$i = 0.0, $zr$0$i4$i$i81 = 0.0, $zr$0$i4$i106 = 0.0, $zr$0$i4$i51 = 0.0, $zr$0$i4$i55 = 0.0, $zr$0$i4$i67 = 0.0, $zr$0$i4$i97 = 0.0, $zr$0$i40 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy1 = sp + 48 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 16 | 0;
 $2 = sp;
 $3 = +HEAPF64[$u >> 3];
 $4 = +HEAPF64[305];
 if ($3 <= 12.0 & ($3 >= -12.0 ? +HEAPF64[$u + 8 >> 3] == 0.0 : 0)) if ($3 == +Math_floor(+$3)) do switch (~~$3 | 0) {
 case -3:
  {
   $v$018$val = +HEAPF64[$v >> 3];
   $v$119$val = +HEAPF64[$v + 8 >> 3];
   $190 = +HEAPF64[974];
   $191 = +HEAPF64[975];
   if ($190 != 0.0 | $191 != 0.0) if ($v$018$val != 0.0 | $v$119$val != 0.0) {
    $zi$0$i$i47 = $v$119$val * $190 + $v$018$val * $191;
    $zr$0$i$i46 = $v$018$val * $190 - $v$119$val * $191;
   } else {
    $zi$0$i$i47 = 0.0;
    $zr$0$i$i46 = 0.0;
   } else {
    $zi$0$i$i47 = 0.0;
    $zr$0$i$i46 = 0.0;
   }
   _zatanh($$byval_copy1, $zr$0$i$i46, $zi$0$i$i47);
   $202 = +HEAPF64[$$byval_copy1 >> 3];
   $204 = +HEAPF64[$$byval_copy1 + 8 >> 3];
   $205 = +HEAPF64[976];
   $206 = +HEAPF64[977];
   if ($205 != 0.0 | $206 != 0.0) if ($202 != 0.0 | $204 != 0.0) {
    $zi$0$i5$i52 = $204 * $205 + $202 * $206;
    $zr$0$i4$i51 = $202 * $205 - $204 * $206;
   } else {
    $zi$0$i5$i52 = 0.0;
    $zr$0$i4$i51 = 0.0;
   } else {
    $zi$0$i5$i52 = 0.0;
    $zr$0$i4$i51 = 0.0;
   }
   HEAPF64[$agg$result >> 3] = $zr$0$i4$i51;
   HEAPF64[$agg$result + 8 >> 3] = $zi$0$i5$i52;
   STACKTOP = sp;
   return;
  }
 case 0:
  {
   $13 = +HEAPF64[$v >> 3];
   $15 = +HEAPF64[$v + 8 >> 3];
   $16 = +HEAPF64[972];
   $17 = +HEAPF64[973];
   $18 = $13 + $16;
   $19 = $15 + $17;
   $20 = $16 - $13;
   $21 = $17 - $15;
   if ($18 != 0.0 | $19 != 0.0) if ($20 != 0.0 | $21 != 0.0) {
    $zi$0$i = $20 * $19 + $18 * $21;
    $zr$0$i = $18 * $20 - $19 * $21;
   } else {
    $zi$0$i = 0.0;
    $zr$0$i = 0.0;
   } else {
    $zi$0$i = 0.0;
    $zr$0$i = 0.0;
   }
   $34 = $zr$0$i >= 0.0 ? $zr$0$i : -$zr$0$i;
   $37 = $zi$0$i >= 0.0 ? $zi$0$i : -$zi$0$i;
   $38 = $34 < $37;
   $p$0$i = $38 ? $37 : $34;
   if ($p$0$i != 0.0) {
    $41 = ($38 ? $34 : $37) * .5 / $p$0$i;
    $42 = $zr$0$i * .5;
    $51 = +Math_sqrt(+(($42 >= 0.0 ? $42 : -$42) + $p$0$i * +Math_sqrt(+($41 * $41 + .25))));
    $53 = $zi$0$i / ($51 + $51);
    if ($zr$0$i < 0.0) {
     $zi$0$i39 = $zi$0$i < 0.0 ? -$51 : $51;
     $zr$0$i40 = $53 >= 0.0 ? $53 : -$53;
    } else {
     $zi$0$i39 = $53;
     $zr$0$i40 = $51;
    }
   } else {
    $zi$0$i39 = 0.0;
    $zr$0$i40 = 0.0;
   }
   HEAPF64[$agg$result >> 3] = $zr$0$i40;
   HEAPF64[$agg$result + 8 >> 3] = $zi$0$i39;
   STACKTOP = sp;
   return;
  }
 case 3:
  {
   $v$014$val = +HEAPF64[$v >> 3];
   $v$115$val = +HEAPF64[$v + 8 >> 3];
   $137 = +_xsin($v$014$val) * +_xcosh($v$115$val);
   $140 = +_xcos($v$014$val) * +_xsinh($v$115$val);
   $143 = +_xcos($v$014$val) * +_xcosh($v$115$val);
   $146 = +_xsin($v$014$val) * +_xsinh($v$115$val);
   $147 = -$146;
   do if ($143 != 0.0 | $146 != -0.0) {
    if (($143 >= 0.0 ? $143 : -$143) < ($146 <= -0.0 ? $147 : $146)) {
     $a$0$i$i = -$140;
     $b$0$i$i = $137;
     $c$0$i$i = $146;
     $d$0$i$i = $143;
    } else {
     $a$0$i$i = $137;
     $b$0$i$i = $140;
     $c$0$i$i = $143;
     $d$0$i$i = $147;
    }
    $157 = $a$0$i$i / $c$0$i$i;
    $158 = $b$0$i$i / $c$0$i$i;
    $159 = $d$0$i$i / $c$0$i$i;
    $161 = $159 * $159 + 1.0;
    $zi$0$i$i42 = ($158 - $157 * $159) / $161;
    $zr$0$i$i43 = ($157 + $158 * $159) / $161;
   } else if ($137 != 0.0 | $140 != 0.0) {
    $175 = $140 < 0.0 | ($137 < 0.0 & 1) << 1;
    if (($175 | 0) == 3) {
     $186 = $137 < $140;
     $188 = -+HEAPF64[317];
     $zi$0$i$i42 = $186 ? 0.0 : $188;
     $zr$0$i$i43 = $186 ? $188 : 0.0;
     break;
    } else if (($175 | 0) == 2) {
     $184 = +HEAPF64[317];
     if (!($137 < -$140)) {
      $zi$0$i$i42 = $184;
      $zr$0$i$i43 = 0.0;
      break;
     }
     $zi$0$i$i42 = 0.0;
     $zr$0$i$i43 = -$184;
     break;
    } else if (!$175) {
     $176 = $137 > $140;
     $177 = +HEAPF64[317];
     $zi$0$i$i42 = $176 ? 0.0 : $177;
     $zr$0$i$i43 = $176 ? $177 : 0.0;
     break;
    } else if (($175 | 0) == 1) {
     $180 = +HEAPF64[317];
     if ($137 > -$140) {
      $zi$0$i$i42 = 0.0;
      $zr$0$i$i43 = $180;
      break;
     }
     $zi$0$i$i42 = -$180;
     $zr$0$i$i43 = 0.0;
     break;
    } else {
     $zi$0$i$i42 = 0.0;
     $zr$0$i$i43 = 0.0;
     break;
    }
   } else {
    $zi$0$i$i42 = 0.0;
    $zr$0$i$i43 = 0.0;
   } while (0);
   HEAPF64[$agg$result >> 3] = $zr$0$i$i43;
   HEAPF64[$agg$result + 8 >> 3] = $zi$0$i$i42;
   STACKTOP = sp;
   return;
  }
 case -1:
  {
   $v$08$val = +HEAPF64[$v >> 3];
   $v$19$val = +HEAPF64[$v + 8 >> 3];
   $69 = +HEAPF64[974];
   $70 = +HEAPF64[975];
   if ($69 != 0.0 | $70 != 0.0) if ($v$08$val != 0.0 | $v$19$val != 0.0) {
    $zi$0$i$i = $v$19$val * $69 + $v$08$val * $70;
    $zr$0$i$i = $v$08$val * $69 - $v$19$val * $70;
   } else {
    $zi$0$i$i = 0.0;
    $zr$0$i$i = 0.0;
   } else {
    $zi$0$i$i = 0.0;
    $zr$0$i$i = 0.0;
   }
   _zasinh($$byval_copy1, $zr$0$i$i, $zi$0$i$i);
   $81 = +HEAPF64[$$byval_copy1 >> 3];
   $83 = +HEAPF64[$$byval_copy1 + 8 >> 3];
   $84 = +HEAPF64[976];
   $85 = +HEAPF64[977];
   if ($84 != 0.0 | $85 != 0.0) if ($81 != 0.0 | $83 != 0.0) {
    $zi$0$i5$i = $83 * $84 + $81 * $85;
    $zr$0$i4$i = $81 * $84 - $83 * $85;
   } else {
    $zi$0$i5$i = 0.0;
    $zr$0$i4$i = 0.0;
   } else {
    $zi$0$i5$i = 0.0;
    $zr$0$i4$i = 0.0;
   }
   HEAPF64[$agg$result >> 3] = $zr$0$i4$i;
   HEAPF64[$agg$result + 8 >> 3] = $zi$0$i5$i;
   STACKTOP = sp;
   return;
  }
 case 2:
  {
   $v$010$val = +HEAPF64[$v >> 3];
   $v$111$val = +HEAPF64[$v + 8 >> 3];
   $99 = +_xcos($v$010$val) * +_xcosh($v$111$val);
   $103 = -(+_xsin($v$010$val) * +_xsinh($v$111$val));
   HEAPF64[$agg$result >> 3] = $99;
   HEAPF64[$agg$result + 8 >> 3] = $103;
   STACKTOP = sp;
   return;
  }
 case -2:
  {
   $v$012$val = +HEAPF64[$v >> 3];
   $v$113$val = +HEAPF64[$v + 8 >> 3];
   $105 = +HEAPF64[974];
   $106 = +HEAPF64[975];
   if ($105 != 0.0 | $106 != 0.0) if ($v$012$val != 0.0 | $v$113$val != 0.0) {
    $zi$0$i$i$i = $v$113$val * $105 + $v$012$val * $106;
    $zr$0$i$i$i = $v$012$val * $105 - $v$113$val * $106;
   } else {
    $zi$0$i$i$i = 0.0;
    $zr$0$i$i$i = 0.0;
   } else {
    $zi$0$i$i$i = 0.0;
    $zr$0$i$i$i = 0.0;
   }
   _zasinh($$byval_copy1, $zr$0$i$i$i, $zi$0$i$i$i);
   $117 = +HEAPF64[$$byval_copy1 >> 3];
   $119 = +HEAPF64[$$byval_copy1 + 8 >> 3];
   $120 = +HEAPF64[976];
   $121 = +HEAPF64[977];
   if ($120 != 0.0 | $121 != 0.0) if ($117 != 0.0 | $119 != 0.0) {
    $zi$0$i5$i$i = $119 * $120 + $117 * $121;
    $zr$0$i4$i$i = $117 * $120 - $119 * $121;
   } else {
    $zi$0$i5$i$i = 0.0;
    $zr$0$i4$i$i = 0.0;
   } else {
    $zi$0$i5$i$i = 0.0;
    $zr$0$i4$i$i = 0.0;
   }
   HEAPF64[$agg$result >> 3] = 1.5707963267948966 - $zr$0$i4$i$i;
   HEAPF64[$agg$result + 8 >> 3] = 0.0 - $zi$0$i5$i$i;
   STACKTOP = sp;
   return;
  }
 case 4:
  {
   $v$04$val = +HEAPF64[$v >> 3];
   $v$15$val = +HEAPF64[$v + 8 >> 3];
   $218 = +HEAPF64[974];
   $219 = +HEAPF64[975];
   $220 = $v$04$val + $218;
   $221 = $v$15$val + $219;
   $222 = $v$04$val - $218;
   $223 = $v$15$val - $219;
   if ($220 != 0.0 | $221 != 0.0) if ($222 != 0.0 | $223 != 0.0) {
    $zi$0$i5$i56 = $222 * $221 + $220 * $223;
    $zr$0$i4$i55 = $220 * $222 - $221 * $223;
   } else {
    $zi$0$i5$i56 = 0.0;
    $zr$0$i4$i55 = 0.0;
   } else {
    $zi$0$i5$i56 = 0.0;
    $zr$0$i4$i55 = 0.0;
   }
   $236 = $zr$0$i4$i55 >= 0.0 ? $zr$0$i4$i55 : -$zr$0$i4$i55;
   $239 = $zi$0$i5$i56 >= 0.0 ? $zi$0$i5$i56 : -$zi$0$i5$i56;
   $240 = $236 < $239;
   $p$0$i$i = $240 ? $239 : $236;
   if ($p$0$i$i != 0.0) {
    $243 = ($240 ? $236 : $239) * .5 / $p$0$i$i;
    $244 = $zr$0$i4$i55 * .5;
    $253 = +Math_sqrt(+(($244 >= 0.0 ? $244 : -$244) + $p$0$i$i * +Math_sqrt(+($243 * $243 + .25))));
    $255 = $zi$0$i5$i56 / ($253 + $253);
    if ($zr$0$i4$i55 < 0.0) {
     $zi$0$i$i58 = $zi$0$i5$i56 < 0.0 ? -$253 : $253;
     $zr$0$i$i59 = $255 >= 0.0 ? $255 : -$255;
    } else {
     $zi$0$i$i58 = $255;
     $zr$0$i$i59 = $253;
    }
   } else {
    $zi$0$i$i58 = 0.0;
    $zr$0$i$i59 = 0.0;
   }
   HEAPF64[$agg$result >> 3] = $zr$0$i$i59;
   HEAPF64[$agg$result + 8 >> 3] = $zi$0$i$i58;
   STACKTOP = sp;
   return;
  }
 case 1:
  {
   $v$0$val = +HEAPF64[$v >> 3];
   $v$1$val = +HEAPF64[$v + 8 >> 3];
   $64 = +_xsin($v$0$val) * +_xcosh($v$1$val);
   $67 = +_xcos($v$0$val) * +_xsinh($v$1$val);
   HEAPF64[$agg$result >> 3] = $64;
   HEAPF64[$agg$result + 8 >> 3] = $67;
   STACKTOP = sp;
   return;
  }
 case -4:
  {
   _zm4($agg$result, +HEAPF64[$v >> 3], +HEAPF64[$v + 8 >> 3]);
   STACKTOP = sp;
   return;
  }
 case 5:
  {
   $v$022$val = +HEAPF64[$v >> 3];
   $v$123$val = +HEAPF64[$v + 8 >> 3];
   $264 = +HEAPF64[974];
   $265 = +HEAPF64[975];
   if ($264 != 0.0 | $265 != 0.0) if ($v$022$val != 0.0 | $v$123$val != 0.0) {
    $zi$0$i$i63 = $v$123$val * $264 + $v$022$val * $265;
    $zr$0$i$i62 = $v$022$val * $264 - $v$123$val * $265;
   } else {
    $zi$0$i$i63 = 0.0;
    $zr$0$i$i62 = 0.0;
   } else {
    $zi$0$i$i63 = 0.0;
    $zr$0$i$i62 = 0.0;
   }
   $278 = +_xsin($zr$0$i$i62) * +_xcosh($zi$0$i$i63);
   $281 = +_xcos($zr$0$i$i62) * +_xsinh($zi$0$i$i63);
   $282 = +HEAPF64[976];
   $283 = +HEAPF64[977];
   if ($282 != 0.0 | $283 != 0.0) if ($278 != 0.0 | $281 != 0.0) {
    $zi$0$i5$i68 = $282 * $281 + $278 * $283;
    $zr$0$i4$i67 = $278 * $282 - $281 * $283;
   } else {
    $zi$0$i5$i68 = 0.0;
    $zr$0$i4$i67 = 0.0;
   } else {
    $zi$0$i5$i68 = 0.0;
    $zr$0$i4$i67 = 0.0;
   }
   HEAPF64[$agg$result >> 3] = $zr$0$i4$i67;
   HEAPF64[$agg$result + 8 >> 3] = $zi$0$i5$i68;
   STACKTOP = sp;
   return;
  }
 case 7:
  {
   $v$028$val = +HEAPF64[$v >> 3];
   $v$129$val = +HEAPF64[$v + 8 >> 3];
   $329 = +HEAPF64[974];
   $330 = +HEAPF64[975];
   if ($329 != 0.0 | $330 != 0.0) if ($v$028$val != 0.0 | $v$129$val != 0.0) {
    $zi$0$i$i$i77 = $v$129$val * $329 + $v$028$val * $330;
    $zr$0$i$i$i76 = $v$028$val * $329 - $v$129$val * $330;
   } else {
    $zi$0$i$i$i77 = 0.0;
    $zr$0$i$i$i76 = 0.0;
   } else {
    $zi$0$i$i$i77 = 0.0;
    $zr$0$i$i$i76 = 0.0;
   }
   $343 = +_xsin($zr$0$i$i$i76) * +_xcosh($zi$0$i$i$i77);
   $346 = +_xcos($zr$0$i$i$i76) * +_xsinh($zi$0$i$i$i77);
   $347 = +HEAPF64[976];
   $348 = +HEAPF64[977];
   if ($347 != 0.0 | $348 != 0.0) if ($343 != 0.0 | $346 != 0.0) {
    $zi$0$i5$i$i82 = $347 * $346 + $343 * $348;
    $zr$0$i4$i$i81 = $343 * $347 - $346 * $348;
   } else {
    $zi$0$i5$i$i82 = 0.0;
    $zr$0$i4$i$i81 = 0.0;
   } else {
    $zi$0$i5$i$i82 = 0.0;
    $zr$0$i4$i$i81 = 0.0;
   }
   $359 = +HEAPF64[974];
   $360 = +HEAPF64[975];
   if ($359 != 0.0 | $360 != 0.0) if ($v$028$val != 0.0 | $v$129$val != 0.0) {
    $zi$0$i$i6$i = $v$129$val * $359 + $v$028$val * $360;
    $zr$0$i$i5$i = $v$028$val * $359 - $v$129$val * $360;
   } else {
    $zi$0$i$i6$i = 0.0;
    $zr$0$i$i5$i = 0.0;
   } else {
    $zi$0$i$i6$i = 0.0;
    $zr$0$i$i5$i = 0.0;
   }
   $373 = +_xcos($zr$0$i$i5$i) * +_xcosh($zi$0$i$i6$i);
   $376 = +_xsin($zr$0$i$i5$i) * +_xsinh($zi$0$i$i6$i);
   $377 = -$376;
   do if ($373 != 0.0 | $376 != -0.0) {
    if (($373 >= 0.0 ? $373 : -$373) < ($376 <= -0.0 ? $377 : $376)) {
     $a$0$i$i87 = -$zi$0$i5$i$i82;
     $b$0$i$i86 = $zr$0$i4$i$i81;
     $c$0$i$i84 = $376;
     $d$0$i$i85 = $373;
    } else {
     $a$0$i$i87 = $zr$0$i4$i$i81;
     $b$0$i$i86 = $zi$0$i5$i$i82;
     $c$0$i$i84 = $373;
     $d$0$i$i85 = $377;
    }
    $387 = $a$0$i$i87 / $c$0$i$i84;
    $388 = $b$0$i$i86 / $c$0$i$i84;
    $389 = $d$0$i$i85 / $c$0$i$i84;
    $391 = $389 * $389 + 1.0;
    $zi$0$i$i93 = ($388 - $387 * $389) / $391;
    $zr$0$i$i94 = ($387 + $388 * $389) / $391;
   } else if ($zr$0$i4$i$i81 != 0.0 | $zi$0$i5$i$i82 != 0.0) {
    $405 = ($zr$0$i4$i$i81 < 0.0 & 1) << 1 | $zi$0$i5$i$i82 < 0.0;
    if (($405 | 0) == 2) {
     $414 = +HEAPF64[317];
     if (!($zr$0$i4$i$i81 < -$zi$0$i5$i$i82)) {
      $zi$0$i$i93 = $414;
      $zr$0$i$i94 = 0.0;
      break;
     }
     $zi$0$i$i93 = 0.0;
     $zr$0$i$i94 = -$414;
     break;
    } else if (($405 | 0) == 3) {
     $416 = $zr$0$i4$i$i81 < $zi$0$i5$i$i82;
     $418 = -+HEAPF64[317];
     $zi$0$i$i93 = $416 ? 0.0 : $418;
     $zr$0$i$i94 = $416 ? $418 : 0.0;
     break;
    } else if (!$405) {
     $406 = $zr$0$i4$i$i81 > $zi$0$i5$i$i82;
     $407 = +HEAPF64[317];
     $zi$0$i$i93 = $406 ? 0.0 : $407;
     $zr$0$i$i94 = $406 ? $407 : 0.0;
     break;
    } else if (($405 | 0) == 1) {
     $410 = +HEAPF64[317];
     if ($zr$0$i4$i$i81 > -$zi$0$i5$i$i82) {
      $zi$0$i$i93 = 0.0;
      $zr$0$i$i94 = $410;
      break;
     }
     $zi$0$i$i93 = -$410;
     $zr$0$i$i94 = 0.0;
     break;
    } else {
     $zi$0$i$i93 = 0.0;
     $zr$0$i$i94 = 0.0;
     break;
    }
   } else {
    $zi$0$i$i93 = 0.0;
    $zr$0$i$i94 = 0.0;
   } while (0);
   HEAPF64[$agg$result >> 3] = $zr$0$i$i94;
   HEAPF64[$agg$result + 8 >> 3] = $zi$0$i$i93;
   STACKTOP = sp;
   return;
  }
 case -5:
  {
   _zasinh($agg$result, +HEAPF64[$v >> 3], +HEAPF64[$v + 8 >> 3]);
   STACKTOP = sp;
   return;
  }
 case 6:
  {
   $v$024$val = +HEAPF64[$v >> 3];
   $v$125$val = +HEAPF64[$v + 8 >> 3];
   $295 = +HEAPF64[974];
   $296 = +HEAPF64[975];
   if ($295 != 0.0 | $296 != 0.0) if ($v$024$val != 0.0 | $v$125$val != 0.0) {
    $zi$0$i$i72 = $v$125$val * $295 + $v$024$val * $296;
    $zr$0$i$i71 = $v$024$val * $295 - $v$125$val * $296;
   } else {
    $zi$0$i$i72 = 0.0;
    $zr$0$i$i71 = 0.0;
   } else {
    $zi$0$i$i72 = 0.0;
    $zr$0$i$i71 = 0.0;
   }
   $309 = +_xcos($zr$0$i$i71) * +_xcosh($zi$0$i$i72);
   $313 = -(+_xsin($zr$0$i$i71) * +_xsinh($zi$0$i$i72));
   HEAPF64[$agg$result >> 3] = $309;
   HEAPF64[$agg$result + 8 >> 3] = $313;
   STACKTOP = sp;
   return;
  }
 case -6:
  {
   $v$026$val = +HEAPF64[$v >> 3];
   $v$127$val = +HEAPF64[$v + 8 >> 3];
   _zm4($1, $v$026$val, $v$127$val);
   $319 = $v$127$val + +HEAPF64[$1 + 8 >> 3];
   HEAPF64[$0 >> 3] = $v$026$val + +HEAPF64[$1 >> 3];
   HEAPF64[$0 + 8 >> 3] = $319;
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
   HEAP32[$$byval_copy1 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
   HEAP32[$$byval_copy1 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
   _zlog($2, $$byval_copy1);
   $321 = +HEAPF64[$2 >> 3];
   $323 = +HEAPF64[$2 + 8 >> 3];
   if (!($321 <= 0.0)) {
    $z$sroa$0$0$i = $321;
    $z$sroa$4$0$i = $323;
   } else {
    $z$sroa$0$0$i = 0.0;
    $z$sroa$4$0$i = $323 >= 0.0 ? $323 : -$323;
   }
   HEAPF64[$agg$result >> 3] = $z$sroa$0$0$i;
   HEAPF64[$agg$result + 8 >> 3] = $z$sroa$4$0$i;
   STACKTOP = sp;
   return;
  }
 case -7:
  {
   _zatanh($agg$result, +HEAPF64[$v >> 3], +HEAPF64[$v + 8 >> 3]);
   STACKTOP = sp;
   return;
  }
 case 8:
  {
   $v$032$val = +HEAPF64[$v >> 3];
   $v$133$val = +HEAPF64[$v + 8 >> 3];
   $420 = +HEAPF64[974];
   $421 = +HEAPF64[975];
   $422 = $v$032$val + $420;
   $423 = $v$133$val + $421;
   $424 = $420 - $v$032$val;
   $425 = $421 - $v$133$val;
   if ($422 != 0.0 | $423 != 0.0) if ($424 != 0.0 | $425 != 0.0) {
    $zi$0$i5$i98 = $424 * $423 + $422 * $425;
    $zr$0$i4$i97 = $422 * $424 - $423 * $425;
   } else {
    $zi$0$i5$i98 = 0.0;
    $zr$0$i4$i97 = 0.0;
   } else {
    $zi$0$i5$i98 = 0.0;
    $zr$0$i4$i97 = 0.0;
   }
   $438 = $zr$0$i4$i97 >= 0.0 ? $zr$0$i4$i97 : -$zr$0$i4$i97;
   $441 = $zi$0$i5$i98 >= 0.0 ? $zi$0$i5$i98 : -$zi$0$i5$i98;
   $442 = $438 < $441;
   $p$0$i$i99 = $442 ? $441 : $438;
   if ($p$0$i$i99 != 0.0) {
    $445 = ($442 ? $438 : $441) * .5 / $p$0$i$i99;
    $446 = $zr$0$i4$i97 * .5;
    $455 = +Math_sqrt(+(($446 >= 0.0 ? $446 : -$446) + $p$0$i$i99 * +Math_sqrt(+($445 * $445 + .25))));
    $457 = $zi$0$i5$i98 / ($455 + $455);
    if ($zr$0$i4$i97 < 0.0) {
     $zi$0$i$i102 = $zi$0$i5$i98 < 0.0 ? -$455 : $455;
     $zr$0$i$i103 = $457 >= 0.0 ? $457 : -$457;
    } else {
     $zi$0$i$i102 = $457;
     $zr$0$i$i103 = $455;
    }
   } else {
    $zi$0$i$i102 = 0.0;
    $zr$0$i$i103 = 0.0;
   }
   HEAPF64[$agg$result >> 3] = $zr$0$i$i103;
   HEAPF64[$agg$result + 8 >> 3] = $zi$0$i$i102;
   STACKTOP = sp;
   return;
  }
 case -8:
  {
   $v$030$val = +HEAPF64[$v >> 3];
   $v$131$val = +HEAPF64[$v + 8 >> 3];
   $466 = +HEAPF64[974];
   $467 = +HEAPF64[975];
   $468 = $v$030$val + $466;
   $469 = $v$131$val + $467;
   $470 = $466 - $v$030$val;
   $471 = $467 - $v$131$val;
   if ($468 != 0.0 | $469 != 0.0) if ($470 != 0.0 | $471 != 0.0) {
    $zi$0$i5$i107 = $470 * $469 + $468 * $471;
    $zr$0$i4$i106 = $468 * $470 - $469 * $471;
   } else {
    $zi$0$i5$i107 = 0.0;
    $zr$0$i4$i106 = 0.0;
   } else {
    $zi$0$i5$i107 = 0.0;
    $zr$0$i4$i106 = 0.0;
   }
   $484 = $zr$0$i4$i106 >= 0.0 ? $zr$0$i4$i106 : -$zr$0$i4$i106;
   $487 = $zi$0$i5$i107 >= 0.0 ? $zi$0$i5$i107 : -$zi$0$i5$i107;
   $488 = $484 < $487;
   $p$0$i$i108 = $488 ? $487 : $484;
   if ($p$0$i$i108 != 0.0) {
    $491 = ($488 ? $484 : $487) * .5 / $p$0$i$i108;
    $492 = $zr$0$i4$i106 * .5;
    $501 = +Math_sqrt(+(($492 >= 0.0 ? $492 : -$492) + $p$0$i$i108 * +Math_sqrt(+($491 * $491 + .25))));
    $503 = $zi$0$i5$i107 / ($501 + $501);
    if ($zr$0$i4$i106 < 0.0) {
     $zi$0$i$i111 = $zi$0$i5$i107 < 0.0 ? -$501 : $501;
     $zr$0$i$i112 = $503 >= 0.0 ? $503 : -$503;
    } else {
     $zi$0$i$i111 = $503;
     $zr$0$i$i112 = $501;
    }
   } else {
    $zi$0$i$i111 = 0.0;
    $zr$0$i$i112 = 0.0;
   }
   HEAPF64[$agg$result >> 3] = +HEAPF64[304] - $zr$0$i$i112;
   HEAPF64[$agg$result + 8 >> 3] = $4 - $zi$0$i$i111;
   STACKTOP = sp;
   return;
  }
 case 9:
  {
   HEAPF64[$agg$result >> 3] = +HEAPF64[$v >> 3];
   HEAPF64[$agg$result + 8 >> 3] = $4;
   STACKTOP = sp;
   return;
  }
 case -9:
  {
   HEAP32[$agg$result >> 2] = HEAP32[$v >> 2];
   HEAP32[$agg$result + 4 >> 2] = HEAP32[$v + 4 >> 2];
   HEAP32[$agg$result + 8 >> 2] = HEAP32[$v + 8 >> 2];
   HEAP32[$agg$result + 12 >> 2] = HEAP32[$v + 12 >> 2];
   STACKTOP = sp;
   return;
  }
 case 10:
  {
   $517 = +HEAPF64[$v >> 3];
   $519 = +HEAPF64[$v + 8 >> 3];
   $522 = $517 >= 0.0 ? $517 : -$517;
   $525 = $519 >= 0.0 ? $519 : -$519;
   $526 = $522 < $525;
   $p$0$i$i114 = $526 ? $525 : $522;
   if ($p$0$i$i114 != 0.0) {
    $528 = ($526 ? $522 : $525) / $p$0$i$i114;
    $533 = $p$0$i$i114 * +Math_sqrt(+($528 * $528 + 1.0));
   } else $533 = 0.0;
   HEAPF64[$agg$result >> 3] = $533;
   HEAPF64[$agg$result + 8 >> 3] = $4;
   STACKTOP = sp;
   return;
  }
 case -10:
  {
   $538 = -+HEAPF64[$v + 8 >> 3];
   HEAPF64[$agg$result >> 3] = +HEAPF64[$v >> 3];
   HEAPF64[$agg$result + 8 >> 3] = $538;
   STACKTOP = sp;
   return;
  }
 case 11:
  {
   HEAPF64[$agg$result >> 3] = +HEAPF64[$v + 8 >> 3];
   HEAPF64[$agg$result + 8 >> 3] = $4;
   STACKTOP = sp;
   return;
  }
 case -11:
  {
   $543 = +HEAPF64[$v >> 3];
   $545 = +HEAPF64[$v + 8 >> 3];
   $546 = +HEAPF64[974];
   $547 = +HEAPF64[975];
   if ($546 != 0.0 | $547 != 0.0) if ($543 != 0.0 | $545 != 0.0) {
    $zi$0$i121 = $545 * $546 + $543 * $547;
    $zr$0$i120 = $543 * $546 - $545 * $547;
   } else {
    $zi$0$i121 = 0.0;
    $zr$0$i120 = 0.0;
   } else {
    $zi$0$i121 = 0.0;
    $zr$0$i120 = 0.0;
   }
   HEAPF64[$agg$result >> 3] = $zr$0$i120;
   HEAPF64[$agg$result + 8 >> 3] = $zi$0$i121;
   STACKTOP = sp;
   return;
  }
 case 12:
  {
   $v$034$val = +HEAPF64[$v >> 3];
   $v$135$val = +HEAPF64[$v + 8 >> 3];
   if ($v$034$val != 0.0 | $v$135$val != 0.0) {
    if (($v$034$val >= 0.0 ? $v$034$val : -$v$034$val) > 8988465674311577542806216.0e283) label = 122; else if (($v$135$val >= 0.0 ? $v$135$val : -$v$135$val) > 8988465674311577542806216.0e283) label = 122; else {
     $a$0$i$i125 = $v$034$val;
     $b$0$i$i124 = $v$135$val;
    }
    if ((label | 0) == 122) {
     $a$0$i$i125 = $v$034$val * .5;
     $b$0$i$i124 = $v$135$val * .5;
    }
    $573 = $a$0$i$i125 >= 0.0 ? $a$0$i$i125 : -$a$0$i$i125;
    $576 = $b$0$i$i124 >= 0.0 ? $b$0$i$i124 : -$b$0$i$i124;
    $577 = $573 < $576;
    $p$0$i$i$i = $577 ? $576 : $573;
    if ($p$0$i$i$i != 0.0) {
     $579 = ($577 ? $573 : $576) / $p$0$i$i$i;
     $585 = $p$0$i$i$i * +Math_sqrt(+($579 * $579 + 1.0));
    } else $585 = 0.0;
    HEAPF64[$1 >> 3] = $a$0$i$i125 / $585;
    HEAPF64[$1 + 8 >> 3] = $b$0$i$i124 / $585;
    HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
    HEAP32[$$byval_copy1 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$$byval_copy1 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
    _zlog($0, $$byval_copy1);
    $588 = +HEAPF64[$0 >> 3];
    $590 = +HEAPF64[$0 + 8 >> 3];
    $591 = +HEAPF64[976];
    $592 = +HEAPF64[977];
    if ($591 != 0.0 | $592 != 0.0) if ($588 != 0.0 | $590 != 0.0) {
     $zi$0$i4$i = $590 * $591 + $588 * $592;
     $zr$0$i3$i = $588 * $591 - $590 * $592;
    } else {
     $zi$0$i4$i = 0.0;
     $zr$0$i3$i = 0.0;
    } else {
     $zi$0$i4$i = 0.0;
     $zr$0$i3$i = 0.0;
    }
    HEAPF64[$agg$result >> 3] = $zr$0$i3$i;
    HEAPF64[$agg$result + 8 >> 3] = $zi$0$i4$i;
   } else {
    HEAP32[$agg$result >> 2] = HEAP32[608];
    HEAP32[$agg$result + 4 >> 2] = HEAP32[609];
    HEAP32[$agg$result + 8 >> 2] = HEAP32[610];
    HEAP32[$agg$result + 12 >> 2] = HEAP32[611];
   }
   STACKTOP = sp;
   return;
  }
 case -12:
  {
   $604 = +HEAPF64[$v >> 3];
   $606 = +HEAPF64[$v + 8 >> 3];
   $607 = +HEAPF64[974];
   $608 = +HEAPF64[975];
   if ($607 != 0.0 | $608 != 0.0) if ($604 != 0.0 | $606 != 0.0) {
    $zi$0$i134 = $606 * $607 + $604 * $608;
    $zr$0$i133 = $604 * $607 - $606 * $608;
   } else {
    $zi$0$i134 = 0.0;
    $zr$0$i133 = 0.0;
   } else {
    $zi$0$i134 = 0.0;
    $zr$0$i133 = 0.0;
   }
   $619 = +_xexp($zr$0$i133);
   $621 = $619 * +_xcos($zi$0$i134);
   $623 = $619 * +_xsin($zi$0$i134);
   HEAPF64[$agg$result >> 3] = $621;
   HEAPF64[$agg$result + 8 >> 3] = $623;
   STACKTOP = sp;
   return;
  }
 default:
  {
   _jsignal(3);
   HEAP32[$agg$result >> 2] = HEAP32[608];
   HEAP32[$agg$result + 4 >> 2] = HEAP32[609];
   HEAP32[$agg$result + 8 >> 2] = HEAP32[610];
   HEAP32[$agg$result + 12 >> 2] = HEAP32[611];
   STACKTOP = sp;
   return;
  }
 } while (0);
 _jsignal(3);
 HEAP32[$agg$result >> 2] = HEAP32[608];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[609];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[610];
 HEAP32[$agg$result + 12 >> 2] = HEAP32[611];
 STACKTOP = sp;
 return;
}

function _r2a($a, $w, $zt, $lr, $rr, $f2) {
 $a = $a | 0;
 $w = $w | 0;
 $zt = $zt | 0;
 $lr = $lr | 0;
 $rr = $rr | 0;
 $f2 = $f2 | 0;
 var $$0 = 0, $$0115$i = 0, $$0115$i104 = 0, $$0115$i26 = 0, $$0115$i65 = 0, $$016$i = 0, $$016$i103 = 0, $$016$i25 = 0, $$016$i64 = 0, $$0514$i = 0, $$0514$i105 = 0, $$0514$i27 = 0, $$0514$i66 = 0, $$1237$us$i = 0, $$1237$us$i119 = 0, $$1237$us$i41 = 0, $$1237$us$i80 = 0, $$138$us$i = 0, $$138$us$i118 = 0, $$138$us$i40 = 0, $$138$us$i79 = 0, $$1636$us$i = 0, $$1636$us$i120 = 0, $$1636$us$i42 = 0, $$1636$us$i81 = 0, $$225$us$i = 0, $$225$us$i133 = 0, $$225$us$i55 = 0, $$225$us$i94 = 0, $$2329$us$i = 0, $$2329$us$i114 = 0, $$2329$us$i36 = 0, $$2329$us$i75 = 0, $$2728$us$i = 0, $$2728$us$i115 = 0, $$2728$us$i37 = 0, $$2728$us$i76 = 0, $$319$us$i = 0, $$319$us$i129 = 0, $$319$us$i51 = 0, $$319$us$i90 = 0, $$3424$us$i = 0, $$3424$us$i134 = 0, $$3424$us$i56 = 0, $$3424$us$i95 = 0, $$3822$us$i = 0, $$3822$us$i136 = 0, $$3822$us$i58 = 0, $$3822$us$i97 = 0, $$417$us$i = 0, $$417$us$i131 = 0, $$417$us$i53 = 0, $$417$us$i92 = 0, $$pre = 0, $$sum140 = 0, $$sum141 = 0, $$sum142 = 0, $$sum143 = 0, $$sum144 = 0, $$sum145 = 0, $$sum146 = 0, $$sum147 = 0, $$sum148 = 0, $10 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $11 = 0, $116 = 0, $117 = 0, $12 = 0, $124 = 0, $126 = 0, $129 = 0, $13 = 0, $130 = 0, $133 = 0, $14 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $188 = 0, $190 = 0, $192 = 0, $195 = 0, $196 = 0, $2 = 0, $214 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $4 = 0, $49 = 0, $53 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $69 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $83 = 0, $84 = 0, $90 = 0, $91 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge306 = 0, $brmerge312 = 0, $i$013$i = 0, $i$013$i106 = 0, $i$013$i28 = 0, $i$013$i67 = 0, $i$0173 = 0, $i1$0183$us = 0, $i1$035$us$i = 0, $i1$035$us$i121 = 0, $i1$035$us$i43 = 0, $i1$035$us$i82 = 0, $i11$0208 = 0, $i13$0204$us = 0, $i15$0197$us = 0, $i17$0219 = 0, $i19$0232 = 0, $i21$0225 = 0, $i23$0247 = 0, $i25$0239 = 0, $i3$0177$us = 0, $i3$027$us$i = 0, $i3$027$us$i116 = 0, $i3$027$us$i38 = 0, $i3$027$us$i77 = 0, $i5$0194$us = 0, $i5$023$us$i = 0, $i5$023$us$i135 = 0, $i5$023$us$i57 = 0, $i5$023$us$i96 = 0, $i7$018$us$i = 0, $i7$018$us$i130 = 0, $i7$018$us$i52 = 0, $i7$018$us$i91 = 0, $i7$0186$us = 0, $i9$0215 = 0, $scevgep265 = 0, $scevgep269 = 0, $u$0176 = 0, $u$1180$us = 0, $u$2196$us = 0, $u$3189$us = 0, $u$4217 = 0, $u$5199$us = 0, $u$6222 = 0, $u$7235 = 0, $u$8248 = 0, $u$9$lcssa = 0, $u$9238 = 0, $v$0175 = 0, $v$1185$us = 0, $v$2179$us = 0, $v$3188$us = 0, $v$4210 = 0, $v$5206$us = 0, $v$6221 = 0, $v$7234 = 0, $v$8$lcssa = 0, $v$8226 = 0, $v$9246 = 0, $x$0174 = 0, $x$10233 = 0, $x$11$lcssa = 0, $x$11224 = 0, $x$1184$us = 0, $x$12245 = 0, $x$13$lcssa = 0, $x$13237 = 0, $x$2178$us = 0, $x$3195$us = 0, $x$4187$us = 0, $x$5216 = 0, $x$6$lcssa = 0, $x$6209 = 0, $x$7205$us = 0, $x$8198$us = 0, $x$9220 = 0, $u$6222$looptemp = 0, $v$6221$looptemp = 0, $v$8226$looptemp = 0, $u$9238$looptemp = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = $a + 12 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $a + 16 | 0;
 if (($lr | 0) < 0) {
  $6 = $3 + $lr | 0;
  $11 = ($6 | 0) < 0 ? 0 : $6;
 } else $11 = ($3 | 0) > ($lr | 0) ? $lr : $3;
 $10 = $3 - $11 | 0;
 $12 = $a + 16 + ($10 << 2) | 0;
 $13 = _prod($11, $12) | 0;
 $14 = $w + 12 | 0;
 $15 = HEAP32[$14 >> 2] | 0;
 $16 = $w + 16 | 0;
 if (($rr | 0) < 0) {
  $18 = $15 + $rr | 0;
  $23 = ($18 | 0) < 0 ? 0 : $18;
 } else $23 = ($15 | 0) > ($rr | 0) ? $rr : $15;
 $22 = $15 - $23 | 0;
 $24 = $w + 16 + ($22 << 2) | 0;
 $25 = _prod($23, $24) | 0;
 $26 = ($10 | 0) <= ($22 | 0);
 $27 = $26 ? $22 : $10;
 $28 = $26 ? $10 : $22;
 $29 = $26 ? $16 : $4;
 $30 = _prod($28, $29) | 0;
 $33 = _prod($27 - $28 | 0, $29 + ($28 << 2) | 0) | 0;
 $34 = ($11 | 0) <= ($23 | 0);
 $35 = $34 ? $13 : $25;
 $$pre = $34 ? $25 : $13;
 if (!$35) $75 = 0; else $75 = ($$pre | 0) / ($35 | 0) | 0;
 $38 = $34 ? $23 : $11;
 if (_memcmp($4, $16, $28 << 2) | 0) {
  _jsignal(9);
  $$0 = 0;
  return $$0 | 0;
 }
 if (_memcmp($12, $24, ($34 ? $11 : $23) << 2) | 0) {
  _jsignal(9);
  $$0 = 0;
  return $$0 | 0;
 }
 $49 = _ga($zt, Math_imul(Math_imul($$pre, $30) | 0, $33) | 0, $27 + $38 | 0, $29) | 0;
 if (!$49) {
  $$0 = 0;
  return $$0 | 0;
 }
 _memcpy($49 + 16 + ($27 << 2) | 0, ($34 ? $24 : $12) | 0, $38 << 2 | 0) | 0;
 $53 = $49 + 8 | 0;
 L26 : do if (HEAP32[$53 >> 2] | 0) {
  $57 = _bp(HEAP32[$a >> 2] | 0) | 0;
  $58 = _bp($zt) | 0;
  $59 = HEAP32[$2 >> 2] | 0;
  $61 = $a + ($59 + 4 + ($59 & 1) << 2) | 0;
  $62 = 0 - $57 | 0;
  $63 = $61 + $62 | 0;
  $64 = HEAP32[$14 >> 2] | 0;
  $66 = $w + ($64 + 4 + ($64 & 1) << 2) | 0;
  $67 = $66 + $62 | 0;
  $69 = HEAP32[$49 + 12 >> 2] | 0;
  $71 = $49 + ($69 + 4 + ($69 & 1) << 2) | 0;
  $73 = $71 + (0 - $58) | 0;
  $74 = ($33 | 0) == 1;
  $76 = ($75 | 0) == 1;
  if ($74 & $76) {
   $77 = HEAP32[$53 >> 2] | 0;
   if (($77 | 0) <= 0) break;
   $i$0173 = 0;
   $u$0176 = $63;
   $v$0175 = $67;
   $x$0174 = $73;
   while (1) {
    $u$0176 = $u$0176 + $57 | 0;
    $v$0175 = $v$0175 + $57 | 0;
    $x$0174 = $x$0174 + $58 | 0;
    ftCall_viii($f2 | 0, $u$0176 | 0, $v$0175 | 0, $x$0174 | 0);
    $i$0173 = $i$0173 + 1 | 0;
    if (($i$0173 | 0) == ($77 | 0)) break L26;
   }
  }
  $83 = ($35 | 0) == 1;
  if ($83 & $76) {
   $84 = ($30 | 0) > 0;
   if ($74) {
    if (!$84) break;
    $$0115$i26 = $67;
    $$016$i25 = $63;
    $$0514$i27 = $73;
    $i$013$i28 = 0;
    while (1) {
     $$016$i25 = $$016$i25 + $57 | 0;
     $$0115$i26 = $$0115$i26 + $57 | 0;
     $$0514$i27 = $$0514$i27 + $58 | 0;
     ftCall_viii($f2 | 0, $$016$i25 | 0, $$0115$i26 | 0, $$0514$i27 | 0);
     $i$013$i28 = $i$013$i28 + 1 | 0;
     if (($i$013$i28 | 0) == ($30 | 0)) break L26;
    }
   }
   if ($26) {
    if (!$84) break;
    if (($33 | 0) <= 0) break;
    $90 = Math_imul($58, $33) | 0;
    $91 = Math_imul($57, $33) | 0;
    $$1237$us$i41 = $67;
    $$138$us$i40 = $63;
    $$1636$us$i42 = $73;
    $i1$035$us$i43 = 0;
    while (1) {
     $$138$us$i40 = $$138$us$i40 + $57 | 0;
     $$2329$us$i36 = $$1237$us$i41;
     $$2728$us$i37 = $$1636$us$i42;
     $i3$027$us$i38 = 0;
     do {
      $$2329$us$i36 = $$2329$us$i36 + $57 | 0;
      $$2728$us$i37 = $$2728$us$i37 + $58 | 0;
      ftCall_viii($f2 | 0, $$138$us$i40 | 0, $$2329$us$i36 | 0, $$2728$us$i37 | 0);
      $i3$027$us$i38 = $i3$027$us$i38 + 1 | 0;
     } while (($i3$027$us$i38 | 0) != ($33 | 0));
     $i1$035$us$i43 = $i1$035$us$i43 + 1 | 0;
     if (($i1$035$us$i43 | 0) == ($30 | 0)) break L26; else {
      $$1237$us$i41 = $$1237$us$i41 + $91 | 0;
      $$1636$us$i42 = $$1636$us$i42 + $90 | 0;
     }
    }
   } else {
    if (!$84) break;
    if (($33 | 0) <= 0) break;
    $98 = Math_imul($58, $33) | 0;
    $99 = Math_imul($57, $33) | 0;
    $$225$us$i55 = $63;
    $$3424$us$i56 = $67;
    $$3822$us$i58 = $73;
    $i5$023$us$i57 = 0;
    while (1) {
     $$3424$us$i56 = $$3424$us$i56 + $57 | 0;
     $$319$us$i51 = $$225$us$i55;
     $$417$us$i53 = $$3822$us$i58;
     $i7$018$us$i52 = 0;
     do {
      $$319$us$i51 = $$319$us$i51 + $57 | 0;
      $$417$us$i53 = $$417$us$i53 + $58 | 0;
      ftCall_viii($f2 | 0, $$319$us$i51 | 0, $$3424$us$i56 | 0, $$417$us$i53 | 0);
      $i7$018$us$i52 = $i7$018$us$i52 + 1 | 0;
     } while (($i7$018$us$i52 | 0) != ($33 | 0));
     $i5$023$us$i57 = $i5$023$us$i57 + 1 | 0;
     if (($i5$023$us$i57 | 0) == ($30 | 0)) break L26; else {
      $$225$us$i55 = $$225$us$i55 + $99 | 0;
      $$3822$us$i58 = $$3822$us$i58 + $98 | 0;
     }
    }
   }
  }
  $105 = ($30 | 0) == 1;
  if ($105 & $76) {
   $106 = ($33 | 0) > 0;
   if ($26) {
    if (!$106) break;
    if (($35 | 0) <= 0) break;
    $116 = Math_imul($35, $58) | 0;
    $117 = Math_imul($35, $57) | 0;
    $i1$0183$us = 0;
    $v$1185$us = $67;
    $x$1184$us = $73;
    while (1) {
     $i3$0177$us = 0;
     $u$1180$us = $63;
     $v$2179$us = $v$1185$us;
     $x$2178$us = $x$1184$us;
     $x$1184$us = $x$1184$us + $116 | 0;
     do {
      $u$1180$us = $u$1180$us + $57 | 0;
      $v$2179$us = $v$2179$us + $57 | 0;
      $x$2178$us = $x$2178$us + $58 | 0;
      ftCall_viii($f2 | 0, $u$1180$us | 0, $v$2179$us | 0, $x$2178$us | 0);
      $i3$0177$us = $i3$0177$us + 1 | 0;
     } while (($i3$0177$us | 0) != ($35 | 0));
     $i1$0183$us = $i1$0183$us + 1 | 0;
     if (($i1$0183$us | 0) == ($33 | 0)) break L26; else $v$1185$us = $v$1185$us + $117 | 0;
    }
   } else {
    if (!$106) break;
    if (($35 | 0) <= 0) break;
    $108 = Math_imul($35, $58) | 0;
    $109 = Math_imul($35, $57) | 0;
    $i5$0194$us = 0;
    $u$2196$us = $63;
    $x$3195$us = $73;
    while (1) {
     $i7$0186$us = 0;
     $u$3189$us = $u$2196$us;
     $v$3188$us = $67;
     $x$4187$us = $x$3195$us;
     $x$3195$us = $x$3195$us + $108 | 0;
     do {
      $u$3189$us = $u$3189$us + $57 | 0;
      $v$3188$us = $v$3188$us + $57 | 0;
      $x$4187$us = $x$4187$us + $58 | 0;
      ftCall_viii($f2 | 0, $u$3189$us | 0, $v$3188$us | 0, $x$4187$us | 0);
      $i7$0186$us = $i7$0186$us + 1 | 0;
     } while (($i7$0186$us | 0) != ($35 | 0));
     $i5$0194$us = $i5$0194$us + 1 | 0;
     if (($i5$0194$us | 0) == ($33 | 0)) break L26; else $u$2196$us = $u$2196$us + $109 | 0;
    }
   }
  }
  if ($105 & $83) {
   $124 = HEAP32[$a + 8 >> 2] | 0;
   $126 = HEAP32[$w + 8 >> 2] | 0;
   if (!$23) {
    if (($126 | 0) <= 0) break;
    if (($124 | 0) <= 0) break;
    $133 = Math_imul($58, $124) | 0;
    $i13$0204$us = 0;
    $v$5206$us = $67;
    $x$7205$us = $73;
    while (1) {
     $v$5206$us = $v$5206$us + $57 | 0;
     $i15$0197$us = 0;
     $u$5199$us = $63;
     $x$8198$us = $x$7205$us;
     do {
      $u$5199$us = $u$5199$us + $57 | 0;
      $x$8198$us = $x$8198$us + $58 | 0;
      ftCall_viii($f2 | 0, $u$5199$us | 0, $v$5206$us | 0, $x$8198$us | 0);
      $i15$0197$us = $i15$0197$us + 1 | 0;
     } while (($i15$0197$us | 0) != ($124 | 0));
     $i13$0204$us = $i13$0204$us + 1 | 0;
     if (($i13$0204$us | 0) == ($126 | 0)) break L26; else $x$7205$us = $x$7205$us + $133 | 0;
    }
   } else {
    if (($124 | 0) <= 0) break;
    $129 = ($126 | 0) > 0;
    $130 = Math_imul($58, $126) | 0;
    $i9$0215 = 0;
    $u$4217 = $63;
    $x$5216 = $73;
    while (1) {
     $u$4217 = $u$4217 + $57 | 0;
     if ($129) {
      $i11$0208 = 0;
      $v$4210 = $67;
      $x$6209 = $x$5216;
      do {
       $v$4210 = $v$4210 + $57 | 0;
       $x$6209 = $x$6209 + $58 | 0;
       ftCall_viii($f2 | 0, $u$4217 | 0, $v$4210 | 0, $x$6209 | 0);
       $i11$0208 = $i11$0208 + 1 | 0;
      } while (($i11$0208 | 0) != ($126 | 0));
      $x$6$lcssa = $x$5216 + $130 | 0;
     } else $x$6$lcssa = $x$5216;
     $i9$0215 = $i9$0215 + 1 | 0;
     if (($i9$0215 | 0) == ($124 | 0)) break L26; else $x$5216 = $x$6$lcssa;
    }
   }
  }
  $144 = Math_imul($57, $13) | 0;
  $145 = $61 + (0 - $144) | 0;
  $146 = Math_imul($57, $25) | 0;
  $147 = $66 + (0 - $146) | 0;
  $148 = Math_imul($58, $$pre) | 0;
  $149 = $71 + (0 - $148) | 0;
  $150 = ($30 | 0) > 0;
  if ($74) {
   if (!$150) break;
   $$sum146 = $144 - $57 | 0;
   $$sum147 = $146 - $57 | 0;
   $$sum148 = $148 - $58 | 0;
   $151 = ($35 | 0) > 0;
   $152 = Math_imul($58, $75) | 0;
   $153 = Math_imul($57, $75) | 0;
   $brmerge = ($75 | 0) < 1 | $151 ^ 1;
   $i17$0219 = 0;
   $u$6222 = $145;
   $v$6221 = $147;
   $x$9220 = $149;
   while (1) {
    $u$6222$looptemp = $u$6222;
    $u$6222 = $u$6222 + $144 | 0;
    $v$6221$looptemp = $v$6221;
    $v$6221 = $v$6221 + $146 | 0;
    $157 = $u$6222$looptemp + $$sum146 | 0;
    $158 = $v$6221$looptemp + $$sum147 | 0;
    $159 = $x$9220 + $$sum148 | 0;
    $x$9220 = $x$9220 + $148 | 0;
    do if ($76) {
     if ($151) {
      $$0115$i65 = $158;
      $$016$i64 = $157;
      $$0514$i66 = $159;
      $i$013$i67 = 0;
      do {
       $$016$i64 = $$016$i64 + $57 | 0;
       $$0115$i65 = $$0115$i65 + $57 | 0;
       $$0514$i66 = $$0514$i66 + $58 | 0;
       ftCall_viii($f2 | 0, $$016$i64 | 0, $$0115$i65 | 0, $$0514$i66 | 0);
       $i$013$i67 = $i$013$i67 + 1 | 0;
      } while (($i$013$i67 | 0) != ($35 | 0));
     }
    } else if ($34) {
     if ($brmerge) break; else {
      $$1237$us$i80 = $158;
      $$138$us$i79 = $157;
      $$1636$us$i81 = $159;
      $i1$035$us$i82 = 0;
     }
     while (1) {
      $$138$us$i79 = $$138$us$i79 + $57 | 0;
      $$2329$us$i75 = $$1237$us$i80;
      $$2728$us$i76 = $$1636$us$i81;
      $i3$027$us$i77 = 0;
      do {
       $$2329$us$i75 = $$2329$us$i75 + $57 | 0;
       $$2728$us$i76 = $$2728$us$i76 + $58 | 0;
       ftCall_viii($f2 | 0, $$138$us$i79 | 0, $$2329$us$i75 | 0, $$2728$us$i76 | 0);
       $i3$027$us$i77 = $i3$027$us$i77 + 1 | 0;
      } while (($i3$027$us$i77 | 0) != ($75 | 0));
      $i1$035$us$i82 = $i1$035$us$i82 + 1 | 0;
      if (($i1$035$us$i82 | 0) == ($35 | 0)) break; else {
       $$1237$us$i80 = $$1237$us$i80 + $153 | 0;
       $$1636$us$i81 = $$1636$us$i81 + $152 | 0;
      }
     }
    } else {
     if ($brmerge) break; else {
      $$225$us$i94 = $157;
      $$3424$us$i95 = $158;
      $$3822$us$i97 = $159;
      $i5$023$us$i96 = 0;
     }
     while (1) {
      $$3424$us$i95 = $$3424$us$i95 + $57 | 0;
      $$319$us$i90 = $$225$us$i94;
      $$417$us$i92 = $$3822$us$i97;
      $i7$018$us$i91 = 0;
      do {
       $$319$us$i90 = $$319$us$i90 + $57 | 0;
       $$417$us$i92 = $$417$us$i92 + $58 | 0;
       ftCall_viii($f2 | 0, $$319$us$i90 | 0, $$3424$us$i95 | 0, $$417$us$i92 | 0);
       $i7$018$us$i91 = $i7$018$us$i91 + 1 | 0;
      } while (($i7$018$us$i91 | 0) != ($75 | 0));
      $i5$023$us$i96 = $i5$023$us$i96 + 1 | 0;
      if (($i5$023$us$i96 | 0) == ($35 | 0)) break; else {
       $$225$us$i94 = $$225$us$i94 + $153 | 0;
       $$3822$us$i97 = $$3822$us$i97 + $152 | 0;
      }
     }
    } while (0);
    $i17$0219 = $i17$0219 + 1 | 0;
    if (($i17$0219 | 0) == ($30 | 0)) break L26;
   }
  }
  if ($26) {
   if (!$150) break;
   $183 = ($33 | 0) > 0;
   $$sum143 = $144 - $57 | 0;
   $$sum144 = $146 - $57 | 0;
   $$sum145 = $148 - $58 | 0;
   $184 = ($35 | 0) > 0;
   $185 = Math_imul($58, $75) | 0;
   $186 = Math_imul($57, $75) | 0;
   $188 = Math_imul(Math_imul($$pre, $33) | 0, $58) | 0;
   $190 = Math_imul(Math_imul($25, $33) | 0, $57) | 0;
   $brmerge306 = ($75 | 0) < 1 | $184 ^ 1;
   $i19$0232 = 0;
   $u$7235 = $145;
   $v$7234 = $147;
   $x$10233 = $149;
   while (1) {
    if ($183) {
     $192 = $u$7235 + $$sum143 | 0;
     $scevgep265 = $x$10233 + $188 | 0;
     $i21$0225 = 0;
     $v$8226 = $v$7234;
     $x$11224 = $x$10233;
     do {
      $v$8226$looptemp = $v$8226;
      $v$8226 = $v$8226 + $146 | 0;
      $195 = $v$8226$looptemp + $$sum144 | 0;
      $196 = $x$11224 + $$sum145 | 0;
      $x$11224 = $x$11224 + $148 | 0;
      do if ($76) {
       if ($184) {
        $$0115$i104 = $195;
        $$016$i103 = $192;
        $$0514$i105 = $196;
        $i$013$i106 = 0;
       } else break;
       do {
        $$016$i103 = $$016$i103 + $57 | 0;
        $$0115$i104 = $$0115$i104 + $57 | 0;
        $$0514$i105 = $$0514$i105 + $58 | 0;
        ftCall_viii($f2 | 0, $$016$i103 | 0, $$0115$i104 | 0, $$0514$i105 | 0);
        $i$013$i106 = $i$013$i106 + 1 | 0;
       } while (($i$013$i106 | 0) != ($35 | 0));
      } else if ($34) {
       if ($brmerge306) break; else {
        $$1237$us$i119 = $195;
        $$138$us$i118 = $192;
        $$1636$us$i120 = $196;
        $i1$035$us$i121 = 0;
       }
       while (1) {
        $$138$us$i118 = $$138$us$i118 + $57 | 0;
        $$2329$us$i114 = $$1237$us$i119;
        $$2728$us$i115 = $$1636$us$i120;
        $i3$027$us$i116 = 0;
        do {
         $$2329$us$i114 = $$2329$us$i114 + $57 | 0;
         $$2728$us$i115 = $$2728$us$i115 + $58 | 0;
         ftCall_viii($f2 | 0, $$138$us$i118 | 0, $$2329$us$i114 | 0, $$2728$us$i115 | 0);
         $i3$027$us$i116 = $i3$027$us$i116 + 1 | 0;
        } while (($i3$027$us$i116 | 0) != ($75 | 0));
        $i1$035$us$i121 = $i1$035$us$i121 + 1 | 0;
        if (($i1$035$us$i121 | 0) == ($35 | 0)) break; else {
         $$1237$us$i119 = $$1237$us$i119 + $186 | 0;
         $$1636$us$i120 = $$1636$us$i120 + $185 | 0;
        }
       }
      } else {
       if ($brmerge306) break; else {
        $$225$us$i133 = $192;
        $$3424$us$i134 = $195;
        $$3822$us$i136 = $196;
        $i5$023$us$i135 = 0;
       }
       while (1) {
        $$3424$us$i134 = $$3424$us$i134 + $57 | 0;
        $$319$us$i129 = $$225$us$i133;
        $$417$us$i131 = $$3822$us$i136;
        $i7$018$us$i130 = 0;
        do {
         $$319$us$i129 = $$319$us$i129 + $57 | 0;
         $$417$us$i131 = $$417$us$i131 + $58 | 0;
         ftCall_viii($f2 | 0, $$319$us$i129 | 0, $$3424$us$i134 | 0, $$417$us$i131 | 0);
         $i7$018$us$i130 = $i7$018$us$i130 + 1 | 0;
        } while (($i7$018$us$i130 | 0) != ($75 | 0));
        $i5$023$us$i135 = $i5$023$us$i135 + 1 | 0;
        if (($i5$023$us$i135 | 0) == ($35 | 0)) break; else {
         $$225$us$i133 = $$225$us$i133 + $186 | 0;
         $$3822$us$i136 = $$3822$us$i136 + $185 | 0;
        }
       }
      } while (0);
      $i21$0225 = $i21$0225 + 1 | 0;
     } while (($i21$0225 | 0) != ($33 | 0));
     $v$8$lcssa = $v$7234 + $190 | 0;
     $x$11$lcssa = $scevgep265;
    } else {
     $v$8$lcssa = $v$7234;
     $x$11$lcssa = $x$10233;
    }
    $u$7235 = $u$7235 + $144 | 0;
    $i19$0232 = $i19$0232 + 1 | 0;
    if (($i19$0232 | 0) == ($30 | 0)) break; else {
     $v$7234 = $v$8$lcssa;
     $x$10233 = $x$11$lcssa;
    }
   }
  } else {
   if (!$150) break;
   $175 = ($33 | 0) > 0;
   $$sum140 = $144 - $57 | 0;
   $$sum141 = $146 - $57 | 0;
   $$sum142 = $148 - $58 | 0;
   $176 = ($35 | 0) > 0;
   $177 = Math_imul($58, $75) | 0;
   $178 = Math_imul($57, $75) | 0;
   $180 = Math_imul(Math_imul($$pre, $33) | 0, $58) | 0;
   $182 = Math_imul(Math_imul($13, $33) | 0, $57) | 0;
   $brmerge312 = ($75 | 0) < 1 | $176 ^ 1;
   $i23$0247 = 0;
   $u$8248 = $145;
   $v$9246 = $147;
   $x$12245 = $149;
   while (1) {
    if ($175) {
     $214 = $v$9246 + $$sum141 | 0;
     $scevgep269 = $x$12245 + $180 | 0;
     $i25$0239 = 0;
     $u$9238 = $u$8248;
     $x$13237 = $x$12245;
     do {
      $u$9238$looptemp = $u$9238;
      $u$9238 = $u$9238 + $144 | 0;
      $217 = $u$9238$looptemp + $$sum140 | 0;
      $218 = $x$13237 + $$sum142 | 0;
      $x$13237 = $x$13237 + $148 | 0;
      do if ($76) {
       if ($176) {
        $$0115$i = $214;
        $$016$i = $217;
        $$0514$i = $218;
        $i$013$i = 0;
       } else break;
       do {
        $$016$i = $$016$i + $57 | 0;
        $$0115$i = $$0115$i + $57 | 0;
        $$0514$i = $$0514$i + $58 | 0;
        ftCall_viii($f2 | 0, $$016$i | 0, $$0115$i | 0, $$0514$i | 0);
        $i$013$i = $i$013$i + 1 | 0;
       } while (($i$013$i | 0) != ($35 | 0));
      } else if ($34) {
       if ($brmerge312) break; else {
        $$1237$us$i = $214;
        $$138$us$i = $217;
        $$1636$us$i = $218;
        $i1$035$us$i = 0;
       }
       while (1) {
        $$138$us$i = $$138$us$i + $57 | 0;
        $$2329$us$i = $$1237$us$i;
        $$2728$us$i = $$1636$us$i;
        $i3$027$us$i = 0;
        do {
         $$2329$us$i = $$2329$us$i + $57 | 0;
         $$2728$us$i = $$2728$us$i + $58 | 0;
         ftCall_viii($f2 | 0, $$138$us$i | 0, $$2329$us$i | 0, $$2728$us$i | 0);
         $i3$027$us$i = $i3$027$us$i + 1 | 0;
        } while (($i3$027$us$i | 0) != ($75 | 0));
        $i1$035$us$i = $i1$035$us$i + 1 | 0;
        if (($i1$035$us$i | 0) == ($35 | 0)) break; else {
         $$1237$us$i = $$1237$us$i + $178 | 0;
         $$1636$us$i = $$1636$us$i + $177 | 0;
        }
       }
      } else {
       if ($brmerge312) break; else {
        $$225$us$i = $217;
        $$3424$us$i = $214;
        $$3822$us$i = $218;
        $i5$023$us$i = 0;
       }
       while (1) {
        $$3424$us$i = $$3424$us$i + $57 | 0;
        $$319$us$i = $$225$us$i;
        $$417$us$i = $$3822$us$i;
        $i7$018$us$i = 0;
        do {
         $$319$us$i = $$319$us$i + $57 | 0;
         $$417$us$i = $$417$us$i + $58 | 0;
         ftCall_viii($f2 | 0, $$319$us$i | 0, $$3424$us$i | 0, $$417$us$i | 0);
         $i7$018$us$i = $i7$018$us$i + 1 | 0;
        } while (($i7$018$us$i | 0) != ($75 | 0));
        $i5$023$us$i = $i5$023$us$i + 1 | 0;
        if (($i5$023$us$i | 0) == ($35 | 0)) break; else {
         $$225$us$i = $$225$us$i + $178 | 0;
         $$3822$us$i = $$3822$us$i + $177 | 0;
        }
       }
      } while (0);
      $i25$0239 = $i25$0239 + 1 | 0;
     } while (($i25$0239 | 0) != ($33 | 0));
     $u$9$lcssa = $u$8248 + $182 | 0;
     $x$13$lcssa = $scevgep269;
    } else {
     $u$9$lcssa = $u$8248;
     $x$13$lcssa = $x$12245;
    }
    $v$9246 = $v$9246 + $146 | 0;
    $i23$0247 = $i23$0247 + 1 | 0;
    if (($i23$0247 | 0) == ($30 | 0)) break; else {
     $u$8248 = $u$9$lcssa;
     $x$12245 = $x$13$lcssa;
    }
   }
  }
 } while (0);
 $$0 = (HEAP8[2472] | 0) != 0 ? 0 : $49;
 return $$0 | 0;
}

function _ccvt($t, $w, $y) {
 $t = $t | 0;
 $w = $w | 0;
 $y = $y | 0;
 var $$0 = 0, $$pre$i = 0, $$pre$i31 = 0, $1 = 0, $101 = 0, $102 = 0, $104 = 0, $107 = 0, $11 = 0, $122 = 0, $123 = 0, $124 = 0, $126 = 0, $128 = 0, $131 = 0, $133 = 0, $135 = 0.0, $14 = 0, $142 = 0.0, $148 = 0, $149 = 0, $151 = 0, $154 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $175 = 0, $178 = 0, $180 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $189 = 0.0, $19 = 0, $193 = 0.0, $194 = 0.0, $197 = 0.0, $2 = 0, $202 = 0, $203 = 0, $205 = 0, $208 = 0, $25 = 0, $26 = 0, $28 = 0, $3 = 0, $31 = 0, $37 = 0, $4 = 0, $44 = 0, $45 = 0, $47 = 0, $49 = 0, $5 = 0, $52 = 0, $54 = 0, $56 = 0.0, $63 = 0.0, $69 = 0, $7 = 0, $70 = 0, $72 = 0, $74 = 0, $77 = 0, $79 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $88 = 0.0, $9 = 0, $92 = 0.0, $93 = 0.0, $96 = 0.0, $i$012$i = 0, $i$012$i$i = 0, $i$06$i = 0, $i$06$i$i = 0, $i$06$i$i28 = 0, $i$066 = 0, $i$07$i = 0, $i$09$i = 0, $i$09$i$i = 0, $i1$06$i = 0, $i1$06$i$i = 0, $i1$08$i = 0, $i1$08$i$i = 0, $i11$079 = 0, $i15$083 = 0, $i19$087 = 0, $i23$091 = 0, $i3$070 = 0, $i7$075 = 0, $storemerge$i = 0, $storemerge$i$i = 0, $storemerge$in$i = 0.0, $storemerge$in$i$i = 0.0, $v$011$i = 0, $v$011$i$i = 0, $v$05$i = 0, $v$05$i$byval_copy = 0, $v$05$i$i = 0, $v$05$i$i29 = 0, $v$06$i = 0, $v$067 = 0, $v$16$i = 0, $v$16$i$i = 0, $v10$078 = 0, $v14$082 = 0, $v18$086 = 0, $v2$069 = 0, $v22$090 = 0, $v6$074 = 0, $x$04$i = 0, $x$04$i$i = 0, $x$04$i$i30 = 0, $x$05$i = 0, $x$05$i$i = 0, $x$05$i18 = 0, $x$068 = 0, $x$07$i = 0, $x$07$i$i = 0, $x1$071 = 0, $x13$081 = 0, $x17$085 = 0, $x21$089 = 0, $x5$073 = 0, $x9$077 = 0, $yv$0 = 0, $yv$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $v$05$i$byval_copy = sp;
 if (!$w) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $1 = $w + 8 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = HEAP32[$w >> 2] | 0;
 $4 = $w + 12 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $7 = $w + ($5 + 4 + ($5 & 1) << 2) | 0;
 $9 = ($2 | 0) != 0;
 if ($9 & ($3 | 0) > ($t | 0)) $yv$1 = 0; else {
  if (($3 | 0) == ($t | 0)) {
   $11 = _ca($w) | 0;
   HEAP32[$y >> 2] = $11;
   if (!$11) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else $yv$0 = 0;
  } else {
   $14 = _ga($t, $2, $5, $w + 16 | 0) | 0;
   HEAP32[$y >> 2] = $14;
   if (!$14) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $17 = HEAP32[$14 + 12 >> 2] | 0;
   $19 = $14 + ($17 + 4 + ($17 & 1) << 2) | 0;
   if (!($t & 80)) $yv$0 = $19; else {
    _fillv($t, $2, $19);
    $yv$0 = $19;
   }
  }
  if ($9 & ($3 | 0) != ($t | 0)) $yv$1 = $yv$0; else {
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 do switch (($3 << 7) + $t | 0) {
 case 513:
  {
   $25 = HEAP32[$1 >> 2] | 0;
   $26 = HEAP32[$4 >> 2] | 0;
   $28 = _ga(1, $25, $26, $w + 16 | 0) | 0;
   HEAP32[$y >> 2] = $28;
   if (!$28) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $31 = HEAP32[$28 + 12 >> 2] | 0;
   if (($25 | 0) <= 0) {
    $$0 = 1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $i$07$i = 0;
   $v$06$i = $w + ($26 + 4 + ($26 & 1) << 2) | 0;
   $x$05$i = $28 + ($31 + 4 + ($31 & 1) << 2) | 0;
   while (1) {
    $37 = HEAP32[$v$06$i >> 2] | 0;
    if ($37 >>> 0 >= 2) {
     $$0 = 0;
     label = 84;
     break;
    }
    HEAP8[$x$05$i >> 0] = $37;
    $i$07$i = $i$07$i + 1 | 0;
    if (($i$07$i | 0) >= ($25 | 0)) {
     $$0 = 1;
     label = 84;
     break;
    } else {
     $v$06$i = $v$06$i + 4 | 0;
     $x$05$i = $x$05$i + 1 | 0;
    }
   }
   if ((label | 0) == 84) {
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 case 2052:
  {
   $148 = HEAP32[$1 >> 2] | 0;
   $149 = HEAP32[$4 >> 2] | 0;
   $151 = _ga(8, $148, $149, $w + 16 | 0) | 0;
   HEAP32[$y >> 2] = $151;
   if (!$151) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $154 = HEAP32[$151 + 12 >> 2] | 0;
   do if (($148 | 0) > 0) {
    $i$06$i$i28 = 0;
    $v$05$i$i29 = $w + ($149 + 4 + ($149 & 1) << 2) | 0;
    $x$04$i$i30 = $151 + ($154 + 4 + ($154 & 1) << 2) | 0;
    while (1) {
     HEAP32[$v$05$i$byval_copy >> 2] = HEAP32[$v$05$i$i29 >> 2];
     HEAP32[$v$05$i$byval_copy + 4 >> 2] = HEAP32[$v$05$i$i29 + 4 >> 2];
     HEAP32[$v$05$i$byval_copy + 8 >> 2] = HEAP32[$v$05$i$i29 + 8 >> 2];
     HEAP32[$v$05$i$byval_copy + 12 >> 2] = HEAP32[$v$05$i$i29 + 12 >> 2];
     if (!((_freal($v$05$i$byval_copy) | 0) << 24 >> 24)) {
      $$0 = 0;
      label = 84;
      break;
     }
     HEAPF64[$x$04$i$i30 >> 3] = +HEAPF64[$v$05$i$i29 >> 3];
     $i$06$i$i28 = $i$06$i$i28 + 1 | 0;
     if (($i$06$i$i28 | 0) >= ($148 | 0)) break; else {
      $v$05$i$i29 = $v$05$i$i29 + 16 | 0;
      $x$04$i$i30 = $x$04$i$i30 + 8 | 0;
     }
    }
    if ((label | 0) == 84) {
     STACKTOP = sp;
     return $$0 | 0;
    }
    $$pre$i31 = HEAP32[$y >> 2] | 0;
    if (!$$pre$i31) {
     $$0 = 0;
     STACKTOP = sp;
     return $$0 | 0;
    } else {
     $169 = $$pre$i31;
     $171 = HEAP32[$$pre$i31 + 12 >> 2] | 0;
     break;
    }
   } else {
    $169 = $151;
    $171 = $154;
   } while (0);
   $170 = HEAP32[$169 + 8 >> 2] | 0;
   $173 = $169 + ($171 + 4 + ($171 & 1) << 2) | 0;
   $175 = _ga(4, $170, $171, $169 + 16 | 0) | 0;
   HEAP32[$y >> 2] = $175;
   if (!$175) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $178 = HEAP32[$175 + 12 >> 2] | 0;
   $180 = $175 + ($178 + 4 + ($178 & 1) << 2) | 0;
   $182 = +HEAPF64[326] + 1.0;
   $183 = $182 * -2147483648.0;
   $184 = $182 * 2147483647.0;
   if (($170 | 0) > 0) $i$09$i$i = 0; else {
    $$0 = 1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   while (1) {
    $189 = +HEAPF64[$173 + ($i$09$i$i << 3) >> 3];
    $i$09$i$i = $i$09$i$i + 1 | 0;
    if ($189 < $183 | $184 < $189) {
     $$0 = 0;
     label = 84;
     break;
    }
    if (($i$09$i$i | 0) >= ($170 | 0)) {
     $i1$06$i$i = 0;
     $x$05$i$i = $180;
     break;
    }
   }
   if ((label | 0) == 84) {
    STACKTOP = sp;
    return $$0 | 0;
   }
   while (1) {
    $193 = +HEAPF64[$173 + ($i1$06$i$i << 3) >> 3];
    $194 = +Math_floor(+$193);
    if (!((_feq($193, $194) | 0) << 24 >> 24)) {
     $197 = $194 + 1.0;
     if (!((_feq($193, $197) | 0) << 24 >> 24)) {
      $$0 = 0;
      label = 84;
      break;
     } else $storemerge$in$i$i = $197;
    } else $storemerge$in$i$i = $194;
    HEAP32[$x$05$i$i >> 2] = ~~$storemerge$in$i$i;
    $i1$06$i$i = $i1$06$i$i + 1 | 0;
    if (($i1$06$i$i | 0) >= ($170 | 0)) {
     $$0 = 1;
     label = 84;
     break;
    } else $x$05$i$i = $x$05$i$i + 4 | 0;
   }
   if ((label | 0) == 84) {
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 case 2056:
  {
   $202 = HEAP32[$1 >> 2] | 0;
   $203 = HEAP32[$4 >> 2] | 0;
   $205 = _ga(8, $202, $203, $w + 16 | 0) | 0;
   HEAP32[$y >> 2] = $205;
   if (!$205) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $208 = HEAP32[$205 + 12 >> 2] | 0;
   if (($202 | 0) <= 0) {
    $$0 = 1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $i$06$i = 0;
   $v$05$i = $w + ($203 + 4 + ($203 & 1) << 2) | 0;
   $x$04$i = $205 + ($208 + 4 + ($208 & 1) << 2) | 0;
   while (1) {
    HEAP32[$v$05$i$byval_copy >> 2] = HEAP32[$v$05$i >> 2];
    HEAP32[$v$05$i$byval_copy + 4 >> 2] = HEAP32[$v$05$i + 4 >> 2];
    HEAP32[$v$05$i$byval_copy + 8 >> 2] = HEAP32[$v$05$i + 8 >> 2];
    HEAP32[$v$05$i$byval_copy + 12 >> 2] = HEAP32[$v$05$i + 12 >> 2];
    if (!((_freal($v$05$i$byval_copy) | 0) << 24 >> 24)) {
     $$0 = 0;
     label = 84;
     break;
    }
    HEAPF64[$x$04$i >> 3] = +HEAPF64[$v$05$i >> 3];
    $i$06$i = $i$06$i + 1 | 0;
    if (($i$06$i | 0) >= ($202 | 0)) {
     $$0 = 1;
     label = 84;
     break;
    } else {
     $v$05$i = $v$05$i + 16 | 0;
     $x$04$i = $x$04$i + 8 | 0;
    }
   }
   if ((label | 0) == 84) {
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 case 1028:
  {
   $69 = HEAP32[$1 >> 2] | 0;
   $70 = HEAP32[$4 >> 2] | 0;
   $72 = $w + ($70 + 4 + ($70 & 1) << 2) | 0;
   $74 = _ga(4, $69, $70, $w + 16 | 0) | 0;
   HEAP32[$y >> 2] = $74;
   if (!$74) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $77 = HEAP32[$74 + 12 >> 2] | 0;
   $79 = $74 + ($77 + 4 + ($77 & 1) << 2) | 0;
   $81 = +HEAPF64[326] + 1.0;
   $82 = $81 * -2147483648.0;
   $83 = $81 * 2147483647.0;
   if (($69 | 0) > 0) $i$09$i = 0; else {
    $$0 = 1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   while (1) {
    $88 = +HEAPF64[$72 + ($i$09$i << 3) >> 3];
    $i$09$i = $i$09$i + 1 | 0;
    if ($88 < $82 | $83 < $88) {
     $$0 = 0;
     label = 84;
     break;
    }
    if (($i$09$i | 0) >= ($69 | 0)) {
     $i1$06$i = 0;
     $x$05$i18 = $79;
     break;
    }
   }
   if ((label | 0) == 84) {
    STACKTOP = sp;
    return $$0 | 0;
   }
   while (1) {
    $92 = +HEAPF64[$72 + ($i1$06$i << 3) >> 3];
    $93 = +Math_floor(+$92);
    if (!((_feq($92, $93) | 0) << 24 >> 24)) {
     $96 = $93 + 1.0;
     if (!((_feq($92, $96) | 0) << 24 >> 24)) {
      $$0 = 0;
      label = 84;
      break;
     } else $storemerge$in$i = $96;
    } else $storemerge$in$i = $93;
    HEAP32[$x$05$i18 >> 2] = ~~$storemerge$in$i;
    $i1$06$i = $i1$06$i + 1 | 0;
    if (($i1$06$i | 0) >= ($69 | 0)) {
     $$0 = 1;
     label = 84;
     break;
    } else $x$05$i18 = $x$05$i18 + 4 | 0;
   }
   if ((label | 0) == 84) {
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 case 1025:
  {
   $44 = HEAP32[$1 >> 2] | 0;
   $45 = HEAP32[$4 >> 2] | 0;
   $47 = $w + ($45 + 4 + ($45 & 1) << 2) | 0;
   $49 = _ga(1, $44, $45, $w + 16 | 0) | 0;
   HEAP32[$y >> 2] = $49;
   if (!$49) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $52 = HEAP32[$49 + 12 >> 2] | 0;
   $54 = $49 + ($52 + 4 + ($52 & 1) << 2) | 0;
   if (($44 | 0) > 0) {
    $i$012$i = 0;
    $v$011$i = $47;
   } else {
    $$0 = 1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   while (1) {
    $56 = +HEAPF64[$v$011$i >> 3];
    if ($56 < -2.0 | $56 > 2.0) {
     $$0 = 0;
     label = 84;
     break;
    }
    $i$012$i = $i$012$i + 1 | 0;
    if (($i$012$i | 0) >= ($44 | 0)) {
     $i1$08$i = 0;
     $v$16$i = $47;
     $x$07$i = $54;
     break;
    } else $v$011$i = $v$011$i + 8 | 0;
   }
   if ((label | 0) == 84) {
    STACKTOP = sp;
    return $$0 | 0;
   }
   while (1) {
    $63 = +HEAPF64[$v$16$i >> 3];
    $v$16$i = $v$16$i + 8 | 0;
    if ($63 != 0.0) if (!((_feq(1.0, $63) | 0) << 24 >> 24)) {
     $$0 = 0;
     label = 84;
     break;
    } else $storemerge$i = 1; else $storemerge$i = 0;
    HEAP8[$x$07$i >> 0] = $storemerge$i;
    $i1$08$i = $i1$08$i + 1 | 0;
    if (($i1$08$i | 0) >= ($44 | 0)) {
     $$0 = 1;
     label = 84;
     break;
    } else $x$07$i = $x$07$i + 1 | 0;
   }
   if ((label | 0) == 84) {
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 case 2049:
  {
   $101 = HEAP32[$1 >> 2] | 0;
   $102 = HEAP32[$4 >> 2] | 0;
   $104 = _ga(8, $101, $102, $w + 16 | 0) | 0;
   HEAP32[$y >> 2] = $104;
   if (!$104) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $107 = HEAP32[$104 + 12 >> 2] | 0;
   do if (($101 | 0) > 0) {
    $i$06$i$i = 0;
    $v$05$i$i = $w + ($102 + 4 + ($102 & 1) << 2) | 0;
    $x$04$i$i = $104 + ($107 + 4 + ($107 & 1) << 2) | 0;
    while (1) {
     HEAP32[$v$05$i$byval_copy >> 2] = HEAP32[$v$05$i$i >> 2];
     HEAP32[$v$05$i$byval_copy + 4 >> 2] = HEAP32[$v$05$i$i + 4 >> 2];
     HEAP32[$v$05$i$byval_copy + 8 >> 2] = HEAP32[$v$05$i$i + 8 >> 2];
     HEAP32[$v$05$i$byval_copy + 12 >> 2] = HEAP32[$v$05$i$i + 12 >> 2];
     if (!((_freal($v$05$i$byval_copy) | 0) << 24 >> 24)) {
      $$0 = 0;
      label = 84;
      break;
     }
     HEAPF64[$x$04$i$i >> 3] = +HEAPF64[$v$05$i$i >> 3];
     $i$06$i$i = $i$06$i$i + 1 | 0;
     if (($i$06$i$i | 0) >= ($101 | 0)) break; else {
      $v$05$i$i = $v$05$i$i + 16 | 0;
      $x$04$i$i = $x$04$i$i + 8 | 0;
     }
    }
    if ((label | 0) == 84) {
     STACKTOP = sp;
     return $$0 | 0;
    }
    $$pre$i = HEAP32[$y >> 2] | 0;
    if (!$$pre$i) {
     $$0 = 0;
     STACKTOP = sp;
     return $$0 | 0;
    } else {
     $122 = $$pre$i;
     $124 = HEAP32[$$pre$i + 12 >> 2] | 0;
     break;
    }
   } else {
    $122 = $104;
    $124 = $107;
   } while (0);
   $123 = HEAP32[$122 + 8 >> 2] | 0;
   $126 = $122 + ($124 + 4 + ($124 & 1) << 2) | 0;
   $128 = _ga(1, $123, $124, $122 + 16 | 0) | 0;
   HEAP32[$y >> 2] = $128;
   if (!$128) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $131 = HEAP32[$128 + 12 >> 2] | 0;
   $133 = $128 + ($131 + 4 + ($131 & 1) << 2) | 0;
   if (($123 | 0) > 0) {
    $i$012$i$i = 0;
    $v$011$i$i = $126;
   } else {
    $$0 = 1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   while (1) {
    $135 = +HEAPF64[$v$011$i$i >> 3];
    if ($135 < -2.0 | $135 > 2.0) {
     $$0 = 0;
     label = 84;
     break;
    }
    $i$012$i$i = $i$012$i$i + 1 | 0;
    if (($i$012$i$i | 0) >= ($123 | 0)) {
     $i1$08$i$i = 0;
     $v$16$i$i = $126;
     $x$07$i$i = $133;
     break;
    } else $v$011$i$i = $v$011$i$i + 8 | 0;
   }
   if ((label | 0) == 84) {
    STACKTOP = sp;
    return $$0 | 0;
   }
   while (1) {
    $142 = +HEAPF64[$v$16$i$i >> 3];
    $v$16$i$i = $v$16$i$i + 8 | 0;
    if ($142 != 0.0) if (!((_feq(1.0, $142) | 0) << 24 >> 24)) {
     $$0 = 0;
     label = 84;
     break;
    } else $storemerge$i$i = 1; else $storemerge$i$i = 0;
    HEAP8[$x$07$i$i >> 0] = $storemerge$i$i;
    $i1$08$i$i = $i1$08$i$i + 1 | 0;
    if (($i1$08$i$i | 0) >= ($123 | 0)) {
     $$0 = 1;
     label = 84;
     break;
    } else $x$07$i$i = $x$07$i$i + 1 | 0;
   }
   if ((label | 0) == 84) {
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 case 132:
  {
   if (($2 | 0) <= 0) {
    $$0 = 1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $i$066 = 0;
   $v$067 = $7;
   $x$068 = $yv$1;
   while (1) {
    HEAP32[$x$068 >> 2] = HEAP8[$v$067 >> 0];
    $i$066 = $i$066 + 1 | 0;
    if (($i$066 | 0) == ($2 | 0)) {
     $$0 = 1;
     break;
    } else {
     $v$067 = $v$067 + 1 | 0;
     $x$068 = $x$068 + 4 | 0;
    }
   }
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 136:
  {
   if (($2 | 0) <= 0) {
    $$0 = 1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $i3$070 = 0;
   $v2$069 = $7;
   $x1$071 = $yv$1;
   while (1) {
    HEAPF64[$x1$071 >> 3] = +(HEAP8[$v2$069 >> 0] | 0);
    $i3$070 = $i3$070 + 1 | 0;
    if (($i3$070 | 0) == ($2 | 0)) {
     $$0 = 1;
     break;
    } else {
     $v2$069 = $v2$069 + 1 | 0;
     $x1$071 = $x1$071 + 8 | 0;
    }
   }
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 144:
  {
   if (($2 | 0) <= 0) {
    $$0 = 1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $i11$079 = 0;
   $v10$078 = $7;
   $x9$077 = $yv$1;
   while (1) {
    HEAPF64[$x9$077 >> 3] = +(HEAP8[$v10$078 >> 0] | 0);
    $i11$079 = $i11$079 + 1 | 0;
    if (($i11$079 | 0) == ($2 | 0)) {
     $$0 = 1;
     break;
    } else {
     $v10$078 = $v10$078 + 1 | 0;
     $x9$077 = $x9$077 + 16 | 0;
    }
   }
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 528:
  {
   if (($2 | 0) <= 0) {
    $$0 = 1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $i15$083 = 0;
   $v14$082 = $7;
   $x13$081 = $yv$1;
   while (1) {
    HEAPF64[$x13$081 >> 3] = +(HEAP32[$v14$082 >> 2] | 0);
    $i15$083 = $i15$083 + 1 | 0;
    if (($i15$083 | 0) == ($2 | 0)) {
     $$0 = 1;
     break;
    } else {
     $v14$082 = $v14$082 + 4 | 0;
     $x13$081 = $x13$081 + 16 | 0;
    }
   }
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 520:
  {
   if (($2 | 0) <= 0) {
    $$0 = 1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $i7$075 = 0;
   $v6$074 = $7;
   $x5$073 = $yv$1;
   while (1) {
    HEAPF64[$x5$073 >> 3] = +(HEAP32[$v6$074 >> 2] | 0);
    $i7$075 = $i7$075 + 1 | 0;
    if (($i7$075 | 0) == ($2 | 0)) {
     $$0 = 1;
     break;
    } else {
     $v6$074 = $v6$074 + 4 | 0;
     $x5$073 = $x5$073 + 8 | 0;
    }
   }
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 4160:
  {
   if (($2 | 0) <= 0) {
    $$0 = 1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $i23$091 = 0;
   $v22$090 = $7;
   $x21$089 = $yv$1;
   while (1) {
    HEAP32[$x21$089 + 4 >> 2] = _ca(HEAP32[$v22$090 >> 2] | 0) | 0;
    $i23$091 = $i23$091 + 1 | 0;
    if (($i23$091 | 0) == ($2 | 0)) {
     $$0 = 1;
     break;
    } else {
     $v22$090 = $v22$090 + 4 | 0;
     $x21$089 = $x21$089 + 8 | 0;
    }
   }
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 1040:
  {
   if (($2 | 0) <= 0) {
    $$0 = 1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $i19$087 = 0;
   $v18$086 = $7;
   $x17$085 = $yv$1;
   while (1) {
    HEAPF64[$x17$085 >> 3] = +HEAPF64[$v18$086 >> 3];
    $i19$087 = $i19$087 + 1 | 0;
    if (($i19$087 | 0) == ($2 | 0)) {
     $$0 = 1;
     break;
    } else {
     $v18$086 = $v18$086 + 8 | 0;
     $x17$085 = $x17$085 + 16 | 0;
    }
   }
   STACKTOP = sp;
   return $$0 | 0;
  }
 default:
  {
   _jsignal(3);
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 return 0;
}

function _indexof($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$0$i = 0, $$018 = 0, $$019 = 0, $$45 = 0, $$lcssa = 0, $$lcssa210 = 0, $$lcssa213 = 0, $$lcssa215 = 0, $$lcssa217 = 0, $$lcssa81 = 0, $$ph = 0, $$sum20 = 0, $$sum24 = 0, $$sum26 = 0, $100 = 0, $103 = 0, $106 = 0, $11 = 0, $111 = 0, $113 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $123 = 0, $125 = 0.0, $127 = 0, $129 = 0, $13 = 0, $131 = 0, $148 = 0, $152 = 0, $157 = 0, $16 = 0, $165 = 0, $169 = 0, $17 = 0, $172 = 0, $18 = 0, $180 = 0, $182 = 0, $185 = 0, $186 = 0, $187 = 0, $191 = 0, $193 = 0, $196 = 0, $198 = 0, $2 = 0, $20 = 0, $206 = 0.0, $207 = 0.0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $215 = 0, $219 = 0, $223 = 0, $225 = 0, $230 = 0, $231 = 0, $233 = 0, $236 = 0, $238 = 0, $242 = 0, $246 = 0, $253 = 0, $255 = 0, $258 = 0, $260 = 0, $264 = 0, $268 = 0, $274 = 0, $278 = 0, $280 = 0, $284 = 0, $288 = 0, $293 = 0, $297 = 0, $298 = 0.0, $30 = 0, $302 = 0, $305 = 0, $307 = 0, $31 = 0, $311 = 0, $315 = 0, $323 = 0, $327 = 0, $329 = 0, $33 = 0, $333 = 0, $337 = 0, $342 = 0, $37 = 0, $39 = 0, $41 = 0, $45 = 0, $46 = 0, $48 = 0, $5 = 0, $51 = 0, $52 = 0, $55 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $65 = 0, $68 = 0, $69 = 0, $70 = 0, $89 = 0, $92 = 0, $94 = 0, $95 = 0, $98 = 0, $i$0147 = 0, $i$015$i = 0, $i1$012$i = 0, $i10$0109 = 0, $i10$1124 = 0, $i11$0133 = 0, $i13$094 = 0, $i2$0143 = 0, $i3$010$i = 0, $i4$0138 = 0, $i6$0141 = 0, $i8$085 = 0, $j$084 = 0, $j$1127 = 0, $j$290 = 0, $j$397 = 0, $j$4101 = 0, $j$5112 = 0, $j$6116 = 0, $ja$0 = 0, $ja$1 = 0, $k$013$i = 0, $p$0 = 0, $q = 0, $t$i = 0, $u$011$i = 0, $u$0144 = 0, $u$1137 = 0, $u$2140 = 0, $v$08$i = 0, $v$087 = 0, $v$1132 = 0, $v$293 = 0, $v$3108 = 0, $v$4123 = 0, $x$09$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $t$i = sp + 8 | 0;
 $q = sp;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $5 = HEAP32[$a >> 2] | 0;
 $6 = $a + 12 | 0;
 if (!(HEAP32[$6 >> 2] | 0)) $31 = 1; else $31 = HEAP32[$a + 16 >> 2] | 0;
 $11 = _aii($a) | 0;
 $12 = HEAP32[$w >> 2] | 0;
 $13 = HEAP32[$6 >> 2] | 0;
 $$45 = ($13 | 0) < 1 ? 0 : $13 + -1 | 0;
 $16 = $w + 12 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 $18 = $17 - $$45 | 0;
 $20 = ($18 | 0) < 0 ? 0 : $18;
 $21 = ($11 | 0) != 0;
 if ($21) $33 = (HEAP32[$w + 8 >> 2] | 0) / ($11 | 0) | 0; else $33 = 0;
 if (($17 | 0) < ($$45 | 0)) $41 = 0; else {
  $30 = (_memcmp($a + 20 | 0, $w + 16 + ($20 << 2) | 0, $$45 << 2) | 0) == 0;
  if (($33 | 0) != 0 & ($21 & (($31 | 0) != 0 & $30))) if (!((_homo($5, $12) | 0) << 24 >> 24)) $41 = 1; else {
   $45 = ($5 | 0) > ($12 | 0);
   $46 = $45 ? $5 : $12;
   $48 = Math_imul(_bp($46) | 0, $11) | 0;
   if (($48 | 0) == 1) {
    $51 = HEAP32[$a + 8 >> 2] | 0;
    $52 = HEAP32[$6 >> 2] | 0;
    $55 = $a + ($52 + 4 + ($52 & 1) << 2) + $51 | 0;
    $57 = HEAP32[$w + 8 >> 2] | 0;
    $58 = HEAP32[$16 >> 2] | 0;
    $60 = $w + ($58 + 4 + ($58 & 1) << 2) | 0;
    $65 = _ga(4, $57, $58 - (($52 | 0) < 1 ? 0 : $52 + -1 | 0) | 0, $w + 16 | 0) | 0;
    if (!$65) $$0$i = 0; else {
     $68 = HEAP32[$65 + 12 >> 2] | 0;
     $69 = $68 & 1;
     $i$015$i = 0;
     do {
      HEAP32[$t$i + ($i$015$i << 2) >> 2] = $51;
      $i$015$i = $i$015$i + 1 | 0;
     } while (($i$015$i | 0) != 256);
     $70 = $65 + ($68 + 4 + $69 << 2) | 0;
     if (($51 | 0) > 0) {
      $i1$012$i = 0;
      $k$013$i = $51;
      $u$011$i = $55;
      do {
       $k$013$i = $k$013$i + -1 | 0;
       $u$011$i = $u$011$i + -1 | 0;
       HEAP32[$t$i + ((HEAPU8[$u$011$i >> 0] | 0) << 2) >> 2] = $k$013$i;
       $i1$012$i = $i1$012$i + 1 | 0;
      } while (($i1$012$i | 0) != ($51 | 0));
     }
     if (($57 | 0) > 0) {
      $i3$010$i = 0;
      $v$08$i = $60;
      $x$09$i = $70;
      while (1) {
       HEAP32[$x$09$i >> 2] = HEAP32[$t$i + ((HEAPU8[$v$08$i >> 0] | 0) << 2) >> 2];
       $i3$010$i = $i3$010$i + 1 | 0;
       if (($i3$010$i | 0) == ($57 | 0)) {
        $$0$i = $65;
        break;
       } else {
        $v$08$i = $v$08$i + 1 | 0;
        $x$09$i = $x$09$i + 4 | 0;
       }
      }
     } else $$0$i = $65;
    }
    $$0 = $$0$i;
    STACKTOP = sp;
    return $$0 | 0;
   }
   if (($46 | 0) == ($5 | 0)) $$018 = $a; else {
    $89 = _cvt($46, $a) | 0;
    if (!$89) {
     $$0 = 0;
     STACKTOP = sp;
     return $$0 | 0;
    } else $$018 = $89;
   }
   $92 = HEAP32[$$018 + 12 >> 2] | 0;
   $$sum20 = $92 + 4 + ($92 & 1) | 0;
   $94 = $$018 + ($$sum20 << 2) | 0;
   if ($45) {
    $95 = _cvt($46, $w) | 0;
    if (!$95) {
     $$0 = 0;
     STACKTOP = sp;
     return $$0 | 0;
    } else $$019 = $95;
   } else $$019 = $w;
   $98 = HEAP32[$$019 + 12 >> 2] | 0;
   $100 = $$019 + ($98 + 4 + ($98 & 1) << 2) | 0;
   if ($46 & 64) {
    $103 = _kbox($$018) | 0;
    $$0 = _indexof($103, _kbox($$019) | 0) | 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $106 = $31 << 1;
   L42 : do if (($106 | 0) < 1073741827) {
    $i$0147 = 0;
    while (1) {
     $111 = HEAP32[7680 + ($i$0147 << 2) >> 2] | 0;
     $i$0147 = $i$0147 + 1 | 0;
     if (($106 | 0) <= ($111 | 0)) {
      $p$0 = $111;
      break L42;
     }
     if (($i$0147 | 0) >= 32) {
      $p$0 = $106;
      break;
     }
    }
   } else $p$0 = $106; while (0);
   $113 = _apv($p$0, -1, 0) | 0;
   if (!$113) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $116 = HEAP32[$113 + 12 >> 2] | 0;
   $$sum24 = $116 + 4 + ($116 & 1) | 0;
   $118 = $113 + ($$sum24 << 2) | 0;
   $120 = _ga(4, $33, $20, $$019 + 16 | 0) | 0;
   if (!$120) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $123 = HEAP32[$120 + 12 >> 2] | 0;
   $$sum26 = $123 + 4 + ($123 & 1) | 0;
   $125 = +HEAPF64[52];
   $127 = $46 & 56;
   $129 = ($127 | 0) == 0 | $125 == 0.0;
   $131 = ($46 & 32 | 0) != 0;
   if ($131) {
    $180 = 386;
    $193 = 385;
   } else {
    if (!($46 & 8)) $$ph = ($46 & 16 | 0) != 0 ? 382 : 381; else $$ph = 387;
    $180 = ($46 & 24 | 0) != 0 & $125 != 0.0 ? 384 : 383;
    $193 = $$ph;
   }
   L59 : do if (($11 | 0) == 1 & ($46 & 4 | 0) != 0) {
    HEAP32[$q >> 2] = $31;
    L61 : do if (($31 | 0) > 0) {
     $i2$0143 = 0;
     $u$0144 = $$018 + ($$sum20 + $31 << 2) | 0;
     while (1) {
      $u$0144 = $u$0144 + -4 | 0;
      $148 = HEAP32[$u$0144 >> 2] | 0;
      if (!(($148 | 0) > -1 & ($p$0 | 0) > ($148 | 0))) break;
      $152 = (HEAP32[$q >> 2] | 0) + -1 | 0;
      HEAP32[$q >> 2] = $152;
      HEAP32[$113 + ($148 + $$sum24 << 2) >> 2] = $152;
      $i2$0143 = $i2$0143 + 1 | 0;
      if (($i2$0143 | 0) >= ($31 | 0)) break L61;
     }
     HEAP32[$q >> 2] = -1;
     _mvc($p$0 << 2, $118, 4, $q);
     break L59;
    } while (0);
    $157 = ($33 | 0) > 0;
    do if (($$018 | 0) == ($$019 | 0)) {
     if ($157) {
      $i4$0138 = 0;
      $u$1137 = $100;
     } else break;
     while (1) {
      HEAP32[$120 + ($i4$0138 + $$sum26 << 2) >> 2] = HEAP32[$113 + ((HEAP32[$u$1137 >> 2] | 0) + $$sum24 << 2) >> 2];
      $i4$0138 = $i4$0138 + 1 | 0;
      if (($i4$0138 | 0) == ($33 | 0)) break; else $u$1137 = $u$1137 + 4 | 0;
     }
    } else {
     if ($157) {
      $i6$0141 = 0;
      $u$2140 = $100;
     } else break;
     do {
      $165 = HEAP32[$u$2140 >> 2] | 0;
      $u$2140 = $u$2140 + 4 | 0;
      if (($165 | 0) > -1 & ($165 | 0) < ($p$0 | 0)) {
       $169 = HEAP32[$113 + ($165 + $$sum24 << 2) >> 2] | 0;
       if (($169 | 0) > -1) $172 = $169; else label = 45;
      } else label = 45;
      if ((label | 0) == 45) {
       label = 0;
       $172 = $31;
      }
      HEAP32[$120 + ($i6$0141 + $$sum26 << 2) >> 2] = $172;
      $i6$0141 = $i6$0141 + 1 | 0;
     } while (($i6$0141 | 0) != ($33 | 0));
    } while (0);
    $$0 = _gc($120, $2) | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } while (0);
   HEAP32[$q >> 2] = ($127 | 0) != 0 ? $11 : $48;
   L83 : do if (($$018 | 0) == ($$019 | 0) & $129) {
    if (($31 | 0) > 0) {
     $i8$085 = 0;
     $v$087 = $94;
     while (1) {
      $182 = (ftCall_iii($180 | 0, $48 | 0, $v$087 | 0) | 0) % ($p$0 | 0) | 0;
      $185 = ($182 | 0) > -1 ? $182 : 0 - $182 | 0;
      $186 = $113 + ($185 + $$sum24 << 2) | 0;
      $187 = HEAP32[$186 >> 2] | 0;
      L88 : do if (($187 | 0) > -1) {
       $191 = $187;
       $j$084 = $185;
       while (1) {
        if ((ftCall_iiii($193 | 0, HEAP32[$q >> 2] | 0, $94 + (Math_imul($191, $48) | 0) | 0, $v$087 | 0) | 0) << 24 >> 24) {
         $$lcssa210 = $191;
         break;
        }
        $196 = $j$084 + 1 | 0;
        $j$084 = ($196 | 0) == ($p$0 | 0) ? 0 : $196;
        $198 = $113 + ($j$084 + $$sum24 << 2) | 0;
        $191 = HEAP32[$198 >> 2] | 0;
        if (($191 | 0) <= -1) {
         $$lcssa = $198;
         label = 56;
         break L88;
        }
       }
       HEAP32[$120 + ($i8$085 + $$sum26 << 2) >> 2] = $$lcssa210;
      } else {
       $$lcssa = $186;
       label = 56;
      } while (0);
      if ((label | 0) == 56) {
       label = 0;
       HEAP32[$120 + ($i8$085 + $$sum26 << 2) >> 2] = $i8$085;
       HEAP32[$$lcssa >> 2] = $i8$085;
      }
      $i8$085 = $i8$085 + 1 | 0;
      if (($i8$085 | 0) == ($31 | 0)) break; else $v$087 = $v$087 + $48 | 0;
     }
    }
   } else {
    $206 = 1.0 - +HEAPF64[52];
    $207 = 1.0 / $206;
    if (($31 | 0) > 0) {
     $i11$0133 = 0;
     $v$1132 = $94;
     while (1) {
      $210 = (ftCall_iii($180 | 0, $48 | 0, $v$1132 | 0) | 0) % ($p$0 | 0) | 0;
      $213 = ($210 | 0) > -1 ? $210 : 0 - $210 | 0;
      $214 = $113 + ($213 + $$sum24 << 2) | 0;
      $215 = HEAP32[$214 >> 2] | 0;
      L101 : do if (($215 | 0) > -1) {
       $219 = $215;
       $j$1127 = $213;
       while (1) {
        if ((ftCall_iiii($193 | 0, HEAP32[$q >> 2] | 0, $94 + (Math_imul($219, $48) | 0) | 0, $v$1132 | 0) | 0) << 24 >> 24) break L101;
        $223 = $j$1127 + 1 | 0;
        $j$1127 = ($223 | 0) == ($p$0 | 0) ? 0 : $223;
        $225 = $113 + ($j$1127 + $$sum24 << 2) | 0;
        $219 = HEAP32[$225 >> 2] | 0;
        if (($219 | 0) <= -1) {
         $$lcssa81 = $225;
         label = 63;
         break;
        }
       }
      } else {
       $$lcssa81 = $214;
       label = 63;
      } while (0);
      if ((label | 0) == 63) {
       label = 0;
       HEAP32[$$lcssa81 >> 2] = $i11$0133;
      }
      $i11$0133 = $i11$0133 + 1 | 0;
      if (($i11$0133 | 0) == ($31 | 0)) break; else $v$1132 = $v$1132 + $48 | 0;
     }
    }
    $230 = ($33 | 0) > 0;
    if ($129) {
     if (!$230) break;
     $i13$094 = 0;
     $v$293 = $100;
     while (1) {
      $231 = $120 + ($i13$094 + $$sum26 << 2) | 0;
      HEAP32[$231 >> 2] = $31;
      $233 = (ftCall_iii($180 | 0, $48 | 0, $v$293 | 0) | 0) % ($p$0 | 0) | 0;
      $236 = ($233 | 0) > -1 ? $233 : 0 - $233 | 0;
      $238 = HEAP32[$113 + ($236 + $$sum24 << 2) >> 2] | 0;
      L114 : do if (($238 | 0) > -1) {
       $242 = $238;
       $j$290 = $236;
       while (1) {
        if ((ftCall_iiii($193 | 0, HEAP32[$q >> 2] | 0, $94 + (Math_imul($242, $48) | 0) | 0, $v$293 | 0) | 0) << 24 >> 24) {
         $$lcssa213 = $242;
         break;
        }
        $246 = $j$290 + 1 | 0;
        $j$290 = ($246 | 0) == ($p$0 | 0) ? 0 : $246;
        $242 = HEAP32[$113 + ($j$290 + $$sum24 << 2) >> 2] | 0;
        if (($242 | 0) <= -1) break L114;
       }
       HEAP32[$231 >> 2] = $$lcssa213;
      } while (0);
      $i13$094 = $i13$094 + 1 | 0;
      if (($i13$094 | 0) == ($33 | 0)) break L83; else $v$293 = $v$293 + $48 | 0;
     }
    }
    if ($131) {
     if (!$230) break;
     $i10$0109 = 0;
     $v$3108 = $100;
     while (1) {
      $253 = $120 + ($i10$0109 + $$sum26 << 2) | 0;
      HEAP32[$253 >> 2] = $31;
      $255 = (_hiat($207, $48, HEAP32[$v$3108 >> 2] | 0) | 0) % ($p$0 | 0) | 0;
      $258 = ($255 | 0) > -1 ? $255 : 0 - $255 | 0;
      $260 = HEAP32[$113 + ($258 + $$sum24 << 2) >> 2] | 0;
      L144 : do if (($260 | 0) > -1) {
       $264 = $260;
       $j$397 = $258;
       while (1) {
        if ((ftCall_iiii($193 | 0, HEAP32[$q >> 2] | 0, $94 + (Math_imul($264, $48) | 0) | 0, $v$3108 | 0) | 0) << 24 >> 24) {
         $$lcssa215 = $264;
         break;
        }
        $268 = $j$397 + 1 | 0;
        $j$397 = ($268 | 0) == ($p$0 | 0) ? 0 : $268;
        $264 = HEAP32[$113 + ($j$397 + $$sum24 << 2) >> 2] | 0;
        if (($264 | 0) <= -1) break L144;
       }
       HEAP32[$253 >> 2] = $$lcssa215;
      } while (0);
      $274 = (_hiat($206, $48, HEAP32[$v$3108 >> 2] | 0) | 0) % ($p$0 | 0) | 0;
      if (($274 | 0) != ($255 | 0)) {
       $278 = ($274 | 0) > -1 ? $274 : 0 - $274 | 0;
       $280 = HEAP32[$113 + ($278 + $$sum24 << 2) >> 2] | 0;
       L152 : do if (($280 | 0) > -1) {
        $284 = $280;
        $j$4101 = $278;
        while (1) {
         if ((ftCall_iiii($193 | 0, HEAP32[$q >> 2] | 0, $94 + (Math_imul($284, $48) | 0) | 0, $v$3108 | 0) | 0) << 24 >> 24) {
          $ja$0 = $284;
          break L152;
         }
         $288 = $j$4101 + 1 | 0;
         $j$4101 = ($288 | 0) == ($p$0 | 0) ? 0 : $288;
         $284 = HEAP32[$113 + ($j$4101 + $$sum24 << 2) >> 2] | 0;
         if (($284 | 0) <= -1) {
          $ja$0 = $31;
          break;
         }
        }
       } else $ja$0 = $31; while (0);
       $293 = HEAP32[$253 >> 2] | 0;
       HEAP32[$253 >> 2] = ($293 | 0) < ($ja$0 | 0) ? $293 : $ja$0;
      }
      $i10$0109 = $i10$0109 + 1 | 0;
      if (($i10$0109 | 0) == ($33 | 0)) break; else $v$3108 = $v$3108 + $48 | 0;
     }
    } else {
     if (!$230) break;
     $i10$1124 = 0;
     $v$4123 = $100;
     while (1) {
      $297 = $120 + ($i10$1124 + $$sum26 << 2) | 0;
      HEAP32[$297 >> 2] = $31;
      $298 = +HEAPF64[$v$4123 >> 3];
      HEAPF64[tempDoublePtr >> 3] = $207 * $298;
      $302 = (HEAP32[tempDoublePtr + 4 >> 2] | 0) % ($p$0 | 0) | 0;
      $305 = ($302 | 0) > -1 ? $302 : 0 - $302 | 0;
      $307 = HEAP32[$113 + ($305 + $$sum24 << 2) >> 2] | 0;
      L126 : do if (($307 | 0) > -1) {
       $311 = $307;
       $j$5112 = $305;
       while (1) {
        if ((ftCall_iiii($193 | 0, HEAP32[$q >> 2] | 0, $94 + (Math_imul($311, $48) | 0) | 0, $v$4123 | 0) | 0) << 24 >> 24) {
         $$lcssa217 = $311;
         break;
        }
        $315 = $j$5112 + 1 | 0;
        $j$5112 = ($315 | 0) == ($p$0 | 0) ? 0 : $315;
        $311 = HEAP32[$113 + ($j$5112 + $$sum24 << 2) >> 2] | 0;
        if (($311 | 0) <= -1) break L126;
       }
       HEAP32[$297 >> 2] = $$lcssa217;
      } while (0);
      HEAPF64[tempDoublePtr >> 3] = $206 * $298;
      $323 = (HEAP32[tempDoublePtr + 4 >> 2] | 0) % ($p$0 | 0) | 0;
      if (($323 | 0) != ($302 | 0)) {
       $327 = ($323 | 0) > -1 ? $323 : 0 - $323 | 0;
       $329 = HEAP32[$113 + ($327 + $$sum24 << 2) >> 2] | 0;
       L134 : do if (($329 | 0) > -1) {
        $333 = $329;
        $j$6116 = $327;
        while (1) {
         if ((ftCall_iiii($193 | 0, HEAP32[$q >> 2] | 0, $94 + (Math_imul($333, $48) | 0) | 0, $v$4123 | 0) | 0) << 24 >> 24) {
          $ja$1 = $333;
          break L134;
         }
         $337 = $j$6116 + 1 | 0;
         $j$6116 = ($337 | 0) == ($p$0 | 0) ? 0 : $337;
         $333 = HEAP32[$113 + ($j$6116 + $$sum24 << 2) >> 2] | 0;
         if (($333 | 0) <= -1) {
          $ja$1 = $31;
          break;
         }
        }
       } else $ja$1 = $31; while (0);
       $342 = HEAP32[$297 >> 2] | 0;
       HEAP32[$297 >> 2] = ($342 | 0) < ($ja$1 | 0) ? $342 : $ja$1;
      }
      $i10$1124 = $i10$1124 + 1 | 0;
      if (($i10$1124 | 0) == ($33 | 0)) break; else $v$4123 = $v$4123 + $48 | 0;
     }
    }
   } while (0);
   $$0 = _gc($120, $2) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else $41 = $30;
 }
 $37 = _sc($20) | 0;
 $39 = _take($37, _shape($w) | 0) | 0;
 $$0 = _reshape($39, _sc($21 | $41 ^ 1 ? $31 : 0) | 0) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _poly2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$0442 = 0, $$05 = 0, $$1 = 0, $$1$i = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$lcssa = 0.0, $$lobit = 0, $$sum30 = 0, $0 = 0, $1 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $117 = 0, $12 = 0, $126 = 0, $128 = 0, $129 = 0, $13 = 0, $131 = 0, $137 = 0, $139 = 0.0, $144 = 0.0, $148 = 0, $15 = 0, $150 = 0, $152 = 0, $158 = 0, $16 = 0, $2 = 0, $20 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $48 = 0, $52 = 0, $54 = 0, $57 = 0, $60 = 0, $64 = 0, $67 = 0, $69 = 0, $74 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $86 = 0.0, $96 = 0.0, $97 = 0.0, $an$038 = 0, $at$036 = 0, $c$041 = 0, $d4 = 0, $i$01$i$us = 0, $i$02$i = 0, $i$059 = 0, $i$059$us = 0, $i1$054$us = 0, $i11$047$us = 0, $i16$070 = 0, $i21$065 = 0, $i21$065$us = 0, $i9$050 = 0, $i9$050$us = 0, $j$01$i = 0, $j$02$i$us = 0, $p$053$us = 0.0, $p6 = 0, $t$0 = 0, $wv$060$us = 0, $wv14$068 = 0, $wv19$0$1$val$us = 0.0, $wv19$063$us = 0, $wv5$048 = 0, $wv5$048$us = 0, $x$i = 0, $x7 = 0, $z$0$lcssa$i = 0.0, $z$03$i = 0.0, $z$i = 0, $zv$058 = 0, $zv$058$us = 0, $zv15$069 = 0, $zv20$064 = 0, $zv20$064$us = 0, $zv8$049 = 0, $zv8$049$us = 0, sp = 0, $zv20$064$us$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy3 = sp + 176 | 0;
 $$byval_copy2 = sp + 160 | 0;
 $x$i = sp + 144 | 0;
 $z$i = sp + 128 | 0;
 $0 = sp + 112 | 0;
 $1 = sp + 96 | 0;
 $d4 = sp + 80 | 0;
 $p6 = sp + 64 | 0;
 $x7 = sp + 48 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 16 | 0;
 $4 = sp;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $8 = HEAP32[$a + 12 >> 2] | 0;
 if (($8 | 0) > 1) {
  $$0 = _rank2ex($a, $w, 0, 1, 0, 171) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $12 = HEAP32[$a + 8 >> 2] | 0;
 $13 = HEAP32[$a >> 2] | 0;
 $15 = HEAP32[$w + 8 >> 2] | 0;
 $16 = HEAP32[$w >> 2] | 0;
 if (!($16 & 29)) {
  _jsignal(3);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!$12) {
  $20 = _shape($w) | 0;
  $$0 = _reshape($20, HEAP32[660] | 0) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$lobit = $13 >>> 5 & 1;
 if (!($$lobit | $13 & 29)) {
  _jsignal(3);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $27 = ($$lobit | 0) != 0;
 do if ($27) {
  $$sum30 = $8 + 4 + ($8 & 1) | 0;
  if (($12 | 0) != 2) {
   _jsignal(9);
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $31 = HEAP32[$a + ($$sum30 << 2) >> 2] | 0;
  $33 = HEAP32[$a + ($$sum30 + 1 << 2) >> 2] | 0;
  $35 = HEAP32[$33 + 8 >> 2] | 0;
  $36 = HEAP32[$33 >> 2] | 0;
  $37 = HEAP32[$31 >> 2] | 0;
  if (!($37 + $36 & 29)) {
   _jsignal(3);
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  if (HEAP32[$31 + 12 >> 2] | 0) {
   _jsignal(14);
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  if ((HEAP32[$33 + 12 >> 2] | 0) < 2) {
   $52 = ($36 | 0) > ($16 | 0) ? $36 : $16;
   $54 = ($52 | 0) > 8 ? $52 : 8;
   $$0442 = $33;
   $an$038 = $35;
   $at$036 = $36;
   $c$041 = $31;
   $t$0 = ($54 | 0) > ($37 | 0) ? $54 : $37;
   break;
  }
  _jsignal(14);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $48 = ($13 | 0) > ($16 | 0) ? $13 : $16;
  $$0442 = $a;
  $an$038 = $12;
  $at$036 = $13;
  $c$041 = 0;
  $t$0 = ($48 | 0) > 8 ? $48 : 8;
 } while (0);
 if (($t$0 | 0) == ($at$036 | 0)) $$1 = $$0442; else {
  $57 = _cvt($t$0, $$0442) | 0;
  if (!$57) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else $$1 = $57;
 }
 if (($t$0 | 0) == ($16 | 0)) $$05 = $w; else {
  $60 = _cvt($t$0, $w) | 0;
  if (!$60) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else $$05 = $60;
 }
 $64 = $$05 + 12 | 0;
 $67 = _ga($t$0, HEAP32[$$05 + 8 >> 2] | 0, HEAP32[$64 >> 2] | 0, $$05 + 16 | 0) | 0;
 if (!$67) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!$27) {
  $126 = HEAP32[$$1 + 12 >> 2] | 0;
  $128 = $$1 + ($126 + 4 + ($126 & 1) << 2) | 0;
  if ($t$0 & 8) {
   $129 = HEAP32[$64 >> 2] | 0;
   $131 = HEAP32[$67 + 12 >> 2] | 0;
   if (($15 | 0) <= 0) {
    $$0 = $67;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $137 = ($an$038 | 0) > 0;
   $i16$070 = 0;
   $wv14$068 = $$05 + ($129 + 4 + ($129 & 1) << 2) | 0;
   $zv15$069 = $67 + ($131 + 4 + ($131 & 1) << 2) | 0;
   while (1) {
    $139 = +HEAPF64[$wv14$068 >> 3];
    $wv14$068 = $wv14$068 + 8 | 0;
    if ($137) {
     $i$02$i = 0;
     $j$01$i = $an$038;
     $z$03$i = 0.0;
     while (1) {
      $j$01$i = $j$01$i + -1 | 0;
      $144 = $139 * $z$03$i + +HEAPF64[$128 + ($j$01$i << 3) >> 3];
      $i$02$i = $i$02$i + 1 | 0;
      if (($i$02$i | 0) == ($an$038 | 0)) {
       $z$0$lcssa$i = $144;
       break;
      } else $z$03$i = $144;
     }
    } else $z$0$lcssa$i = 0.0;
    HEAPF64[$zv15$069 >> 3] = $z$0$lcssa$i;
    $i16$070 = $i16$070 + 1 | 0;
    if (($i16$070 | 0) == ($15 | 0)) {
     $$0 = $67;
     break;
    } else $zv15$069 = $zv15$069 + 8 | 0;
   }
   STACKTOP = sp;
   return $$0 | 0;
  }
  $148 = HEAP32[$64 >> 2] | 0;
  $150 = HEAP32[$67 + 12 >> 2] | 0;
  $152 = $67 + ($150 + 4 + ($150 & 1) << 2) | 0;
  if (($15 | 0) <= 0) {
   $$0 = $67;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $$1$i = $x$i + 8 | 0;
  if (($an$038 | 0) <= 0) {
   $i21$065 = 0;
   $zv20$064 = $152;
   while (1) {
    HEAP32[$z$i >> 2] = 0;
    HEAP32[$z$i + 4 >> 2] = 0;
    HEAP32[$z$i + 8 >> 2] = 0;
    HEAP32[$z$i + 12 >> 2] = 0;
    HEAP32[$4 >> 2] = HEAP32[$z$i >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$z$i + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$z$i + 8 >> 2];
    HEAP32[$4 + 12 >> 2] = HEAP32[$z$i + 12 >> 2];
    HEAP32[$zv20$064 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$zv20$064 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    HEAP32[$zv20$064 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
    HEAP32[$zv20$064 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
    $i21$065 = $i21$065 + 1 | 0;
    if (($i21$065 | 0) == ($15 | 0)) {
     $$0 = $67;
     break;
    } else $zv20$064 = $zv20$064 + 16 | 0;
   }
   STACKTOP = sp;
   return $$0 | 0;
  }
  $i21$065$us = 0;
  $wv19$063$us = $$05 + ($148 + 4 + ($148 & 1) << 2) | 0;
  $zv20$064$us = $152;
  do {
   $zv20$064$us$looptemp = $zv20$064$us;
   $zv20$064$us = $zv20$064$us + 16 | 0;
   $wv19$0$1$val$us = +HEAPF64[$wv19$063$us + 8 >> 3];
   HEAPF64[$x$i >> 3] = +HEAPF64[$wv19$063$us >> 3];
   $wv19$063$us = $wv19$063$us + 16 | 0;
   HEAPF64[$$1$i >> 3] = $wv19$0$1$val$us;
   HEAP32[$z$i >> 2] = 0;
   HEAP32[$z$i + 4 >> 2] = 0;
   HEAP32[$z$i + 8 >> 2] = 0;
   HEAP32[$z$i + 12 >> 2] = 0;
   $i$01$i$us = 0;
   $j$02$i$us = $an$038;
   do {
    $j$02$i$us = $j$02$i$us + -1 | 0;
    $158 = $128 + ($j$02$i$us << 4) | 0;
    HEAP32[$$byval_copy2 >> 2] = HEAP32[$x$i >> 2];
    HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$x$i + 4 >> 2];
    HEAP32[$$byval_copy2 + 8 >> 2] = HEAP32[$x$i + 8 >> 2];
    HEAP32[$$byval_copy2 + 12 >> 2] = HEAP32[$x$i + 12 >> 2];
    HEAP32[$$byval_copy3 >> 2] = HEAP32[$z$i >> 2];
    HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$z$i + 4 >> 2];
    HEAP32[$$byval_copy3 + 8 >> 2] = HEAP32[$z$i + 8 >> 2];
    HEAP32[$$byval_copy3 + 12 >> 2] = HEAP32[$z$i + 12 >> 2];
    _ztymes($0, $$byval_copy2, $$byval_copy3);
    HEAP32[$$byval_copy2 >> 2] = HEAP32[$158 >> 2];
    HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$158 + 4 >> 2];
    HEAP32[$$byval_copy2 + 8 >> 2] = HEAP32[$158 + 8 >> 2];
    HEAP32[$$byval_copy2 + 12 >> 2] = HEAP32[$158 + 12 >> 2];
    HEAP32[$$byval_copy3 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
    HEAP32[$$byval_copy3 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
    HEAP32[$$byval_copy3 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
    _zplus($1, $$byval_copy2, $$byval_copy3);
    HEAP32[$z$i >> 2] = HEAP32[$1 >> 2];
    HEAP32[$z$i + 4 >> 2] = HEAP32[$1 + 4 >> 2];
    HEAP32[$z$i + 8 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$z$i + 12 >> 2] = HEAP32[$1 + 12 >> 2];
    $i$01$i$us = $i$01$i$us + 1 | 0;
   } while (($i$01$i$us | 0) != ($an$038 | 0));
   HEAP32[$4 >> 2] = HEAP32[$z$i >> 2];
   HEAP32[$4 + 4 >> 2] = HEAP32[$z$i + 4 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$z$i + 8 >> 2];
   HEAP32[$4 + 12 >> 2] = HEAP32[$z$i + 12 >> 2];
   HEAP32[$zv20$064$us$looptemp >> 2] = HEAP32[$4 >> 2];
   HEAP32[$zv20$064$us$looptemp + 4 >> 2] = HEAP32[$4 + 4 >> 2];
   HEAP32[$zv20$064$us$looptemp + 8 >> 2] = HEAP32[$4 + 8 >> 2];
   HEAP32[$zv20$064$us$looptemp + 12 >> 2] = HEAP32[$4 + 12 >> 2];
   $i21$065$us = $i21$065$us + 1 | 0;
  } while (($i21$065$us | 0) != ($15 | 0));
  $$0 = $67;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $69 = _cvt($t$0, $c$041) | 0;
 if (!$69) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $74 = HEAP32[$$1 + 12 >> 2] | 0;
 $76 = $$1 + ($74 + 4 + ($74 & 1) << 2) | 0;
 if (!($t$0 & 8)) {
  $102 = HEAP32[$64 >> 2] | 0;
  $104 = $$05 + ($102 + 4 + ($102 & 1) << 2) | 0;
  $106 = HEAP32[$67 + 12 >> 2] | 0;
  $108 = $67 + ($106 + 4 + ($106 & 1) << 2) | 0;
  $110 = HEAP32[$69 + 12 >> 2] | 0;
  $112 = $69 + ($110 + 4 + ($110 & 1) << 2) | 0;
  HEAP32[$d4 >> 2] = HEAP32[$112 >> 2];
  HEAP32[$d4 + 4 >> 2] = HEAP32[$112 + 4 >> 2];
  HEAP32[$d4 + 8 >> 2] = HEAP32[$112 + 8 >> 2];
  HEAP32[$d4 + 12 >> 2] = HEAP32[$112 + 12 >> 2];
  if (($15 | 0) <= 0) {
   $$0 = $67;
   STACKTOP = sp;
   return $$0 | 0;
  }
  if (($an$038 | 0) > 0) {
   $i9$050$us = 0;
   $wv5$048$us = $104;
   $zv8$049$us = $108;
  } else {
   $i9$050 = 0;
   $wv5$048 = $104;
   $zv8$049 = $108;
   while (1) {
    HEAP32[$p6 >> 2] = HEAP32[$d4 >> 2];
    HEAP32[$p6 + 4 >> 2] = HEAP32[$d4 + 4 >> 2];
    HEAP32[$p6 + 8 >> 2] = HEAP32[$d4 + 8 >> 2];
    HEAP32[$p6 + 12 >> 2] = HEAP32[$d4 + 12 >> 2];
    HEAP32[$x7 >> 2] = HEAP32[$wv5$048 >> 2];
    HEAP32[$x7 + 4 >> 2] = HEAP32[$wv5$048 + 4 >> 2];
    HEAP32[$x7 + 8 >> 2] = HEAP32[$wv5$048 + 8 >> 2];
    HEAP32[$x7 + 12 >> 2] = HEAP32[$wv5$048 + 12 >> 2];
    HEAP32[$zv8$049 >> 2] = HEAP32[$p6 >> 2];
    HEAP32[$zv8$049 + 4 >> 2] = HEAP32[$p6 + 4 >> 2];
    HEAP32[$zv8$049 + 8 >> 2] = HEAP32[$p6 + 8 >> 2];
    HEAP32[$zv8$049 + 12 >> 2] = HEAP32[$p6 + 12 >> 2];
    $i9$050 = $i9$050 + 1 | 0;
    if (($i9$050 | 0) == ($15 | 0)) {
     $$0 = $67;
     break;
    } else {
     $wv5$048 = $wv5$048 + 16 | 0;
     $zv8$049 = $zv8$049 + 16 | 0;
    }
   }
   STACKTOP = sp;
   return $$0 | 0;
  }
  while (1) {
   HEAP32[$p6 >> 2] = HEAP32[$d4 >> 2];
   HEAP32[$p6 + 4 >> 2] = HEAP32[$d4 + 4 >> 2];
   HEAP32[$p6 + 8 >> 2] = HEAP32[$d4 + 8 >> 2];
   HEAP32[$p6 + 12 >> 2] = HEAP32[$d4 + 12 >> 2];
   HEAP32[$x7 >> 2] = HEAP32[$wv5$048$us >> 2];
   HEAP32[$x7 + 4 >> 2] = HEAP32[$wv5$048$us + 4 >> 2];
   HEAP32[$x7 + 8 >> 2] = HEAP32[$wv5$048$us + 8 >> 2];
   HEAP32[$x7 + 12 >> 2] = HEAP32[$wv5$048$us + 12 >> 2];
   $wv5$048$us = $wv5$048$us + 16 | 0;
   $i11$047$us = 0;
   do {
    $117 = $76 + ($i11$047$us << 4) | 0;
    HEAP32[$$byval_copy2 >> 2] = HEAP32[$x7 >> 2];
    HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$x7 + 4 >> 2];
    HEAP32[$$byval_copy2 + 8 >> 2] = HEAP32[$x7 + 8 >> 2];
    HEAP32[$$byval_copy2 + 12 >> 2] = HEAP32[$x7 + 12 >> 2];
    HEAP32[$$byval_copy3 >> 2] = HEAP32[$117 >> 2];
    HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$117 + 4 >> 2];
    HEAP32[$$byval_copy3 + 8 >> 2] = HEAP32[$117 + 8 >> 2];
    HEAP32[$$byval_copy3 + 12 >> 2] = HEAP32[$117 + 12 >> 2];
    _zminus($2, $$byval_copy2, $$byval_copy3);
    HEAP32[$$byval_copy2 >> 2] = HEAP32[$p6 >> 2];
    HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$p6 + 4 >> 2];
    HEAP32[$$byval_copy2 + 8 >> 2] = HEAP32[$p6 + 8 >> 2];
    HEAP32[$$byval_copy2 + 12 >> 2] = HEAP32[$p6 + 12 >> 2];
    HEAP32[$$byval_copy3 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
    HEAP32[$$byval_copy3 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
    HEAP32[$$byval_copy3 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
    _ztymes($3, $$byval_copy2, $$byval_copy3);
    HEAP32[$p6 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$p6 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
    HEAP32[$p6 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
    HEAP32[$p6 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
    $i11$047$us = $i11$047$us + 1 | 0;
   } while (($i11$047$us | 0) != ($an$038 | 0));
   HEAP32[$zv8$049$us >> 2] = HEAP32[$p6 >> 2];
   HEAP32[$zv8$049$us + 4 >> 2] = HEAP32[$p6 + 4 >> 2];
   HEAP32[$zv8$049$us + 8 >> 2] = HEAP32[$p6 + 8 >> 2];
   HEAP32[$zv8$049$us + 12 >> 2] = HEAP32[$p6 + 12 >> 2];
   $i9$050$us = $i9$050$us + 1 | 0;
   if (($i9$050$us | 0) == ($15 | 0)) {
    $$0 = $67;
    break;
   } else $zv8$049$us = $zv8$049$us + 16 | 0;
  }
  STACKTOP = sp;
  return $$0 | 0;
 }
 $77 = HEAP32[$64 >> 2] | 0;
 $79 = HEAP32[$67 + 12 >> 2] | 0;
 $81 = $67 + ($79 + 4 + ($79 & 1) << 2) | 0;
 $83 = HEAP32[$69 + 12 >> 2] | 0;
 $86 = +HEAPF64[$69 + ($83 + 4 + ($83 & 1) << 2) >> 3];
 if (($15 | 0) <= 0) {
  $$0 = $67;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($an$038 | 0) <= 0) {
  $i$059 = 0;
  $zv$058 = $81;
  while (1) {
   HEAPF64[$zv$058 >> 3] = $86;
   $i$059 = $i$059 + 1 | 0;
   if (($i$059 | 0) == ($15 | 0)) {
    $$0 = $67;
    break;
   } else $zv$058 = $zv$058 + 8 | 0;
  }
  STACKTOP = sp;
  return $$0 | 0;
 }
 $i$059$us = 0;
 $wv$060$us = $$05 + ($77 + 4 + ($77 & 1) << 2) | 0;
 $zv$058$us = $81;
 while (1) {
  $96 = +HEAPF64[$wv$060$us >> 3];
  $wv$060$us = $wv$060$us + 8 | 0;
  $i1$054$us = 0;
  $p$053$us = $86;
  while (1) {
   $97 = $p$053$us * ($96 - +HEAPF64[$76 + ($i1$054$us << 3) >> 3]);
   $i1$054$us = $i1$054$us + 1 | 0;
   if (($i1$054$us | 0) == ($an$038 | 0)) {
    $$lcssa = $97;
    break;
   } else $p$053$us = $97;
  }
  HEAPF64[$zv$058$us >> 3] = $$lcssa;
  $i$059$us = $i$059$us + 1 | 0;
  if (($i$059$us | 0) == ($15 | 0)) {
   $$0 = $67;
   break;
  } else $zv$058$us = $zv$058$us + 8 | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _lrep($w) {
 $w = $w | 0;
 var $$0 = 0, $$0$i = 0, $$not$i = 0, $$sum1 = 0, $$sum13$i = 0, $$sum2$i = 0, $$sum4$i = 0, $$sum6$i = 0, $$sum7 = 0, $101 = 0, $103 = 0, $105 = 0, $115 = 0, $116 = 0, $119 = 0, $121 = 0, $123 = 0, $13 = 0, $132 = 0, $133 = 0, $136 = 0, $138 = 0, $15 = 0, $154 = 0, $156 = 0, $159 = 0, $161 = 0, $165 = 0, $17 = 0, $172 = 0, $174 = 0, $177 = 0, $179 = 0, $183 = 0, $19 = 0, $190 = 0, $194 = 0, $198 = 0, $2 = 0, $202 = 0, $207 = 0, $209 = 0, $21 = 0, $213 = 0, $216 = 0, $218 = 0, $219 = 0, $234 = 0, $236 = 0, $239 = 0, $241 = 0, $245 = 0, $264 = 0, $266 = 0, $269 = 0, $271 = 0, $275 = 0, $282 = 0, $285 = 0, $292 = 0, $294 = 0, $297 = 0, $299 = 0, $30 = 0, $303 = 0, $310 = 0, $313 = 0, $33 = 0, $331 = 0, $333 = 0, $336 = 0, $338 = 0, $34 = 0, $342 = 0, $345 = 0, $346 = 0, $349 = 0, $351 = 0, $356 = 0, $360 = 0, $363 = 0, $364 = 0, $370 = 0, $372 = 0, $375 = 0, $377 = 0, $381 = 0, $384 = 0, $40 = 0, $46 = 0, $48 = 0, $49 = 0, $51 = 0, $58 = 0, $67 = 0, $70 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $83 = 0, $86 = 0, $88 = 0, $9 = 0, $90 = 0, $95 = 0, $98 = 0, $f$09193$i = 0, $ft$09094$i = 0, $g$096$i = 0, $gt$095$i = 0, $h$0$i = 0, $ht$0$i = 0, label = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (HEAP32[$w >> 2] & 1151) {
  $$0 = _lnoun($w) | 0;
  return $$0 | 0;
 }
 $8 = $w + 12 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $$sum1 = $9 + 4 + ($9 & 1) | 0;
 $13 = HEAP8[$w + ($$sum1 << 2) + 31 >> 0] | 0;
 $15 = HEAP32[$w + ($$sum1 + 2 << 2) >> 2] | 0;
 $17 = HEAP32[$w + ($$sum1 + 3 << 2) >> 2] | 0;
 $19 = HEAP32[$w + ($$sum1 + 4 << 2) >> 2] | 0;
 $21 = HEAP32[$w + ($$sum1 + 6 << 2) >> 2] | 0;
 $30 = (($13 << 24 >> 24 == -21 | $13 << 24 >> 24 == -18) & 1) + (($15 | 0) != 0 & 1) + (($17 | 0) != 0 & 1) | 0;
 if (!$30) {
  $33 = _spellout($13 << 24 >> 24) | 0;
  $34 = _cf($33) | 0;
  if (!($34 << 24 >> 24 == 58 | $34 << 24 >> 24 == 46)) {
   $$0 = $33;
   return $$0 | 0;
  }
  $$0 = _over(_scc(32) | 0, $33) | 0;
  return $$0 | 0;
 }
 if ((_evoke($w) | 0) << 24 >> 24) {
  $40 = (_cf($15) | 0) << 24 >> 24;
  if ((HEAP8[5792 + $40 >> 0] | 0) == 2) {
   $$0 = _ca($15) | 0;
   return $$0 | 0;
  } else {
   $$0 = _spellout($40) | 0;
   return $$0 | 0;
  }
 }
 $46 = _ga(32, $30, 1, 0) | 0;
 if (!$46) {
  $$0 = 0;
  return $$0 | 0;
 }
 $48 = $46 + 12 | 0;
 $49 = HEAP32[$48 >> 2] | 0;
 $$sum7 = $49 + 4 + ($49 & 1) | 0;
 $51 = $46 + ($$sum7 << 2) | 0;
 if (($30 | 0) > 0) {
  if (!($21 & 1)) $58 = _lrep($15) | 0; else $58 = _ltie(_every($15, 299) | 0) | 0;
  HEAP32[$51 >> 2] = $58;
  if (!$58) {
   $$0 = 0;
   return $$0 | 0;
  }
  if (($30 | 0) > 1) {
   if (!($21 & 2)) $67 = _lrep($17) | 0; else $67 = _ltie(_every($17, 299) | 0) | 0;
   HEAP32[$46 + ($$sum7 + 1 << 2) >> 2] = $67;
   if (!$67) {
    $$0 = 0;
    return $$0 | 0;
   }
   if (($30 | 0) > 2) {
    $70 = _lrep($19) | 0;
    HEAP32[$46 + ($$sum7 + 2 << 2) >> 2] = $70;
    if (!$70) {
     $$0 = 0;
     return $$0 | 0;
    }
   }
  }
 }
 $74 = HEAP32[$46 + 8 >> 2] | 0;
 $75 = HEAP32[$48 >> 2] | 0;
 $$sum2$i = $75 + 4 + ($75 & 1) | 0;
 $78 = (HEAP32[$w >> 2] | 0) == 128;
 $79 = HEAP32[$8 >> 2] | 0;
 $$sum4$i = $79 + 4 + ($79 & 1) | 0;
 $83 = HEAP8[$w + ($$sum4$i << 2) + 31 >> 0] | 0;
 do if (($74 | 0) > 0) {
  $86 = HEAP32[$46 + ($$sum2$i << 2) >> 2] | 0;
  $88 = HEAP32[$w + ($$sum4$i + 2 << 2) >> 2] | 0;
  $90 = HEAP32[$88 + 12 >> 2] | 0;
  $95 = HEAP8[$88 + ($90 + 4 + ($90 & 1) << 2) + 31 >> 0] & -2;
  $98 = ($78 ? $95 << 24 >> 24 == -22 : $95 << 24 >> 24 == -20) & 1;
  if (($74 | 0) > 1) {
   $101 = HEAP32[$46 + ($$sum2$i + 1 << 2) >> 2] | 0;
   $103 = HEAP32[$w + ($$sum4$i + 3 << 2) >> 2] | 0;
   $105 = HEAP32[$103 + 12 >> 2] | 0;
   if ($78) $116 = (HEAP8[$103 + ($105 + 4 + ($105 & 1) << 2) + 31 >> 0] & -2) << 24 >> 24 == -22 & 1; else $116 = (_lp($101) | 0) << 24 >> 24;
   $115 = $116 & 255;
   if (($74 | 0) > 2) {
    $119 = HEAP32[$46 + ($$sum2$i + 2 << 2) >> 2] | 0;
    $121 = HEAP32[$w + ($$sum4$i + 4 << 2) >> 2] | 0;
    $123 = HEAP32[$121 + 12 >> 2] | 0;
    if ($78) {
     $f$09193$i = $86;
     $ft$09094$i = $98;
     $g$096$i = $101;
     $gt$095$i = $115;
     $h$0$i = $119;
     $ht$0$i = (HEAP8[$121 + ($123 + 4 + ($123 & 1) << 2) + 31 >> 0] | 0) == -22 & 1;
     break;
    } else {
     $f$09193$i = $86;
     $ft$09094$i = $98;
     $g$096$i = $101;
     $gt$095$i = $115;
     $h$0$i = $119;
     $ht$0$i = (_lp($119) | 0) << 24 >> 24;
     break;
    }
   } else {
    $f$09193$i = $86;
    $ft$09094$i = $98;
    $g$096$i = $101;
    $gt$095$i = $115;
    $h$0$i = 0;
    $ht$0$i = 0;
   }
  } else {
   $f$09193$i = $86;
   $ft$09094$i = $98;
   $g$096$i = 0;
   $gt$095$i = 0;
   $h$0$i = 0;
   $ht$0$i = 0;
  }
 } else {
  $f$09193$i = 0;
  $ft$09094$i = 0;
  $g$096$i = 0;
  $gt$095$i = 0;
  $h$0$i = 0;
  $ht$0$i = 0;
 } while (0);
 $132 = $83 << 24 >> 24;
 L58 : do switch ($132 | 0) {
 case -22:
 case -19:
 case -20:
  {
   $133 = _ga(32, 3, 1, 0) | 0;
   if (!$133) $$0$i = 0; else {
    $136 = HEAP32[$133 + 12 >> 2] | 0;
    $$sum13$i = $136 + 4 + ($136 & 1) | 0;
    $138 = $133 + ($$sum13$i << 2) | 0;
    do if (!($ft$09094$i << 24 >> 24)) {
     if (($g$096$i | 0) != 0 & ($f$09193$i | 0) != 0) if ((HEAP8[5792 + ((_cl($f$09193$i) | 0) << 24 >> 24) >> 0] | 0) == 5) if ((HEAP8[5792 + ((_cf($g$096$i) | 0) << 24 >> 24) >> 0] | 0) == 5) {
      label = 39;
      break;
     }
     HEAP32[$138 >> 2] = $f$09193$i;
     if (!$f$09193$i) {
      $$0$i = 0;
      break L58;
     } else $194 = $f$09193$i;
    } else label = 39; while (0);
    do if ((label | 0) == 39) {
     if ($f$09193$i) {
      $154 = HEAP32[$f$09193$i + 8 >> 2] | 0;
      $156 = _ga(2, $154 + 2 | 0, 1, 0) | 0;
      if ($156) {
       $159 = HEAP32[$156 + 12 >> 2] | 0;
       $161 = $156 + ($159 + 4 + ($159 & 1) << 2) | 0;
       HEAP8[$161 >> 0] = 40;
       HEAP8[$161 + ($154 + 1) >> 0] = 41;
       $165 = HEAP32[$f$09193$i + 12 >> 2] | 0;
       _memcpy($161 + 1 | 0, $f$09193$i + ($165 + 4 + ($165 & 1) << 2) | 0, $154 | 0) | 0;
       HEAP32[$138 >> 2] = $156;
       $194 = $156;
       break;
      }
     }
     HEAP32[$138 >> 2] = 0;
     $$0$i = 0;
     break L58;
    } while (0);
    do if (!($gt$095$i << 24 >> 24)) {
     HEAP32[$133 + ($$sum13$i + 2 << 2) >> 2] = $g$096$i;
     if (!$g$096$i) {
      $$0$i = 0;
      break L58;
     } else $190 = $g$096$i;
    } else {
     if ($g$096$i) {
      $172 = HEAP32[$g$096$i + 8 >> 2] | 0;
      $174 = _ga(2, $172 + 2 | 0, 1, 0) | 0;
      if ($174) {
       $177 = HEAP32[$174 + 12 >> 2] | 0;
       $179 = $174 + ($177 + 4 + ($177 & 1) << 2) | 0;
       HEAP8[$179 >> 0] = 40;
       HEAP8[$179 + ($172 + 1) >> 0] = 41;
       $183 = HEAP32[$g$096$i + 12 >> 2] | 0;
       _memcpy($179 + 1 | 0, $g$096$i + ($183 + 4 + ($183 & 1) << 2) | 0, $172 | 0) | 0;
       HEAP32[$133 + ($$sum13$i + 2 << 2) >> 2] = $174;
       $190 = $174;
       break;
      }
     }
     HEAP32[$133 + ($$sum13$i + 2 << 2) >> 2] = 0;
     $$0$i = 0;
     break L58;
    } while (0);
    do if ((_cf($190) | 0) << 24 >> 24 == 32) $207 = 1; else if ($83 << 24 >> 24 == -20) {
     $198 = HEAP8[5792 + ((_cl($194) | 0) << 24 >> 24) >> 0] | 0;
     $202 = HEAP8[5792 + ((_cf($190) | 0) << 24 >> 24) >> 0] | 0;
     if ($198 << 24 >> 24 == 2 | $198 << 24 >> 24 == 5) if ($202 << 24 >> 24 == 2 | $202 << 24 >> 24 == 5) {
      $207 = 0;
      break;
     }
     if (!((_lp($194) | 0) << 24 >> 24)) $207 = 1; else $207 = (_lp($190) | 0) << 24 >> 24 == 0;
    } else $207 = 0; while (0);
    $209 = _str($207 & 1 ^ 1, 3424) | 0;
    HEAP32[$133 + ($$sum13$i + 1 << 2) >> 2] = $209;
    if (!$209) $$0$i = 0; else $$0$i = _raze($133) | 0;
   }
   break;
  }
 case -21:
 case -18:
  {
   $213 = _ga(32, 5, 1, 0) | 0;
   if (!$213) $$0$i = 0; else {
    $216 = HEAP32[$213 + 12 >> 2] | 0;
    $$sum6$i = $216 + 4 + ($216 & 1) | 0;
    $218 = $213 + ($$sum6$i << 2) | 0;
    $219 = $ft$09094$i << 24 >> 24 != 0;
    do if ($219) label = 63; else {
     if (($g$096$i | 0) != 0 & ($f$09193$i | 0) != 0) if ((HEAP8[5792 + ((_cl($f$09193$i) | 0) << 24 >> 24) >> 0] | 0) == 5) if ((HEAP8[5792 + ((_cf($g$096$i) | 0) << 24 >> 24) >> 0] | 0) == 5) {
      label = 63;
      break;
     }
     HEAP32[$218 >> 2] = $f$09193$i;
     if (!$f$09193$i) {
      $$0$i = 0;
      break L58;
     }
    } while (0);
    do if ((label | 0) == 63) {
     if ($f$09193$i) {
      $234 = HEAP32[$f$09193$i + 8 >> 2] | 0;
      $236 = _ga(2, $234 + 2 | 0, 1, 0) | 0;
      if ($236) {
       $239 = HEAP32[$236 + 12 >> 2] | 0;
       $241 = $236 + ($239 + 4 + ($239 & 1) << 2) | 0;
       HEAP8[$241 >> 0] = 40;
       HEAP8[$241 + ($234 + 1) >> 0] = 41;
       $245 = HEAP32[$f$09193$i + 12 >> 2] | 0;
       _memcpy($241 + 1 | 0, $f$09193$i + ($245 + 4 + ($245 & 1) << 2) | 0, $234 | 0) | 0;
       HEAP32[$218 >> 2] = $236;
       break;
      }
     }
     HEAP32[$218 >> 2] = 0;
     $$0$i = 0;
     break L58;
    } while (0);
    do if (!($gt$095$i << 24 >> 24)) {
     if (($g$096$i | 0) != 0 & ($h$0$i | 0) != 0) if ((HEAP8[5792 + ((_cl($g$096$i) | 0) << 24 >> 24) >> 0] | 0) == 5) if ((HEAP8[5792 + ((_cf($h$0$i) | 0) << 24 >> 24) >> 0] | 0) == 5) {
      label = 72;
      break;
     }
     HEAP32[$213 + ($$sum6$i + 2 << 2) >> 2] = $g$096$i;
     if (!$g$096$i) {
      $$0$i = 0;
      break L58;
     } else $282 = $g$096$i;
    } else label = 72; while (0);
    do if ((label | 0) == 72) {
     if ($g$096$i) {
      $264 = HEAP32[$g$096$i + 8 >> 2] | 0;
      $266 = _ga(2, $264 + 2 | 0, 1, 0) | 0;
      if ($266) {
       $269 = HEAP32[$266 + 12 >> 2] | 0;
       $271 = $266 + ($269 + 4 + ($269 & 1) << 2) | 0;
       HEAP8[$271 >> 0] = 40;
       HEAP8[$271 + ($264 + 1) >> 0] = 41;
       $275 = HEAP32[$g$096$i + 12 >> 2] | 0;
       _memcpy($271 + 1 | 0, $g$096$i + ($275 + 4 + ($275 & 1) << 2) | 0, $264 | 0) | 0;
       HEAP32[$213 + ($$sum6$i + 2 << 2) >> 2] = $266;
       $282 = $266;
       break;
      }
     }
     HEAP32[$213 + ($$sum6$i + 2 << 2) >> 2] = 0;
     $$0$i = 0;
     break L58;
    } while (0);
    $285 = _str((_cf($282) | 0) << 24 >> 24 != 32 & 1, 3424) | 0;
    HEAP32[$213 + ($$sum6$i + 1 << 2) >> 2] = $285;
    if (!$285) $$0$i = 0; else {
     $$not$i = ($ht$0$i | 0) != 0;
     if ($$not$i | $219 ^ 1) if ($$not$i) label = 81; else label = 85; else if (!((_lp($h$0$i) | 0) << 24 >> 24)) label = 85; else label = 81;
     do if ((label | 0) == 81) {
      if ($h$0$i) {
       $292 = HEAP32[$h$0$i + 8 >> 2] | 0;
       $294 = _ga(2, $292 + 2 | 0, 1, 0) | 0;
       if ($294) {
        $297 = HEAP32[$294 + 12 >> 2] | 0;
        $299 = $294 + ($297 + 4 + ($297 & 1) << 2) | 0;
        HEAP8[$299 >> 0] = 40;
        HEAP8[$299 + ($292 + 1) >> 0] = 41;
        $303 = HEAP32[$h$0$i + 12 >> 2] | 0;
        _memcpy($299 + 1 | 0, $h$0$i + ($303 + 4 + ($303 & 1) << 2) | 0, $292 | 0) | 0;
        HEAP32[$213 + ($$sum6$i + 4 << 2) >> 2] = $294;
        $310 = $294;
        break;
       }
      }
      HEAP32[$213 + ($$sum6$i + 4 << 2) >> 2] = 0;
      $$0$i = 0;
      break L58;
     } else if ((label | 0) == 85) {
      HEAP32[$213 + ($$sum6$i + 4 << 2) >> 2] = $h$0$i;
      if (!$h$0$i) {
       $$0$i = 0;
       break L58;
      } else $310 = $h$0$i;
     } while (0);
     $313 = _str((_cf($310) | 0) << 24 >> 24 != 32 & 1, 3424) | 0;
     HEAP32[$213 + ($$sum6$i + 3 << 2) >> 2] = $313;
     if (!$313) $$0$i = 0; else $$0$i = _raze($213) | 0;
    }
   }
   break;
  }
 default:
  {
   if (!($ft$09094$i << 24 >> 24)) if (!(HEAP32[HEAP32[$w + ($$sum4$i + 2 << 2) >> 2] >> 2] & 127)) $349 = $f$09193$i; else if (!(HEAP32[$w + ($$sum4$i + 6 << 2) >> 2] & 1)) if (!((_lp($f$09193$i) | 0) << 24 >> 24)) $349 = $f$09193$i; else label = 92; else $349 = $f$09193$i; else label = 92;
   if ((label | 0) == 92) if (!$f$09193$i) $349 = 0; else {
    $331 = HEAP32[$f$09193$i + 8 >> 2] | 0;
    $333 = _ga(2, $331 + 2 | 0, 1, 0) | 0;
    if (!$333) $349 = 0; else {
     $336 = HEAP32[$333 + 12 >> 2] | 0;
     $338 = $333 + ($336 + 4 + ($336 & 1) << 2) | 0;
     HEAP8[$338 >> 0] = 40;
     HEAP8[$338 + ($331 + 1) >> 0] = 41;
     $342 = HEAP32[$f$09193$i + 12 >> 2] | 0;
     _memcpy($338 + 1 | 0, $f$09193$i + ($342 + 4 + ($342 & 1) << 2) | 0, $331 | 0) | 0;
     $349 = $333;
    }
   }
   $345 = _spellout($132) | 0;
   $346 = _cf($345) | 0;
   if ($346 << 24 >> 24 == 58 | $346 << 24 >> 24 == 46) $351 = _over(_scc(32) | 0, $345) | 0; else $351 = $345;
   if (($349 | 0) != 0 & ($351 | 0) != 0) {
    $356 = HEAP8[5792 + ((_cl($349) | 0) << 24 >> 24) >> 0] | 0;
    $360 = HEAP8[5792 + ((_cf($351) | 0) << 24 >> 24) >> 0] | 0;
    if ($356 << 24 >> 24 == 2 | $356 << 24 >> 24 == 5) if ($360 << 24 >> 24 == 2 | $360 << 24 >> 24 == 5) $363 = _over(_scc(32) | 0, $351) | 0; else $363 = $351; else $363 = $351;
   } else $363 = $351;
   $364 = _over($349, $363) | 0;
   if (($74 | 0) == 1) $$0$i = $364; else {
    if (!((_lp($g$096$i) | 0) << 24 >> 24)) $384 = $g$096$i; else if (!$g$096$i) $384 = 0; else {
     $370 = HEAP32[$g$096$i + 8 >> 2] | 0;
     $372 = _ga(2, $370 + 2 | 0, 1, 0) | 0;
     if (!$372) $384 = 0; else {
      $375 = HEAP32[$372 + 12 >> 2] | 0;
      $377 = $372 + ($375 + 4 + ($375 & 1) << 2) | 0;
      HEAP8[$377 >> 0] = 40;
      HEAP8[$377 + ($370 + 1) >> 0] = 41;
      $381 = HEAP32[$g$096$i + 12 >> 2] | 0;
      _memcpy($377 + 1 | 0, $g$096$i + ($381 + 4 + ($381 & 1) << 2) | 0, $370 | 0) | 0;
      $384 = $372;
     }
    }
    $$0$i = _over($364, $384) | 0;
   }
  }
 } while (0);
 $$0 = _gc($$0$i, $2) | 0;
 return $$0 | 0;
}

function _lnoun($w) {
 $w = $w | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i11 = 0, $$0$i$i30 = 0, $$0$i18$i = 0, $$0$i26$i = 0, $$ph = 0, $$sum1$i = 0, $$sum1$i2 = 0, $$sum3$i20 = 0, $$sum3$i4 = 0, $1 = 0, $100 = 0, $102 = 0, $105 = 0, $107 = 0, $111 = 0, $115 = 0, $12 = 0, $120 = 0, $122 = 0, $126 = 0, $131 = 0, $14 = 0, $140 = 0, $144 = 0, $149 = 0, $15 = 0, $156 = 0, $157 = 0, $158 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $171 = 0, $174 = 0, $176 = 0, $177 = 0, $179 = 0, $184 = 0, $190 = 0, $197 = 0, $199 = 0, $2 = 0, $201 = 0, $205 = 0, $209 = 0, $214 = 0, $223 = 0, $225 = 0, $226 = 0, $228 = 0, $23 = 0, $236 = 0, $238 = 0, $239 = 0, $252 = 0, $254 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $27 = 0, $271 = 0, $273 = 0, $279 = 0, $28 = 0, $285 = 0, $287 = 0, $289 = 0, $293 = 0, $298 = 0, $302 = 0, $307 = 0, $32 = 0, $35 = 0, $37 = 0, $38 = 0, $43 = 0, $48 = 0, $50 = 0, $52 = 0, $56 = 0, $60 = 0, $65 = 0, $75 = 0, $8 = 0, $86 = 0, $89 = 0, $91 = 0, $95 = 0, $b$1$i = 0, $i$0$i2263 = 0, $i$0$i54 = 0, $i1$0$i41 = 0, $i3$0$i48 = 0, $i5$0$i44 = 0, $phitmp$i$i = 0, $phitmp$i$i26 = 0, $phitmp$i$i7 = 0, $phitmp$i14$i = 0, $phitmp$i22$i = 0, $u$0$i62 = 0, $v$0$i2161 = 0, $v$0$i42 = 0, $v$1$i$lcssa = 0, $v$1$i43 = 0, $v$1$i43$lcssa89 = 0, label = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $1 = $w + 8 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) if ((HEAP32[$w + 12 >> 2] | 0) == 1) {
  $$0 = _cstr(3432) | 0;
  return $$0 | 0;
 } else {
  $8 = _spellout(-55) | 0;
  $$0 = _over($8, _thorn1(_shape($w) | 0) | 0) | 0;
  return $$0 | 0;
 }
 $12 = HEAP32[$w >> 2] | 0;
 if (($12 | 0) == 64) {
  $166 = $2 << 2;
  $167 = $w + 12 | 0;
  $168 = HEAP32[$167 >> 2] | 0;
  $171 = _ga(32, $166, 1, 0) | 0;
  if (!$171) {
   $$0 = 0;
   return $$0 | 0;
  }
  $174 = HEAP32[$171 + 12 >> 2] | 0;
  $$sum3$i20 = $174 + 4 + ($174 & 1) | 0;
  $176 = $171 + ($$sum3$i20 << 2) | 0;
  $177 = _cstr(3480) | 0;
  if (!$177) {
   $$0 = 0;
   return $$0 | 0;
  }
  $179 = _cstr(3488) | 0;
  if (!$179) {
   $$0 = 0;
   return $$0 | 0;
  }
  do if (($2 | 0) > 0) {
   $i$0$i2263 = 0;
   $u$0$i62 = $w + ($168 + 4 + ($168 & 1) << 2) | 0;
   $v$0$i2161 = $176;
   while (1) {
    HEAP32[$v$0$i2161 >> 2] = $177;
    $184 = _lnoun(HEAP32[$u$0$i62 >> 2] | 0) | 0;
    HEAP32[$v$0$i2161 + 4 >> 2] = $184;
    if (!$184) {
     $$0 = 0;
     label = 127;
     break;
    }
    HEAP32[$v$0$i2161 + 8 >> 2] = $179;
    $190 = _lnoun(HEAP32[$u$0$i62 + 4 >> 2] | 0) | 0;
    HEAP32[$v$0$i2161 + 12 >> 2] = $190;
    if (!$190) {
     $$0 = 0;
     label = 127;
     break;
    }
    $i$0$i2263 = $i$0$i2263 + 1 | 0;
    if (($i$0$i2263 | 0) >= ($2 | 0)) {
     label = 78;
     break;
    } else {
     $u$0$i62 = $u$0$i62 + 8 | 0;
     $v$0$i2161 = $v$0$i2161 + 16 | 0;
    }
   }
   if ((label | 0) == 78) {
    if (($2 | 0) != 1) {
     label = 80;
     break;
    }
    $197 = _cstr(3496) | 0;
    HEAP32[$176 >> 2] = $197;
    if (!$197) $$0 = 0; else break;
    return $$0 | 0;
   } else if ((label | 0) == 127) return $$0 | 0;
  } else label = 80; while (0);
  if ((label | 0) == 80) {
   $199 = _cstr(3504) | 0;
   HEAP32[$176 >> 2] = $199;
   if (!$199) {
    $$0 = 0;
    return $$0 | 0;
   }
   $201 = _cstr(3512) | 0;
   HEAP32[$171 + ($166 + -4 + $$sum3$i20 << 2) >> 2] = $201;
   if (!$201) {
    $$0 = 0;
    return $$0 | 0;
   }
  }
  $205 = HEAP32[$167 >> 2] | 0;
  do if (!$205) $$0$i$i30 = HEAP32[616] | 0; else if (($205 | 0) == 2) {
   $phitmp$i$i26 = (HEAP32[$w + 20 >> 2] | 0) == 1;
   if ((HEAP32[$w + 16 >> 2] | 0) == 1) $209 = $phitmp$i$i26 ? -100 : -99; else if ($phitmp$i$i26) $209 = -100; else {
    label = 89;
    break;
   }
   $$0$i$i30 = _spellout($209) | 0;
  } else if (($205 | 0) > 1) label = 89; else if ((HEAP32[$1 >> 2] | 0) > 1) {
   $$0$i$i30 = HEAP32[616] | 0;
   break;
  } else {
   $$0$i$i30 = _spellout(44) | 0;
   break;
  } while (0);
  if ((label | 0) == 89) {
   $214 = _thorn1(_shape($w) | 0) | 0;
   $$0$i$i30 = _over($214, _spellout(36) | 0) | 0;
  }
  $$0 = _over($$0$i$i30, _raze($171) | 0) | 0;
  return $$0 | 0;
 } else if (($12 | 0) == 2) {
  $$0 = _lchar($w) | 0;
  return $$0 | 0;
 } else if (($12 | 0) == 32) {
  $14 = $w + 12 | 0;
  $15 = HEAP32[$14 >> 2] | 0;
  $$sum1$i2 = $15 + 4 + ($15 & 1) | 0;
  $17 = ($2 | 0) > 0;
  L124 : do if ($17) {
   $i$0$i54 = 0;
   while (1) {
    $23 = HEAP32[HEAP32[$w + ($i$0$i54 + $$sum1$i2 << 2) >> 2] >> 2] & 96;
    $i$0$i54 = $i$0$i54 + 1 | 0;
    if ($23) {
     $b$1$i = $23;
     break L124;
    }
    if (($i$0$i54 | 0) >= ($2 | 0)) {
     $b$1$i = 0;
     break;
    }
   }
  } else $b$1$i = 0; while (0);
  $26 = ($2 | 0) == 1;
  $27 = $26 | ($b$1$i | 0) != 0;
  $28 = $2 << 1;
  $32 = _ga(32, $28 - ($27 & 1 ^ 1) | 0, 1, 0) | 0;
  if (!$32) {
   $$0 = 0;
   return $$0 | 0;
  }
  $35 = HEAP32[$32 + 12 >> 2] | 0;
  $$sum3$i4 = $35 + 4 + ($35 & 1) | 0;
  $37 = $32 + ($$sum3$i4 << 2) | 0;
  if ($27) {
   $38 = _cstr(3440) | 0;
   if (!$38) {
    $$0 = 0;
    return $$0 | 0;
   }
   L137 : do if ($17) {
    $i1$0$i41 = 0;
    $v$0$i42 = $37;
    while (1) {
     HEAP32[$v$0$i42 >> 2] = $38;
     $43 = _lnoun(HEAP32[$w + ($i1$0$i41 + $$sum1$i2 << 2) >> 2] | 0) | 0;
     HEAP32[$v$0$i42 + 4 >> 2] = $43;
     if (!$43) {
      $$0 = 0;
      break;
     }
     $i1$0$i41 = $i1$0$i41 + 1 | 0;
     if (($i1$0$i41 | 0) >= ($2 | 0)) break L137; else $v$0$i42 = $v$0$i42 + 8 | 0;
    }
    return $$0 | 0;
   } while (0);
   if ($26) {
    $48 = _cstr(3448) | 0;
    HEAP32[$37 >> 2] = $48;
    if (!$48) {
     $$0 = 0;
     return $$0 | 0;
    }
   } else {
    $50 = _cstr(3456) | 0;
    HEAP32[$37 >> 2] = $50;
    if (!$50) {
     $$0 = 0;
     return $$0 | 0;
    }
    $52 = _cstr(3464) | 0;
    HEAP32[$32 + ($28 + -2 + $$sum3$i4 << 2) >> 2] = $52;
    if (!$52) {
     $$0 = 0;
     return $$0 | 0;
    }
   }
   $56 = HEAP32[$14 >> 2] | 0;
   do if (!$56) $$0$i$i11 = HEAP32[616] | 0; else if (($56 | 0) == 2) {
    $phitmp$i$i7 = (HEAP32[$w + 20 >> 2] | 0) == 1;
    if ((HEAP32[$w + 16 >> 2] | 0) == 1) $60 = $phitmp$i$i7 ? -100 : -99; else if ($phitmp$i$i7) $60 = -100; else {
     label = 29;
     break;
    }
    $$0$i$i11 = _spellout($60) | 0;
   } else if (($56 | 0) > 1) label = 29; else if ((HEAP32[$1 >> 2] | 0) > 1) {
    $$0$i$i11 = HEAP32[616] | 0;
    break;
   } else {
    $$0$i$i11 = _spellout(44) | 0;
    break;
   } while (0);
   if ((label | 0) == 29) {
    $65 = _thorn1(_shape($w) | 0) | 0;
    $$0$i$i11 = _over($65, _spellout(36) | 0) | 0;
   }
   $$0 = _over($$0$i$i11, _raze($32) | 0) | 0;
   return $$0 | 0;
  }
  do if ($17) {
   $i3$0$i48 = 0;
   while (1) {
    $75 = HEAP32[$w + ($i3$0$i48 + $$sum1$i2 << 2) >> 2] | 0;
    if ((HEAP32[$75 + 12 >> 2] | 0) != 1) break;
    if (!(HEAP32[$75 >> 2] & 2)) break;
    $86 = (_memchr($75 + 24 | 0, 32, HEAP32[$75 + 8 >> 2] | 0) | 0) == 0;
    $i3$0$i48 = $i3$0$i48 + 1 | 0;
    if (!($86 & ($i3$0$i48 | 0) < ($2 | 0))) {
     label = 37;
     break;
    }
   }
   if ((label | 0) == 37) if ($86) break;
   $89 = _spellout(59) | 0;
   if (!$89) {
    $$0 = 0;
    return $$0 | 0;
   }
   $91 = $2 + -1 | 0;
   L180 : do if (($2 | 0) > 1) {
    $i5$0$i44 = 0;
    $v$1$i43 = $37;
    while (1) {
     $95 = _lnoun(HEAP32[$w + ($i5$0$i44 + $$sum1$i2 << 2) >> 2] | 0) | 0;
     if (!$95) {
      $$0 = 0;
      label = 127;
      break;
     }
     if (!((_lp($95) | 0) << 24 >> 24)) $$ph = $95; else {
      $100 = HEAP32[$95 + 8 >> 2] | 0;
      $102 = _ga(2, $100 + 2 | 0, 1, 0) | 0;
      if (!$102) {
       $v$1$i43$lcssa89 = $v$1$i43;
       break;
      }
      $105 = HEAP32[$102 + 12 >> 2] | 0;
      $107 = $102 + ($105 + 4 + ($105 & 1) << 2) | 0;
      HEAP8[$107 >> 0] = 40;
      HEAP8[$107 + ($100 + 1) >> 0] = 41;
      $111 = HEAP32[$95 + 12 >> 2] | 0;
      _memcpy($107 + 1 | 0, $95 + ($111 + 4 + ($111 & 1) << 2) | 0, $100 | 0) | 0;
      $$ph = $102;
     }
     HEAP32[$v$1$i43 >> 2] = $$ph;
     $115 = $v$1$i43 + 8 | 0;
     HEAP32[$v$1$i43 + 4 >> 2] = $89;
     $i5$0$i44 = $i5$0$i44 + 1 | 0;
     if (($i5$0$i44 | 0) >= ($91 | 0)) {
      $v$1$i$lcssa = $115;
      break L180;
     } else $v$1$i43 = $115;
    }
    if ((label | 0) == 127) return $$0 | 0;
    HEAP32[$v$1$i43$lcssa89 >> 2] = 0;
    $$0 = 0;
    return $$0 | 0;
   } else $v$1$i$lcssa = $37; while (0);
   $120 = _lnoun(HEAP32[$w + ($$sum1$i2 + $91 << 2) >> 2] | 0) | 0;
   HEAP32[$v$1$i$lcssa >> 2] = $120;
   if (!$120) {
    $$0 = 0;
    return $$0 | 0;
   }
   $122 = HEAP32[$14 >> 2] | 0;
   do if (($122 | 0) == 2) {
    $phitmp$i14$i = (HEAP32[$w + 20 >> 2] | 0) == 1;
    if ((HEAP32[$w + 16 >> 2] | 0) == 1) $126 = $phitmp$i14$i ? -100 : -99; else if ($phitmp$i14$i) $126 = -100; else {
     label = 54;
     break;
    }
    $$0$i18$i = _spellout($126) | 0;
   } else if (!$122) $$0$i18$i = HEAP32[616] | 0; else if (($122 | 0) > 1) label = 54; else if ((HEAP32[$1 >> 2] | 0) > 1) {
    $$0$i18$i = HEAP32[616] | 0;
    break;
   } else {
    $$0$i18$i = _spellout(44) | 0;
    break;
   } while (0);
   if ((label | 0) == 54) {
    $131 = _thorn1(_shape($w) | 0) | 0;
    $$0$i18$i = _over($131, _spellout(36) | 0) | 0;
   }
   $$0 = _over($$0$i18$i, _raze($32) | 0) | 0;
   return $$0 | 0;
  } while (0);
  $140 = HEAP32[$14 >> 2] | 0;
  do if (($140 | 0) == 2) {
   $phitmp$i22$i = (HEAP32[$w + 20 >> 2] | 0) == 1;
   if ((HEAP32[$w + 16 >> 2] | 0) == 1) $144 = $phitmp$i22$i ? -100 : -99; else if ($phitmp$i22$i) $144 = -100; else {
    label = 66;
    break;
   }
   $$0$i26$i = _spellout($144) | 0;
  } else if (!$140) $$0$i26$i = HEAP32[616] | 0; else if (($140 | 0) > 1) label = 66; else if ((HEAP32[$1 >> 2] | 0) > 1) {
   $$0$i26$i = HEAP32[616] | 0;
   break;
  } else {
   $$0$i26$i = _spellout(44) | 0;
   break;
  } while (0);
  if ((label | 0) == 66) {
   $149 = _thorn1(_shape($w) | 0) | 0;
   $$0$i26$i = _over($149, _spellout(36) | 0) | 0;
  }
  $156 = _cstr(3472) | 0;
  $157 = _scc(32) | 0;
  $158 = _ds(44) | 0;
  $$0 = _over($$0$i26$i, _over($156, _lchar(_raze(_df2($157, $w, _under($158, _ds(62) | 0) | 0) | 0) | 0) | 0) | 0) | 0;
  return $$0 | 0;
 } else {
  $223 = _ravel($w) | 0;
  if (!$223) {
   $$0 = 0;
   return $$0 | 0;
  }
  $225 = HEAP32[$1 >> 2] | 0;
  $226 = _ds(-77) | 0;
  $228 = _fit($226, _sc(18) | 0) | 0;
  if (!$228) {
   $$0 = 0;
   return $$0 | 0;
  }
  if (($225 | 0) > 7) label = 99; else if (($225 | 0) > 1) if ((HEAP32[$w + 12 >> 2] | 0) > 1) label = 99;
  if ((label | 0) == 99) {
   $236 = _from(HEAP32[646] | 0, $223) | 0;
   $238 = _from(HEAP32[660] | 0, $223) | 0;
   $239 = _minus($236, $238) | 0;
   if (!$239) {
    $$0 = 0;
    return $$0 | 0;
   }
   if ((_all1(_match($223, _plus($238, _tymes($239, _apv($225, 0, 1) | 0) | 0) | 0) | 0) | 0) << 24 >> 24) {
    if ((_all1(_eq($239, HEAP32[660] | 0) | 0) | 0) << 24 >> 24) {
     $252 = _thorn1(_shape($w) | 0) | 0;
     $254 = _over($252, _spellout(36) | 0) | 0;
     $$0 = _over($254, _df1($238, $228) | 0) | 0;
     return $$0 | 0;
    }
    $257 = _ga(32, 6, 1, 0) | 0;
    if (!$257) {
     $$0 = 0;
     return $$0 | 0;
    }
    $260 = HEAP32[$257 + 12 >> 2] | 0;
    $$sum1$i = $260 + 4 + ($260 & 1) | 0;
    $262 = $257 + ($$sum1$i << 2) | 0;
    $263 = HEAP32[616] | 0;
    $264 = $257 + ($$sum1$i + 3 << 2) | 0;
    HEAP32[$264 >> 2] = $263;
    $265 = $257 + ($$sum1$i + 2 << 2) | 0;
    HEAP32[$265 >> 2] = $263;
    $266 = $257 + ($$sum1$i + 1 << 2) | 0;
    HEAP32[$266 >> 2] = $263;
    HEAP32[$262 >> 2] = $263;
    if ((_all0(_eq($238, HEAP32[660] | 0) | 0) | 0) << 24 >> 24) {
     $271 = _df1($238, $228) | 0;
     HEAP32[$262 >> 2] = $271;
     if (!$271) {
      $$0 = 0;
      return $$0 | 0;
     }
     $273 = _spellout(43) | 0;
     HEAP32[$266 >> 2] = $273;
     if (!$273) {
      $$0 = 0;
      return $$0 | 0;
     }
    }
    if (!((_all1(_eq($239, HEAP32[644] | 0) | 0) | 0) << 24 >> 24)) {
     if ((_all0(_eq($239, HEAP32[646] | 0) | 0) | 0) << 24 >> 24) {
      $285 = _df1($239, $228) | 0;
      HEAP32[$265 >> 2] = $285;
      if (!$285) {
       $$0 = 0;
       return $$0 | 0;
      }
      $287 = _spellout(42) | 0;
      HEAP32[$264 >> 2] = $287;
      if (!$287) {
       $$0 = 0;
       return $$0 | 0;
      }
     }
    } else {
     $279 = _spellout(45) | 0;
     HEAP32[$266 >> 2] = $279;
     if (!$279) {
      $$0 = 0;
      return $$0 | 0;
     }
    }
    $289 = _spellout(-55) | 0;
    HEAP32[$257 + ($$sum1$i + 4 << 2) >> 2] = $289;
    if (!$289) {
     $$0 = 0;
     return $$0 | 0;
    }
    $293 = _thorn1(_shape($w) | 0) | 0;
    HEAP32[$257 + ($$sum1$i + 5 << 2) >> 2] = $293;
    if (!$293) {
     $$0 = 0;
     return $$0 | 0;
    }
    $$0 = _raze($257) | 0;
    return $$0 | 0;
   }
  }
  $298 = HEAP32[$w + 12 >> 2] | 0;
  do if (($298 | 0) == 2) {
   $phitmp$i$i = (HEAP32[$w + 20 >> 2] | 0) == 1;
   if ((HEAP32[$w + 16 >> 2] | 0) == 1) $302 = $phitmp$i$i ? -100 : -99; else if ($phitmp$i$i) $302 = -100; else {
    label = 122;
    break;
   }
   $$0$i$i = _spellout($302) | 0;
  } else if (!$298) $$0$i$i = HEAP32[616] | 0; else if (($298 | 0) > 1) label = 122; else if ((HEAP32[$1 >> 2] | 0) > 1) {
   $$0$i$i = HEAP32[616] | 0;
   break;
  } else {
   $$0$i$i = _spellout(44) | 0;
   break;
  } while (0);
  if ((label | 0) == 122) {
   $307 = _thorn1(_shape($w) | 0) | 0;
   $$0$i$i = _over($307, _spellout(36) | 0) | 0;
  }
  $$0 = _over($$0$i$i, _df1($223, $228) | 0) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _inv($w) {
 $w = $w | 0;
 var $$ = 0, $$0 = 0, $$sum1 = 0, $$sum5 = 0, $$sum5$i = 0, $$sum5$i$i = 0, $0 = 0, $10 = 0, $112 = 0, $113 = 0, $124 = 0, $125 = 0, $128 = 0, $129 = 0, $136 = 0, $138 = 0, $140 = 0, $143 = 0, $145 = 0, $146 = 0, $148 = 0, $153 = 0, $155 = 0, $16 = 0, $165 = 0, $168 = 0, $171 = 0, $172 = 0, $173 = 0, $186 = 0, $188 = 0, $195 = 0, $197 = 0, $202 = 0, $209 = 0, $21 = 0, $211 = 0, $22 = 0, $221 = 0, $239 = 0, $241 = 0, $243 = 0, $246 = 0, $248 = 0, $250 = 0, $27 = 0, $29 = 0, $298 = 0, $30 = 0, $301 = 0, $305 = 0, $339 = 0, $346 = 0, $351 = 0, $352 = 0, $354 = 0, $36 = 0, $380 = 0, $385 = 0, $388 = 0, $389 = 0, $39 = 0, $391 = 0, $392 = 0, $394 = 0, $399 = 0, $40 = 0, $404 = 0, $407 = 0, $408 = 0, $41 = 0, $410 = 0, $411 = 0, $413 = 0, $418 = 0, $420 = 0, $422 = 0, $425 = 0, $427 = 0, $429 = 0, $43 = 0, $47 = 0, $6 = 0, $70 = 0, $78 = 0, $91 = 0, $97 = 0, $98 = 0;
 $0 = _fix($w) | 0;
 if (!$0) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$0 >> 2] & 128)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $6 = HEAP32[$0 + 12 >> 2] | 0;
 $$sum1 = $6 + 4 + ($6 & 1) | 0;
 $10 = HEAP8[$0 + ($$sum1 << 2) + 31 >> 0] | 0;
 $16 = HEAP8[3888 + (HEAPU8[5536 + ($10 & 255) >> 0] << 4) + 15 >> 0] | 0;
 if ($16 << 24 >> 24) {
  $$0 = _ds($16 << 24 >> 24) | 0;
  return $$0 | 0;
 }
 $21 = HEAP32[$0 + ($$sum1 + 2 << 2) >> 2] | 0;
 $22 = ($21 | 0) != 0;
 if ($22) $27 = (HEAP32[$21 >> 2] & 127 | 0) != 0; else $27 = 0;
 $$ = $22 & ($27 ^ 1);
 $29 = HEAP32[$0 + ($$sum1 + 3 << 2) >> 2] | 0;
 $30 = ($29 | 0) != 0;
 if ($30) $36 = (HEAP32[$29 >> 2] & 127 | 0) != 0; else $36 = 0;
 if (!($10 << 24 >> 24 == 38 & ($27 ^ $36))) {
  L20 : do switch ($10 << 24 >> 24 | 0) {
  case -53:
   {
    $$0 = _amp(_ds(37) | 0, HEAP32[648] | 0) | 0;
    return $$0 | 0;
   }
  case -54:
   {
    $$0 = _amp(_ds(37) | 0, HEAP32[622] | 0) | 0;
    return $$0 | 0;
   }
  case -51:
   {
    $$0 = _atop(_amp(_ds(37) | 0, HEAP32[622] | 0) | 0, _ds(-112) | 0) | 0;
    return $$0 | 0;
   }
  case -120:
   {
    $$0 = _obverse(_qq(_qq(_slash(_ds(-54) | 0) | 0, HEAP32[646] | 0) | 0, HEAP32[624] | 0) | 0, $0) | 0;
    return $$0 | 0;
   }
  case -118:
   {
    $$0 = _obverse(_qq(_qq(_slash(_ds(-51) | 0) | 0, HEAP32[646] | 0) | 0, HEAP32[624] | 0) | 0, $0) | 0;
    return $$0 | 0;
   }
  case -89:
   {
    $$0 = _atop(_ds(-91) | 0, _ds(-106) | 0) | 0;
    return $$0 | 0;
   }
  case -102:
   {
    if (!($27 | $22 ^ 1 | ($36 | $30 ^ 1))) {
     $$0 = _obverse($29, $21) | 0;
     return $$0 | 0;
    }
    break;
   }
  case -111:
   {
    if ($$) if ((_i0($29) | 0) == -1) {
     $$0 = $21;
     return $$0 | 0;
    }
    break;
   }
  case 38:
  case 64:
   {
    if (!($27 | $22 ^ 1 | ($36 | $30 ^ 1))) {
     $298 = _inv($29) | 0;
     return _atop($298, _inv($21) | 0) | 0;
    }
    break;
   }
  case 34:
   {
    if ($$) return _qq(_inv($21) | 0, $29) | 0;
    break;
   }
  case -97:
   {
    $$0 = _obverse(_atop(_ds(59) | 0, _qq(_under(_amp(_scc(32) | 0, _ds(44) | 0) | 0, _ds(62) | 0) | 0, HEAP32[646] | 0) | 0) | 0, $0) | 0;
    return $$0 | 0;
   }
  case 126:
   {
    $305 = HEAP32[$21 + 12 >> 2] | 0;
    switch (HEAP8[$21 + ($305 + 4 + ($305 & 1) << 2) + 31 >> 0] | 0) {
    case 43:
     {
      $$0 = _ds(-115) | 0;
      return $$0 | 0;
     }
    case 42:
     {
      $$0 = _ds(-113) | 0;
      return $$0 | 0;
     }
    case -54:
     {
      $$0 = _amp(_ds(37) | 0, _increm(HEAP32[622] | 0) | 0) | 0;
      return $$0 | 0;
     }
    case -99:
     {
      $$0 = _obverse(_ds(-84) | 0, $0) | 0;
      return $$0 | 0;
     }
    case 44:
     {
      $$0 = _obverse(_hook(_swap(_ds(-84) | 0) | 0, _atop(_atop(_ds(-126) | 0, _ds(-115) | 0) | 0, _ds(35) | 0) | 0) | 0, $0) | 0;
      return $$0 | 0;
     }
    case 94:
     {
      $$0 = _obverse(_qq(_colon(_cstr(96) | 0, HEAP32[616] | 0) | 0, HEAP32[660] | 0) | 0, $0) | 0;
      return $$0 | 0;
     }
    case 59:
     {
      $$0 = _obverse(_atop(_ds(62) | 0, _ds(-84) | 0) | 0, $0) | 0;
      return $$0 | 0;
     }
    default:
     break L20;
    }
    break;
   }
  case -75:
  case -93:
   {
    if (!($27 | $22 ^ 1 | ($36 | $30 ^ 1))) {
     $301 = _inv($29) | 0;
     return _atco($301, _inv($21) | 0) | 0;
    }
    break;
   }
  case -90:
  case 92:
   {
    $339 = HEAP32[$21 + 12 >> 2] | 0;
    $$sum5 = $339 + 4 + ($339 & 1) | 0;
    if ((HEAP8[$21 + ($$sum5 << 2) + 31 >> 0] | 0) == 47) {
     $346 = HEAP32[$21 + ($$sum5 + 2 << 2) >> 2] | 0;
     if ($346) if (HEAP32[$346 >> 2] & 128) {
      $351 = $10 << 24 >> 24 == -90;
      $352 = $351 ? 251 : 250;
      $354 = HEAP32[$346 + 12 >> 2] | 0;
      switch (HEAP8[$346 + ($354 + 4 + ($354 & 1) << 2) + 31 >> 0] | 0) {
      case 43:
       {
        $$0 = _obverse(_hook(_ds(45) | 0, ftCall_ii($352 | 0, HEAP32[660] | 0) | 0) | 0, $0) | 0;
        return $$0 | 0;
       }
      case 42:
       {
        $$0 = _obverse(_hook(_ds(37) | 0, ftCall_ii($352 | 0, HEAP32[646] | 0) | 0) | 0, $0) | 0;
        return $$0 | 0;
       }
      case -107:
       {
        $$0 = _obverse(_hook(_ds(-107) | 0, ftCall_ii($352 | 0, HEAP32[660] | 0) | 0) | 0, $0) | 0;
        return $$0 | 0;
       }
      case 45:
       {
        if ($351) {
         $380 = _ds(43) | 0;
         $$0 = _obverse(_hook($380, ftCall_ii($352 | 0, HEAP32[660] | 0) | 0) | 0, $0) | 0;
         return $$0 | 0;
        } else {
         $385 = _ds(45) | 0;
         $388 = _hook($385, ftCall_ii($352 | 0, HEAP32[660] | 0) | 0) | 0;
         $389 = _ds(42) | 0;
         $391 = _qq($389, HEAP32[644] | 0) | 0;
         $392 = _ds(36) | 0;
         $394 = _amp($392, _v2(1, -1) | 0) | 0;
         $$0 = _obverse(_folk($388, $391, _atop($394, _ds(35) | 0) | 0) | 0, $0) | 0;
         return $$0 | 0;
        }
        break;
       }
      case 37:
       {
        if ($351) {
         $399 = _ds(42) | 0;
         $$0 = _obverse(_hook($399, ftCall_ii($352 | 0, HEAP32[646] | 0) | 0) | 0, $0) | 0;
         return $$0 | 0;
        } else {
         $404 = _ds(37) | 0;
         $407 = _hook($404, ftCall_ii($352 | 0, HEAP32[646] | 0) | 0) | 0;
         $408 = _ds(94) | 0;
         $410 = _qq($408, HEAP32[644] | 0) | 0;
         $411 = _ds(36) | 0;
         $413 = _amp($411, _v2(1, -1) | 0) | 0;
         $$0 = _obverse(_folk($407, $410, _atop($413, _ds(35) | 0) | 0) | 0, $0) | 0;
         return $$0 | 0;
        }
        break;
       }
      case 61:
       {
        $$0 = _obverse(_hook(_ds(61) | 0, ftCall_ii($352 | 0, HEAP32[646] | 0) | 0) | 0, $0) | 0;
        return $$0 | 0;
       }
      default:
       break L20;
      }
     }
    }
    break;
   }
  default:
   {}
  } while (0);
  $418 = _ds(61) | 0;
  $420 = _atop($418, _ds(-55) | 0) | 0;
  $422 = _atop($420, _ds(35) | 0) | 0;
  $425 = _atop(_atco(_ds(-114) | 0, $0) | 0, $422) | 0;
  $427 = _slash(_ds(43) | 0) | 0;
  $429 = _dot($427, _ds(42) | 0) | 0;
  $$0 = _obverse(_folk($425, $429, _ds(93) | 0) | 0, $0) | 0;
  return $$0 | 0;
 }
 $39 = (HEAP32[$21 >> 2] & 127 | 0) != 0;
 $40 = $39 ? $29 : $21;
 $41 = $39 ? $21 : $29;
 $43 = HEAP32[$40 + 12 >> 2] | 0;
 $$sum5$i = $43 + 4 + ($43 & 1) | 0;
 $47 = HEAP8[$40 + ($$sum5$i << 2) + 31 >> 0] | 0;
 do switch ($47 << 24 >> 24 | 0) {
 case 94:
  {
   $$0 = _amp($41, _ds($39 ? -112 : -113) | 0) | 0;
   return $$0 | 0;
  }
 case -112:
  {
   if ($39) {
    $$0 = _amp($41, _ds(94) | 0) | 0;
    return $$0 | 0;
   } else {
    $$0 = _amp(_ds(-113) | 0, $41) | 0;
    return $$0 | 0;
   }
   break;
  }
 case 45:
  {
   $$0 = _amp($41, _ds($39 ? 45 : 43) | 0) | 0;
   return $$0 | 0;
  }
 case 42:
  {
   $$0 = _amp(_ds(37) | 0, $41) | 0;
   return $$0 | 0;
  }
 case 37:
  {
   $$0 = _amp($41, _ds($39 ? 37 : 42) | 0) | 0;
   return $$0 | 0;
  }
 case -51:
  {
   if ($39) {
    $78 = _inv(_ds(-51) | 0) | 0;
    return _atop($78, _amp(_ds(37) | 0, $41) | 0) | 0;
   }
   $$0 = _amp(_ds(37) | 0, _rdot1($41) | 0) | 0;
   return $$0 | 0;
  }
 case 123:
  {
   if ($39) {
    $$0 = _amp(_pinv($41) | 0, $40) | 0;
    return $$0 | 0;
   } else {
    $$0 = _amp($41, _ds(-55) | 0) | 0;
    return $$0 | 0;
   }
   break;
  }
 case -54:
  {
   if ($39) {
    $70 = _inv(_ds(-54) | 0) | 0;
    return _atop($70, _amp(_ds(45) | 0, $41) | 0) | 0;
   }
   $$0 = _amp(_ds(45) | 0, _jdot1($41) | 0) | 0;
   return $$0 | 0;
  }
 case -96:
  {
   if ($39) {
    $$0 = _amp($41, _ds(-95) | 0) | 0;
    return $$0 | 0;
   }
   break;
  }
 case -60:
 case -63:
  {
   if ($39) if ((HEAP32[$41 + 12 >> 2] | 0) <= ($47 << 24 >> 24 == -60 | 0)) {
    $124 = _atop(_ds(-91) | 0, $0) | 0;
    $125 = _ds(-55) | 0;
    $128 = _atop($124, _atop($125, _ds(35) | 0) | 0) | 0;
    $129 = _ds(123) | 0;
    $$0 = _obverse(_folk($128, $129, _ds(93) | 0) | 0, $0) | 0;
    return $$0 | 0;
   }
   break;
  }
 case -82:
  {
   if ($39) if ((HEAP32[$41 + 12 >> 2] | 0) < 2) {
    $136 = _cvt(4, $41) | 0;
    if (!$136) {
     $$0 = 0;
     return $$0 | 0;
    }
    $138 = _v2(-1, 1) | 0;
    $140 = _eps($138, _signum($136) | 0) | 0;
    if (!$140) {
     $$0 = 0;
     return $$0 | 0;
    }
    $143 = HEAP32[$140 + 12 >> 2] | 0;
    $145 = $140 + ($143 + 4 + ($143 & 1) << 2) | 0;
    $146 = _mag($136) | 0;
    $148 = _amp($146, _ds(43) | 0) | 0;
    if ((HEAP32[$136 + 8 >> 2] | 0) == 1) $173 = _ds(35) | 0; else {
     $153 = _tally($136) | 0;
     $155 = _amp($153, _ds(-84) | 0) | 0;
     $173 = _atop($155, _ds(36) | 0) | 0;
    }
    if (!(HEAP8[$145 + 1 >> 0] | 0)) $172 = $148; else {
     if (!(HEAP8[$145 >> 0] | 0)) $168 = _ds(45) | 0; else {
      $165 = _negate(_signum($136) | 0) | 0;
      $168 = _amp($165, _ds(42) | 0) | 0;
     }
     $172 = _atop($168, $148) | 0;
    }
    $171 = _swap(_ds(-84) | 0) | 0;
    $$0 = _obverse(_hook($171, _atop($172, $173) | 0) | 0, $0) | 0;
    return $$0 | 0;
   }
   break;
  }
 case 44:
  {
   $91 = (HEAP32[$41 + 12 >> 2] | 0) != 0;
   if ($39) if ($91) $98 = HEAP32[$41 + 16 >> 2] | 0; else $98 = 1; else {
    if ($91) $97 = HEAP32[$41 + 16 >> 2] | 0; else $97 = 1;
    $98 = 0 - $97 | 0;
   }
   $$0 = _obverse(_amp(_sc($98) | 0, _ds(-82) | 0) | 0, $0) | 0;
   return $$0 | 0;
  }
 case -113:
  {
   $$0 = _amp(_ds($39 ? 94 : -112) | 0, $41) | 0;
   return $$0 | 0;
  }
 case -114:
  {
   if ((HEAP32[$41 + 12 >> 2] | 0) == 2) if ((HEAP32[$41 + 16 >> 2] | 0) == (HEAP32[$41 + 20 >> 2] | 0)) {
    $186 = _slash(_ds(43) | 0) | 0;
    $188 = _dot($186, _ds(42) | 0) | 0;
    if (!$188) {
     $$0 = 0;
     return $$0 | 0;
    }
    if ($39) {
     $$0 = _atop($40, _amp($188, _minv($41) | 0) | 0) | 0;
     return $$0 | 0;
    } else {
     $$0 = _amp($41, $188) | 0;
     return $$0 | 0;
    }
   }
   break;
  }
 case 46:
  {
   $195 = HEAP32[$40 + ($$sum5$i + 2 << 2) >> 2] | 0;
   $197 = HEAP32[$40 + ($$sum5$i + 3 << 2) >> 2] | 0;
   if (HEAP32[$195 >> 2] & 128) {
    $202 = HEAP32[$195 + 12 >> 2] | 0;
    $$sum5$i$i = $202 + 4 + ($202 & 1) | 0;
    if ((HEAP8[$195 + ($$sum5$i$i << 2) + 31 >> 0] | 0) == 47) {
     $209 = HEAP32[$195 + ($$sum5$i$i + 2 << 2) >> 2] | 0;
     $211 = HEAP32[$209 + 12 >> 2] | 0;
     if ((HEAP8[$209 + ($211 + 4 + ($211 & 1) << 2) + 31 >> 0] | 0) == 43) if (HEAP32[$197 >> 2] & 128) {
      $221 = HEAP32[$197 + 12 >> 2] | 0;
      if ((HEAP8[$197 + ($221 + 4 + ($221 & 1) << 2) + 31 >> 0] | 0) == 42) {
       if ((HEAP32[$41 + 12 >> 2] | 0) != 2) {
        _jsignal(14);
        $$0 = 0;
        return $$0 | 0;
       }
       if ((HEAP32[$41 + 16 >> 2] | 0) != (HEAP32[$41 + 20 >> 2] | 0)) {
        _jsignal(9);
        $$0 = 0;
        return $$0 | 0;
       }
       if ($39) {
        $$0 = _amp(_ds(-114) | 0, $41) | 0;
        return $$0 | 0;
       } else {
        $$0 = _amp($40, _minv($41) | 0) | 0;
        return $$0 | 0;
       }
      }
     }
    }
   }
   break;
  }
 case -95:
  {
   if ($39) {
    $$0 = _amp($41, _ds(-96) | 0) | 0;
    return $$0 | 0;
   }
   break;
  }
 case -105:
  {
   if ($39) {
    $$0 = _amp(_pinv($41) | 0, $40) | 0;
    return $$0 | 0;
   }
   break;
  }
 case -53:
 case -106:
  {
   if ($39) {
    $$0 = _amp(_negate($41) | 0, $40) | 0;
    return $$0 | 0;
   }
   break;
  }
 case -55:
  {
   if ($39) {
    $112 = _amp(_ds(123) | 0, $41) | 0;
    $113 = _tally($41) | 0;
    $$0 = _obverse(_atop($112, _amp($113, _ds(124) | 0) | 0) | 0, $0) | 0;
    return $$0 | 0;
   }
   break;
  }
 case 43:
  {
   $$0 = _amp(_ds(45) | 0, $41) | 0;
   return $$0 | 0;
  }
 default:
  {}
 } while (0);
 $239 = _ds(61) | 0;
 $241 = _atop($239, _ds(-55) | 0) | 0;
 $243 = _atop($241, _ds(35) | 0) | 0;
 $246 = _atop(_atco(_ds(-114) | 0, $0) | 0, $243) | 0;
 $248 = _slash(_ds(43) | 0) | 0;
 $250 = _dot($248, _ds(42) | 0) | 0;
 $$0 = _obverse(_folk($246, $250, _ds(93) | 0) | 0, $0) | 0;
 return $$0 | 0;
}

function _pscan($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$0$i21 = 0, $$01 = 0, $$1 = 0, $$sum11$i = 0, $1 = 0, $100 = 0, $116 = 0, $119 = 0, $121 = 0, $126 = 0, $136 = 0, $139 = 0, $141 = 0, $142 = 0, $145 = 0, $147 = 0, $15 = 0, $162 = 0, $163 = 0, $166 = 0, $168 = 0, $169 = 0, $17 = 0, $176 = 0, $177 = 0, $180 = 0, $181 = 0, $182 = 0, $187 = 0, $189 = 0, $194 = 0, $199 = 0, $20 = 0, $202 = 0, $205 = 0, $207 = 0, $21 = 0, $210 = 0, $213 = 0, $218 = 0, $219 = 0, $22 = 0, $222 = 0, $223 = 0, $225 = 0, $231 = 0, $233 = 0, $238 = 0, $240 = 0, $242 = 0, $244 = 0, $246 = 0, $248 = 0, $28 = 0, $30 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $45 = 0, $46 = 0, $48 = 0, $5 = 0, $50 = 0, $52 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $64 = 0, $66 = 0, $67 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $91 = 0, $b$0$i65 = 0, $b$1$i76 = 0, $cv = 0, $cv$i = 0, $d$0$i75 = 0, $d$1$i80 = 0, $f2 = 0, $f2$i = 0, $fs$0 = 0, $fs$1 = 0, $i$0$i62 = 0, $i$032 = 0, $i1$0$i56 = 0, $i13$0$i47 = 0, $i15$0$i43 = 0, $i17$0$i34 = 0, $i19$0$i38 = 0, $i3$0$i51 = 0, $i5$0$i68 = 0, $i7$0$i73 = 0, $i9$0$i78 = 0, $scevgep = 0, $scevgep91 = 0, $t$0 = 0, $u$0$i33 = 0, $u$1$i37 = 0, $v$0$i64 = 0, $v$031 = 0, $v$1$i58 = 0, $v$2$i53 = 0, $v$3$i = 0, $v$4$i70 = 0, $v11$0$i45 = 0, $x$0$i63 = 0, $x$030 = 0, $x$1$i57 = 0, $x$2$i52 = 0, $x$3$i = 0, $x$4$i69 = 0, $x$5$i74 = 0, $x$6$i79 = 0, $x12$0$i46 = 0, $x12$1$i42 = 0, $yv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $cv$i = sp + 20 | 0;
 $f2$i = sp + 16 | 0;
 $cv = sp + 12 | 0;
 $f2 = sp + 8 | 0;
 $yv = sp;
 if (!$w) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $1 = $w + 12 | 0;
 if (HEAP32[$1 >> 2] | 0) {
  $4 = $w + 16 | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  $6 = HEAP32[$w >> 2] | 0;
  if (($5 | 0) > 1) if (!(($6 & 29 | 0) == 0 | (HEAP32[$w + 8 >> 2] | 0) == 0)) {
   if (!($6 & 1)) {
    $162 = $self + 12 | 0;
    $163 = HEAP32[$162 >> 2] | 0;
    $166 = HEAP32[$self + ($163 + 6 + ($163 & 1) << 2) >> 2] | 0;
    $168 = HEAP8[(_vap($166) | 0) >> 0] | 0;
    $169 = $168 << 24 >> 24 == 45;
    if ($168 << 24 >> 24 == 45) label = 57; else if ($168 << 24 >> 24 == 37) if (!((_all0(_eps($w, HEAP32[660] | 0) | 0) | 0) << 24 >> 24)) {
     $176 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
     $177 = HEAP32[$162 >> 2] | 0;
     $180 = HEAP32[$self + ($177 + 6 + ($177 & 1) << 2) >> 2] | 0;
     $181 = _mr($self) | 0;
     $182 = HEAP32[$1 >> 2] | 0;
     if (($181 | 0) < ($182 | 0)) {
      $$0 = _rank1ex($w, $self, $181, 254) | 0;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if (!$182) $187 = 1; else $187 = HEAP32[$4 >> 2] | 0;
     $189 = _table(_apv($187, 1, 1) | 0) | 0;
     $$0 = _gc(_df2($189, $w, _atop($180, _ds(-84) | 0) | 0) | 0, $176) | 0;
     STACKTOP = sp;
     return $$0 | 0;
    } else label = 57; else {
     $$1 = $w;
     $fs$1 = $166;
     $t$0 = $6;
    }
    if ((label | 0) == 57) {
     $194 = _ga(4, $5, 1, 0) | 0;
     if (!$194) {
      $$0 = 0;
      STACKTOP = sp;
      return $$0 | 0;
     }
     HEAP32[$yv >> 2] = 1;
     HEAP32[$yv + 4 >> 2] = -1;
     $199 = HEAP32[$194 + 12 >> 2] | 0;
     _mvc($5 << 2, $194 + ($199 + 4 + ($199 & 1) << 2) | 0, 8, $yv);
     if ($169) {
      $202 = _tymes($w, $194) | 0;
      if (!$202) {
       $$0 = 0;
       STACKTOP = sp;
       return $$0 | 0;
      }
      $205 = _slash(_ds(43) | 0) | 0;
      if (!$205) {
       $$0 = 0;
       STACKTOP = sp;
       return $$0 | 0;
      } else {
       $$01 = $202;
       $fs$0 = $205;
      }
     } else {
      $207 = _expn2($w, $194) | 0;
      if (!$207) {
       $$0 = 0;
       STACKTOP = sp;
       return $$0 | 0;
      }
      $210 = _slash(_ds(42) | 0) | 0;
      if (!$210) {
       $$0 = 0;
       STACKTOP = sp;
       return $$0 | 0;
      } else {
       $$01 = $207;
       $fs$0 = $210;
      }
     }
     $$1 = $$01;
     $fs$1 = $fs$0;
     $t$0 = HEAP32[$$01 >> 2] | 0;
    }
    _vaa($fs$1, $t$0, $f2, $cv);
    $213 = HEAP32[$cv >> 2] | 0;
    if (!($213 & 2048)) {
     $218 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
     $219 = HEAP32[$162 >> 2] | 0;
     $222 = HEAP32[$self + ($219 + 6 + ($219 & 1) << 2) >> 2] | 0;
     $223 = _mr($self) | 0;
     $225 = HEAP32[$$1 + 12 >> 2] | 0;
     if (($223 | 0) < ($225 | 0)) {
      $$0 = _rank1ex($$1, $self, $223, 254) | 0;
      STACKTOP = sp;
      return $$0 | 0;
     }
     if (!$225) $231 = 1; else $231 = HEAP32[$$1 + 16 >> 2] | 0;
     $233 = _table(_apv($231, 1, 1) | 0) | 0;
     $$0 = _gc(_df2($233, $$1, _atop($222, _ds(-84) | 0) | 0) | 0, $218) | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $238 = _cva($213, $$1) | 0;
    if (!$238) {
     $$0 = 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $240 = _aii($238) | 0;
    $242 = _bp(HEAP32[$238 >> 2] | 0) | 0;
    $244 = HEAP32[$238 + 12 >> 2] | 0;
    $246 = $238 + ($244 + 4 + ($244 & 1) << 2) | 0;
    $248 = Math_imul($240, $5 + -1 | 0) | 0;
    if (($248 | 0) > 0) {
     $i$032 = 0;
     $v$031 = $246 + (Math_imul($242, $240) | 0) | 0;
     $x$030 = $246;
     while (1) {
      ftCall_viii(HEAP32[$f2 >> 2] | 0, $x$030 | 0, $v$031 | 0, $v$031 | 0);
      $i$032 = $i$032 + 1 | 0;
      if (($i$032 | 0) == ($248 | 0)) break; else {
       $v$031 = $v$031 + $242 | 0;
       $x$030 = $x$030 + $242 | 0;
      }
     }
    }
    if (HEAP8[2472] | 0) {
     $$0 = 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $$0 = _cvz(HEAP32[$cv >> 2] | 0, $238) | 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $37 = _aii($w) | 0;
   $39 = HEAP32[$self + 12 >> 2] | 0;
   $42 = HEAP32[$self + ($39 + 6 + ($39 & 1) << 2) >> 2] | 0;
   $43 = _vap($42) | 0;
   $45 = HEAP8[$43 + 1 >> 0] | 0;
   $46 = $45 << 24 >> 24;
   $48 = ($37 | 0) == 1;
   do if ($48 & $45 << 24 >> 24 != 0) {
    $50 = _ga(1, $5, HEAP32[$1 >> 2] | 0, $4) | 0;
    if (!$50) $$0$i21 = 0; else {
     $52 = HEAP32[$1 >> 2] | 0;
     $56 = HEAP32[$50 + 12 >> 2] | 0;
     _bpv($5, $w + ($52 + 4 + ($52 & 1) << 2) | 0, $50 + ($56 + 4 + ($56 & 1) << 2) | 0, $46);
     $$0$i21 = $50;
    }
   } else {
    $59 = HEAP8[$43 >> 0] | 0;
    $60 = $59 << 24 >> 24 == 43;
    if ($59 << 24 >> 24 == 43 | $59 << 24 >> 24 == 45) {
     $61 = _cvt(4, $w) | 0;
     if (!$61) {
      $$0$i21 = 0;
      break;
     }
     $64 = HEAP32[$61 + 12 >> 2] | 0;
     $$sum11$i = $64 + 4 + ($64 & 1) | 0;
     $66 = $61 + ($$sum11$i << 2) | 0;
     $67 = $61 + ($$sum11$i + $37 << 2) | 0;
     $71 = $60 & 1 | ($48 & 1) << 1;
     if (($71 | 0) == 2) {
      $b$1$i76 = 1;
      $d$0$i75 = 0;
      $i7$0$i73 = 0;
      $x$5$i74 = $66;
      while (1) {
       $100 = HEAP32[$x$5$i74 >> 2] | 0;
       $d$0$i75 = ($b$1$i76 << 24 >> 24 != 0 ? $100 : 0 - $100 | 0) + $d$0$i75 | 0;
       HEAP32[$x$5$i74 >> 2] = $d$0$i75;
       $i7$0$i73 = $i7$0$i73 + 1 | 0;
       if (($i7$0$i73 | 0) == ($5 | 0)) {
        $$0$i21 = $61;
        break;
       } else {
        $b$1$i76 = $b$1$i76 ^ 1;
        $x$5$i74 = $x$5$i74 + 4 | 0;
       }
      }
     } else if (($71 | 0) == 1) {
      $91 = Math_imul($37, $5 + -1 | 0) | 0;
      if (($91 | 0) > 0) {
       $i5$0$i68 = 0;
       $v$4$i70 = $67;
       $x$4$i69 = $66;
      } else {
       $$0$i21 = $61;
       break;
      }
      while (1) {
       HEAP32[$v$4$i70 >> 2] = (HEAP32[$v$4$i70 >> 2] | 0) + (HEAP32[$x$4$i69 >> 2] | 0);
       $i5$0$i68 = $i5$0$i68 + 1 | 0;
       if (($i5$0$i68 | 0) == ($91 | 0)) {
        $$0$i21 = $61;
        break;
       } else {
        $v$4$i70 = $v$4$i70 + 4 | 0;
        $x$4$i69 = $x$4$i69 + 4 | 0;
       }
      }
     } else if (($71 | 0) == 3) {
      $d$1$i80 = 0;
      $i9$0$i78 = 0;
      $x$6$i79 = $66;
      while (1) {
       $d$1$i80 = (HEAP32[$x$6$i79 >> 2] | 0) + $d$1$i80 | 0;
       HEAP32[$x$6$i79 >> 2] = $d$1$i80;
       $i9$0$i78 = $i9$0$i78 + 1 | 0;
       if (($i9$0$i78 | 0) == ($5 | 0)) {
        $$0$i21 = $61;
        break;
       } else $x$6$i79 = $x$6$i79 + 4 | 0;
      }
     } else if (!$71) {
      $72 = ($37 | 0) > 0;
      $73 = $5 + -1 | 0;
      $b$0$i65 = 1;
      $i$0$i62 = 0;
      $v$0$i64 = $67;
      $x$0$i63 = $66;
      while (1) {
       $74 = $b$0$i65 << 24 >> 24 != 0;
       if ($74) if ($72) {
        $scevgep91 = $v$0$i64 + ($37 << 2) | 0;
        $i1$0$i56 = 0;
        $v$1$i58 = $v$0$i64;
        $x$1$i57 = $x$0$i63;
        while (1) {
         HEAP32[$v$1$i58 >> 2] = (HEAP32[$x$1$i57 >> 2] | 0) - (HEAP32[$v$1$i58 >> 2] | 0);
         $i1$0$i56 = $i1$0$i56 + 1 | 0;
         if (($i1$0$i56 | 0) == ($37 | 0)) break; else {
          $v$1$i58 = $v$1$i58 + 4 | 0;
          $x$1$i57 = $x$1$i57 + 4 | 0;
         }
        }
        $v$3$i = $scevgep91;
        $x$3$i = $x$0$i63 + ($37 << 2) | 0;
       } else {
        $v$3$i = $v$0$i64;
        $x$3$i = $x$0$i63;
       } else if ($72) {
        $scevgep = $v$0$i64 + ($37 << 2) | 0;
        $i3$0$i51 = 0;
        $v$2$i53 = $v$0$i64;
        $x$2$i52 = $x$0$i63;
        while (1) {
         HEAP32[$v$2$i53 >> 2] = (HEAP32[$v$2$i53 >> 2] | 0) + (HEAP32[$x$2$i52 >> 2] | 0);
         $i3$0$i51 = $i3$0$i51 + 1 | 0;
         if (($i3$0$i51 | 0) == ($37 | 0)) break; else {
          $v$2$i53 = $v$2$i53 + 4 | 0;
          $x$2$i52 = $x$2$i52 + 4 | 0;
         }
        }
        $v$3$i = $scevgep;
        $x$3$i = $x$0$i63 + ($37 << 2) | 0;
       } else {
        $v$3$i = $v$0$i64;
        $x$3$i = $x$0$i63;
       }
       $i$0$i62 = $i$0$i62 + 1 | 0;
       if (($i$0$i62 | 0) == ($73 | 0)) {
        $$0$i21 = $61;
        break;
       } else {
        $b$0$i65 = $74 & 1 ^ 1;
        $v$0$i64 = $v$3$i;
        $x$0$i63 = $x$3$i;
       }
      }
     } else {
      $$0$i21 = 0;
      break;
     }
    } else {
     _vaa($42, 1, $f2$i, $cv$i);
     if (!(HEAP32[$cv$i >> 2] & 16)) {
      $$0$i21 = _pscan(_cvt(8, $w) | 0, $self) | 0;
      break;
     }
     $116 = _ca($w) | 0;
     if (!$116) {
      $$0$i21 = 0;
      break;
     }
     $119 = HEAP32[$116 + 12 >> 2] | 0;
     $121 = $116 + ($119 + 4 + ($119 & 1) << 2) | 0;
     if (HEAP32[$cv$i >> 2] & 2048) {
      $126 = Math_imul($37, $5 + -1 | 0) | 0;
      if (($126 | 0) > 0) {
       $i13$0$i47 = 0;
       $v11$0$i45 = $121 + $37 | 0;
       $x12$0$i46 = $121;
       while (1) {
        ftCall_viii(HEAP32[$f2$i >> 2] | 0, $x12$0$i46 | 0, $v11$0$i45 | 0, $v11$0$i45 | 0);
        $i13$0$i47 = $i13$0$i47 + 1 | 0;
        if (($i13$0$i47 | 0) == ($126 | 0)) break; else {
         $v11$0$i45 = $v11$0$i45 + 1 | 0;
         $x12$0$i46 = $x12$0$i46 + 1 | 0;
        }
       }
      }
      $$0$i21 = (HEAP8[2472] | 0) != 0 ? 0 : $116;
      break;
     }
     $136 = _ga(1, $5, 1, 0) | 0;
     if (!$136) {
      $$0$i21 = 0;
      break;
     }
     $139 = HEAP32[$136 + 12 >> 2] | 0;
     $141 = $136 + ($139 + 4 + ($139 & 1) << 2) | 0;
     $142 = _ga(1, $5, 1, 0) | 0;
     if (!$142) {
      $$0$i21 = 0;
      break;
     }
     $145 = HEAP32[$142 + 12 >> 2] | 0;
     $147 = $142 + ($145 + 4 + ($145 & 1) << 2) | 0;
     if (($37 | 0) > 0) {
      $i15$0$i43 = 0;
      $x12$1$i42 = $121;
      do {
       $i17$0$i34 = 0;
       $u$0$i33 = $x12$1$i42;
       while (1) {
        HEAP8[$141 + $i17$0$i34 >> 0] = HEAP8[$u$0$i33 >> 0] | 0;
        $i17$0$i34 = $i17$0$i34 + 1 | 0;
        if (($i17$0$i34 | 0) == ($5 | 0)) break; else $u$0$i33 = $u$0$i33 + $37 | 0;
       }
       _bpv($5, $141, $147, $46);
       $i19$0$i38 = 0;
       $u$1$i37 = $x12$1$i42;
       $x12$1$i42 = $x12$1$i42 + 1 | 0;
       while (1) {
        HEAP8[$u$1$i37 >> 0] = HEAP8[$147 + $i19$0$i38 >> 0] | 0;
        $i19$0$i38 = $i19$0$i38 + 1 | 0;
        if (($i19$0$i38 | 0) == ($5 | 0)) break; else $u$1$i37 = $u$1$i37 + $37 | 0;
       }
       $i15$0$i43 = $i15$0$i43 + 1 | 0;
      } while (($i15$0$i43 | 0) != ($37 | 0));
     }
     $$0$i21 = (HEAP8[2472] | 0) != 0 ? 0 : $116;
     break;
    }
   } while (0);
   $$0 = $$0$i21;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $15 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $17 = HEAP32[$self + 12 >> 2] | 0;
 $20 = HEAP32[$self + ($17 + 6 + ($17 & 1) << 2) >> 2] | 0;
 $21 = _mr($self) | 0;
 $22 = HEAP32[$1 >> 2] | 0;
 if (($21 | 0) < ($22 | 0)) {
  $$0 = _rank1ex($w, $self, $21, 254) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!$22) $28 = 1; else $28 = HEAP32[$w + 16 >> 2] | 0;
 $30 = _table(_apv($28, 1, 1) | 0) | 0;
 $$0 = _gc(_df2($30, $w, _atop($20, _ds(-84) | 0) | 0) | 0, $15) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _free($mem) {
 $mem = $mem | 0;
 var $$lcssa = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$sum2 = 0, $1 = 0, $103 = 0, $104 = 0, $111 = 0, $112 = 0, $12 = 0, $120 = 0, $128 = 0, $133 = 0, $134 = 0, $137 = 0, $139 = 0, $14 = 0, $141 = 0, $15 = 0, $156 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $191 = 0, $192 = 0, $2 = 0, $201 = 0, $206 = 0, $210 = 0, $216 = 0, $22 = 0, $231 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $240 = 0, $241 = 0, $247 = 0, $252 = 0, $253 = 0, $256 = 0, $258 = 0, $26 = 0, $261 = 0, $266 = 0, $272 = 0, $276 = 0, $277 = 0, $284 = 0, $296 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $318 = 0, $39 = 0, $44 = 0, $46 = 0, $49 = 0, $5 = 0, $51 = 0, $54 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $72 = 0, $73 = 0, $8 = 0, $82 = 0, $87 = 0, $9 = 0, $91 = 0, $97 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0;
 if (!$mem) return;
 $1 = $mem + -8 | 0;
 $2 = HEAP32[2132] | 0;
 if ($1 >>> 0 < $2 >>> 0) _abort();
 $5 = HEAP32[$mem + -4 >> 2] | 0;
 $6 = $5 & 3;
 if (($6 | 0) == 1) _abort();
 $8 = $5 & -8;
 $9 = $mem + ($8 + -8) | 0;
 do if (!($5 & 1)) {
  $12 = HEAP32[$1 >> 2] | 0;
  if (!$6) return;
  $$sum2 = -8 - $12 | 0;
  $14 = $mem + $$sum2 | 0;
  $15 = $12 + $8 | 0;
  if ($14 >>> 0 < $2 >>> 0) _abort();
  if (($14 | 0) == (HEAP32[2133] | 0)) {
   $103 = $mem + ($8 + -4) | 0;
   $104 = HEAP32[$103 >> 2] | 0;
   if (($104 & 3 | 0) != 3) {
    $p$0 = $14;
    $psize$0 = $15;
    break;
   }
   HEAP32[2130] = $15;
   HEAP32[$103 >> 2] = $104 & -2;
   HEAP32[$mem + ($$sum2 + 4) >> 2] = $15 | 1;
   HEAP32[$9 >> 2] = $15;
   return;
  }
  $19 = $12 >>> 3;
  if ($12 >>> 0 < 256) {
   $22 = HEAP32[$mem + ($$sum2 + 8) >> 2] | 0;
   $24 = HEAP32[$mem + ($$sum2 + 12) >> 2] | 0;
   $26 = 8552 + ($19 << 1 << 2) | 0;
   if (($22 | 0) != ($26 | 0)) {
    if ($22 >>> 0 < $2 >>> 0) _abort();
    if ((HEAP32[$22 + 12 >> 2] | 0) != ($14 | 0)) _abort();
   }
   if (($24 | 0) == ($22 | 0)) {
    HEAP32[2128] = HEAP32[2128] & ~(1 << $19);
    $p$0 = $14;
    $psize$0 = $15;
    break;
   }
   if (($24 | 0) == ($26 | 0)) $$pre$phi61Z2D = $24 + 8 | 0; else {
    if ($24 >>> 0 < $2 >>> 0) _abort();
    $39 = $24 + 8 | 0;
    if ((HEAP32[$39 >> 2] | 0) == ($14 | 0)) $$pre$phi61Z2D = $39; else _abort();
   }
   HEAP32[$22 + 12 >> 2] = $24;
   HEAP32[$$pre$phi61Z2D >> 2] = $22;
   $p$0 = $14;
   $psize$0 = $15;
   break;
  }
  $44 = HEAP32[$mem + ($$sum2 + 24) >> 2] | 0;
  $46 = HEAP32[$mem + ($$sum2 + 12) >> 2] | 0;
  do if (($46 | 0) == ($14 | 0)) {
   $57 = $mem + ($$sum2 + 20) | 0;
   $58 = HEAP32[$57 >> 2] | 0;
   if (!$58) {
    $60 = $mem + ($$sum2 + 16) | 0;
    $61 = HEAP32[$60 >> 2] | 0;
    if (!$61) {
     $R$1 = 0;
     break;
    } else {
     $R$0 = $61;
     $RP$0 = $60;
    }
   } else {
    $R$0 = $58;
    $RP$0 = $57;
   }
   while (1) {
    $63 = $R$0 + 20 | 0;
    $64 = HEAP32[$63 >> 2] | 0;
    if ($64) {
     $R$0 = $64;
     $RP$0 = $63;
     continue;
    }
    $66 = $R$0 + 16 | 0;
    $67 = HEAP32[$66 >> 2] | 0;
    if (!$67) {
     $R$0$lcssa = $R$0;
     $RP$0$lcssa = $RP$0;
     break;
    } else {
     $R$0 = $67;
     $RP$0 = $66;
    }
   }
   if ($RP$0$lcssa >>> 0 < $2 >>> 0) _abort(); else {
    HEAP32[$RP$0$lcssa >> 2] = 0;
    $R$1 = $R$0$lcssa;
    break;
   }
  } else {
   $49 = HEAP32[$mem + ($$sum2 + 8) >> 2] | 0;
   if ($49 >>> 0 < $2 >>> 0) _abort();
   $51 = $49 + 12 | 0;
   if ((HEAP32[$51 >> 2] | 0) != ($14 | 0)) _abort();
   $54 = $46 + 8 | 0;
   if ((HEAP32[$54 >> 2] | 0) == ($14 | 0)) {
    HEAP32[$51 >> 2] = $46;
    HEAP32[$54 >> 2] = $49;
    $R$1 = $46;
    break;
   } else _abort();
  } while (0);
  if (!$44) {
   $p$0 = $14;
   $psize$0 = $15;
  } else {
   $72 = HEAP32[$mem + ($$sum2 + 28) >> 2] | 0;
   $73 = 8816 + ($72 << 2) | 0;
   if (($14 | 0) == (HEAP32[$73 >> 2] | 0)) {
    HEAP32[$73 >> 2] = $R$1;
    if (!$R$1) {
     HEAP32[2129] = HEAP32[2129] & ~(1 << $72);
     $p$0 = $14;
     $psize$0 = $15;
     break;
    }
   } else {
    if ($44 >>> 0 < (HEAP32[2132] | 0) >>> 0) _abort();
    $82 = $44 + 16 | 0;
    if ((HEAP32[$82 >> 2] | 0) == ($14 | 0)) HEAP32[$82 >> 2] = $R$1; else HEAP32[$44 + 20 >> 2] = $R$1;
    if (!$R$1) {
     $p$0 = $14;
     $psize$0 = $15;
     break;
    }
   }
   $87 = HEAP32[2132] | 0;
   if ($R$1 >>> 0 < $87 >>> 0) _abort();
   HEAP32[$R$1 + 24 >> 2] = $44;
   $91 = HEAP32[$mem + ($$sum2 + 16) >> 2] | 0;
   do if ($91) if ($91 >>> 0 < $87 >>> 0) _abort(); else {
    HEAP32[$R$1 + 16 >> 2] = $91;
    HEAP32[$91 + 24 >> 2] = $R$1;
    break;
   } while (0);
   $97 = HEAP32[$mem + ($$sum2 + 20) >> 2] | 0;
   if (!$97) {
    $p$0 = $14;
    $psize$0 = $15;
   } else if ($97 >>> 0 < (HEAP32[2132] | 0) >>> 0) _abort(); else {
    HEAP32[$R$1 + 20 >> 2] = $97;
    HEAP32[$97 + 24 >> 2] = $R$1;
    $p$0 = $14;
    $psize$0 = $15;
    break;
   }
  }
 } else {
  $p$0 = $1;
  $psize$0 = $8;
 } while (0);
 if ($p$0 >>> 0 >= $9 >>> 0) _abort();
 $111 = $mem + ($8 + -4) | 0;
 $112 = HEAP32[$111 >> 2] | 0;
 if (!($112 & 1)) _abort();
 if (!($112 & 2)) {
  if (($9 | 0) == (HEAP32[2134] | 0)) {
   $120 = (HEAP32[2131] | 0) + $psize$0 | 0;
   HEAP32[2131] = $120;
   HEAP32[2134] = $p$0;
   HEAP32[$p$0 + 4 >> 2] = $120 | 1;
   if (($p$0 | 0) != (HEAP32[2133] | 0)) return;
   HEAP32[2133] = 0;
   HEAP32[2130] = 0;
   return;
  }
  if (($9 | 0) == (HEAP32[2133] | 0)) {
   $128 = (HEAP32[2130] | 0) + $psize$0 | 0;
   HEAP32[2130] = $128;
   HEAP32[2133] = $p$0;
   HEAP32[$p$0 + 4 >> 2] = $128 | 1;
   HEAP32[$p$0 + $128 >> 2] = $128;
   return;
  }
  $133 = ($112 & -8) + $psize$0 | 0;
  $134 = $112 >>> 3;
  do if ($112 >>> 0 < 256) {
   $137 = HEAP32[$mem + $8 >> 2] | 0;
   $139 = HEAP32[$mem + ($8 | 4) >> 2] | 0;
   $141 = 8552 + ($134 << 1 << 2) | 0;
   if (($137 | 0) != ($141 | 0)) {
    if ($137 >>> 0 < (HEAP32[2132] | 0) >>> 0) _abort();
    if ((HEAP32[$137 + 12 >> 2] | 0) != ($9 | 0)) _abort();
   }
   if (($139 | 0) == ($137 | 0)) {
    HEAP32[2128] = HEAP32[2128] & ~(1 << $134);
    break;
   }
   if (($139 | 0) == ($141 | 0)) $$pre$phi59Z2D = $139 + 8 | 0; else {
    if ($139 >>> 0 < (HEAP32[2132] | 0) >>> 0) _abort();
    $156 = $139 + 8 | 0;
    if ((HEAP32[$156 >> 2] | 0) == ($9 | 0)) $$pre$phi59Z2D = $156; else _abort();
   }
   HEAP32[$137 + 12 >> 2] = $139;
   HEAP32[$$pre$phi59Z2D >> 2] = $137;
  } else {
   $161 = HEAP32[$mem + ($8 + 16) >> 2] | 0;
   $163 = HEAP32[$mem + ($8 | 4) >> 2] | 0;
   do if (($163 | 0) == ($9 | 0)) {
    $175 = $mem + ($8 + 12) | 0;
    $176 = HEAP32[$175 >> 2] | 0;
    if (!$176) {
     $178 = $mem + ($8 + 8) | 0;
     $179 = HEAP32[$178 >> 2] | 0;
     if (!$179) {
      $R7$1 = 0;
      break;
     } else {
      $R7$0 = $179;
      $RP9$0 = $178;
     }
    } else {
     $R7$0 = $176;
     $RP9$0 = $175;
    }
    while (1) {
     $181 = $R7$0 + 20 | 0;
     $182 = HEAP32[$181 >> 2] | 0;
     if ($182) {
      $R7$0 = $182;
      $RP9$0 = $181;
      continue;
     }
     $184 = $R7$0 + 16 | 0;
     $185 = HEAP32[$184 >> 2] | 0;
     if (!$185) {
      $R7$0$lcssa = $R7$0;
      $RP9$0$lcssa = $RP9$0;
      break;
     } else {
      $R7$0 = $185;
      $RP9$0 = $184;
     }
    }
    if ($RP9$0$lcssa >>> 0 < (HEAP32[2132] | 0) >>> 0) _abort(); else {
     HEAP32[$RP9$0$lcssa >> 2] = 0;
     $R7$1 = $R7$0$lcssa;
     break;
    }
   } else {
    $166 = HEAP32[$mem + $8 >> 2] | 0;
    if ($166 >>> 0 < (HEAP32[2132] | 0) >>> 0) _abort();
    $169 = $166 + 12 | 0;
    if ((HEAP32[$169 >> 2] | 0) != ($9 | 0)) _abort();
    $172 = $163 + 8 | 0;
    if ((HEAP32[$172 >> 2] | 0) == ($9 | 0)) {
     HEAP32[$169 >> 2] = $163;
     HEAP32[$172 >> 2] = $166;
     $R7$1 = $163;
     break;
    } else _abort();
   } while (0);
   if ($161) {
    $191 = HEAP32[$mem + ($8 + 20) >> 2] | 0;
    $192 = 8816 + ($191 << 2) | 0;
    if (($9 | 0) == (HEAP32[$192 >> 2] | 0)) {
     HEAP32[$192 >> 2] = $R7$1;
     if (!$R7$1) {
      HEAP32[2129] = HEAP32[2129] & ~(1 << $191);
      break;
     }
    } else {
     if ($161 >>> 0 < (HEAP32[2132] | 0) >>> 0) _abort();
     $201 = $161 + 16 | 0;
     if ((HEAP32[$201 >> 2] | 0) == ($9 | 0)) HEAP32[$201 >> 2] = $R7$1; else HEAP32[$161 + 20 >> 2] = $R7$1;
     if (!$R7$1) break;
    }
    $206 = HEAP32[2132] | 0;
    if ($R7$1 >>> 0 < $206 >>> 0) _abort();
    HEAP32[$R7$1 + 24 >> 2] = $161;
    $210 = HEAP32[$mem + ($8 + 8) >> 2] | 0;
    do if ($210) if ($210 >>> 0 < $206 >>> 0) _abort(); else {
     HEAP32[$R7$1 + 16 >> 2] = $210;
     HEAP32[$210 + 24 >> 2] = $R7$1;
     break;
    } while (0);
    $216 = HEAP32[$mem + ($8 + 12) >> 2] | 0;
    if ($216) if ($216 >>> 0 < (HEAP32[2132] | 0) >>> 0) _abort(); else {
     HEAP32[$R7$1 + 20 >> 2] = $216;
     HEAP32[$216 + 24 >> 2] = $R7$1;
     break;
    }
   }
  } while (0);
  HEAP32[$p$0 + 4 >> 2] = $133 | 1;
  HEAP32[$p$0 + $133 >> 2] = $133;
  if (($p$0 | 0) == (HEAP32[2133] | 0)) {
   HEAP32[2130] = $133;
   return;
  } else $psize$1 = $133;
 } else {
  HEAP32[$111 >> 2] = $112 & -2;
  HEAP32[$p$0 + 4 >> 2] = $psize$0 | 1;
  HEAP32[$p$0 + $psize$0 >> 2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 if ($psize$1 >>> 0 < 256) {
  $233 = $231 << 1;
  $234 = 8552 + ($233 << 2) | 0;
  $235 = HEAP32[2128] | 0;
  $236 = 1 << $231;
  if (!($235 & $236)) {
   HEAP32[2128] = $235 | $236;
   $$pre$phiZ2D = 8552 + ($233 + 2 << 2) | 0;
   $F16$0 = $234;
  } else {
   $240 = 8552 + ($233 + 2 << 2) | 0;
   $241 = HEAP32[$240 >> 2] | 0;
   if ($241 >>> 0 < (HEAP32[2132] | 0) >>> 0) _abort(); else {
    $$pre$phiZ2D = $240;
    $F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$0;
  HEAP32[$F16$0 + 12 >> 2] = $p$0;
  HEAP32[$p$0 + 8 >> 2] = $F16$0;
  HEAP32[$p$0 + 12 >> 2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 if (!$247) $I18$0 = 0; else if ($psize$1 >>> 0 > 16777215) $I18$0 = 31; else {
  $252 = ($247 + 1048320 | 0) >>> 16 & 8;
  $253 = $247 << $252;
  $256 = ($253 + 520192 | 0) >>> 16 & 4;
  $258 = $253 << $256;
  $261 = ($258 + 245760 | 0) >>> 16 & 2;
  $266 = 14 - ($256 | $252 | $261) + ($258 << $261 >>> 15) | 0;
  $I18$0 = $psize$1 >>> ($266 + 7 | 0) & 1 | $266 << 1;
 }
 $272 = 8816 + ($I18$0 << 2) | 0;
 HEAP32[$p$0 + 28 >> 2] = $I18$0;
 HEAP32[$p$0 + 20 >> 2] = 0;
 HEAP32[$p$0 + 16 >> 2] = 0;
 $276 = HEAP32[2129] | 0;
 $277 = 1 << $I18$0;
 L199 : do if (!($276 & $277)) {
  HEAP32[2129] = $276 | $277;
  HEAP32[$272 >> 2] = $p$0;
  HEAP32[$p$0 + 24 >> 2] = $272;
  HEAP32[$p$0 + 12 >> 2] = $p$0;
  HEAP32[$p$0 + 8 >> 2] = $p$0;
 } else {
  $284 = HEAP32[$272 >> 2] | 0;
  L202 : do if ((HEAP32[$284 + 4 >> 2] & -8 | 0) == ($psize$1 | 0)) $T$0$lcssa = $284; else {
   $K19$052 = $psize$1 << (($I18$0 | 0) == 31 ? 0 : 25 - ($I18$0 >>> 1) | 0);
   $T$051 = $284;
   while (1) {
    $301 = $T$051 + 16 + ($K19$052 >>> 31 << 2) | 0;
    $296 = HEAP32[$301 >> 2] | 0;
    if (!$296) {
     $$lcssa = $301;
     $T$051$lcssa = $T$051;
     break;
    }
    if ((HEAP32[$296 + 4 >> 2] & -8 | 0) == ($psize$1 | 0)) {
     $T$0$lcssa = $296;
     break L202;
    } else {
     $K19$052 = $K19$052 << 1;
     $T$051 = $296;
    }
   }
   if ($$lcssa >>> 0 < (HEAP32[2132] | 0) >>> 0) _abort(); else {
    HEAP32[$$lcssa >> 2] = $p$0;
    HEAP32[$p$0 + 24 >> 2] = $T$051$lcssa;
    HEAP32[$p$0 + 12 >> 2] = $p$0;
    HEAP32[$p$0 + 8 >> 2] = $p$0;
    break L199;
   }
  } while (0);
  $308 = $T$0$lcssa + 8 | 0;
  $309 = HEAP32[$308 >> 2] | 0;
  $310 = HEAP32[2132] | 0;
  if ($309 >>> 0 >= $310 >>> 0 & $T$0$lcssa >>> 0 >= $310 >>> 0) {
   HEAP32[$309 + 12 >> 2] = $p$0;
   HEAP32[$308 >> 2] = $p$0;
   HEAP32[$p$0 + 8 >> 2] = $309;
   HEAP32[$p$0 + 12 >> 2] = $T$0$lcssa;
   HEAP32[$p$0 + 24 >> 2] = 0;
   break;
  } else _abort();
 } while (0);
 $318 = (HEAP32[2136] | 0) + -1 | 0;
 HEAP32[2136] = $318;
 if (!$318) $sp$0$in$i = 8968; else return;
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0;
  if (!$sp$0$i) break; else $sp$0$in$i = $sp$0$i + 8 | 0;
 }
 HEAP32[2136] = -1;
 return;
}
function _thbox($w) {
 $w = $w | 0;
 var $$$i = 0, $$0 = 0, $$25$i = 0, $$sum10$i = 0, $$sum3$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $10 = 0, $101 = 0, $104 = 0, $109 = 0, $11 = 0, $111 = 0, $113 = 0, $114 = 0, $118 = 0, $12 = 0, $121 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $135 = 0, $138 = 0, $14 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $152 = 0, $154 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $163 = 0, $166 = 0, $169 = 0, $170 = 0, $174 = 0, $175 = 0, $179 = 0, $182 = 0, $184 = 0, $185 = 0, $188 = 0, $193 = 0, $2 = 0, $207 = 0, $209 = 0, $23 = 0, $24 = 0, $27 = 0, $29 = 0, $30 = 0, $33 = 0, $38 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $50 = 0, $55 = 0, $59 = 0, $63 = 0, $65 = 0, $66 = 0, $69 = 0, $7 = 0, $71 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $80 = 0, $81 = 0, $84 = 0, $87 = 0, $89 = 0, $9 = 0, $91 = 0, $93 = 0, $96 = 0, $98 = 0, $99 = 0, $ht$0$lcssa$i = 0, $ht$093$i = 0, $i$014$i$i = 0, $i$03$i$i = 0, $i$04$i$i = 0, $i$04$i31$i = 0, $i$04$i39$i = 0, $i$04$i52$i = 0, $i$092$i = 0, $i1$012$i$i = 0, $i1$087$i = 0, $i11$072$i = 0, $i13$070$i = 0, $i3$011$i$i = 0, $i3$083$i = 0, $i5$080$i = 0, $i7$077$i = 0, $i9$075$i = 0, $j$074$i = 0, $j$171$i = 0, $p$04$i$i = 0, $q$02$i$i = 0, $t$084$i = 0, $t$181$i = 0, $t$278$i = 0, $v$015$i$i = 0, $v$069$i = 0, $v$pn$lcssa$i$i = 0, $v$pn$lcssa$i35$i = 0, $v$pn$lcssa$i43$i = 0, $v$pn$lcssa$i56$i = 0, $v$pn5$i$i = 0, $v$pn5$i30$i = 0, $v$pn5$i38$i = 0, $v$pn5$i51$i = 0, $wd$0$lcssa$i = 0, $wd$088$i = 0, label = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 do if (!(HEAP32[$w >> 2] & 32)) $207 = _matth1($w) | 0; else {
  $7 = _every($w, 350) | 0;
  if (!$7) $207 = 0; else {
   $9 = $7 + 8 | 0;
   $10 = HEAP32[$9 >> 2] | 0;
   $11 = $7 + 12 | 0;
   $12 = HEAP32[$11 >> 2] | 0;
   $14 = $7 + ($12 + 4 + ($12 & 1) << 2) | 0;
   if (($12 | 0) > 1) {
    $209 = HEAP32[$7 + 16 + ($12 + -2 << 2) >> 2] | 0;
    label = 7;
   } else if (!$12) {
    $23 = 1;
    $29 = 1;
   } else {
    $209 = 1;
    label = 7;
   }
   if ((label | 0) == 7) {
    $23 = $209;
    $29 = HEAP32[$7 + 16 + ($12 + -1 << 2) >> 2] | 0;
   }
   $24 = _apv($23, 0, 0) | 0;
   if (!$24) $207 = 0; else {
    $27 = HEAP32[$24 + 12 >> 2] | 0;
    $$sum3$i$i = $27 + 4 + ($27 & 1) | 0;
    $30 = _apv($29, 0, 0) | 0;
    if (!$30) $207 = 0; else {
     $33 = HEAP32[$30 + 12 >> 2] | 0;
     $$sum5$i$i = $33 + 4 + ($33 & 1) | 0;
     if (($10 | 0) > 0) {
      $i$014$i$i = 0;
      $v$015$i$i = $14;
      while (1) {
       $38 = HEAP32[$v$015$i$i >> 2] | 0;
       $43 = $24 + (((($i$014$i$i | 0) / ($29 | 0) | 0 | 0) % ($23 | 0) | 0) + $$sum3$i$i << 2) | 0;
       $44 = HEAP32[$43 >> 2] | 0;
       $45 = HEAP32[$38 + 16 >> 2] | 0;
       HEAP32[$43 >> 2] = ($44 | 0) > ($45 | 0) ? $44 : $45;
       $47 = $30 + ((($i$014$i$i | 0) % ($29 | 0) | 0) + $$sum5$i$i << 2) | 0;
       $48 = HEAP32[$47 >> 2] | 0;
       $50 = HEAP32[$38 + 20 >> 2] | 0;
       HEAP32[$47 >> 2] = ($48 | 0) > ($50 | 0) ? $48 : $50;
       $i$014$i$i = $i$014$i$i + 1 | 0;
       if (($i$014$i$i | 0) == ($10 | 0)) break; else $v$015$i$i = $v$015$i$i + 4 | 0;
      }
     }
     if (($23 | 0) > 0) {
      $i1$012$i$i = 0;
      do {
       $55 = $24 + ($i1$012$i$i + $$sum3$i$i << 2) | 0;
       HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) + 1;
       $i1$012$i$i = $i1$012$i$i + 1 | 0;
      } while (($i1$012$i$i | 0) != ($23 | 0));
     }
     if (($29 | 0) > 0) {
      $i3$011$i$i = 0;
      do {
       $59 = $30 + ($i3$011$i$i + $$sum5$i$i << 2) | 0;
       HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + 1;
       $i3$011$i$i = $i3$011$i$i + 1 | 0;
      } while (($i3$011$i$i | 0) != ($29 | 0));
     }
     $63 = _link($24, $30) | 0;
     if (!$63) $207 = 0; else {
      $65 = HEAP32[$9 >> 2] | 0;
      $66 = HEAP32[$11 >> 2] | 0;
      $$$i = ($66 | 0) < 2 ? 2 : $66;
      $69 = $7 + ($66 + 4 + ($66 & 1) << 2) | 0;
      $71 = HEAP32[$63 + 12 >> 2] | 0;
      $72 = $71 & 1;
      $74 = HEAP32[$63 + ($71 + 4 + $72 << 2) >> 2] | 0;
      $76 = HEAP32[$74 + 8 >> 2] | 0;
      $78 = HEAP32[$74 + 12 >> 2] | 0;
      $$sum5$i = $78 + 4 + ($78 & 1) | 0;
      $80 = $74 + ($$sum5$i << 2) | 0;
      $81 = ($76 | 0) > 0;
      if ($81) {
       $ht$093$i = 1;
       $i$092$i = 0;
       while (1) {
        $84 = (HEAP32[$74 + ($i$092$i + $$sum5$i << 2) >> 2] | 0) + $ht$093$i | 0;
        $i$092$i = $i$092$i + 1 | 0;
        if (($i$092$i | 0) == ($76 | 0)) {
         $ht$0$lcssa$i = $84;
         break;
        } else $ht$093$i = $84;
       }
      } else $ht$0$lcssa$i = 1;
      $87 = HEAP32[$63 + ($71 + 5 + $72 << 2) >> 2] | 0;
      $89 = HEAP32[$87 + 8 >> 2] | 0;
      $91 = HEAP32[$87 + 12 >> 2] | 0;
      $$sum10$i = $91 + 4 + ($91 & 1) | 0;
      $93 = ($89 | 0) > 0;
      if ($93) {
       $i1$087$i = 0;
       $wd$088$i = 1;
       while (1) {
        $96 = (HEAP32[$87 + ($i1$087$i + $$sum10$i << 2) >> 2] | 0) + $wd$088$i | 0;
        $i1$087$i = $i1$087$i + 1 | 0;
        if (($i1$087$i | 0) == ($89 | 0)) {
         $wd$0$lcssa$i = $96;
         break;
        } else $wd$088$i = $96;
       }
      } else $wd$0$lcssa$i = 1;
      $98 = Math_imul($wd$0$lcssa$i, $ht$0$lcssa$i) | 0;
      $99 = Math_imul($89, $76) | 0;
      $$25$i = ($99 | 0) < 1 ? 1 : $99;
      $101 = ($65 | 0) / ($$25$i | 0) | 0;
      $104 = _ga(2, Math_imul($101, $98) | 0, $$$i, $7 + 16 | 0) | 0;
      if (!$104) $207 = 0; else {
       HEAP32[$104 + 16 + ($$$i + -2 << 2) >> 2] = $ht$0$lcssa$i;
       HEAP32[$104 + 16 + ($$$i + -1 << 2) >> 2] = $wd$0$lcssa$i;
       $109 = HEAP32[$104 + 12 >> 2] | 0;
       $111 = $104 + ($109 + 4 + ($109 & 1) << 2) | 0;
       if (!$65) $207 = $104; else {
        $113 = HEAP8[2457] | 0;
        HEAP8[$111 >> 0] = $113;
        if ($93) {
         $i$04$i$i = 0;
         $v$pn5$i$i = $111;
         while (1) {
          $114 = $87 + ($i$04$i$i + $$sum10$i << 2) | 0;
          _memset($v$pn5$i$i + 1 | 0, 32, (HEAP32[$114 >> 2] | 0) + -1 | 0) | 0;
          $118 = $v$pn5$i$i + (HEAP32[$114 >> 2] | 0) | 0;
          HEAP8[$118 >> 0] = $113;
          $i$04$i$i = $i$04$i$i + 1 | 0;
          if (($i$04$i$i | 0) == ($89 | 0)) {
           $v$pn$lcssa$i$i = $118;
           break;
          } else $v$pn5$i$i = $118;
         }
        } else $v$pn$lcssa$i$i = $111;
        HEAP8[$v$pn$lcssa$i$i >> 0] = $113;
        if (($ht$0$lcssa$i | 0) > 2) {
         $121 = $ht$0$lcssa$i + -2 | 0;
         $i3$083$i = 0;
         $t$084$i = $111;
         do {
          $t$084$i = $t$084$i + $wd$0$lcssa$i | 0;
          _memcpy($t$084$i | 0, $111 | 0, $wd$0$lcssa$i | 0) | 0;
          $i3$083$i = $i3$083$i + 1 | 0;
         } while (($i3$083$i | 0) != ($121 | 0));
        }
        $126 = $111 + (Math_imul(HEAP32[$80 >> 2] | 0, $wd$0$lcssa$i) | 0) | 0;
        $128 = HEAP8[2458] | 0;
        $129 = HEAP8[2452] | 0;
        $130 = HEAP8[2453] | 0;
        HEAP8[$126 >> 0] = HEAP8[2451] | 0;
        if ($93) {
         $i$04$i31$i = 0;
         $v$pn5$i30$i = $126;
         while (1) {
          $131 = $87 + ($i$04$i31$i + $$sum10$i << 2) | 0;
          _memset($v$pn5$i30$i + 1 | 0, $128 | 0, (HEAP32[$131 >> 2] | 0) + -1 | 0) | 0;
          $135 = $v$pn5$i30$i + (HEAP32[$131 >> 2] | 0) | 0;
          HEAP8[$135 >> 0] = $129;
          $i$04$i31$i = $i$04$i31$i + 1 | 0;
          if (($i$04$i31$i | 0) == ($89 | 0)) {
           $v$pn$lcssa$i35$i = $135;
           break;
          } else $v$pn5$i30$i = $135;
         }
        } else $v$pn$lcssa$i35$i = $126;
        HEAP8[$v$pn$lcssa$i35$i >> 0] = $130;
        if (($76 | 0) > 1) {
         $138 = $76 + -1 | 0;
         $i5$080$i = 0;
         $t$181$i = $126;
         do {
          $i5$080$i = $i5$080$i + 1 | 0;
          $t$181$i = $t$181$i + (Math_imul(HEAP32[$74 + ($i5$080$i + $$sum5$i << 2) >> 2] | 0, $wd$0$lcssa$i) | 0) | 0;
          _memcpy($t$181$i | 0, $126 | 0, $wd$0$lcssa$i | 0) | 0;
         } while (($i5$080$i | 0) != ($138 | 0));
        }
        $145 = HEAP8[2458] | 0;
        $146 = HEAP8[2449] | 0;
        $147 = HEAP8[2450] | 0;
        HEAP8[$111 >> 0] = HEAP8[2448] | 0;
        if ($93) {
         $i$04$i39$i = 0;
         $v$pn5$i38$i = $111;
         while (1) {
          $148 = $87 + ($i$04$i39$i + $$sum10$i << 2) | 0;
          _memset($v$pn5$i38$i + 1 | 0, $145 | 0, (HEAP32[$148 >> 2] | 0) + -1 | 0) | 0;
          $152 = $v$pn5$i38$i + (HEAP32[$148 >> 2] | 0) | 0;
          HEAP8[$152 >> 0] = $146;
          $i$04$i39$i = $i$04$i39$i + 1 | 0;
          if (($i$04$i39$i | 0) == ($89 | 0)) {
           $v$pn$lcssa$i43$i = $152;
           break;
          } else $v$pn5$i38$i = $152;
         }
        } else $v$pn$lcssa$i43$i = $111;
        HEAP8[$v$pn$lcssa$i43$i >> 0] = $147;
        $154 = $111 + ($98 - $wd$0$lcssa$i) | 0;
        $156 = HEAP8[2458] | 0;
        $157 = HEAP8[2455] | 0;
        $158 = HEAP8[2456] | 0;
        HEAP8[$154 >> 0] = HEAP8[2454] | 0;
        if ($93) {
         $i$04$i52$i = 0;
         $v$pn5$i51$i = $154;
         while (1) {
          $159 = $87 + ($i$04$i52$i + $$sum10$i << 2) | 0;
          _memset($v$pn5$i51$i + 1 | 0, $156 | 0, (HEAP32[$159 >> 2] | 0) + -1 | 0) | 0;
          $163 = $v$pn5$i51$i + (HEAP32[$159 >> 2] | 0) | 0;
          HEAP8[$163 >> 0] = $157;
          $i$04$i52$i = $i$04$i52$i + 1 | 0;
          if (($i$04$i52$i | 0) == ($89 | 0)) {
           $v$pn$lcssa$i56$i = $163;
           break;
          } else $v$pn5$i51$i = $163;
         }
        } else $v$pn$lcssa$i56$i = $154;
        HEAP8[$v$pn$lcssa$i56$i >> 0] = $158;
        if (($101 | 0) > 1) {
         $166 = $101 + -1 | 0;
         $i7$077$i = 0;
         $t$278$i = $111;
         do {
          $t$278$i = $t$278$i + $98 | 0;
          _memcpy($t$278$i | 0, $111 | 0, $98 | 0) | 0;
          $i7$077$i = $i7$077$i + 1 | 0;
         } while (($i7$077$i | 0) != ($166 | 0));
        }
        if ($81) {
         $i9$075$i = 0;
         $j$074$i = 1;
         while (1) {
          $169 = $74 + ($i9$075$i + $$sum5$i << 2) | 0;
          $170 = HEAP32[$169 >> 2] | 0;
          HEAP32[$169 >> 2] = $j$074$i;
          $i9$075$i = $i9$075$i + 1 | 0;
          if (($i9$075$i | 0) == ($76 | 0)) break; else $j$074$i = $170 + $j$074$i | 0;
         }
        }
        if ($93) {
         $i11$072$i = 0;
         $j$171$i = 1;
         while (1) {
          $174 = $87 + ($i11$072$i + $$sum10$i << 2) | 0;
          $175 = HEAP32[$174 >> 2] | 0;
          HEAP32[$174 >> 2] = $j$171$i;
          $i11$072$i = $i11$072$i + 1 | 0;
          if (($i11$072$i | 0) == ($89 | 0)) break; else $j$171$i = $175 + $j$171$i | 0;
         }
        }
        if (($65 | 0) > 0) {
         $i13$070$i = 0;
         $v$069$i = $69;
        } else {
         $207 = $104;
         break;
        }
        do {
         $179 = HEAP32[$v$069$i >> 2] | 0;
         $v$069$i = $v$069$i + 4 | 0;
         $182 = HEAP32[$179 + 20 >> 2] | 0;
         $184 = HEAP32[$179 + 12 >> 2] | 0;
         $185 = HEAP32[$179 + 16 >> 2] | 0;
         if (($185 | 0) > 0) {
          $188 = Math_imul(($i13$070$i | 0) / ($$25$i | 0) | 0, $98) | 0;
          $193 = Math_imul(HEAP32[$74 + (((($i13$070$i | 0) / ($89 | 0) | 0 | 0) % ($76 | 0) | 0) + $$sum5$i << 2) >> 2] | 0, $wd$0$lcssa$i) | 0;
          $i$03$i$i = 0;
          $p$04$i$i = $111 + ($188 - $wd$0$lcssa$i + $193 + (HEAP32[$87 + ((($i13$070$i | 0) % ($89 | 0) | 0) + $$sum10$i << 2) >> 2] | 0)) | 0;
          $q$02$i$i = $179 + ($184 + 4 + ($184 & 1) << 2) + (0 - $182) | 0;
          do {
           $p$04$i$i = $p$04$i$i + $wd$0$lcssa$i | 0;
           $q$02$i$i = $q$02$i$i + $182 | 0;
           _memcpy($p$04$i$i | 0, $q$02$i$i | 0, $182 | 0) | 0;
           $i$03$i$i = $i$03$i$i + 1 | 0;
          } while (($i$03$i$i | 0) != ($185 | 0));
         }
         $i13$070$i = $i13$070$i + 1 | 0;
        } while (($i13$070$i | 0) != ($65 | 0));
        $207 = $104;
       }
      }
     }
    }
   }
  }
 } while (0);
 $$0 = _gc($207, $2) | 0;
 return $$0 | 0;
}

function _take($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$ = 0, $$0 = 0, $$04 = 0, $$1 = 0, $$232 = 0, $$23334 = 0, $$sum5 = 0, $101 = 0, $105 = 0, $109 = 0, $111 = 0, $112 = 0, $116 = 0, $117 = 0, $118 = 0, $120 = 0, $122 = 0, $13 = 0, $133 = 0, $137 = 0, $141 = 0, $145 = 0, $149 = 0, $151 = 0, $153 = 0, $155 = 0, $159 = 0, $16 = 0, $17 = 0, $170 = 0, $174 = 0, $179 = 0, $182 = 0, $185 = 0, $189 = 0, $193 = 0, $195 = 0, $196 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $203 = 0, $205 = 0, $211 = 0, $215 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $35 = 0, $44 = 0, $52 = 0, $54 = 0, $60 = 0, $65 = 0, $66 = 0, $70 = 0, $73 = 0, $74 = 0, $78 = 0, $80 = 0, $81 = 0, $82 = 0, $86 = 0, $87 = 0, $9 = 0, $90 = 0, $95 = 0, $98 = 0, $b$124 = 0, $b$12427 = 0, $b$1242837 = 0, $b$2$lcssa = 0, $b$256 = 0, $b$256$us = 0, $b$3 = 0, $b$3$us = 0, $c$055 = 0, $c$055$us = 0, $i$070 = 0, $i1$066 = 0, $i3$064 = 0, $i5$049 = 0, $i7$058 = 0, $i7$058$us = 0, $i8$052 = 0, $i8$052$us = 0, $m$0 = 0, $q$059 = 0, $q$059$us = 0, $t$029 = 0, $t$03035 = 0, $t$03036 = 0, $uglygep = 0, $v$0$lcssa = 0, $v$048 = 0, $x$031 = 0, $xv$038 = 0, $xv$039 = 0, $yv$051 = 0, $yv$051$us = 0, $z$0$lcssa = 0, $z$057 = 0, $z$057$us = 0, $z$1 = 0, $z$1$us = 0, $z$2 = 0, $zv$050 = 0, $zv$050$us = 0, label = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $3 = HEAP32[100] | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$a + 12 >> 2] | 0) <= 1) {
  $9 = $w + 12 | 0;
  if ((HEAP32[$9 >> 2] | 0) <= 127) {
   $13 = _vi($a) | 0;
   if (!$13) {
    $$0 = 0;
    return $$0 | 0;
   }
   $16 = HEAP32[$13 + 8 >> 2] | 0;
   $17 = ($3 | 0) != 0;
   if ($17) $52 = HEAP32[$3 + 8 >> 2] | 0; else $52 = 0;
   $20 = HEAP32[$9 >> 2] | 0;
   do if (!$20) {
    $23 = _reshape(_apv($16, 1, 0) | 0, $w) | 0;
    if (!$23) {
     $$0 = 0;
     return $$0 | 0;
    } else {
     $$04 = $23;
     $33 = HEAP32[$23 + 12 >> 2] | 0;
     break;
    }
   } else {
    $$04 = $w;
    $33 = $20;
   } while (0);
   if (!(HEAP32[$$04 + 8 >> 2] | 0)) $66 = 1; else $66 = HEAP32[$$04 >> 2] | 0;
   $30 = HEAP32[$13 + 12 >> 2] | 0;
   $$sum5 = $30 + 4 + ($30 & 1) | 0;
   $32 = $13 + ($$sum5 << 2) | 0;
   if (($33 | 0) < ($16 | 0)) {
    _jsignal(9);
    $$0 = 0;
    return $$0 | 0;
   }
   if ($17) if (HEAP32[$3 + 12 >> 2] | 0) {
    _jsignal(14);
    $$0 = 0;
    return $$0 | 0;
   }
   $35 = ($16 | 0) > 0;
   L31 : do if ($35) {
    $i$070 = 0;
    while (1) {
     if (!(HEAP32[$13 + ($i$070 + $$sum5 << 2) >> 2] | 0)) {
      label = 24;
      break L31;
     }
     $i$070 = $i$070 + 1 | 0;
     if (($i$070 | 0) >= ($16 | 0)) {
      label = 21;
      break;
     }
    }
   } else label = 21; while (0);
   L35 : do if ((label | 0) == 21) {
    $44 = $33 - $16 | 0;
    if (($44 | 0) > 0) {
     $i1$066 = 0;
     do {
      if (!(HEAP32[$$04 + 16 + ($i1$066 + $16 << 2) >> 2] | 0)) {
       label = 24;
       break L35;
      }
      $i1$066 = $i1$066 + 1 | 0;
     } while (($i1$066 | 0) < ($44 | 0));
    }
    $54 = ($52 | 0) == 0;
    if ($54 | $35 ^ 1) {
     $227 = $54 ^ 1;
     $228 = 1;
     $b$124 = 0;
     label = 33;
    } else {
     $i3$064 = 0;
     while (1) {
      $60 = HEAP32[$13 + ($i3$064 + $$sum5 << 2) >> 2] | 0;
      if ((HEAP32[$$04 + 16 + ($i3$064 << 2) >> 2] | 0) < ((($60 | 0) > -1 ? $60 : 0 - $60 | 0) | 0)) break;
      $i3$064 = $i3$064 + 1 | 0;
      if (($i3$064 | 0) >= ($16 | 0)) {
       $227 = 1;
       $228 = 1;
       $b$124 = 0;
       label = 33;
       break L35;
      }
     }
     $65 = HEAP32[$3 >> 2] | 0;
     $$ = ($66 | 0) > ($65 | 0) ? $66 : $65;
     do if (($$ | 0) == (HEAP32[$$04 >> 2] | 0)) {
      $$1 = $$04;
      $73 = $65;
     } else {
      $70 = _cvt($$, $$04) | 0;
      if (!$70) {
       $$0 = 0;
       return $$0 | 0;
      } else {
       $$1 = $70;
       $73 = HEAP32[$3 >> 2] | 0;
       break;
      }
     } while (0);
     if (($$ | 0) == ($73 | 0)) {
      $$232 = $$1;
      $229 = 1;
      $230 = 1;
      $b$12427 = 0;
      $t$029 = $$;
      $x$031 = $3;
      label = 34;
     } else {
      $74 = _cvt($$, $3) | 0;
      if (!$74) {
       $$0 = 0;
       return $$0 | 0;
      } else {
       $$232 = $$1;
       $229 = 1;
       $230 = 1;
       $b$12427 = 0;
       $t$029 = $$;
       $x$031 = $74;
       label = 34;
      }
     }
    }
   } while (0);
   if ((label | 0) == 24) {
    $227 = ($52 | 0) != 0;
    $228 = 0;
    $b$124 = 1;
    label = 33;
   }
   if ((label | 0) == 33) if (!$3) {
    $82 = _bp($66) | 0;
    if ($228) {
     $$23334 = $$04;
     $231 = $227;
     $87 = $82;
     $b$1242837 = $b$124;
     $t$03036 = $66;
     $xv$039 = 0;
     label = 36;
    } else {
     $170 = $82;
     $232 = $227;
     $m$0 = 0;
     $t$03035 = $66;
     $xv$038 = 0;
     label = 48;
    }
   } else {
    $$232 = $$04;
    $229 = $228;
    $230 = $227;
    $b$12427 = $b$124;
    $t$029 = $66;
    $x$031 = $3;
    label = 34;
   }
   if ((label | 0) == 34) {
    $78 = HEAP32[$x$031 + 12 >> 2] | 0;
    $80 = $x$031 + ($78 + 4 + ($78 & 1) << 2) | 0;
    $81 = _bp($t$029) | 0;
    if ($229) {
     $$23334 = $$232;
     $231 = $230;
     $87 = $81;
     $b$1242837 = $b$12427;
     $t$03036 = $t$029;
     $xv$039 = $80;
     label = 36;
    } else {
     $170 = $81;
     $232 = $230;
     $m$0 = 0;
     $t$03035 = $t$029;
     $xv$038 = $80;
     label = 48;
    }
   }
   do if ((label | 0) == 36) {
    if (!(HEAP32[$$23334 + 8 >> 2] | 0)) {
     $141 = _prod($16, $32) | 0;
     $145 = Math_imul(_prod($33 - $16 | 0, $$04 + 16 + ($16 << 2) | 0) | 0, $141) | 0;
     $170 = $87;
     $232 = $231;
     $m$0 = ($145 | 0) > -1 ? $145 : 0 - $145 | 0;
     $t$03035 = $t$03036;
     $xv$038 = $xv$039;
     label = 48;
     break;
    }
    L66 : do if ($35) {
     $86 = Math_imul($87, $52) | 0;
     if ($231) {
      $b$256$us = $b$1242837;
      $c$055$us = 1;
      $i7$058$us = 0;
      $q$059$us = 1;
      $z$057$us = $$23334;
      L82 : while (1) {
       $c$055$us = Math_imul($q$059$us, $c$055$us) | 0;
       $90 = HEAP32[$13 + ($i7$058$us + $$sum5 << 2) >> 2] | 0;
       $q$059$us = ($90 | 0) > -1 ? $90 : 0 - $90 | 0;
       $95 = HEAP32[$$04 + 16 + ($i7$058$us << 2) >> 2] | 0;
       do if (($q$059$us | 0) == ($95 | 0)) {
        $b$3$us = $b$256$us;
        $z$1$us = $z$057$us;
       } else {
        $98 = HEAP32[$z$057$us + 8 >> 2] | 0;
        $101 = Math_imul(($98 | 0) / (Math_imul($95, $c$055$us) | 0) | 0, $87) | 0;
        $105 = _ga($t$03036, Math_imul(($98 | 0) / ($95 | 0) | 0, $q$059$us) | 0, $33, $z$057$us + 16 | 0) | 0;
        if (!$105) {
         $$0 = 0;
         break L82;
        }
        HEAP32[$105 + 16 + ($i7$058$us << 2) >> 2] = $q$059$us;
        $109 = HEAP32[$105 + 12 >> 2] | 0;
        $111 = $105 + ($109 + 4 + ($109 & 1) << 2) | 0;
        $112 = ($q$059$us | 0) > ($95 | 0);
        if ($112) _mvc(Math_imul(HEAP32[$105 + 8 >> 2] | 0, $87) | 0, $111, $86, $xv$039);
        $116 = Math_imul($101, $q$059$us) | 0;
        $117 = ($90 | 0) < 0;
        $118 = Math_imul($101, $95) | 0;
        $120 = HEAP32[$z$057$us + 12 >> 2] | 0;
        $122 = Math_imul($101, $112 ? $95 : $q$059$us) | 0;
        if (($c$055$us | 0) <= 0) {
         $b$3$us = 1;
         $z$1$us = $105;
         break;
        }
        $133 = Math_imul($101, $95 - $q$059$us | 0) | 0;
        $137 = Math_imul($101, $q$059$us - $95 | 0) | 0;
        $i8$052$us = 0;
        $yv$051$us = $111 + (($117 & $112 ? $137 : 0) - $116) | 0;
        $zv$050$us = $z$057$us + ($120 + 4 + ($120 & 1) << 2) + (($117 & ($95 | 0) > ($q$059$us | 0) ? $133 : 0) - $118) | 0;
        do {
         $yv$051$us = $yv$051$us + $116 | 0;
         $zv$050$us = $zv$050$us + $118 | 0;
         _memcpy($yv$051$us | 0, $zv$050$us | 0, $122 | 0) | 0;
         $i8$052$us = $i8$052$us + 1 | 0;
        } while (($i8$052$us | 0) != ($c$055$us | 0));
        $b$3$us = 1;
        $z$1$us = $105;
       } while (0);
       $i7$058$us = $i7$058$us + 1 | 0;
       if (($i7$058$us | 0) >= ($16 | 0)) {
        $b$2$lcssa = $b$3$us;
        $z$0$lcssa = $z$1$us;
        break L66;
       } else {
        $b$256$us = $b$3$us;
        $z$057$us = $z$1$us;
       }
      }
      return $$0 | 0;
     } else {
      $b$256 = $b$1242837;
      $c$055 = 1;
      $i7$058 = 0;
      $q$059 = 1;
      $z$057 = $$23334;
      L69 : while (1) {
       $c$055 = Math_imul($q$059, $c$055) | 0;
       $174 = HEAP32[$13 + ($i7$058 + $$sum5 << 2) >> 2] | 0;
       $q$059 = ($174 | 0) > -1 ? $174 : 0 - $174 | 0;
       $179 = HEAP32[$$04 + 16 + ($i7$058 << 2) >> 2] | 0;
       do if (($q$059 | 0) == ($179 | 0)) {
        $b$3 = $b$256;
        $z$1 = $z$057;
       } else {
        $182 = HEAP32[$z$057 + 8 >> 2] | 0;
        $185 = Math_imul(($182 | 0) / (Math_imul($179, $c$055) | 0) | 0, $87) | 0;
        $189 = _ga($t$03036, Math_imul(($182 | 0) / ($179 | 0) | 0, $q$059) | 0, $33, $z$057 + 16 | 0) | 0;
        if (!$189) {
         $$0 = 0;
         break L69;
        }
        HEAP32[$189 + 16 + ($i7$058 << 2) >> 2] = $q$059;
        $193 = HEAP32[$189 + 12 >> 2] | 0;
        $195 = $189 + ($193 + 4 + ($193 & 1) << 2) | 0;
        $196 = ($q$059 | 0) > ($179 | 0);
        if ($196) _fillv($t$03036, HEAP32[$189 + 8 >> 2] | 0, $195);
        $199 = Math_imul($185, $q$059) | 0;
        $200 = ($174 | 0) < 0;
        $201 = Math_imul($185, $179) | 0;
        $203 = HEAP32[$z$057 + 12 >> 2] | 0;
        $205 = Math_imul($185, $196 ? $179 : $q$059) | 0;
        if (($c$055 | 0) <= 0) {
         $b$3 = 1;
         $z$1 = $189;
         break;
        }
        $211 = Math_imul($185, $179 - $q$059 | 0) | 0;
        $215 = Math_imul($185, $q$059 - $179 | 0) | 0;
        $i8$052 = 0;
        $yv$051 = $195 + (($200 & $196 ? $215 : 0) - $199) | 0;
        $zv$050 = $z$057 + ($203 + 4 + ($203 & 1) << 2) + (($200 & ($179 | 0) > ($q$059 | 0) ? $211 : 0) - $201) | 0;
        do {
         $yv$051 = $yv$051 + $199 | 0;
         $zv$050 = $zv$050 + $201 | 0;
         _memcpy($yv$051 | 0, $zv$050 | 0, $205 | 0) | 0;
         $i8$052 = $i8$052 + 1 | 0;
        } while (($i8$052 | 0) != ($c$055 | 0));
        $b$3 = 1;
        $z$1 = $189;
       } while (0);
       $i7$058 = $i7$058 + 1 | 0;
       if (($i7$058 | 0) >= ($16 | 0)) {
        $b$2$lcssa = $b$3;
        $z$0$lcssa = $z$1;
        break L66;
       } else {
        $b$256 = $b$3;
        $z$057 = $z$1;
       }
      }
      return $$0 | 0;
     }
    } else {
     $b$2$lcssa = $b$1242837;
     $z$0$lcssa = $$23334;
    } while (0);
    if (!($b$2$lcssa << 24 >> 24)) $z$2 = _ca($$23334) | 0; else $z$2 = $z$0$lcssa;
   } while (0);
   do if ((label | 0) == 48) {
    $149 = _ga($t$03035, $m$0, $33, 0) | 0;
    if (!$149) {
     $$0 = 0;
     return $$0 | 0;
    }
    $151 = $149 + 16 | 0;
    $153 = HEAP32[$149 + 12 >> 2] | 0;
    $155 = $149 + ($153 + 4 + ($153 & 1) << 2) | 0;
    if ($35) {
     $uglygep = $149 + (($16 << 2) + 16) | 0;
     $i5$049 = 0;
     $v$048 = $151;
     while (1) {
      $159 = HEAP32[$13 + ($i5$049 + $$sum5 << 2) >> 2] | 0;
      HEAP32[$v$048 >> 2] = ($159 | 0) > -1 ? $159 : 0 - $159 | 0;
      $i5$049 = $i5$049 + 1 | 0;
      if (($i5$049 | 0) == ($16 | 0)) break; else $v$048 = $v$048 + 4 | 0;
     }
     $v$0$lcssa = $uglygep;
    } else $v$0$lcssa = $151;
    _memcpy($v$0$lcssa | 0, $$04 + 16 + ($16 << 2) | 0, $33 - $16 << 2 | 0) | 0;
    if (!$m$0) $z$2 = $149; else if ($232) {
     _mvc(Math_imul($m$0, $170) | 0, $155, Math_imul($170, $52) | 0, $xv$038);
     $z$2 = $149;
     break;
    } else {
     _fillv($t$03035, $m$0, $155);
     $z$2 = $149;
     break;
    }
   } while (0);
   $$0 = _gc($z$2, $2) | 0;
   return $$0 | 0;
  }
 }
 $$0 = _rank2ex($a, $w, 0, 1, 127, 138) | 0;
 return $$0 | 0;
}

function ___intscan($f, $base, $pok, $0, $1) {
 $f = $f | 0;
 $base = $base | 0;
 $pok = $pok | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $$122 = 0, $$123 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa130 = 0, $$lcssa131 = 0, $$lcssa132 = 0, $$lcssa133 = 0, $$lcssa134 = 0, $$lcssa135 = 0, $100 = 0, $101 = 0, $108 = 0, $120 = 0, $121 = 0, $128 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $135 = 0, $136 = 0, $144 = 0, $149 = 0, $150 = 0, $152 = 0, $154 = 0, $156 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $185 = 0, $186 = 0, $187 = 0, $195 = 0, $201 = 0, $203 = 0, $204 = 0, $205 = 0, $207 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $222 = 0, $223 = 0, $224 = 0, $239 = 0, $25 = 0, $255 = 0, $257 = 0, $268 = 0, $277 = 0, $280 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $3 = 0, $37 = 0, $39 = 0, $4 = 0, $46 = 0, $51 = 0, $6 = 0, $67 = 0, $70 = 0, $71 = 0, $72 = 0, $83 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $91 = 0, $93 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$124 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$371 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$753 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $x$082 = 0, $x$146 = 0, $x$266 = 0, label = 0;
 if ($base >>> 0 > 36) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  $282 = 0;
  $283 = 0;
  tempRet0 = $282;
  return $283 | 0;
 }
 $3 = $f + 4 | 0;
 $4 = $f + 100 | 0;
 do {
  $6 = HEAP32[$3 >> 2] | 0;
  if ($6 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
   HEAP32[$3 >> 2] = $6 + 1;
   $13 = HEAPU8[$6 >> 0] | 0;
  } else $13 = ___shgetc($f) | 0;
 } while ((_isspace($13) | 0) != 0);
 $$lcssa135 = $13;
 do if (($$lcssa135 | 0) == 43 | ($$lcssa135 | 0) == 45) {
  $17 = (($$lcssa135 | 0) == 45) << 31 >> 31;
  $18 = HEAP32[$3 >> 2] | 0;
  if ($18 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
   HEAP32[$3 >> 2] = $18 + 1;
   $c$0 = HEAPU8[$18 >> 0] | 0;
   $neg$0 = $17;
   break;
  } else {
   $c$0 = ___shgetc($f) | 0;
   $neg$0 = $17;
   break;
  }
 } else {
  $c$0 = $$lcssa135;
  $neg$0 = 0;
 } while (0);
 $25 = ($base | 0) == 0;
 do if (($base & -17 | 0) == 0 & ($c$0 | 0) == 48) {
  $29 = HEAP32[$3 >> 2] | 0;
  if ($29 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
   HEAP32[$3 >> 2] = $29 + 1;
   $37 = HEAPU8[$29 >> 0] | 0;
  } else $37 = ___shgetc($f) | 0;
  if (($37 | 32 | 0) != 120) if ($25) {
   $$123 = 8;
   $c$124 = $37;
   label = 46;
   break;
  } else {
   $$1 = $base;
   $c$1 = $37;
   label = 32;
   break;
  }
  $39 = HEAP32[$3 >> 2] | 0;
  if ($39 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
   HEAP32[$3 >> 2] = $39 + 1;
   $46 = HEAPU8[$39 >> 0] | 0;
  } else $46 = ___shgetc($f) | 0;
  if ((HEAPU8[9008 + ($46 + 1) >> 0] | 0) > 15) {
   $51 = (HEAP32[$4 >> 2] | 0) == 0;
   if (!$51) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
   if (!$pok) {
    ___shlim($f, 0);
    $282 = 0;
    $283 = 0;
    tempRet0 = $282;
    return $283 | 0;
   }
   if ($51) {
    $282 = 0;
    $283 = 0;
    tempRet0 = $282;
    return $283 | 0;
   }
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
   $282 = 0;
   $283 = 0;
   tempRet0 = $282;
   return $283 | 0;
  } else {
   $$123 = 16;
   $c$124 = $46;
   label = 46;
  }
 } else {
  $$base21 = $25 ? 10 : $base;
  if ((HEAPU8[9008 + ($c$0 + 1) >> 0] | 0) >>> 0 < $$base21 >>> 0) {
   $$1 = $$base21;
   $c$1 = $c$0;
   label = 32;
  } else {
   if (HEAP32[$4 >> 2] | 0) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
   ___shlim($f, 0);
   HEAP32[(___errno_location() | 0) >> 2] = 22;
   $282 = 0;
   $283 = 0;
   tempRet0 = $282;
   return $283 | 0;
  }
 } while (0);
 if ((label | 0) == 32) if (($$1 | 0) == 10) {
  $67 = $c$1 + -48 | 0;
  if ($67 >>> 0 < 10) {
   $71 = $67;
   $x$082 = 0;
   while (1) {
    $70 = ($x$082 * 10 | 0) + $71 | 0;
    $72 = HEAP32[$3 >> 2] | 0;
    if ($72 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $72 + 1;
     $c$2$be = HEAPU8[$72 >> 0] | 0;
    } else $c$2$be = ___shgetc($f) | 0;
    $71 = $c$2$be + -48 | 0;
    if (!($71 >>> 0 < 10 & $70 >>> 0 < 429496729)) {
     $$lcssa134 = $70;
     $c$2$be$lcssa = $c$2$be;
     break;
    } else $x$082 = $70;
   }
   $284 = $$lcssa134;
   $285 = 0;
   $c$2$lcssa = $c$2$be$lcssa;
  } else {
   $284 = 0;
   $285 = 0;
   $c$2$lcssa = $c$1;
  }
  $83 = $c$2$lcssa + -48 | 0;
  if ($83 >>> 0 < 10) {
   $85 = $284;
   $86 = $285;
   $89 = $83;
   $c$371 = $c$2$lcssa;
   while (1) {
    $87 = ___muldi3($85 | 0, $86 | 0, 10, 0) | 0;
    $88 = tempRet0;
    $91 = (($89 | 0) < 0) << 31 >> 31;
    $93 = ~$91;
    if ($88 >>> 0 > $93 >>> 0 | ($88 | 0) == ($93 | 0) & $87 >>> 0 > ~$89 >>> 0) {
     $$lcssa = $89;
     $286 = $85;
     $287 = $86;
     $c$3$lcssa = $c$371;
     break;
    }
    $99 = _i64Add($87 | 0, $88 | 0, $89 | 0, $91 | 0) | 0;
    $100 = tempRet0;
    $101 = HEAP32[$3 >> 2] | 0;
    if ($101 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $101 + 1;
     $c$3$be = HEAPU8[$101 >> 0] | 0;
    } else $c$3$be = ___shgetc($f) | 0;
    $108 = $c$3$be + -48 | 0;
    if ($108 >>> 0 < 10 & ($100 >>> 0 < 429496729 | ($100 | 0) == 429496729 & $99 >>> 0 < 2576980378)) {
     $85 = $99;
     $86 = $100;
     $89 = $108;
     $c$371 = $c$3$be;
    } else {
     $$lcssa = $108;
     $286 = $99;
     $287 = $100;
     $c$3$lcssa = $c$3$be;
     break;
    }
   }
   if ($$lcssa >>> 0 > 9) {
    $255 = $287;
    $257 = $286;
   } else {
    $$122 = 10;
    $288 = $286;
    $289 = $287;
    $c$8 = $c$3$lcssa;
    label = 72;
   }
  } else {
   $255 = $285;
   $257 = $284;
  }
 } else {
  $$123 = $$1;
  $c$124 = $c$1;
  label = 46;
 }
 L69 : do if ((label | 0) == 46) {
  if (!($$123 + -1 & $$123)) {
   $128 = HEAP8[9272 + (($$123 * 23 | 0) >>> 5 & 7) >> 0] | 0;
   $130 = HEAP8[9008 + ($c$124 + 1) >> 0] | 0;
   $131 = $130 & 255;
   if ($131 >>> 0 < $$123 >>> 0) {
    $135 = $131;
    $x$146 = 0;
    while (1) {
     $134 = $135 | $x$146 << $128;
     $136 = HEAP32[$3 >> 2] | 0;
     if ($136 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $136 + 1;
      $c$4$be = HEAPU8[$136 >> 0] | 0;
     } else $c$4$be = ___shgetc($f) | 0;
     $144 = HEAP8[9008 + ($c$4$be + 1) >> 0] | 0;
     $135 = $144 & 255;
     if (!($134 >>> 0 < 134217728 & $135 >>> 0 < $$123 >>> 0)) {
      $$lcssa130 = $134;
      $$lcssa131 = $144;
      $c$4$be$lcssa = $c$4$be;
      break;
     } else $x$146 = $134;
    }
    $152 = $$lcssa131;
    $154 = 0;
    $156 = $$lcssa130;
    $c$4$lcssa = $c$4$be$lcssa;
   } else {
    $152 = $130;
    $154 = 0;
    $156 = 0;
    $c$4$lcssa = $c$124;
   }
   $149 = _bitshift64Lshr(-1, -1, $128 | 0) | 0;
   $150 = tempRet0;
   if (($152 & 255) >>> 0 >= $$123 >>> 0 | ($154 >>> 0 > $150 >>> 0 | ($154 | 0) == ($150 | 0) & $156 >>> 0 > $149 >>> 0)) {
    $$122 = $$123;
    $288 = $156;
    $289 = $154;
    $c$8 = $c$4$lcssa;
    label = 72;
    break;
   } else {
    $161 = $156;
    $162 = $154;
    $166 = $152;
   }
   while (1) {
    $163 = _bitshift64Shl($161 | 0, $162 | 0, $128 | 0) | 0;
    $164 = tempRet0;
    $167 = $166 & 255 | $163;
    $168 = HEAP32[$3 >> 2] | 0;
    if ($168 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $168 + 1;
     $c$5$be = HEAPU8[$168 >> 0] | 0;
    } else $c$5$be = ___shgetc($f) | 0;
    $166 = HEAP8[9008 + ($c$5$be + 1) >> 0] | 0;
    if (($166 & 255) >>> 0 >= $$123 >>> 0 | ($164 >>> 0 > $150 >>> 0 | ($164 | 0) == ($150 | 0) & $167 >>> 0 > $149 >>> 0)) {
     $$122 = $$123;
     $288 = $167;
     $289 = $164;
     $c$8 = $c$5$be;
     label = 72;
     break L69;
    } else {
     $161 = $167;
     $162 = $164;
    }
   }
  }
  $120 = HEAP8[9008 + ($c$124 + 1) >> 0] | 0;
  $121 = $120 & 255;
  if ($121 >>> 0 < $$123 >>> 0) {
   $186 = $121;
   $x$266 = 0;
   while (1) {
    $185 = $186 + (Math_imul($x$266, $$123) | 0) | 0;
    $187 = HEAP32[$3 >> 2] | 0;
    if ($187 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $187 + 1;
     $c$6$be = HEAPU8[$187 >> 0] | 0;
    } else $c$6$be = ___shgetc($f) | 0;
    $195 = HEAP8[9008 + ($c$6$be + 1) >> 0] | 0;
    $186 = $195 & 255;
    if (!($185 >>> 0 < 119304647 & $186 >>> 0 < $$123 >>> 0)) {
     $$lcssa132 = $185;
     $$lcssa133 = $195;
     $c$6$be$lcssa = $c$6$be;
     break;
    } else $x$266 = $185;
   }
   $201 = $$lcssa133;
   $290 = $$lcssa132;
   $291 = 0;
   $c$6$lcssa = $c$6$be$lcssa;
  } else {
   $201 = $120;
   $290 = 0;
   $291 = 0;
   $c$6$lcssa = $c$124;
  }
  if (($201 & 255) >>> 0 < $$123 >>> 0) {
   $203 = ___udivdi3(-1, -1, $$123 | 0, 0) | 0;
   $204 = tempRet0;
   $205 = $291;
   $207 = $290;
   $215 = $201;
   $c$753 = $c$6$lcssa;
   while (1) {
    if ($205 >>> 0 > $204 >>> 0 | ($205 | 0) == ($204 | 0) & $207 >>> 0 > $203 >>> 0) {
     $$122 = $$123;
     $288 = $207;
     $289 = $205;
     $c$8 = $c$753;
     label = 72;
     break L69;
    }
    $212 = ___muldi3($207 | 0, $205 | 0, $$123 | 0, 0) | 0;
    $213 = tempRet0;
    $214 = $215 & 255;
    if ($213 >>> 0 > 4294967295 | ($213 | 0) == -1 & $212 >>> 0 > ~$214 >>> 0) {
     $$122 = $$123;
     $288 = $207;
     $289 = $205;
     $c$8 = $c$753;
     label = 72;
     break L69;
    }
    $222 = _i64Add($214 | 0, 0, $212 | 0, $213 | 0) | 0;
    $223 = tempRet0;
    $224 = HEAP32[$3 >> 2] | 0;
    if ($224 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $224 + 1;
     $c$7$be = HEAPU8[$224 >> 0] | 0;
    } else $c$7$be = ___shgetc($f) | 0;
    $215 = HEAP8[9008 + ($c$7$be + 1) >> 0] | 0;
    if (($215 & 255) >>> 0 >= $$123 >>> 0) {
     $$122 = $$123;
     $288 = $222;
     $289 = $223;
     $c$8 = $c$7$be;
     label = 72;
     break;
    } else {
     $205 = $223;
     $207 = $222;
     $c$753 = $c$7$be;
    }
   }
  } else {
   $$122 = $$123;
   $288 = $290;
   $289 = $291;
   $c$8 = $c$6$lcssa;
   label = 72;
  }
 } while (0);
 if ((label | 0) == 72) if ((HEAPU8[9008 + ($c$8 + 1) >> 0] | 0) >>> 0 < $$122 >>> 0) {
  do {
   $239 = HEAP32[$3 >> 2] | 0;
   if ($239 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $239 + 1;
    $c$9$be = HEAPU8[$239 >> 0] | 0;
   } else $c$9$be = ___shgetc($f) | 0;
  } while ((HEAPU8[9008 + ($c$9$be + 1) >> 0] | 0) >>> 0 < $$122 >>> 0);
  HEAP32[(___errno_location() | 0) >> 2] = 34;
  $255 = $1;
  $257 = $0;
 } else {
  $255 = $289;
  $257 = $288;
 }
 if (HEAP32[$4 >> 2] | 0) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
 if (!($255 >>> 0 < $1 >>> 0 | ($255 | 0) == ($1 | 0) & $257 >>> 0 < $0 >>> 0)) {
  if (!(($0 & 1 | 0) != 0 | 0 != 0 | ($neg$0 | 0) != 0)) {
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $268 = _i64Add($0 | 0, $1 | 0, -1, -1) | 0;
   $282 = tempRet0;
   $283 = $268;
   tempRet0 = $282;
   return $283 | 0;
  }
  if ($255 >>> 0 > $1 >>> 0 | ($255 | 0) == ($1 | 0) & $257 >>> 0 > $0 >>> 0) {
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $282 = $1;
   $283 = $0;
   tempRet0 = $282;
   return $283 | 0;
  }
 }
 $277 = (($neg$0 | 0) < 0) << 31 >> 31;
 $280 = _i64Subtract($257 ^ $neg$0 | 0, $255 ^ $277 | 0, $neg$0 | 0, $277 | 0) | 0;
 $282 = tempRet0;
 $283 = $280;
 tempRet0 = $282;
 return $283 | 0;
}

function _areduce($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$0$i = 0, $$lcssa = 0, $$lcssa113 = 0, $$lcssa114 = 0, $$sum12$i = 0, $$sum4$i = 0, $$sum6$i = 0, $$sum9$i = 0, $1 = 0, $100 = 0, $101 = 0, $104 = 0, $106 = 0, $112 = 0, $113 = 0, $116 = 0, $117 = 0, $126 = 0, $129 = 0, $131 = 0, $137 = 0, $139 = 0, $140 = 0, $143 = 0, $144 = 0, $158 = 0, $159 = 0, $16 = 0, $163 = 0, $172 = 0, $176 = 0, $178 = 0, $181 = 0, $183 = 0, $185 = 0, $188 = 0, $189 = 0, $19 = 0, $191 = 0, $193 = 0, $195 = 0, $196 = 0, $199 = 0, $200 = 0, $206 = 0, $207 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $37 = 0, $42 = 0, $49 = 0, $5 = 0, $54 = 0, $6 = 0, $61 = 0, $69 = 0, $83 = 0, $88 = 0, $92 = 0, $97 = 0, $b$0$i64 = 0, $b$1$i70 = 0, $cv = 0, $cv$i = 0, $d$0$$i = 0, $d$0$$i$lcssa = 0, $d$0$i34 = 0, $d$2$i47 = 0, $f2 = 0, $f2$i = 0, $i$0$i62 = 0, $i$016 = 0, $i1$0$i68 = 0, $i1$023$us = 0, $i11$0$i48 = 0, $i13$0$i61 = 0, $i15$0$i56 = 0, $i17$0$i31$us = 0, $i19$0$i26$us = 0, $i3$020$us = 0, $i5$0$i33 = 0, $i7$0$i45 = 0, $i9$0$i40 = 0, $v$0$i63 = 0, $v$017 = 0, $v$1$i69 = 0, $v$122$us = 0, $v$2$i35 = 0, $v$219$us = 0, $v$3$i46 = 0, $v$4$i$lcssa = 0, $v$4$i41 = 0, $v$5$i49 = 0, $v$6$i60 = 0, $v$7$i$lcssa = 0, $v$7$i55 = 0, $v$8$i30$us = 0, $v$9$i25$us = 0, $x$1$i24$us = 0, $x$118$us = 0, $x3$1$i39 = 0, $x3$3$i54 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $cv$i = sp + 12 | 0;
 $f2$i = sp + 8 | 0;
 $cv = sp + 4 | 0;
 $f2 = sp;
 if (!$w) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $1 = $w + 12 | 0;
 if (HEAP32[$1 >> 2] | 0) {
  $5 = HEAP32[$w + 16 >> 2] | 0;
  $6 = HEAP32[$w >> 2] | 0;
  if (($5 | 0) > 1) if (!(($6 & 29 | 0) == 0 | (HEAP32[$w + 8 >> 2] | 0) == 0)) {
   if (!($6 & 1)) {
    _vaa($self, $6, $f2, $cv);
    $172 = HEAP32[$cv >> 2] | 0;
    if ($172 & 16) {
     $$0 = _reduce($w, $self) | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $176 = _cva($172, $w) | 0;
    if (!$176) {
     $$0 = 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $178 = _tail($176) | 0;
    if (!$178) {
     $$0 = 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $181 = HEAP32[$178 + 8 >> 2] | 0;
    $183 = _bp(HEAP32[$176 >> 2] | 0) | 0;
    $185 = HEAP32[$176 + 12 >> 2] | 0;
    $188 = Math_imul($183, $181) | 0;
    $189 = $5 + -1 | 0;
    $191 = $176 + ($185 + 4 + ($185 & 1) << 2) + (Math_imul($188, $189) | 0) | 0;
    $193 = HEAP32[$178 + 12 >> 2] | 0;
    $195 = $178 + ($193 + 4 + ($193 & 1) << 2) | 0;
    $196 = $195 + $188 | 0;
    if (($181 | 0) == 1) {
     $206 = 0 - $183 | 0;
     $207 = $195 + ($188 - $183) | 0;
     $i$016 = 0;
     $v$017 = $191;
     do {
      $v$017 = $v$017 + $206 | 0;
      ftCall_viii(HEAP32[$f2 >> 2] | 0, $v$017 | 0, $207 | 0, $207 | 0);
      $i$016 = $i$016 + 1 | 0;
     } while (($i$016 | 0) != ($189 | 0));
    } else {
     $199 = 0 - $183 | 0;
     if (($181 | 0) > 0) {
      $200 = 0 - $188 | 0;
      $i1$023$us = 0;
      $v$122$us = $191;
      while (1) {
       $i3$020$us = 0;
       $v$219$us = $v$122$us;
       $x$118$us = $196;
       do {
        $v$219$us = $v$219$us + $199 | 0;
        $x$118$us = $x$118$us + $199 | 0;
        ftCall_viii(HEAP32[$f2 >> 2] | 0, $v$219$us | 0, $x$118$us | 0, $x$118$us | 0);
        $i3$020$us = $i3$020$us + 1 | 0;
       } while (($i3$020$us | 0) != ($181 | 0));
       $i1$023$us = $i1$023$us + 1 | 0;
       if (($i1$023$us | 0) == ($189 | 0)) break; else $v$122$us = $v$122$us + $200 | 0;
      }
     }
    }
    if (HEAP8[2472] | 0) {
     $$0 = 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $$0 = _cvz(HEAP32[$cv >> 2] | 0, $178) | 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $16 = _tail($w) | 0;
   L37 : do if (!$16) $$0$i = 0; else {
    $19 = HEAP32[$16 + 8 >> 2] | 0;
    $21 = HEAP32[$16 + 12 >> 2] | 0;
    $23 = $16 + ($21 + 4 + ($21 & 1) << 2) | 0;
    $24 = HEAP32[$1 >> 2] | 0;
    $26 = $w + ($24 + 4 + ($24 & 1) << 2) | 0;
    $27 = _vap($self) | 0;
    L39 : do if (($19 | 0) <= 1) do switch (HEAP8[$27 + 1 >> 0] | 0) {
    case 1:
     {
      HEAP8[$23 >> 0] = (_memchr($26, 0, $5) | 0) == 0 & 1;
      $$0$i = $16;
      break L37;
      break;
     }
    case 7:
     {
      HEAP8[$23 >> 0] = (_memchr($26, 1, $5) | 0) != 0 & 1;
      $$0$i = $16;
      break L37;
      break;
     }
    case 11:
     {
      $69 = _memchr($26, 1, $5) | 0;
      HEAP8[$23 >> 0] = (($69 | 0) == 0 ? $5 : $69 - $26 | 0) & 1 ^ 1;
      $$0$i = $16;
      break L37;
      break;
     }
    case 4:
     {
      $$sum6$i = $5 + -1 | 0;
      if (!(HEAP8[$26 + $$sum6$i >> 0] | 0)) $83 = 0; else $83 = (_memchr($26, 1, $$sum6$i) | 0) == 0 & 1;
      HEAP8[$23 >> 0] = $83;
      $$0$i = $16;
      break L37;
      break;
     }
    case 13:
     {
      $$sum4$i = $5 + -1 | 0;
      if (!(HEAP8[$26 + $$sum4$i >> 0] | 0)) $88 = (_memchr($26, 0, $$sum4$i) | 0) != 0 & 1; else $88 = 1;
      HEAP8[$23 >> 0] = $88;
      $$0$i = $16;
      break L37;
      break;
     }
    case 14:
     {
      $37 = _memchr($26, 0, $5) | 0;
      $42 = ($37 | 0) == 0 ? $5 : $37 - $26 | 0;
      HEAP8[$23 >> 0] = (($42 | 0) % 2 | 0 | 0) != (($42 | 0) < ($5 + -1 | 0) | 0) & 1;
      $$0$i = $16;
      break L37;
      break;
     }
    case 8:
     {
      $49 = _memchr($26, 1, $5) | 0;
      $54 = ($49 | 0) == 0 ? $5 : $49 - $26 | 0;
      HEAP8[$23 >> 0] = (($54 | 0) % 2 | 0 | 0) == (($54 | 0) < ($5 + -1 | 0) | 0) & 1;
      $$0$i = $16;
      break L37;
      break;
     }
    case 2:
     {
      $61 = _memchr($26, 0, $5) | 0;
      HEAP8[$23 >> 0] = (($61 | 0) == 0 ? $5 : $61 - $26 | 0) & 1;
      $$0$i = $16;
      break L37;
      break;
     }
    case 9:
     {
      $b$1$i70 = 1;
      $i1$0$i68 = 0;
      $v$1$i69 = $26;
      while (1) {
       $97 = $b$1$i70 << 24 >> 24 == (HEAP8[$v$1$i69 >> 0] | 0) & 1;
       $i1$0$i68 = $i1$0$i68 + 1 | 0;
       if (($i1$0$i68 | 0) == ($5 | 0)) {
        $$lcssa114 = $97;
        break;
       } else {
        $b$1$i70 = $97;
        $v$1$i69 = $v$1$i69 + 1 | 0;
       }
      }
      HEAP8[$23 >> 0] = $$lcssa114;
      $$0$i = $16;
      break L37;
      break;
     }
    case 6:
     {
      $b$0$i64 = 0;
      $i$0$i62 = 0;
      $v$0$i63 = $26;
      while (1) {
       $92 = $b$0$i64 << 24 >> 24 != (HEAP8[$v$0$i63 >> 0] | 0) & 1;
       $i$0$i62 = $i$0$i62 + 1 | 0;
       if (($i$0$i62 | 0) == ($5 | 0)) {
        $$lcssa113 = $92;
        break;
       } else {
        $b$0$i64 = $92;
        $v$0$i63 = $v$0$i63 + 1 | 0;
       }
      }
      HEAP8[$23 >> 0] = $$lcssa113;
      $$0$i = $16;
      break L37;
      break;
     }
    default:
     break L39;
    } while (0); while (0);
    $100 = HEAP8[$27 >> 0] | 0;
    if (($100 | 0) == 43) {
     $101 = _cvt(4, $16) | 0;
     if (!$101) {
      $$0$i = 0;
      break;
     }
     $104 = HEAP32[$101 + 12 >> 2] | 0;
     $$sum12$i = $104 + 4 + ($104 & 1) | 0;
     $106 = $101 + ($$sum12$i << 2) | 0;
     if (($19 | 0) == 1) {
      $d$0$i34 = 0;
      $i5$0$i33 = 0;
      $v$2$i35 = $26;
      while (1) {
       $d$0$$i = ((HEAP8[$v$2$i35 >> 0] | 0) != 0 & 1) + $d$0$i34 | 0;
       $i5$0$i33 = $i5$0$i33 + 1 | 0;
       if (($i5$0$i33 | 0) == ($5 | 0)) {
        $d$0$$i$lcssa = $d$0$$i;
        break;
       } else {
        $d$0$i34 = $d$0$$i;
        $v$2$i35 = $v$2$i35 + 1 | 0;
       }
      }
      HEAP32[$106 >> 2] = $d$0$$i$lcssa;
      $$0$i = $101;
      break;
     }
     $112 = $101 + ($$sum12$i + $19 << 2) | 0;
     $113 = $5 + -1 | 0;
     $116 = ($19 | 0) > 0;
     $117 = 0 - $19 | 0;
     $i7$0$i45 = 0;
     $v$3$i46 = $26 + (Math_imul($19, $113) | 0) | 0;
     while (1) {
      if ($116) {
       $i9$0$i40 = 0;
       $v$4$i41 = $v$3$i46;
       $x3$1$i39 = $112;
       do {
        $x3$1$i39 = $x3$1$i39 + -4 | 0;
        $v$4$i41 = $v$4$i41 + -1 | 0;
        HEAP32[$x3$1$i39 >> 2] = (HEAP8[$v$4$i41 >> 0] | 0) + (HEAP32[$x3$1$i39 >> 2] | 0);
        $i9$0$i40 = $i9$0$i40 + 1 | 0;
       } while (($i9$0$i40 | 0) != ($19 | 0));
       $v$4$i$lcssa = $v$3$i46 + $117 | 0;
      } else $v$4$i$lcssa = $v$3$i46;
      $i7$0$i45 = $i7$0$i45 + 1 | 0;
      if (($i7$0$i45 | 0) == ($113 | 0)) {
       $$0$i = $101;
       break;
      } else $v$3$i46 = $v$4$i$lcssa;
     }
    } else if (($100 | 0) == 45) {
     $126 = _cvt(4, $16) | 0;
     if (!$126) {
      $$0$i = 0;
      break;
     }
     $129 = HEAP32[$126 + 12 >> 2] | 0;
     $$sum9$i = $129 + 4 + ($129 & 1) | 0;
     $131 = $126 + ($$sum9$i << 2) | 0;
     if (($19 | 0) == 1) {
      $d$2$i47 = 0;
      $i11$0$i48 = 0;
      $v$5$i49 = $26 + $5 | 0;
      while (1) {
       $v$5$i49 = $v$5$i49 + -1 | 0;
       $137 = ((HEAP8[$v$5$i49 >> 0] | 0) != 0 & 1) - $d$2$i47 | 0;
       $i11$0$i48 = $i11$0$i48 + 1 | 0;
       if (($i11$0$i48 | 0) == ($5 | 0)) {
        $$lcssa = $137;
        break;
       } else $d$2$i47 = $137;
      }
      HEAP32[$131 >> 2] = $$lcssa;
      $$0$i = $126;
      break;
     }
     $139 = $126 + ($$sum9$i + $19 << 2) | 0;
     $140 = $5 + -1 | 0;
     $143 = ($19 | 0) > 0;
     $144 = 0 - $19 | 0;
     $i13$0$i61 = 0;
     $v$6$i60 = $26 + (Math_imul($19, $140) | 0) | 0;
     while (1) {
      if ($143) {
       $i15$0$i56 = 0;
       $v$7$i55 = $v$6$i60;
       $x3$3$i54 = $139;
       do {
        $x3$3$i54 = $x3$3$i54 + -4 | 0;
        $v$7$i55 = $v$7$i55 + -1 | 0;
        HEAP32[$x3$3$i54 >> 2] = (HEAP8[$v$7$i55 >> 0] | 0) - (HEAP32[$x3$3$i54 >> 2] | 0);
        $i15$0$i56 = $i15$0$i56 + 1 | 0;
       } while (($i15$0$i56 | 0) != ($19 | 0));
       $v$7$i$lcssa = $v$6$i60 + $144 | 0;
      } else $v$7$i$lcssa = $v$6$i60;
      $i13$0$i61 = $i13$0$i61 + 1 | 0;
      if (($i13$0$i61 | 0) == ($140 | 0)) {
       $$0$i = $126;
       break;
      } else $v$6$i60 = $v$7$i$lcssa;
     }
    } else {
     _vaa($self, 1, $f2$i, $cv$i);
     if (!(HEAP32[$cv$i >> 2] & 16)) {
      $$0$i = _areduce(_cvt(8, $w) | 0, $self) | 0;
      break;
     }
     $158 = $23 + $19 | 0;
     $159 = $5 + -1 | 0;
     if (($19 | 0) > 0) {
      $163 = 0 - $19 | 0;
      $i17$0$i31$us = 0;
      $v$8$i30$us = $26 + (Math_imul($19, $159) | 0) | 0;
      while (1) {
       $i19$0$i26$us = 0;
       $v$9$i25$us = $v$8$i30$us;
       $x$1$i24$us = $158;
       do {
        $v$9$i25$us = $v$9$i25$us + -1 | 0;
        $x$1$i24$us = $x$1$i24$us + -1 | 0;
        ftCall_viii(HEAP32[$f2$i >> 2] | 0, $v$9$i25$us | 0, $x$1$i24$us | 0, $x$1$i24$us | 0);
        $i19$0$i26$us = $i19$0$i26$us + 1 | 0;
       } while (($i19$0$i26$us | 0) != ($19 | 0));
       $i17$0$i31$us = $i17$0$i31$us + 1 | 0;
       if (($i17$0$i31$us | 0) == ($159 | 0)) break; else $v$8$i30$us = $v$8$i30$us + $163 | 0;
      }
     }
     $$0$i = (HEAP8[2472] | 0) != 0 ? 0 : $16;
     break;
    }
   } while (0);
   $$0 = $$0$i;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $$0 = _reduce($w, $self) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _graft($w) {
 $w = $w | 0;
 var $$0 = 0, $$0$i36 = 0, $$0212$i = 0, $$sum1 = 0, $$sum1$i = 0, $$sum10 = 0, $$sum12 = 0, $$sum3 = 0, $$sum3$i = 0, $$sum3$i30 = 0, $$sum5$i = 0, $$sum6 = 0, $$sum8 = 0, $$sum9$i = 0, $10 = 0, $100 = 0, $101 = 0, $103 = 0, $104 = 0, $106 = 0, $107 = 0, $110 = 0, $112 = 0, $113 = 0, $116 = 0, $117 = 0, $120 = 0, $126 = 0, $128 = 0, $13 = 0, $132 = 0, $135 = 0, $137 = 0, $139 = 0, $14 = 0, $142 = 0, $144 = 0, $145 = 0, $147 = 0, $151 = 0, $153 = 0, $155 = 0, $157 = 0, $158 = 0, $160 = 0, $162 = 0, $164 = 0, $168 = 0, $17 = 0, $173 = 0, $181 = 0, $183 = 0, $184 = 0, $188 = 0, $19 = 0, $191 = 0, $192 = 0, $2 = 0, $200 = 0, $21 = 0, $212 = 0, $213 = 0, $216 = 0, $218 = 0, $222 = 0, $227 = 0, $28 = 0, $3 = 0, $31 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $44 = 0, $45 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $68 = 0, $7 = 0, $76 = 0, $79 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $91 = 0, $94 = 0, $96 = 0, $98 = 0, $b$022$us$i = 0, $b$119$us$i = 0, $b$2$us$i = 0, $b$3$us$i = 0, $i$013$i = 0, $i$026$i = 0, $i$065 = 0, $i1$053 = 0, $i3$047 = 0, $i5$045 = 0, $i5$045$lcssa = 0, $j$0$lcssa = 0, $j$025$i = 0, $j$058 = 0, $j$1 = 0, $j$121$us$i = 0, $j$174 = 0, $k$0$lcssa = 0, $k$015$us$i = 0, $k$1$lcssa = 0, $k$151 = 0, $k$2 = 0, $m$0$lcssa = 0, $m$064 = 0, $p$0 = 0, $u$011$i = 0, $v$010$i = 0, $v$023$us$i = 0, $v$052 = 0, $v$120$us$i = 0, $v$146 = 0, $v$244 = 0, label = 0, $v$010$i$looptemp = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = $w + 12 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $$sum1$i = $3 + 4 + ($3 & 1) | 0;
 $5 = $w + ($$sum1$i << 2) | 0;
 $6 = HEAP32[$w + 16 >> 2] | 0;
 $7 = _apv($6, 0, 0) | 0;
 if (!$7) {
  $$0 = 0;
  return $$0 | 0;
 }
 $10 = HEAP32[$7 + 12 >> 2] | 0;
 $$sum3$i = $10 + 4 + ($10 & 1) | 0;
 $13 = HEAP32[$w + 20 >> 2] | 0;
 $14 = _apv($13, 0, 0) | 0;
 if (!$14) {
  $$0 = 0;
  return $$0 | 0;
 }
 $17 = HEAP32[$14 + 12 >> 2] | 0;
 $$sum5$i = $17 + 4 + ($17 & 1) | 0;
 $19 = ($6 | 0) > 0;
 if ($19) {
  $i$026$i = 0;
  $j$025$i = 0;
  while (1) {
   $21 = HEAP32[$w + ($j$025$i + $$sum1$i << 2) >> 2] | 0;
   if (!(HEAP32[$21 + 12 >> 2] | 0)) $28 = 1; else $28 = HEAP32[$21 + 16 >> 2] | 0;
   HEAP32[$7 + ($i$026$i + $$sum3$i << 2) >> 2] = $28;
   $i$026$i = $i$026$i + 1 | 0;
   if (($i$026$i | 0) == ($6 | 0)) break; else $j$025$i = $j$025$i + $13 | 0;
  }
 }
 $31 = _ga(2, $13, 1, 0) | 0;
 if (!$31) {
  $$0 = 0;
  return $$0 | 0;
 }
 $34 = HEAP32[$31 + 12 >> 2] | 0;
 $36 = $31 + ($34 + 4 + ($34 & 1) << 2) | 0;
 $37 = HEAP8[2448] | 0;
 $38 = HEAP8[2454] | 0;
 if ($19) {
  $40 = $$sum3$i + -1 | 0;
  if (($13 | 0) > 0) {
   $b$022$us$i = 0;
   $j$121$us$i = 0;
   $v$023$us$i = $5;
   while (1) {
    $68 = $7 + ($40 + $j$121$us$i << 2) | 0;
    $b$119$us$i = $b$022$us$i;
    $k$015$us$i = 0;
    $v$120$us$i = $v$023$us$i;
    while (1) {
     $44 = HEAP32[$v$120$us$i >> 2] | 0;
     $v$120$us$i = $v$120$us$i + 4 | 0;
     $45 = $44 + 8 | 0;
     if (!(HEAP32[$45 >> 2] | 0)) {
      HEAP8[$36 + $k$015$us$i >> 0] = 32;
      $b$3$us$i = $b$119$us$i;
     } else {
      $49 = HEAP32[$44 + 20 >> 2] | 0;
      $50 = $14 + ($$sum5$i + $k$015$us$i << 2) | 0;
      $51 = HEAP32[$50 >> 2] | 0;
      HEAP32[$50 >> 2] = ($51 | 0) > ($49 | 0) ? $51 : $49;
      $54 = HEAP32[$44 + 12 >> 2] | 0;
      $56 = $44 + ($54 + 4 + ($54 & 1) << 2) | 0;
      do if (!($b$119$us$i << 24 >> 24)) $b$2$us$i = 0; else {
       $58 = HEAP8[$56 >> 0] | 0;
       if ($58 << 24 >> 24 == $37 << 24 >> 24) {
        if ((HEAP8[$36 + $k$015$us$i >> 0] | 0) == 32) label = 16;
       } else label = 16;
       if ((label | 0) == 16) {
        label = 0;
        if ($58 << 24 >> 24 == 32) {
         $b$2$us$i = $b$119$us$i;
         break;
        }
        if ($38 << 24 >> 24 != (HEAP8[$36 + $k$015$us$i >> 0] | 0)) {
         $b$2$us$i = $b$119$us$i;
         break;
        }
       }
       HEAP32[$68 >> 2] = (HEAP32[$68 >> 2] | 0) + 1;
       $b$2$us$i = 0;
      } while (0);
      HEAP8[$36 + $k$015$us$i >> 0] = HEAP8[$56 + ((HEAP32[$45 >> 2] | 0) - $49) >> 0] | 0;
      $b$3$us$i = $b$2$us$i;
     }
     $k$015$us$i = $k$015$us$i + 1 | 0;
     if (($k$015$us$i | 0) == ($13 | 0)) break; else $b$119$us$i = $b$3$us$i;
    }
    $41 = $j$121$us$i + 1 | 0;
    if (($41 | 0) == ($6 | 0)) break; else {
     $b$022$us$i = $j$121$us$i >>> 31 & 255 ^ 1;
     $j$121$us$i = $41;
     $v$023$us$i = $v$023$us$i + ($13 << 2) | 0;
    }
   }
  }
 }
 $76 = _link($7, $14) | 0;
 if (!$76) {
  $$0 = 0;
  return $$0 | 0;
 }
 $79 = HEAP32[$76 + 12 >> 2] | 0;
 $$sum1 = $79 + 4 + ($79 & 1) | 0;
 $82 = HEAP32[$76 + ($$sum1 << 2) >> 2] | 0;
 $84 = HEAP32[$82 + 8 >> 2] | 0;
 $86 = HEAP32[$82 + 12 >> 2] | 0;
 $$sum3 = $86 + 4 + ($86 & 1) | 0;
 $88 = ($84 | 0) > 0;
 if ($88) {
  $i$065 = 0;
  $m$064 = 0;
  while (1) {
   $91 = (HEAP32[$82 + ($i$065 + $$sum3 << 2) >> 2] | 0) + $m$064 | 0;
   $i$065 = $i$065 + 1 | 0;
   if (($i$065 | 0) == ($84 | 0)) {
    $m$0$lcssa = $91;
    break;
   } else $m$064 = $91;
  }
 } else $m$0$lcssa = 0;
 $94 = HEAP32[$76 + ($$sum1 + 1 << 2) >> 2] | 0;
 $96 = HEAP32[$94 + 8 >> 2] | 0;
 $98 = HEAP32[$94 + 12 >> 2] | 0;
 $$sum6 = $98 + 4 + ($98 & 1) | 0;
 $100 = $94 + ($$sum6 << 2) | 0;
 $101 = _v2(0, 0) | 0;
 if (!$101) {
  $$0 = 0;
  return $$0 | 0;
 }
 $103 = $101 + 12 | 0;
 $104 = HEAP32[$103 >> 2] | 0;
 $$sum8 = $104 + 4 + ($104 & 1) | 0;
 $106 = $101 + ($$sum8 << 2) | 0;
 $107 = _ga(32, $96, 1, 0) | 0;
 if (!$107) {
  $$0 = 0;
  return $$0 | 0;
 }
 $110 = HEAP32[$107 + 12 >> 2] | 0;
 $$sum10 = $110 + 4 + ($110 & 1) | 0;
 $112 = $107 + ($$sum10 << 2) | 0;
 $113 = HEAP32[$2 >> 2] | 0;
 $$sum12 = $113 + 4 + ($113 & 1) | 0;
 L54 : do if (($96 | 0) > 0) {
  $116 = $101 + ($$sum8 + 1 << 2) | 0;
  $j$058 = 0;
  L56 : while (1) {
   $117 = $94 + ($j$058 + $$sum6 << 2) | 0;
   $120 = _ga(2, Math_imul(HEAP32[$117 >> 2] | 0, $m$0$lcssa) | 0, 2, 0) | 0;
   if (!$120) {
    $$0 = 0;
    label = 62;
    break;
   }
   HEAP32[$120 + 16 >> 2] = $m$0$lcssa;
   HEAP32[$120 + 20 >> 2] = HEAP32[$117 >> 2];
   $126 = HEAP32[$120 + 12 >> 2] | 0;
   $128 = $120 + ($126 + 4 + ($126 & 1) << 2) | 0;
   _memset($128 | 0, 32, HEAP32[$120 + 8 >> 2] | 0) | 0;
   HEAP32[$116 >> 2] = HEAP32[$117 >> 2];
   $132 = $j$058 - $96 | 0;
   if ($88) {
    $i1$053 = 0;
    $k$151 = $132;
    $v$052 = $128;
    while (1) {
     HEAP32[$106 >> 2] = HEAP32[$82 + ($i1$053 + $$sum3 << 2) >> 2];
     $135 = $k$151 + $96 | 0;
     $137 = HEAP32[$w + ($$sum12 + $135 << 2) >> 2] | 0;
     if (!$137) $$0$i36 = 0; else {
      $139 = HEAP32[$103 >> 2] | 0;
      $$sum3$i30 = $139 + 4 + ($139 & 1) | 0;
      $142 = HEAP32[$101 + ($$sum3$i30 << 2) >> 2] | 0;
      $144 = HEAP32[$101 + ($$sum3$i30 + 1 << 2) >> 2] | 0;
      $145 = 0 - $144 | 0;
      $147 = HEAP32[$137 + 8 >> 2] | 0;
      do if ($147) {
       $151 = HEAP32[$137 + 20 >> 2] | 0;
       $153 = HEAP32[$137 + 12 >> 2] | 0;
       $155 = $137 + ($153 + 4 + ($153 & 1) << 2) | 0;
       if (($144 | 0) == ($151 | 0)) {
        _memcpy($v$052 | 0, $155 | 0, $147 | 0) | 0;
        break;
       }
       $157 = $v$052 + $145 | 0;
       $158 = $v$052 + ($151 + ~$144) | 0;
       $160 = $155 + (0 - $151) | 0;
       if (!$153) $173 = 1; else {
        $162 = HEAP32[$137 + 16 >> 2] | 0;
        if (($162 | 0) > 0) $173 = $162; else break;
       }
       $$sum9$i = $144 + 1 | 0;
       $164 = $144 - $151 | 0;
       $$0212$i = $157;
       $i$013$i = 0;
       $u$011$i = $160;
       $v$010$i = $158;
       do {
        $$0212$i = $$0212$i + $144 | 0;
        $u$011$i = $u$011$i + $151 | 0;
        _memcpy($$0212$i | 0, $u$011$i | 0, $151 | 0) | 0;
        $v$010$i$looptemp = $v$010$i;
        $v$010$i = $v$010$i + $144 | 0;
        $168 = HEAP8[3520] | 0;
        if ($168 << 24 >> 24 == (HEAP8[$v$010$i >> 0] | 0)) _memset($v$010$i$looptemp + $$sum9$i | 0, $168 | 0, $164 | 0) | 0;
        $i$013$i = $i$013$i + 1 | 0;
       } while (($i$013$i | 0) != ($173 | 0));
      } while (0);
      $$0$i36 = Math_imul($144, $142) | 0;
     }
     if (HEAP8[2472] | 0) {
      $$0 = 0;
      label = 62;
      break L56;
     }
     $i1$053 = $i1$053 + 1 | 0;
     if (($i1$053 | 0) >= ($84 | 0)) {
      $k$1$lcssa = $135;
      break;
     } else {
      $k$151 = $135;
      $v$052 = $v$052 + $$0$i36 | 0;
     }
    }
   } else $k$1$lcssa = $132;
   HEAP32[$107 + ($j$058 + $$sum10 << 2) >> 2] = $120;
   $181 = $j$058 + 1 | 0;
   if (($181 | 0) < ($96 | 0)) $j$058 = $181; else {
    $j$0$lcssa = $181;
    $k$0$lcssa = $k$1$lcssa;
    break L54;
   }
  }
  if ((label | 0) == 62) return $$0 | 0;
 } else {
  $j$0$lcssa = 0;
  $k$0$lcssa = 0;
 } while (0);
 $183 = HEAP32[$112 >> 2] | 0;
 $184 = HEAP32[$100 >> 2] | 0;
 do if (($m$0$lcssa | 0) == 1) {
  $188 = _scc(HEAP8[3520] | 0) | 0;
  if (!$188) {
   $$0 = 0;
   return $$0 | 0;
  } else $p$0 = $188;
 } else {
  $191 = HEAP32[$183 + 12 >> 2] | 0;
  $192 = ($m$0$lcssa | 0) > 0;
  L87 : do if ($192) {
   $i3$047 = 0;
   $v$146 = $183 + ($191 + 4 + ($191 & 1) << 2) | 0;
   while (1) {
    if ((HEAP8[$v$146 >> 0] | 0) != 32) {
     $j$1 = $i3$047;
     break;
    }
    $i3$047 = $i3$047 + 1 | 0;
    if (($i3$047 | 0) >= ($m$0$lcssa | 0)) {
     $j$1 = $j$0$lcssa;
     break;
    } else $v$146 = $v$146 + $184 | 0;
   }
   $200 = 0 - $184 | 0;
   if ($192) {
    $i5$045 = 0;
    $v$244 = $183 + ($191 + 4 + ($191 & 1) << 2) + ((HEAP32[$183 + 8 >> 2] | 0) - $184) | 0;
    while (1) {
     if ((HEAP8[$v$244 >> 0] | 0) != 32) {
      $i5$045$lcssa = $i5$045;
      break;
     }
     $i5$045 = $i5$045 + 1 | 0;
     if (($m$0$lcssa | 0) <= ($i5$045 | 0)) {
      $j$174 = $j$1;
      $k$2 = $k$0$lcssa;
      break L87;
     } else $v$244 = $v$244 + $200 | 0;
    }
    $j$174 = $j$1;
    $k$2 = $m$0$lcssa - $i5$045$lcssa | 0;
   } else {
    $j$174 = $j$1;
    $k$2 = $k$0$lcssa;
   }
  } else {
   $j$174 = $j$0$lcssa;
   $k$2 = $k$0$lcssa;
  } while (0);
  $212 = $k$2 - $j$174 | 0;
  $213 = _ga(2, $m$0$lcssa, 1, 0) | 0;
  if (!$213) {
   $$0 = 0;
   return $$0 | 0;
  }
  $216 = HEAP32[$213 + 12 >> 2] | 0;
  $218 = $213 + ($216 + 4 + ($216 & 1) << 2) | 0;
  _memset($218 | 0, 32, $m$0$lcssa | 0) | 0;
  if (($212 | 0) == 1) {
   HEAP8[$218 + $j$174 >> 0] = HEAP8[3520] | 0;
   $p$0 = $213;
   break;
  } else {
   $222 = $218 + $j$174 | 0;
   _memset($222 | 0, HEAP8[2457] | 0, $212 | 0) | 0;
   HEAP8[$222 >> 0] = HEAP8[2448] | 0;
   HEAP8[$218 + ($k$2 + -1) >> 0] = HEAP8[2454] | 0;
   $p$0 = $213;
   break;
  }
 } while (0);
 $227 = _overr($p$0, $183) | 0;
 HEAP32[$112 >> 2] = $227;
 $$0 = ($227 | 0) == 0 ? 0 : $107;
 return $$0 | 0;
}

function _pdt($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$lcssa = 0.0, $$sum16 = 0, $$sum25 = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $104 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $121 = 0.0, $127 = 0, $129 = 0, $13 = 0, $131 = 0, $132 = 0, $134 = 0, $136 = 0, $138 = 0, $14 = 0, $144 = 0, $145 = 0, $151 = 0.0, $158 = 0, $16 = 0, $160 = 0, $161 = 0, $163 = 0, $165 = 0, $167 = 0, $17 = 0, $173 = 0, $174 = 0, $176 = 0.0, $177 = 0.0, $18 = 0, $180 = 0.0, $182 = 0.0, $185 = 0.0, $189 = 0.0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $37 = 0, $39 = 0, $4 = 0, $44 = 0, $5 = 0, $51 = 0, $52 = 0, $58 = 0, $60 = 0, $63 = 0, $64 = 0, $66 = 0, $69 = 0, $71 = 0, $74 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $96 = 0, $98 = 0, $99 = 0, $i$045$us = 0, $i1$040$us$us = 0, $i10$082 = 0, $i12$075$us = 0, $i14$069$us = 0, $i22$0101 = 0, $i24$094 = 0, $i26$088 = 0, $i3$037$us$us = 0, $i34$0120 = 0, $i36$0113 = 0, $i38$0106 = 0, $u$049$us = 0, $u$142$us$us = 0, $u16$085 = 0, $u29$0104 = 0, $u7$067$us = 0, $uu$079 = 0, $uu17$098 = 0, $uu30$0117 = 0, $v$041$us$us = 0, $v$139$us$us = 0, $v18$086 = 0, $v31$0105 = 0, $v8$066$us = 0, $x$038$us$us = 0, $x20$0$lcssa = 0.0, $x20$087 = 0.0, $x28$0$lcssa = 0.0, $x28$0102 = 0.0, $x5$068$us = 0.0, $y$0$lcssa = 0.0, $y$0103 = 0.0, $z$0 = 0, $zv$046$us = 0, $zv21$0100 = 0, $zv21$1$lcssa = 0, $zv21$193 = 0, $zv33$0119 = 0, $zv33$1$lcssa = 0, $zv33$1112 = 0, $zv6$083 = 0, $zv6$1$lcssa = 0, $zv6$174$us = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = $a;
 HEAP32[$1 >> 2] = $w;
 $4 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $5 = _coerce2($0, $1, 1) | 0;
 if (!($5 & 29)) {
  _jsignal(3);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $8 = HEAP32[$0 >> 2] | 0;
 $10 = HEAP32[$8 + 8 >> 2] | 0;
 $12 = HEAP32[$8 + 12 >> 2] | 0;
 $13 = $8 + 16 | 0;
 $14 = ($12 | 0) != 0;
 $16 = $14 ? $12 + -1 | 0 : 0;
 $17 = _prod($16, $13) | 0;
 $18 = HEAP32[$1 >> 2] | 0;
 $20 = HEAP32[$18 + 8 >> 2] | 0;
 $22 = HEAP32[$18 + 12 >> 2] | 0;
 $23 = $18 + 16 | 0;
 $24 = ($22 | 0) != 0;
 $26 = $24 ? $22 + -1 | 0 : 0;
 $27 = $18 + 20 | 0;
 $28 = _prod($26, $27) | 0;
 if ($14) {
  $30 = HEAP32[$8 + 16 + ($16 << 2) >> 2] | 0;
  if (!$24) {
   $31 = HEAP32[$0 >> 2] | 0;
   $32 = _sc($30) | 0;
   $$0 = _pdt($31, _reshape($32, HEAP32[$1 >> 2] | 0) | 0) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  if (($30 | 0) == (HEAP32[$23 >> 2] | 0)) $77 = $30; else {
   _jsignal(9);
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } else if ($24) {
  $37 = _sc(HEAP32[$23 >> 2] | 0) | 0;
  $39 = _reshape($37, HEAP32[$0 >> 2] | 0) | 0;
  $$0 = _pdt($39, HEAP32[$1 >> 2] | 0) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else $77 = 1;
 $44 = Math_imul($28, $17) | 0;
 if (!($5 & 1)) $51 = ($5 & 4 | 0) != 0 ? 8 : $5; else $51 = 4;
 $52 = _ga($51, $44, $26 + $16 | 0, 0) | 0;
 if (!$52) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _memcpy($52 + 16 | 0, $13 | 0, $16 << 2 | 0) | 0;
 _memcpy($52 + 16 + ($16 << 2) | 0, $27 | 0, $26 << 2 | 0) | 0;
 if (($5 | 0) == 8) {
  $129 = HEAP32[$0 >> 2] | 0;
  $131 = HEAP32[$129 + 12 >> 2] | 0;
  $132 = HEAP32[$1 >> 2] | 0;
  $134 = HEAP32[$132 + 12 >> 2] | 0;
  $136 = $132 + ($134 + 4 + ($134 & 1) << 2) | 0;
  $138 = HEAP32[$52 + 12 >> 2] | 0;
  if (($17 | 0) > 0) {
   $144 = ($28 | 0) > 0;
   $145 = ($77 | 0) > 0;
   $i22$0101 = 0;
   $uu17$098 = $129 + ($131 + 4 + ($131 & 1) << 2) | 0;
   $zv21$0100 = $52 + ($138 + 4 + ($138 & 1) << 2) | 0;
   while (1) {
    if ($144) {
     $i24$094 = 0;
     $zv21$193 = $zv21$0100;
     while (1) {
      if ($145) {
       $i26$088 = 0;
       $u16$085 = $uu17$098;
       $v18$086 = $136 + ($i24$094 << 3) | 0;
       $x20$087 = 0.0;
       while (1) {
        $151 = $x20$087 + +HEAPF64[$u16$085 >> 3] * +HEAPF64[$v18$086 >> 3];
        $i26$088 = $i26$088 + 1 | 0;
        if (($i26$088 | 0) == ($77 | 0)) {
         $x20$0$lcssa = $151;
         break;
        } else {
         $u16$085 = $u16$085 + 8 | 0;
         $v18$086 = $v18$086 + ($28 << 3) | 0;
         $x20$087 = $151;
        }
       }
      } else $x20$0$lcssa = 0.0;
      HEAPF64[$zv21$193 >> 3] = $x20$0$lcssa;
      $i24$094 = $i24$094 + 1 | 0;
      if (($i24$094 | 0) == ($28 | 0)) break; else $zv21$193 = $zv21$193 + 8 | 0;
     }
     $zv21$1$lcssa = $zv21$0100 + ($28 << 3) | 0;
    } else $zv21$1$lcssa = $zv21$0100;
    $i22$0101 = $i22$0101 + 1 | 0;
    if (($i22$0101 | 0) == ($17 | 0)) {
     $z$0 = $52;
     break;
    } else {
     $uu17$098 = $uu17$098 + ($77 << 3) | 0;
     $zv21$0100 = $zv21$1$lcssa;
    }
   }
  } else $z$0 = $52;
 } else if (($5 | 0) == 4) {
  $96 = HEAP32[$0 >> 2] | 0;
  $98 = HEAP32[$96 + 12 >> 2] | 0;
  $99 = HEAP32[$1 >> 2] | 0;
  $101 = HEAP32[$99 + 12 >> 2] | 0;
  $$sum16 = $101 + 4 + ($101 & 1) | 0;
  $104 = HEAP32[$52 + 12 >> 2] | 0;
  if (($17 | 0) > 0) {
   $110 = ($28 | 0) > 0;
   $111 = ($77 | 0) > 0;
   $112 = $28 << 3;
   $i10$082 = 0;
   $uu$079 = $96 + ($98 + 4 + ($98 & 1) << 2) | 0;
   $zv6$083 = $52 + ($104 + 4 + ($104 & 1) << 2) | 0;
   while (1) {
    if ($110) {
     if ($111) {
      $i12$075$us = 0;
      $zv6$174$us = $zv6$083;
      while (1) {
       $i14$069$us = 0;
       $u7$067$us = $uu$079;
       $v8$066$us = $99 + ($$sum16 + $i12$075$us << 2) | 0;
       $x5$068$us = 0.0;
       while (1) {
        $121 = $x5$068$us + +(HEAP32[$u7$067$us >> 2] | 0) * +(HEAP32[$v8$066$us >> 2] | 0);
        $i14$069$us = $i14$069$us + 1 | 0;
        if (($i14$069$us | 0) == ($77 | 0)) {
         $$lcssa = $121;
         break;
        } else {
         $u7$067$us = $u7$067$us + 4 | 0;
         $v8$066$us = $v8$066$us + ($28 << 2) | 0;
         $x5$068$us = $121;
        }
       }
       HEAPF64[$zv6$174$us >> 3] = $$lcssa;
       $i12$075$us = $i12$075$us + 1 | 0;
       if (($i12$075$us | 0) == ($28 | 0)) break; else $zv6$174$us = $zv6$174$us + 8 | 0;
      }
     } else _memset($zv6$083 | 0, 0, $112 | 0) | 0;
     $zv6$1$lcssa = $zv6$083 + ($28 << 3) | 0;
    } else $zv6$1$lcssa = $zv6$083;
    $i10$082 = $i10$082 + 1 | 0;
    if (($i10$082 | 0) == ($17 | 0)) break; else {
     $uu$079 = $uu$079 + ($77 << 2) | 0;
     $zv6$083 = $zv6$1$lcssa;
    }
   }
  }
  $127 = _icvt($52) | 0;
  if (!$127) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else $z$0 = $127;
 } else if (($5 | 0) == 16) {
  $158 = HEAP32[$0 >> 2] | 0;
  $160 = HEAP32[$158 + 12 >> 2] | 0;
  $161 = HEAP32[$1 >> 2] | 0;
  $163 = HEAP32[$161 + 12 >> 2] | 0;
  $165 = $161 + ($163 + 4 + ($163 & 1) << 2) | 0;
  $167 = HEAP32[$52 + 12 >> 2] | 0;
  if (($17 | 0) > 0) {
   $173 = ($28 | 0) > 0;
   $174 = ($77 | 0) > 0;
   $i34$0120 = 0;
   $uu30$0117 = $158 + ($160 + 4 + ($160 & 1) << 2) | 0;
   $zv33$0119 = $52 + ($167 + 4 + ($167 & 1) << 2) | 0;
   while (1) {
    if ($173) {
     $i36$0113 = 0;
     $zv33$1112 = $zv33$0119;
     while (1) {
      if ($174) {
       $i38$0106 = 0;
       $u29$0104 = $uu30$0117;
       $v31$0105 = $165 + ($i36$0113 << 4) | 0;
       $x28$0102 = 0.0;
       $y$0103 = 0.0;
       while (1) {
        $176 = +HEAPF64[$u29$0104 >> 3];
        $177 = +HEAPF64[$v31$0105 >> 3];
        $180 = +HEAPF64[$u29$0104 + 8 >> 3];
        $182 = +HEAPF64[$v31$0105 + 8 >> 3];
        $185 = $x28$0102 + ($176 * $177 - $180 * $182);
        $189 = $y$0103 + ($177 * $180 + $176 * $182);
        $i38$0106 = $i38$0106 + 1 | 0;
        if (($i38$0106 | 0) == ($77 | 0)) {
         $x28$0$lcssa = $185;
         $y$0$lcssa = $189;
         break;
        } else {
         $u29$0104 = $u29$0104 + 16 | 0;
         $v31$0105 = $v31$0105 + ($28 << 4) | 0;
         $x28$0102 = $185;
         $y$0103 = $189;
        }
       }
      } else {
       $x28$0$lcssa = 0.0;
       $y$0$lcssa = 0.0;
      }
      HEAPF64[$zv33$1112 >> 3] = $x28$0$lcssa;
      HEAPF64[$zv33$1112 + 8 >> 3] = $y$0$lcssa;
      $i36$0113 = $i36$0113 + 1 | 0;
      if (($i36$0113 | 0) == ($28 | 0)) break; else $zv33$1112 = $zv33$1112 + 16 | 0;
     }
     $zv33$1$lcssa = $zv33$0119 + ($28 << 4) | 0;
    } else $zv33$1$lcssa = $zv33$0119;
    $i34$0120 = $i34$0120 + 1 | 0;
    if (($i34$0120 | 0) == ($17 | 0)) {
     $z$0 = $52;
     break;
    } else {
     $uu30$0117 = $uu30$0117 + ($77 << 4) | 0;
     $zv33$0119 = $zv33$1$lcssa;
    }
   }
  } else $z$0 = $52;
 } else if (($5 | 0) == 1) {
  $58 = HEAP32[$0 >> 2] | 0;
  $60 = HEAP32[$58 + 12 >> 2] | 0;
  $63 = $58 + ($60 + 4 + ($60 & 1) << 2) + $10 | 0;
  $64 = HEAP32[$1 >> 2] | 0;
  $66 = HEAP32[$64 + 12 >> 2] | 0;
  $69 = $64 + ($66 + 4 + ($66 & 1) << 2) + $20 | 0;
  $71 = HEAP32[$52 + 12 >> 2] | 0;
  $$sum25 = $71 + 4 + ($71 & 1) | 0;
  $74 = $52 + ($$sum25 + $44 << 2) | 0;
  _memset($52 + ($$sum25 << 2) | 0, 0, $44 << 2 | 0) | 0;
  if (($17 | 0) > 0) {
   $79 = 0 - $28 | 0;
   $80 = ($28 | 0) > 0;
   if (($77 | 0) > 0) {
    $81 = 0 - $77 | 0;
    $i$045$us = 0;
    $u$049$us = $63;
    $zv$046$us = $74;
    while (1) {
     if ($80) {
      $i1$040$us$us = 0;
      $u$142$us$us = $u$049$us;
      $v$041$us$us = $69;
      while (1) {
       $u$142$us$us = $u$142$us$us + -1 | 0;
       if (HEAP8[$u$142$us$us >> 0] | 0) {
        $i3$037$us$us = 0;
        $v$139$us$us = $v$041$us$us;
        $x$038$us$us = $zv$046$us;
        do {
         $v$139$us$us = $v$139$us$us + -1 | 0;
         $x$038$us$us = $x$038$us$us + -4 | 0;
         HEAP32[$x$038$us$us >> 2] = (HEAP32[$x$038$us$us >> 2] | 0) + (HEAP8[$v$139$us$us >> 0] | 0);
         $i3$037$us$us = $i3$037$us$us + 1 | 0;
        } while (($i3$037$us$us | 0) != ($28 | 0));
       }
       $i1$040$us$us = $i1$040$us$us + 1 | 0;
       if (($i1$040$us$us | 0) == ($77 | 0)) break; else $v$041$us$us = $v$041$us$us + $79 | 0;
      }
     }
     $i$045$us = $i$045$us + 1 | 0;
     if (($i$045$us | 0) == ($17 | 0)) {
      $z$0 = $52;
      break;
     } else {
      $u$049$us = $u$049$us + $81 | 0;
      $zv$046$us = $zv$046$us + ($79 << 2) | 0;
     }
    }
   } else $z$0 = $52;
  } else $z$0 = $52;
 } else $z$0 = $52;
 $$0 = _gc($z$0, $4) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _qsort($base, $nel, $width, $cmp) {
 $base = $base | 0;
 $nel = $nel | 0;
 $width = $width | 0;
 $cmp = $cmp | 0;
 var $$ = 0, $$0$be$i = 0, $$0$be$i19 = 0, $$0$i44 = 0, $$01$be$i = 0, $$01$be$i18 = 0, $$012$i = 0, $$012$i15 = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$us$i = 0, $$02$us$i30 = 0, $$03$i = 0, $$03$i14 = 0, $$67 = 0, $$lcssa = 0, $$lcssa102 = 0, $$lcssa70 = 0, $$lcssa71 = 0, $$sum = 0, $0 = 0, $10 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $112 = 0, $113 = 0, $117 = 0, $122 = 0, $126 = 0, $13 = 0, $132 = 0, $135 = 0, $137 = 0, $139 = 0, $14 = 0, $144 = 0, $145 = 0, $152 = 0, $154 = 0, $155 = 0, $157 = 0, $16 = 0, $160 = 0, $164 = 0, $168 = 0, $19 = 0, $20 = 0, $23 = 0, $24 = 0, $31 = 0, $32 = 0, $36 = 0, $38 = 0, $4 = 0, $4$phi = 0, $44 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $55 = 0, $6 = 0, $62 = 0, $63 = 0, $66 = 0, $67 = 0, $74 = 0, $75 = 0, $79 = 0, $81 = 0, $87 = 0, $90 = 0, $91 = 0, $97 = 0, $ar$i = 0, $head$0$lcssa = 0, $head$076 = 0, $head$174 = 0, $i$0 = 0, $i$0$lcssa$i = 0, $i$0$lcssa$i23 = 0, $i$01$us$i = 0, $i$01$us$i28 = 0, $i$04$i = 0, $i$04$i13 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $pshift$0$lcssa = 0, $pshift$077 = 0, $pshift$1 = 0, $pshift$275 = 0, $tmp$i25 = 0, label = 0, sp = 0, $44$looptemp = 0, $i$01$us$i$looptemp = 0, $87$looptemp = 0, $i$01$us$i28$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 688 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $tmp$i25 = sp + 424 | 0;
 $ar$i = sp + 192 | 0;
 $lp = sp;
 $0 = Math_imul($width, $nel) | 0;
 if (!$0) {
  STACKTOP = sp;
  return;
 }
 $$sum = $0 - $width | 0;
 HEAP32[$lp + 4 >> 2] = $width;
 HEAP32[$lp >> 2] = $width;
 $4 = $width;
 $6 = $width;
 $i$0 = 2;
 while (1) {
  $5 = $4 + $width + $6 | 0;
  HEAP32[$lp + ($i$0 << 2) >> 2] = $5;
  if ($5 >>> 0 < $0 >>> 0) {
   $4$phi = $6;
   $6 = $5;
   $i$0 = $i$0 + 1 | 0;
   $4 = $4$phi;
  } else break;
 }
 $10 = 0 - $width | 0;
 $11 = $base + $$sum | 0;
 if (($$sum | 0) > 0) {
  $13 = ($width | 0) == 0;
  $14 = $11;
  $16 = 1;
  $51 = 0;
  $head$076 = $base;
  $pshift$077 = 1;
  while (1) {
   do if (($16 & 3 | 0) == 3) {
    HEAP32[$ar$i >> 2] = $head$076;
    L13 : do if (($pshift$077 | 0) > 1) {
     $$012$i = $pshift$077;
     $$03$i = $head$076;
     $24 = $head$076;
     $i$04$i = 1;
     while (1) {
      $19 = $$03$i + $10 | 0;
      $20 = $$012$i + -2 | 0;
      $23 = $$03$i + (0 - ((HEAP32[$lp + ($20 << 2) >> 2] | 0) + $width)) | 0;
      if ((ftCall_iii($cmp | 0, $24 | 0, $23 | 0) | 0) > -1) if ((ftCall_iii($cmp | 0, $24 | 0, $19 | 0) | 0) > -1) {
       $i$0$lcssa$i = $i$04$i;
       break;
      }
      $31 = $i$04$i + 1 | 0;
      $32 = $ar$i + ($i$04$i << 2) | 0;
      if ((ftCall_iii($cmp | 0, $23 | 0, $19 | 0) | 0) > -1) {
       HEAP32[$32 >> 2] = $23;
       $$0$be$i = $23;
       $$01$be$i = $$012$i + -1 | 0;
      } else {
       HEAP32[$32 >> 2] = $19;
       $$0$be$i = $19;
       $$01$be$i = $20;
      }
      if (($$01$be$i | 0) <= 1) {
       $i$0$lcssa$i = $31;
       break;
      }
      $$012$i = $$01$be$i;
      $$03$i = $$0$be$i;
      $24 = HEAP32[$ar$i >> 2] | 0;
      $i$04$i = $31;
     }
     if (($i$0$lcssa$i | 0) >= 2) {
      $36 = $ar$i + ($i$0$lcssa$i << 2) | 0;
      HEAP32[$36 >> 2] = $tmp$i25;
      if (!$13) {
       $$02$us$i = $width;
       $48 = $tmp$i25;
       while (1) {
        $38 = $$02$us$i >>> 0 > 256 ? 256 : $$02$us$i;
        $47 = HEAP32[$ar$i >> 2] | 0;
        _memcpy($48 | 0, $47 | 0, $38 | 0) | 0;
        $44 = $47;
        $i$01$us$i = 0;
        do {
         $i$01$us$i$looptemp = $i$01$us$i;
         $i$01$us$i = $i$01$us$i + 1 | 0;
         $44$looptemp = $44;
         $44 = HEAP32[$ar$i + ($i$01$us$i << 2) >> 2] | 0;
         _memcpy($44$looptemp | 0, $44 | 0, $38 | 0) | 0;
         HEAP32[$ar$i + ($i$01$us$i$looptemp << 2) >> 2] = $44$looptemp + $38;
        } while (($i$01$us$i | 0) != ($i$0$lcssa$i | 0));
        if (($$02$us$i | 0) == ($38 | 0)) break L13;
        $$02$us$i = $$02$us$i - $38 | 0;
        $48 = HEAP32[$36 >> 2] | 0;
       }
      }
     }
    } else {} while (0);
    $105 = $16 >>> 2 | $51 << 30;
    $168 = $51 >>> 2;
    $pshift$1 = $pshift$077 + 2 | 0;
   } else {
    $55 = $pshift$077 + -1 | 0;
    if ((HEAP32[$lp + ($55 << 2) >> 2] | 0) >>> 0 < ($14 - $head$076 | 0) >>> 0) {
     HEAP32[$ar$i >> 2] = $head$076;
     L38 : do if (($pshift$077 | 0) > 1) {
      $$012$i15 = $pshift$077;
      $$03$i14 = $head$076;
      $67 = $head$076;
      $i$04$i13 = 1;
      while (1) {
       $62 = $$03$i14 + $10 | 0;
       $63 = $$012$i15 + -2 | 0;
       $66 = $$03$i14 + (0 - ((HEAP32[$lp + ($63 << 2) >> 2] | 0) + $width)) | 0;
       if ((ftCall_iii($cmp | 0, $67 | 0, $66 | 0) | 0) > -1) if ((ftCall_iii($cmp | 0, $67 | 0, $62 | 0) | 0) > -1) {
        $i$0$lcssa$i23 = $i$04$i13;
        break;
       }
       $74 = $i$04$i13 + 1 | 0;
       $75 = $ar$i + ($i$04$i13 << 2) | 0;
       if ((ftCall_iii($cmp | 0, $66 | 0, $62 | 0) | 0) > -1) {
        HEAP32[$75 >> 2] = $66;
        $$0$be$i19 = $66;
        $$01$be$i18 = $$012$i15 + -1 | 0;
       } else {
        HEAP32[$75 >> 2] = $62;
        $$0$be$i19 = $62;
        $$01$be$i18 = $63;
       }
       if (($$01$be$i18 | 0) <= 1) {
        $i$0$lcssa$i23 = $74;
        break;
       }
       $$012$i15 = $$01$be$i18;
       $$03$i14 = $$0$be$i19;
       $67 = HEAP32[$ar$i >> 2] | 0;
       $i$04$i13 = $74;
      }
      if (($i$0$lcssa$i23 | 0) >= 2) {
       $79 = $ar$i + ($i$0$lcssa$i23 << 2) | 0;
       HEAP32[$79 >> 2] = $tmp$i25;
       if (!$13) {
        $$02$us$i30 = $width;
        $91 = $tmp$i25;
        while (1) {
         $81 = $$02$us$i30 >>> 0 > 256 ? 256 : $$02$us$i30;
         $90 = HEAP32[$ar$i >> 2] | 0;
         _memcpy($91 | 0, $90 | 0, $81 | 0) | 0;
         $87 = $90;
         $i$01$us$i28 = 0;
         do {
          $i$01$us$i28$looptemp = $i$01$us$i28;
          $i$01$us$i28 = $i$01$us$i28 + 1 | 0;
          $87$looptemp = $87;
          $87 = HEAP32[$ar$i + ($i$01$us$i28 << 2) >> 2] | 0;
          _memcpy($87$looptemp | 0, $87 | 0, $81 | 0) | 0;
          HEAP32[$ar$i + ($i$01$us$i28$looptemp << 2) >> 2] = $87$looptemp + $81;
         } while (($i$01$us$i28 | 0) != ($i$0$lcssa$i23 | 0));
         if (($$02$us$i30 | 0) == ($81 | 0)) break L38;
         $$02$us$i30 = $$02$us$i30 - $81 | 0;
         $91 = HEAP32[$79 >> 2] | 0;
        }
       }
      }
     } else {} while (0);
    } else _trinkle($head$076, $width, $cmp, $16, $51, $pshift$077, 0, $lp);
    if (($pshift$077 | 0) == 1) {
     $105 = $16 << 1;
     $168 = $16 >>> 31 | $51 << 1;
     $pshift$1 = 0;
     break;
    } else {
     $97 = $55 >>> 0 > 31;
     $$ = $97 ? 0 : $16;
     $$67 = $97 ? $pshift$077 + -33 | 0 : $55;
     $105 = $$ << $$67;
     $168 = $$ >>> (32 - $$67 | 0) | ($97 ? $16 : $51) << $$67;
     $pshift$1 = 1;
     break;
    }
   } while (0);
   $104 = $105 | 1;
   $106 = $head$076 + $width | 0;
   if ($106 >>> 0 < $11 >>> 0) {
    $16 = $104;
    $51 = $168;
    $head$076 = $106;
    $pshift$077 = $pshift$1;
   } else {
    $$lcssa70 = $168;
    $$lcssa71 = $104;
    $head$0$lcssa = $106;
    $pshift$0$lcssa = $pshift$1;
    break;
   }
  }
 } else {
  $$lcssa70 = 0;
  $$lcssa71 = 1;
  $head$0$lcssa = $base;
  $pshift$0$lcssa = 1;
 }
 _trinkle($head$0$lcssa, $width, $cmp, $$lcssa71, $$lcssa70, $pshift$0$lcssa, 0, $lp);
 if (($$lcssa70 | 0) == 0 & (($$lcssa71 | 0) == 1 & ($pshift$0$lcssa | 0) == 1)) {
  STACKTOP = sp;
  return;
 } else {
  $113 = $$lcssa71;
  $122 = $$lcssa70;
  $head$174 = $head$0$lcssa;
  $pshift$275 = $pshift$0$lcssa;
 }
 while (1) {
  if (($pshift$275 | 0) >= 2) {
   $137 = $113 >>> 30;
   $139 = $pshift$275 + -2 | 0;
   $144 = ($113 << 1 & 2147483646 | $137 << 31) ^ 3;
   $145 = ($137 | $122 << 2) >>> 1;
   _trinkle($head$174 + (0 - ((HEAP32[$lp + ($139 << 2) >> 2] | 0) + $width)) | 0, $width, $cmp, $144, $145, $pshift$275 + -1 | 0, 1, $lp);
   $152 = $145 << 1 | $137 & 1;
   $154 = $144 << 1 | 1;
   $155 = $head$174 + $10 | 0;
   _trinkle($155, $width, $cmp, $154, $152, $139, 1, $lp);
   $113 = $154;
   $122 = $152;
   $head$174 = $155;
   $pshift$275 = $139;
   continue;
  }
  $112 = $113 + -1 | 0;
  do if (!$112) {
   $135 = 32;
   label = 56;
  } else {
   if (!($112 & 1)) {
    $$02$i$i = $112;
    $nTrailingZeros$03$i$i = 0;
    while (1) {
     $117 = $nTrailingZeros$03$i$i + 1 | 0;
     $$02$i$i = $$02$i$i >>> 1;
     if ($$02$i$i & 1) {
      $$lcssa = $117;
      break;
     } else $nTrailingZeros$03$i$i = $117;
    }
    if (!$$lcssa) label = 51; else $132 = $$lcssa;
   } else label = 51;
   if ((label | 0) == 51) {
    label = 0;
    if (!$122) {
     $135 = 64;
     label = 56;
     break;
    }
    if (!($122 & 1)) {
     $$02$i3$i = $122;
     $nTrailingZeros$03$i2$i = 0;
    } else {
     $$0$i44 = 0;
     $157 = $113;
     $160 = $122;
     $164 = 0;
     break;
    }
    while (1) {
     $126 = $nTrailingZeros$03$i2$i + 1 | 0;
     $$02$i3$i = $$02$i3$i >>> 1;
     if ($$02$i3$i & 1) {
      $$lcssa102 = $126;
      $nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
      break;
     } else $nTrailingZeros$03$i2$i = $126;
    }
    if (!$$lcssa102) {
     $$0$i44 = 0;
     $157 = $113;
     $160 = $122;
     $164 = 0;
     break;
    } else $132 = $nTrailingZeros$03$i2$i$lcssa + 33 | 0;
   }
   if ($132 >>> 0 > 31) {
    $135 = $132;
    label = 56;
   } else {
    $$0$i44 = $132;
    $157 = $113;
    $160 = $122;
    $164 = $132;
   }
  } while (0);
  if ((label | 0) == 56) {
   label = 0;
   $$0$i44 = $135 + -32 | 0;
   $157 = $122;
   $160 = 0;
   $164 = $135;
  }
  $113 = $160 << 32 - $$0$i44 | $157 >>> $$0$i44;
  $122 = $160 >>> $$0$i44;
  $pshift$275 = $164 + $pshift$275 | 0;
  if (($122 | 0) == 0 & (($113 | 0) == 1 & ($pshift$275 | 0) == 1)) break; else $head$174 = $head$174 + $10 | 0;
 }
 STACKTOP = sp;
 return;
}

function _ope($w) {
 $w = $w | 0;
 var $$0 = 0, $$0$i = 0, $$lcssa71 = 0, $$sum1 = 0, $$sum12 = 0, $$sum3 = 0, $$sum3$i19 = 0, $$sum4 = 0, $101 = 0, $103 = 0, $105 = 0, $106 = 0, $112 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $125 = 0, $130 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $144 = 0, $147 = 0, $148 = 0, $149 = 0, $152 = 0, $153 = 0, $155 = 0, $16 = 0, $160 = 0, $161 = 0, $163 = 0, $167 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $181 = 0, $184 = 0, $19 = 0, $2 = 0, $33 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $45 = 0, $47 = 0, $5 = 0, $6 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $75 = 0, $78 = 0, $80 = 0, $82 = 0, $83 = 0, $85 = 0, $89 = 0, $9 = 0, $90 = 0, $94 = 0, $d$0$lcssa$i = 0, $d$025$i = 0, $d$112$us$i = 0, $i$014$us$i = 0, $i$044 = 0, $i$06$i = 0, $i1$0$neg26$i = 0, $i1$024$i = 0, $i2$016$i = 0, $i3$036 = 0, $i4$013$us$i = 0, $i5$034 = 0, $i7$033 = 0, $kv$i = 0, $p$0$lcssa$i = 0, $q$0$ = 0, $q$0$lcssa = 0, $q$045 = 0, $q$08$us$i = 0, $r$0$lcssa = 0, $r$043 = 0, $s$09$us$i = 0, $t$0$lcssa = 0, $t$042 = 0, $t$1 = 0, $u$010$us$i = 0, $v$015$us$i = 0, $wv$05$i = 0, $x$030 = 0, $y$011$us$i = 0, $zv$04$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $kv$i = sp;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!$w) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $4 = $w + 8 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $w + 12 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $$sum1 = $7 + 4 + ($7 & 1) | 0;
 $9 = $w + ($$sum1 << 2) | 0;
 if (!$5) {
  $$0 = _cvt(1, $w) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $12 = HEAP32[$w >> 2] | 0;
 if (($12 | 0) == 32) {
  if (!$7) {
   $$0 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $33 = ($5 | 0) > 0;
  L16 : do if ($33) {
   $i$044 = 0;
   $q$045 = 127;
   $r$043 = 0;
   $t$042 = 0;
   while (1) {
    $36 = HEAP32[$w + ($i$044 + $$sum1 << 2) >> 2] | 0;
    $38 = HEAP32[$36 + 12 >> 2] | 0;
    $q$0$ = ($q$045 | 0) < ($38 | 0) ? $q$045 : $38;
    $41 = ($r$043 | 0) > ($38 | 0) ? $r$043 : $38;
    if (!(HEAP32[$36 + 8 >> 2] | 0)) $t$1 = $t$042; else {
     $45 = HEAP32[$36 >> 2] | 0;
     $47 = ($t$042 | 0) != 0 ? $t$042 : $45;
     if (($47 | 0) != ($45 | 0)) if (($45 & 29 | 0) == 0 | ($47 & 29 | 0) == 0) if (($45 & 96 | 0) == 0 | ($47 & 96 | 0) == 0) break;
     $t$1 = ($47 | 0) > ($45 | 0) ? $47 : $45;
    }
    $i$044 = $i$044 + 1 | 0;
    if (($i$044 | 0) >= ($5 | 0)) {
     $q$0$lcssa = $q$0$;
     $r$0$lcssa = $41;
     $t$0$lcssa = $t$1;
     break L16;
    } else {
     $q$045 = $q$0$;
     $r$043 = $41;
     $t$042 = $t$1;
    }
   }
   _jsignal(3);
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else {
   $q$0$lcssa = 127;
   $r$0$lcssa = 0;
   $t$0$lcssa = 0;
  } while (0);
  $62 = ($t$0$lcssa | 0) < 1 ? 1 : $t$0$lcssa;
  $63 = _apv($r$0$lcssa, 1, 0) | 0;
  if (!$63) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $65 = $63 + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $$sum3 = $66 + 4 + ($66 & 1) | 0;
  $68 = $63 + ($$sum3 << 2) | 0;
  $$sum4 = $$sum3 + $r$0$lcssa | 0;
  if (($q$0$lcssa | 0) > 0) {
   $75 = $q$0$lcssa << 2;
   _memset($63 + (($r$0$lcssa + $66 + ($66 & 1) << 2) + 16 - $75) | 0, 0, $75 | 0) | 0;
  }
  if ($33) {
   $i3$036 = 0;
   do {
    $78 = HEAP32[$w + ($i3$036 + $$sum1 << 2) >> 2] | 0;
    $80 = HEAP32[$78 + 12 >> 2] | 0;
    $$sum12 = $$sum4 - $80 | 0;
    if (($80 | 0) > 0) {
     $i5$034 = 0;
     do {
      $82 = $63 + ($$sum12 + $i5$034 << 2) | 0;
      $83 = HEAP32[$82 >> 2] | 0;
      $85 = HEAP32[$78 + 16 + ($i5$034 << 2) >> 2] | 0;
      HEAP32[$82 >> 2] = ($83 | 0) > ($85 | 0) ? $83 : $85;
      $i5$034 = $i5$034 + 1 | 0;
     } while (($i5$034 | 0) != ($80 | 0));
    }
    $i3$036 = $i3$036 + 1 | 0;
   } while (($i3$036 | 0) != ($5 | 0));
  }
  $89 = _prod($r$0$lcssa, $68) | 0;
  $90 = Math_imul($89, $5) | 0;
  $94 = _ga($62, $90, (HEAP32[$6 >> 2] | 0) + $r$0$lcssa | 0, $w + 16 | 0) | 0;
  if (!$94) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  _memcpy($94 + 16 + (HEAP32[$6 >> 2] << 2) | 0, $68 | 0, $r$0$lcssa << 2 | 0) | 0;
  if ($89) {
   $101 = HEAP32[$94 + 12 >> 2] | 0;
   $103 = $94 + ($101 + 4 + ($101 & 1) << 2) | 0;
   $105 = HEAP32[$94 + 8 >> 2] | 0;
   $106 = _bp($62) | 0;
   do if (!($62 & 29)) {
    if ($62 & 2) {
     _memset($103 | 0, 32, $105 | 0) | 0;
     break;
    }
    $112 = Math_imul($106, $105) | 0;
    if (!($62 & 32)) {
     HEAP32[$kv$i >> 2] = HEAP32[660];
     HEAP32[$kv$i + 4 >> 2] = HEAP32[616];
     $118 = $kv$i;
    } else $118 = 2464;
    _mvc($112, $103, $106, $118);
   } else _memset($103 | 0, 0, Math_imul($106, $105) | 0) | 0; while (0);
   $120 = Math_imul(_bp($62) | 0, $89) | 0;
   if ($33) {
    $121 = $63 + 8 | 0;
    $i7$033 = 0;
    $x$030 = $103;
    while (1) {
     $123 = HEAP32[$w + ($i7$033 + $$sum1 << 2) >> 2] | 0;
     $125 = HEAP32[$123 + 8 >> 2] | 0;
     if (($89 | 0) == ($125 | 0)) if (($62 | 0) == (HEAP32[$123 >> 2] | 0)) {
      $130 = HEAP32[$123 + 12 >> 2] | 0;
      _memcpy($x$030 | 0, $123 + ($130 + 4 + ($130 & 1) << 2) | 0, $120 | 0) | 0;
     } else label = 42; else label = 42;
     L64 : do if ((label | 0) == 42) {
      label = 0;
      if ($125) {
       if (($62 | 0) == (HEAP32[$123 >> 2] | 0)) {
        $138 = $123;
        $140 = $62;
        $147 = $125;
       } else {
        $136 = _cvt($62, $123) | 0;
        $138 = $136;
        $140 = HEAP32[$136 >> 2] | 0;
        $147 = HEAP32[$136 + 8 >> 2] | 0;
       }
       $137 = $138 + 12 | 0;
       $139 = HEAP32[$137 >> 2] | 0;
       $141 = _bp($140) | 0;
       $142 = HEAP32[$137 >> 2] | 0;
       $144 = $138 + ($142 + 4 + ($142 & 1) << 2) | 0;
       if (($139 | 0) < 2) {
        _memcpy($x$030 | 0, $144 | 0, Math_imul($141, $147) | 0) | 0;
        break;
       }
       $148 = HEAP32[$121 >> 2] | 0;
       $149 = HEAP32[$65 >> 2] | 0;
       $$sum3$i19 = $149 + 4 + ($149 & 1) | 0;
       $152 = $148 + -1 + $$sum3$i19 | 0;
       $153 = $139 + -1 | 0;
       $d$025$i = 1;
       $i1$0$neg26$i = 0;
       $i1$024$i = 0;
       while (1) {
        $155 = HEAP32[$63 + ($152 + $i1$0$neg26$i << 2) >> 2] | 0;
        if (($155 | 0) != (HEAP32[$138 + 16 + ($153 + $i1$0$neg26$i << 2) >> 2] | 0)) {
         $d$0$lcssa$i = $d$025$i;
         $p$0$lcssa$i = $i1$024$i;
         break;
        }
        $160 = Math_imul($155, $d$025$i) | 0;
        $161 = $i1$024$i + 1 | 0;
        if (($161 | 0) < ($139 | 0)) {
         $d$025$i = $160;
         $i1$0$neg26$i = ~$i1$024$i;
         $i1$024$i = $161;
        } else {
         $d$0$lcssa$i = $160;
         $p$0$lcssa$i = $161;
         break;
        }
       }
       $163 = $139 - $p$0$lcssa$i | 0;
       do if (($163 | 0) > 0) {
        $i2$016$i = 0;
        do {
         $167 = (HEAP32[$138 + 16 + ($i2$016$i << 2) >> 2] | 0) > 1;
         $i2$016$i = $i2$016$i + 1 | 0;
        } while (($i2$016$i | 0) < ($163 | 0) & ($167 ^ 1));
        if (!$167) break;
        $171 = Math_imul($d$0$lcssa$i, $141) | 0;
        $172 = ($147 | 0) / ($d$0$lcssa$i | 0) | 0;
        $173 = $138 + 16 + ($163 << 2) | 0;
        $174 = $63 + ($$sum3$i19 + $148 - $p$0$lcssa$i << 2) | 0;
        if (($172 | 0) > 0) {
         $i$014$us$i = 0;
         $v$015$us$i = $144;
        } else break L64;
        while (1) {
         $d$112$us$i = 1;
         $i4$013$us$i = 0;
         $q$08$us$i = $i$014$us$i;
         $s$09$us$i = $173;
         $u$010$us$i = $174;
         $y$011$us$i = 0;
         while (1) {
          $s$09$us$i = $s$09$us$i + -4 | 0;
          $181 = HEAP32[$s$09$us$i >> 2] | 0;
          $184 = (Math_imul(($q$08$us$i | 0) % ($181 | 0) | 0, $d$112$us$i) | 0) + $y$011$us$i | 0;
          $u$010$us$i = $u$010$us$i + -4 | 0;
          $d$112$us$i = Math_imul(HEAP32[$u$010$us$i >> 2] | 0, $d$112$us$i) | 0;
          $i4$013$us$i = $i4$013$us$i + 1 | 0;
          if (($i4$013$us$i | 0) == ($163 | 0)) {
           $$lcssa71 = $184;
           break;
          } else {
           $q$08$us$i = ($q$08$us$i | 0) / ($181 | 0) | 0;
           $y$011$us$i = $184;
          }
         }
         _memcpy($x$030 + (Math_imul($$lcssa71, $171) | 0) | 0, $v$015$us$i | 0, $171 | 0) | 0;
         $i$014$us$i = $i$014$us$i + 1 | 0;
         if (($i$014$us$i | 0) == ($172 | 0)) break L64; else $v$015$us$i = $v$015$us$i + $171 | 0;
        }
       } while (0);
       _memcpy($x$030 | 0, $144 | 0, Math_imul($141, $147) | 0) | 0;
      }
     } while (0);
     $i7$033 = $i7$033 + 1 | 0;
     if (($i7$033 | 0) == ($5 | 0)) break; else $x$030 = $x$030 + $120 | 0;
    }
   }
  }
  $$0 = _gc($94, $2) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else if (($12 | 0) == 64) {
  $14 = _ga(32, $5, $7, $w + 16 | 0) | 0;
  if (!$14) $$0$i = 0; else {
   $16 = HEAP32[$6 >> 2] | 0;
   $18 = HEAP32[$14 + 12 >> 2] | 0;
   $19 = HEAP32[$4 >> 2] | 0;
   if (($19 | 0) > 0) {
    $i$06$i = 0;
    $wv$05$i = $w + ($16 + 4 + ($16 & 1) << 2) | 0;
    $zv$04$i = $14 + ($18 + 4 + ($18 & 1) << 2) | 0;
    while (1) {
     HEAP32[$zv$04$i >> 2] = HEAP32[$wv$05$i + 4 >> 2];
     $i$06$i = $i$06$i + 1 | 0;
     if (($i$06$i | 0) == ($19 | 0)) {
      $$0$i = $14;
      break;
     } else {
      $wv$05$i = $wv$05$i + 8 | 0;
      $zv$04$i = $zv$04$i + 4 | 0;
     }
    }
   } else $$0$i = $14;
  }
  $$0 = _ope($$0$i) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$0 = _ca($w) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _jinit2($argc, $argv) {
 $argc = $argc | 0;
 $argv = $argv | 0;
 var $$0 = 0, $$sum11 = 0, $$sum26 = 0, $103 = 0, $106 = 0, $110 = 0, $113 = 0, $117 = 0, $120 = 0, $122 = 0, $127 = 0, $130 = 0, $133 = 0, $135 = 0, $138 = 0, $141 = 0, $144 = 0, $147 = 0, $15 = 0, $150 = 0, $153 = 0, $156 = 0, $159 = 0, $162 = 0, $165 = 0, $168 = 0, $171 = 0, $174 = 0, $177 = 0, $180 = 0, $183 = 0, $186 = 0, $189 = 0, $192 = 0, $195 = 0, $200 = 0, $204 = 0, $23 = 0, $27 = 0, $31 = 0, $4 = 0, $41 = 0, $44 = 0, $47 = 0, $5 = 0, $51 = 0, $54 = 0, $58 = 0, $61 = 0, $65 = 0, $68 = 0, $7 = 0, $72 = 0, $75 = 0, $79 = 0, $83 = 0, $89 = 0, $92 = 0, $96 = 0, $99 = 0, $i$057 = 0, $i$155 = 0, $i$253 = 0, $i1$052 = 0, $n$0$lcssa63 = 0, $n$054 = 0, $n$1 = 0, $n$1$lcssa = 0, $p = 0, $s$051 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $p = sp;
 _memcpy($p | 0, 744, 256) | 0;
 HEAPF64[328] = +_tod();
 HEAP32[2120] = 0;
 $4 = (_isatty(_fileno(HEAP32[_stdin >> 2] | 0) | 0) | 0) & 255;
 $5 = ($argc | 0) > 1;
 if ($5) {
  $i$057 = 1;
  do {
   $7 = HEAP32[$argv + ($i$057 << 2) >> 2] | 0;
   if ((HEAP8[$7 >> 0] | 0) == 47) if ((HEAP8[$7 + 1 >> 0] | 0) == 115) HEAP8[2616] = 0;
   $i$057 = $i$057 + 1 | 0;
  } while (($i$057 | 0) != ($argc | 0));
  if ($5) {
   $i$155 = 1;
   $n$054 = 0;
   while (1) {
    $15 = HEAP32[$argv + ($i$155 << 2) >> 2] | 0;
    if ((HEAP8[$15 >> 0] | 0) == 47) $n$1 = (HEAP8[$15 + 1 >> 0] | 0) == 110 ? 1 : $n$054; else $n$1 = $n$054;
    $i$155 = $i$155 + 1 | 0;
    if (($i$155 | 0) == ($argc | 0)) {
     $n$1$lcssa = $n$1;
     break;
    } else $n$054 = $n$1;
   }
   if ($5) {
    $i$253 = 1;
    do {
     $23 = HEAP32[$argv + ($i$253 << 2) >> 2] | 0;
     if ((HEAP8[$23 >> 0] | 0) != 47) _strcpy($p | 0, $23 | 0) | 0;
     $i$253 = $i$253 + 1 | 0;
    } while (($i$253 | 0) != ($argc | 0));
    $n$0$lcssa63 = $n$1$lcssa;
   } else $n$0$lcssa63 = $n$1$lcssa;
  } else $n$0$lcssa63 = 0;
 } else $n$0$lcssa63 = 0;
 _sesminit() | 0;
 _symbinit() | 0;
 $27 = _ga(2, 256, 1, 0) | 0;
 HEAP32[626] = $27;
 if (!$27) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$27 + 4 >> 2] = 1073741823;
 $31 = HEAP32[$27 + 12 >> 2] | 0;
 $i1$052 = 0;
 $s$051 = $27 + ($31 + 4 + ($31 & 1) << 2) | 0;
 while (1) {
  HEAP8[$s$051 >> 0] = $i1$052;
  $i1$052 = $i1$052 + 1 | 0;
  if (($i1$052 | 0) == 256) break; else $s$051 = $s$051 + 1 | 0;
 }
 HEAP32[3888 + (HEAPU8[5728] << 4) + 4 >> 2] = HEAP32[626];
 $41 = _ga(1, 0, 1, 0) | 0;
 HEAP32[616] = $41;
 if (!$41) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$41 + 4 >> 2] = 1073741823;
 $44 = _ga(2, 0, 1, 0) | 0;
 HEAP32[640] = $44;
 if (!$44) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$44 + 4 >> 2] = 1073741823;
 $47 = _ga(1, 1, 0, 0) | 0;
 HEAP32[660] = $47;
 if (!$47) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$47 + 4 >> 2] = 1073741823;
 $51 = HEAP32[$47 + 12 >> 2] | 0;
 HEAP8[$47 + ($51 + 4 + ($51 & 1) << 2) >> 0] = 0;
 $54 = _ga(1, 1, 0, 0) | 0;
 HEAP32[646] = $54;
 if (!$54) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$54 + 4 >> 2] = 1073741823;
 $58 = HEAP32[$54 + 12 >> 2] | 0;
 HEAP8[$54 + ($58 + 4 + ($58 & 1) << 2) >> 0] = 1;
 $61 = _ga(2, 1, 0, 0) | 0;
 HEAP32[630] = $61;
 if (!$61) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$61 + 4 >> 2] = 1073741823;
 $65 = HEAP32[$61 + 12 >> 2] | 0;
 HEAP8[$61 + ($65 + 4 + ($65 & 1) << 2) >> 0] = 45;
 $68 = _ga(2, 1, 0, 0) | 0;
 HEAP32[632] = $68;
 if (!$68) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$68 + 4 >> 2] = 1073741823;
 $72 = HEAP32[$68 + 12 >> 2] | 0;
 HEAP8[$68 + ($72 + 4 + ($72 & 1) << 2) >> 0] = 10;
 $75 = _ga(16, 1, 0, 0) | 0;
 HEAP32[622] = $75;
 if (!$75) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$75 + 4 >> 2] = 1073741823;
 $79 = HEAP32[$75 + 12 >> 2] | 0;
 $$sum11 = $79 + 4 + ($79 & 1) | 0;
 HEAPF64[$75 + ($$sum11 << 2) >> 3] = 0.0;
 HEAPF64[$75 + ($$sum11 + 2 << 2) >> 3] = 1.0;
 $83 = _ga(32, 1, 0, 0) | 0;
 HEAP32[636] = $83;
 if (!$83) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$83 + 4 >> 2] = 1073741823;
 $89 = HEAP32[$83 + 12 >> 2] | 0;
 HEAP32[$83 + ($89 + 4 + ($89 & 1) << 2) >> 2] = HEAP32[616];
 $92 = _ga(4, 1, 0, 0) | 0;
 HEAP32[644] = $92;
 if (!$92) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$92 + 4 >> 2] = 1073741823;
 $96 = HEAP32[$92 + 12 >> 2] | 0;
 HEAP32[$92 + ($96 + 4 + ($96 & 1) << 2) >> 2] = -1;
 $99 = _ga(4, 1, 0, 0) | 0;
 HEAP32[658] = $99;
 if (!$99) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$99 + 4 >> 2] = 1073741823;
 $103 = HEAP32[$99 + 12 >> 2] | 0;
 HEAP32[$99 + ($103 + 4 + ($103 & 1) << 2) >> 2] = 2;
 $106 = _ga(16384, 1, 0, 0) | 0;
 HEAP32[620] = $106;
 if (!$106) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$106 + 4 >> 2] = 1073741823;
 $110 = HEAP32[$106 + 12 >> 2] | 0;
 HEAP32[$106 + ($110 + 4 + ($110 & 1) << 2) >> 2] = 0;
 $113 = _ga(8, 1, 0, 0) | 0;
 HEAP32[648] = $113;
 if (!$113) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$113 + 4 >> 2] = 1073741823;
 $117 = HEAP32[$113 + 12 >> 2] | 0;
 HEAPF64[$113 + ($117 + 4 + ($117 & 1) << 2) >> 3] = 3.141592653589793;
 $120 = _ga(1, 0, 2, 2432) | 0;
 HEAP32[638] = $120;
 if (!$120) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAPF64[52] = 5.6843418860808015e-14;
 HEAPF64[326] = 5.6843418860808015e-14;
 HEAPF64[317] = inf;
 $122 = _ga(8, 1, 0, 0) | 0;
 HEAP32[624] = $122;
 if (!$122) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$122 + 4 >> 2] = 1073741823;
 $127 = HEAP32[$122 + 12 >> 2] | 0;
 HEAPF64[$122 + ($127 + 4 + ($127 & 1) << 2) >> 3] = +HEAPF64[317];
 HEAPF64[321] = nan;
 $130 = _ga(32, 22, 1, 0) | 0;
 HEAP32[650] = $130;
 if (!$130) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $133 = HEAP32[$130 + 12 >> 2] | 0;
 $$sum26 = $133 + 4 + ($133 & 1) | 0;
 $135 = _cstr(1e3) | 0;
 HEAP32[$130 + ($$sum26 + 1 << 2) >> 2] = $135;
 if (!$135) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $138 = _cstr(1008) | 0;
 HEAP32[$130 + ($$sum26 + 2 << 2) >> 2] = $138;
 if (!$138) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $141 = _cstr(1024) | 0;
 HEAP32[$130 + ($$sum26 + 3 << 2) >> 2] = $141;
 if (!$141) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $144 = _cstr(1040) | 0;
 HEAP32[$130 + ($$sum26 + 4 << 2) >> 2] = $144;
 if (!$144) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $147 = _cstr(1056) | 0;
 HEAP32[$130 + ($$sum26 + 5 << 2) >> 2] = $147;
 if (!$147) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $150 = _cstr(1080) | 0;
 HEAP32[$130 + ($$sum26 + 6 << 2) >> 2] = $150;
 if (!$150) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $153 = _cstr(1096) | 0;
 HEAP32[$130 + ($$sum26 + 8 << 2) >> 2] = $153;
 if (!$153) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $156 = _cstr(1112) | 0;
 HEAP32[$130 + ($$sum26 + 7 << 2) >> 2] = $156;
 if (!$156) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $159 = _cstr(1128) | 0;
 HEAP32[$130 + ($$sum26 + 9 << 2) >> 2] = $159;
 if (!$159) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $162 = _cstr(1144) | 0;
 HEAP32[$130 + ($$sum26 + 10 << 2) >> 2] = $162;
 if (!$162) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $165 = _cstr(1160) | 0;
 HEAP32[$130 + ($$sum26 + 11 << 2) >> 2] = $165;
 if (!$165) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $168 = _cstr(1176) | 0;
 HEAP32[$130 + ($$sum26 + 12 << 2) >> 2] = $168;
 if (!$168) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $171 = _cstr(1200) | 0;
 HEAP32[$130 + ($$sum26 + 13 << 2) >> 2] = $171;
 if (!$171) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $174 = _cstr(1216) | 0;
 HEAP32[$130 + ($$sum26 + 14 << 2) >> 2] = $174;
 if (!$174) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $177 = _cstr(1232) | 0;
 HEAP32[$130 + ($$sum26 + 16 << 2) >> 2] = $177;
 if (!$177) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $180 = _cstr(1248) | 0;
 HEAP32[$130 + ($$sum26 + 18 << 2) >> 2] = $180;
 if (!$180) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $183 = _cstr(1264) | 0;
 HEAP32[$130 + ($$sum26 + 19 << 2) >> 2] = $183;
 if (!$183) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $186 = _cstr(1280) | 0;
 HEAP32[$130 + ($$sum26 + 20 << 2) >> 2] = $186;
 if (!$186) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $189 = _cstr(1296) | 0;
 HEAP32[$130 + ($$sum26 + 21 << 2) >> 2] = $189;
 if (!$189) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $192 = _cstr(1304) | 0;
 HEAP32[$130 + ($$sum26 + 17 << 2) >> 2] = $192;
 if (!$192) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $195 = _cstr(1312) | 0;
 HEAP32[$130 + ($$sum26 + 15 << 2) >> 2] = $195;
 if (!$195) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _ra(HEAP32[650] | 0) | 0;
 if (!($4 << 24 >> 24)) HEAP8[2400] = 0; else {
  _jouts(1328);
  _jputc(10);
  _jputc(10);
 }
 $200 = _fopen($p | 0, 8440) | 0;
 if (!$200) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _fclose($200 | 0) | 0;
 $204 = _box(_cstr($p) | 0) | 0;
 if (!($n$0$lcssa63 << 24 >> 24)) {
  _script1($204) | 0;
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  _sscript1($204) | 0;
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _thorn2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$0$i = 0, $$01$i = 0, $$1$i = 0, $$12$i = 0, $$2$i = 0, $$lcssa = 0, $$lcssa73 = 0, $$lcssa74 = 0, $$lcssa75 = 0, $$sum19 = 0, $$sum20 = 0, $101 = 0, $111 = 0, $113 = 0, $117 = 0, $119 = 0, $123 = 0, $126 = 0, $13 = 0, $133 = 0, $135 = 0, $138 = 0, $140 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $36 = 0, $42 = 0, $44 = 0, $45 = 0.0, $48 = 0.0, $50 = 0, $51 = 0, $66 = 0, $68 = 0, $70 = 0, $76 = 0, $77 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $89 = 0, $90 = 0, $91 = 0, $93 = 0, $94 = 0, $av$044 = 0, $av$1 = 0, $buf = 0, $e$043 = 0.0, $e$1 = 0.0, $i$046 = 0, $k$0$i = 0, $k$0$i$lcssa = 0, $k$1$ph$i = 0, $m$0$lcssa = 0, $m$047 = 0, $p = 0, $t$0$i = 0, $t$1$ph$i = 0, $t$2$i = 0, $t$2$i$lcssa = 0, $t$2$ph$i = 0, $t$3$lcssa$i = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $wd$049 = 0, $wd$1 = 0, $wv$048 = 0, $x$0$lcssa = 0, $x$045 = 0, $x$1$lcssa = 0, $z$050 = 0, $z$1$lcssa = 0, $z$133 = 0, $zn$051 = 0, $zn$1$lcssa = 0, $zn$134 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer12 = sp + 32 | 0;
 $vararg_buffer9 = sp + 24 | 0;
 $vararg_buffer6 = sp + 16 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 $buf = sp + 56 | 0;
 $p = sp + 40 | 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ((HEAP32[$a + 12 >> 2] | 0) <= 1) {
  $8 = $w + 12 | 0;
  if ((HEAP32[$8 >> 2] | 0) <= 1) {
   $13 = HEAP32[$a + 8 >> 2] | 0;
   $15 = HEAP32[$w + 8 >> 2] | 0;
   $17 = ($13 | 0) > ($15 | 0) ? $13 : $15;
   $19 = ($15 | 0) == 1;
   if (!(($15 | 0) == ($13 | 0) | (($13 | 0) == 1 | $19))) {
    _jsignal(9);
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $21 = HEAP32[$w >> 2] | 0;
   if ($19) $138 = 0; else $138 = _bp($21) | 0;
   if (!($21 & 29)) {
    _jsignal(3);
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $25 = _cvt(8, $a) | 0;
   if (!$25) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $28 = HEAP32[$25 + 12 >> 2] | 0;
   $29 = HEAP32[$8 >> 2] | 0;
   $30 = $17 * 20 | 0;
   $31 = _ga(2, $30, 1, 0) | 0;
   if (!$31) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $34 = HEAP32[$31 + 12 >> 2] | 0;
   $36 = $31 + ($34 + 4 + ($34 & 1) << 2) | 0;
   L24 : do if (($17 | 0) > 0) {
    $42 = ($13 | 0) > 1;
    $av$044 = $25 + ($28 + 4 + ($28 & 1) << 2) | 0;
    $e$043 = 0.0;
    $i$046 = 0;
    $m$047 = 0;
    $wd$049 = 0;
    $wv$048 = $w + ($29 + 4 + ($29 & 1) << 2) | 0;
    $x$045 = $36;
    $z$050 = $31;
    $zn$051 = $30;
    L26 : while (1) {
     do if ($42 | ($i$046 | 0) == 0) {
      $44 = $av$044 + 8 | 0;
      $45 = +HEAPF64[$av$044 >> 3];
      $48 = +_tfloor(+Math_abs(+$45) * 10.0);
      if (!($48 < 5.0e3)) break L26;
      $50 = ~~$48;
      $51 = ($50 | 0) / 10 | 0;
      if (!($45 >= 0.0)) {
       HEAP32[$vararg_buffer2 >> 2] = $51 + -1;
       HEAP32[$vararg_buffer2 + 4 >> 2] = ($50 | 0) % 10 | 0;
       _sprintf($p, 704, $vararg_buffer2) | 0;
       $av$1 = $44;
       $e$1 = $45;
       $wd$1 = $51;
       break;
      } else {
       HEAP32[$vararg_buffer >> 2] = $51;
       HEAP32[$vararg_buffer + 4 >> 2] = ($50 | 0) % 10 | 0;
       _sprintf($p, ($50 + 9 | 0) >>> 0 > 18 ? 672 : 688, $vararg_buffer) | 0;
       $av$1 = $44;
       $e$1 = $45;
       $wd$1 = $51;
       break;
      }
     } else {
      $av$1 = $av$044;
      $e$1 = $e$043;
      $wd$1 = $wd$049;
     } while (0);
     if (($21 | 0) == 1) {
      HEAPF64[$vararg_buffer6 >> 3] = +(HEAP8[$wv$048 >> 0] | 0);
      _sprintf($buf, $p, $vararg_buffer6) | 0;
     } else if (($21 | 0) == 4) {
      HEAPF64[$vararg_buffer9 >> 3] = +(HEAP32[$wv$048 >> 2] | 0);
      _sprintf($buf, $p, $vararg_buffer9) | 0;
     } else {
      HEAPF64[$vararg_buffer12 >> 3] = +HEAPF64[$wv$048 >> 3];
      _sprintf($buf, $p, $vararg_buffer12) | 0;
     }
     if ($zn$051 >>> 0 < ((_strlen($buf | 0) | 0) + $m$047 | 0) >>> 0) {
      $z$133 = $z$050;
      $zn$134 = $zn$051;
      while (1) {
       $66 = _over($z$133, $z$133) | 0;
       if (!$66) {
        $$0 = 0;
        label = 61;
        break L26;
       }
       $68 = $zn$134 << 1;
       $70 = HEAP32[$66 + 12 >> 2] | 0;
       if ($68 >>> 0 < ((_strlen($buf | 0) | 0) + $m$047 | 0) >>> 0) {
        $z$133 = $66;
        $zn$134 = $68;
       } else {
        $$lcssa = $68;
        $$lcssa73 = $66;
        $$lcssa74 = $70;
        break;
       }
      }
      $x$1$lcssa = $$lcssa73 + ($$lcssa74 + 4 + ($$lcssa74 & 1) << 2) | 0;
      $z$1$lcssa = $$lcssa73;
      $zn$1$lcssa = $$lcssa;
     } else {
      $x$1$lcssa = $x$045;
      $z$1$lcssa = $z$050;
      $zn$1$lcssa = $zn$051;
     }
     $76 = $x$1$lcssa + $m$047 | 0;
     $77 = ($wd$1 | 0) != 0;
     $83 = $e$1 >= 0.0 & (($wd$1 | $i$046 | 0) == 0 & (HEAP8[$buf >> 0] | 0) == 32) & 1;
     $84 = $buf + $83 | 0;
     $85 = _strspn($84, 3424) | 0;
     if (!$85) {
      $$0$i = $76;
      $$01$i = $84;
      $91 = $m$047;
      $93 = $83;
     } else {
      _memcpy($76 | 0, $84 | 0, $85 | 0) | 0;
      $$sum19 = $85 + $m$047 | 0;
      $$sum20 = $83 + $85 | 0;
      $$0$i = $x$1$lcssa + $$sum19 | 0;
      $$01$i = $buf + $$sum20 | 0;
      $91 = $$sum19;
      $93 = $$sum20;
     }
     $89 = HEAP8[$$01$i >> 0] | 0;
     $90 = $89 << 24 >> 24 == 45;
     if ($90) {
      HEAP8[$$0$i >> 0] = 95;
      $94 = $buf + ($93 + 1) | 0;
      $$1$i = $x$1$lcssa + ($91 + 1) | 0;
      $$12$i = $94;
      $101 = HEAP8[$94 >> 0] | 0;
     } else {
      $$1$i = $$0$i;
      $$12$i = $$01$i;
      $101 = $89;
     }
     do if ($101 << 24 >> 24 == 46) {
      HEAP8[$$1$i >> 0] = 48;
      $$2$i = $$1$i + 1 | 0;
      label = 42;
     } else if ($101 << 24 >> 24 == 110 | $101 << 24 >> 24 == 43 | $101 << 24 >> 24 == 105) {
      if (!$wd$1) $t$0$i = (HEAP8[$76 >> 0] | 0) == 32 ? $x$1$lcssa + ($m$047 + 1) | 0 : $76; else if (($wd$1 | 0) > 1) {
       _memset($76 | 0, 32, $wd$1 | 0) | 0;
       $t$0$i = $x$1$lcssa + ($m$047 + -2 + $wd$1) | 0;
      } else $t$0$i = $76;
      if ($101 << 24 >> 24 == 110) {
       HEAP8[$t$0$i >> 0] = HEAP8[720] | 0;
       HEAP8[$t$0$i + 1 >> 0] = HEAP8[721] | 0;
       HEAP8[$t$0$i + 2 >> 0] = HEAP8[722] | 0;
       break;
      } else {
       _strcpy($t$0$i + (($wd$1 | 0) > 1 & ($90 ^ 1) & 1) | 0, ($90 ? 728 : 736) | 0) | 0;
       break;
      }
     } else {
      $$2$i = $$1$i;
      label = 42;
     } while (0);
     do if ((label | 0) == 42) {
      label = 0;
      _memcpy($$2$i | 0, $$12$i | 0, (_strlen($$12$i | 0) | 0) + 1 | 0) | 0;
      $111 = _strchr($$2$i, 101) | 0;
      if ($111) {
       $113 = $111 + 1 | 0;
       if ((HEAP8[$113 >> 0] | 0) == 45) {
        HEAP8[$113 >> 0] = 95;
        $117 = 2;
        $123 = 3;
        $t$1$ph$i = $111 + 2 | 0;
       } else {
        $117 = 1;
        $123 = 2;
        $t$1$ph$i = $113;
       }
       $k$0$i = 0;
       while (1) {
        $119 = HEAP8[$111 + ($k$0$i + $117) >> 0] | 0;
        if (!($119 << 24 >> 24 == 43 | $119 << 24 >> 24 == 48)) {
         $$lcssa75 = $119;
         $k$0$i$lcssa = $k$0$i;
         break;
        }
        $k$0$i = $k$0$i + 1 | 0;
       }
       if ($k$0$i$lcssa) {
        if ($$lcssa75 << 24 >> 24 == 32 | $$lcssa75 << 24 >> 24 == 0) {
         HEAP8[$t$1$ph$i >> 0] = 48;
         $k$1$ph$i = $k$0$i$lcssa + -1 | 0;
         $t$2$ph$i = $111 + $123 | 0;
        } else {
         $k$1$ph$i = $k$0$i$lcssa;
         $t$2$ph$i = $t$1$ph$i;
        }
        $t$2$i = $t$2$ph$i;
        while (1) {
         $126 = HEAP8[$t$2$i + $k$1$ph$i >> 0] | 0;
         HEAP8[$t$2$i >> 0] = $126;
         if (!($126 << 24 >> 24)) {
          $t$2$i$lcssa = $t$2$i;
          break;
         } else $t$2$i = $t$2$i + 1 | 0;
        }
        if (!$wd$1) break;
        $133 = $76 + $wd$1 - $t$2$i$lcssa | 0;
        if (($133 | 0) > 0) {
         _memset($t$2$i$lcssa | 0, 32, $133 | 0) | 0;
         $t$3$lcssa$i = $t$2$i$lcssa + $133 | 0;
        } else $t$3$lcssa$i = $t$2$i$lcssa;
        HEAP8[$t$3$lcssa$i >> 0] = 0;
       }
      }
     } while (0);
     $135 = _strlen($76 | 0) | 0;
     if ($77 & ($wd$1 | 0) < ($135 | 0)) _memset($76 | 0, 42, $wd$1 | 0) | 0;
     $140 = ($77 ? $wd$1 : $135) + $m$047 | 0;
     $i$046 = $i$046 + 1 | 0;
     if (($i$046 | 0) >= ($17 | 0)) {
      $m$0$lcssa = $140;
      $x$0$lcssa = $x$1$lcssa;
      break L24;
     } else {
      $av$044 = $av$1;
      $e$043 = $e$1;
      $m$047 = $140;
      $wd$049 = $wd$1;
      $wv$048 = $wv$048 + $138 | 0;
      $x$045 = $x$1$lcssa;
      $z$050 = $z$1$lcssa;
      $zn$051 = $zn$1$lcssa;
     }
    }
    if ((label | 0) == 61) {
     STACKTOP = sp;
     return $$0 | 0;
    }
    _jsignal(10);
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    $m$0$lcssa = 0;
    $x$0$lcssa = $36;
   } while (0);
   HEAP8[$x$0$lcssa + $m$0$lcssa >> 0] = 0;
   $$0 = _gc(_str($m$0$lcssa, $x$0$lcssa) | 0, $2) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $$0 = _rank2ex($a, $w, 0, 1, 1, 147) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _colon($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$0255 = 0, $$03 = 0, $$1 = 0, $$14 = 0, $$2 = 0, $$25 = 0, $$3 = 0, $$36 = 0, $$4 = 0, $$5 = 0, $$6 = 0, $$7 = 0, $$lcssa = 0, $$lcssa127 = 0, $$lcssa98 = 0, $10 = 0, $106 = 0, $11 = 0, $116 = 0, $121 = 0, $127 = 0, $137 = 0, $14 = 0, $140 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $151 = 0, $155 = 0, $156 = 0, $159 = 0, $167 = 0, $17 = 0, $177 = 0, $181 = 0, $186 = 0, $19 = 0, $196 = 0, $198 = 0, $200 = 0, $203 = 0, $205 = 0, $208 = 0, $210 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $30 = 0, $48 = 0, $62 = 0, $64 = 0, $67 = 0, $71 = 0, $74 = 0, $75 = 0, $77 = 0, $78 = 0, $79 = 0, $82 = 0, $84 = 0, $87 = 0, $91 = 0, $94 = 0, $ha$0 = 0, $hw$0 = 0, $or$cond15 = 0, $p$0 = 0, $p$1$ph52 = 0, $p$148 = 0, $p$148$lcssa = 0, $p$3 = 0, $p$3$lcssa = 0, $r$0$ph53 = 0, $r$1$lcssa = 0, $r$1$ph = 0, $r$143 = 0, $x$0$ph = 0, $x$0$ph79 = 0, label = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 L4 : do if (!(HEAP32[$a + 12 >> 2] | 0)) if (!(HEAP32[$a >> 2] & 29)) $$1 = $a; else if (!(_i0($a) | 0)) {
  $10 = HEAP32[640] | 0;
  $11 = _jgets(8424) | 0;
  if (!(HEAP8[2472] | 0)) {
   $$0255 = $10;
   $14 = $11;
  } else {
   $$0 = 0;
   return $$0 | 0;
  }
  while (1) {
   if (!$14) {
    $$1 = $$0255;
    break L4;
   }
   $17 = HEAP32[$14 + 12 >> 2] | 0;
   $19 = $14 + ($17 + 4 + ($17 & 1) << 2) | 0;
   if ((HEAP8[$19 >> 0] | 0) == 41) {
    $p$0 = $19;
    while (1) {
     $22 = $p$0 + 1 | 0;
     $23 = HEAP8[$22 >> 0] | 0;
     if ($23 << 24 >> 24 == 32) $p$0 = $22; else if (!($23 << 24 >> 24)) {
      $$1 = $$0255;
      break L4;
     } else break;
    }
   }
   $24 = _over($$0255, $14) | 0;
   $$0255 = _over($24, HEAP32[632] | 0) | 0;
   $14 = _jgets(8424) | 0;
   if (HEAP8[2472] | 0) {
    $$0 = 0;
    break;
   }
  }
  return $$0 | 0;
 } else $$1 = $a; else $$1 = $a; while (0);
 $30 = $w + 12 | 0;
 L19 : do if (!(HEAP32[$30 >> 2] | 0)) {
  do if (HEAP32[$w >> 2] & 29) if ((_i0($w) | 0) == 4) {
   $$0 = $$1;
   return $$0 | 0;
  } else if (!(HEAP32[$30 >> 2] | 0)) break; else {
   $$03 = $w;
   $$4 = $$1;
   break L19;
  } while (0);
  if (!(HEAP32[$w >> 2] & 29)) {
   $$03 = $w;
   $$4 = $$1;
  } else if (!(_i0($w) | 0)) {
   if (HEAP32[$$1 >> 2] & 2) {
    $48 = HEAP32[$$1 + 12 >> 2] | 0;
    if (($48 | 0) < 3) {
     if (($48 | 0) == 2) $$2 = _ravel(_overr($$1, _scc(10) | 0) | 0) | 0; else $$2 = $$1;
     if (!(HEAP32[$$2 + 8 >> 2] | 0)) label = 23; else if ((_cl($$2) | 0) << 24 >> 24 == 10) $$3 = $$2; else label = 23;
     if ((label | 0) == 23) $$3 = _over($$2, _scc(10) | 0) | 0;
     $62 = HEAP32[$$3 + 12 >> 2] | 0;
     $64 = $$3 + ($62 + 4 + ($62 & 1) << 2) | 0;
     $67 = $64 + (HEAP32[$$3 + 8 >> 2] | 0) | 0;
     L40 : do if ($64 >>> 0 < $67 >>> 0) {
      $p$1$ph52 = $64;
      $r$0$ph53 = $67;
      L41 : while (1) {
       $p$148 = $p$1$ph52;
       while (1) {
        $71 = HEAP8[$p$148 >> 0] | 0;
        if ($71 << 24 >> 24 == 58) {
         $p$148$lcssa = $p$148;
         break;
        }
        $74 = $p$148 + 1 | 0;
        if ($71 << 24 >> 24 == 10) $$lcssa98 = $74; else {
         $75 = $74;
         while (1) {
          $77 = $75 + 1 | 0;
          if ((HEAP8[$75 >> 0] | 0) == 10) {
           $$lcssa98 = $77;
           break;
          } else $75 = $77;
         }
        }
        if ($$lcssa98 >>> 0 < $67 >>> 0) $p$148 = $$lcssa98; else {
         $r$1$ph = $r$0$ph53;
         $x$0$ph = $67;
         break L41;
        }
       }
       $p$3 = $p$148$lcssa;
       while (1) {
        $78 = $p$3 + 1 | 0;
        $79 = HEAP8[$78 >> 0] | 0;
        if ($79 << 24 >> 24 == 32) $p$3 = $78; else if ($79 << 24 >> 24 == 10) {
         $r$1$ph = $p$148$lcssa;
         $x$0$ph = $p$148$lcssa;
         break L41;
        } else {
         $p$3$lcssa = $p$3;
         break;
        }
       }
       $82 = $p$3$lcssa + 2 | 0;
       while (1) {
        $84 = $82 + 1 | 0;
        if ((HEAP8[$82 >> 0] | 0) == 10) {
         $$lcssa127 = $84;
         break;
        } else $82 = $84;
       }
       if ($$lcssa127 >>> 0 < $67 >>> 0) {
        $p$1$ph52 = $$lcssa127;
        $r$0$ph53 = $p$148$lcssa;
       } else {
        $r$1$ph = $p$148$lcssa;
        $x$0$ph = $67;
        break;
       }
      }
      if ($r$1$ph >>> 0 < $67 >>> 0) {
       $r$143 = $r$1$ph;
       while (1) {
        if ((HEAP8[$r$143 >> 0] | 0) == 10) {
         $$lcssa = 1;
         $r$1$lcssa = $r$143;
         $x$0$ph79 = $x$0$ph;
         break L40;
        }
        $87 = $r$143 + 1 | 0;
        if ($87 >>> 0 < $67 >>> 0) $r$143 = $87; else {
         $$lcssa = 0;
         $r$1$lcssa = $87;
         $x$0$ph79 = $x$0$ph;
         break;
        }
       }
      } else {
       $$lcssa = 0;
       $r$1$lcssa = $r$1$ph;
       $x$0$ph79 = $x$0$ph;
      }
     } else {
      $$lcssa = 0;
      $r$1$lcssa = $67;
      $x$0$ph79 = $67;
     } while (0);
     $91 = $64;
     $94 = _drop(_sc(($$lcssa ? $r$1$lcssa + 1 | 0 : $r$1$lcssa) - $91 | 0) | 0, $$3) | 0;
     $$03 = $94;
     $$4 = _take(_sc($x$0$ph79 - $91 | 0) | 0, $$3) | 0;
     break;
    }
   }
   _jsignal(3);
   $$0 = 0;
   return $$0 | 0;
  } else {
   $$03 = $w;
   $$4 = $$1;
  }
 } else {
  $$03 = $w;
  $$4 = $$1;
 } while (0);
 if (!(HEAP32[$$4 + 8 >> 2] | 0)) $$6 = $$4; else if (!(HEAP32[$$4 >> 2] & 2)) $$6 = $$4; else {
  $106 = HEAP32[$$4 + 12 >> 2] | 0;
  if (($106 | 0) < 2) if (!(_strchr($$4 + ($106 + 4 + ($106 & 1) << 2) | 0, 10) | 0)) $$6 = $$4; else {
   if ((_cl($$4) | 0) << 24 >> 24 == 10) $$5 = $$4; else $$5 = _over($$4, _scc(10) | 0) | 0;
   $116 = _ds(60) | 0;
   $$6 = _df1($$5, _cut($116, _sc(-2) | 0) | 0) | 0;
  } else $$6 = $$4;
 }
 $121 = HEAP32[$$03 + 8 >> 2] | 0;
 if (!$121) {
  $$25 = $$03;
  $147 = 0;
 } else if (!(HEAP32[$$03 >> 2] & 2)) {
  $$25 = $$03;
  $147 = $121;
 } else {
  $127 = HEAP32[$$03 + 12 >> 2] | 0;
  if (($127 | 0) < 2) if (!(_strchr($$03 + ($127 + 4 + ($127 & 1) << 2) | 0, 10) | 0)) {
   $$25 = $$03;
   $147 = $121;
  } else {
   if ((_cl($$03) | 0) << 24 >> 24 == 10) $$14 = $$03; else $$14 = _over($$03, _scc(10) | 0) | 0;
   $137 = _ds(60) | 0;
   $140 = _df1($$14, _cut($137, _sc(-2) | 0) | 0) | 0;
   $$25 = $140;
   $147 = HEAP32[$140 + 8 >> 2] | 0;
  } else {
   $$25 = $$03;
   $147 = $121;
  }
 }
 $142 = HEAP32[$$6 + 8 >> 2] | 0;
 $143 = HEAP32[$$6 >> 2] | 0;
 $144 = $143 & 127;
 $145 = HEAP32[$$25 >> 2] | 0;
 $146 = $145 & 127;
 $148 = ($147 | 0) != 0;
 $or$cond15 = ($145 & 29 | 0) == 0 | $148 ^ 1;
 do if (!$or$cond15) {
  $151 = _i0($$25) | 0;
  if (($151 | 0) == 21) {
   $$0 = _xtrans(0, $$6) | 0;
   return $$0 | 0;
  } else if (($151 | 0) == 22) {
   $$0 = _xtrans(1, $$6) | 0;
   return $$0 | 0;
  } else if (($151 | 0) == 20) {
   $$0 = _vtrans($$6) | 0;
   return $$0 | 0;
  } else break;
 } while (0);
 $155 = HEAP32[636] | 0;
 $156 = _over($155, $155) | 0;
 if (!$156) {
  $$0 = 0;
  return $$0 | 0;
 }
 do if (!$144) {
  $$7 = $$6;
  $ha$0 = $156;
 } else {
  $159 = $$6 + 12 | 0;
  if ((HEAP32[$159 >> 2] | 0) > ((($143 | 0) == 2 ? 2 : 1) | 0)) {
   _jsignal(14);
   $$0 = 0;
   return $$0 | 0;
  }
  if (!$142) {
   $$7 = $$6;
   $ha$0 = $156;
  } else {
   if (!($143 & 34)) {
    _jsignal(3);
    $$0 = 0;
    return $$0 | 0;
   }
   $167 = _preparse($$6) | 0;
   if (!$167) {
    $$0 = 0;
    return $$0 | 0;
   }
   if (!($143 & 32)) {
    if ((HEAP32[$159 >> 2] | 0) >= 2) {
     $$7 = $$6;
     $ha$0 = $167;
     break;
    }
    $177 = _lamin1(_rankle($$6) | 0) | 0;
   } else $177 = _ope(_rankle($$6) | 0) | 0;
   if (!$177) {
    $$0 = 0;
    return $$0 | 0;
   } else {
    $$7 = $177;
    $ha$0 = $167;
   }
  }
 } while (0);
 do if ($148 & ($145 & 34 | 0) == 0) {
  $$36 = $$25;
  $hw$0 = $156;
 } else {
  $181 = $$25 + 12 | 0;
  if ((HEAP32[$181 >> 2] | 0) > ((($145 | 0) == 2 ? 2 : 1) | 0)) {
   _jsignal(14);
   $$0 = 0;
   return $$0 | 0;
  }
  if ($148) {
   $186 = _preparse($$25) | 0;
   if (!$186) {
    $$0 = 0;
    return $$0 | 0;
   }
   if (!($145 & 32)) {
    if ((HEAP32[$181 >> 2] | 0) >= 2) {
     $$36 = $$25;
     $hw$0 = $186;
     break;
    }
    $196 = _lamin1(_rankle($$25) | 0) | 0;
   } else $196 = _ope(_rankle($$25) | 0) | 0;
   if (!$196) {
    $$0 = 0;
    return $$0 | 0;
   } else {
    $$36 = $196;
    $hw$0 = $186;
   }
  } else {
   $$36 = $$25;
   $hw$0 = $156;
  }
 } while (0);
 $198 = _over($ha$0, $hw$0) | 0;
 if (!$198) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ($or$cond15) {
  $203 = ($144 | 0) != 0;
  $205 = ($146 | 0) != 0;
  if ($203) $210 = 127; else $210 = _mr($$7) | 0;
  if ($205) {
   $211 = 127;
   $212 = 127;
  } else {
   $208 = _lr($$36) | 0;
   $211 = $208;
   $212 = _rr($$36) | 0;
  }
  $$0 = _fdef(58, 128, $203 ? 341 : 340, $205 ? 343 : 342, $$7, $$36, $198, 0, $210, $211, $212) | 0;
  return $$0 | 0;
 }
 $200 = _i0($$36) | 0;
 if (($200 | 0) == 1) {
  $$0 = _fdef(58, 256, 338, 0, $$7, $$36, $198, 0, 0, 0, 0) | 0;
  return $$0 | 0;
 } else if (($200 | 0) == 2) {
  $$0 = _fdef(58, 512, 0, 339, $$7, $$36, $198, 0, 0, 0, 0) | 0;
  return $$0 | 0;
 } else {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function _cut1x($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$ = 0, $$0 = 0, $$lobit = 0, $$sum13 = 0, $$sum2 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $103 = 0, $106 = 0, $113 = 0, $115 = 0, $116 = 0, $117 = 0, $121 = 0, $124 = 0, $126 = 0, $13 = 0, $134 = 0, $147 = 0, $149 = 0, $152 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $4 = 0, $41 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $53 = 0, $59 = 0, $6 = 0, $63 = 0, $65 = 0, $67 = 0, $72 = 0, $73 = 0, $76 = 0, $79 = 0, $8 = 0, $82 = 0, $85 = 0, $88 = 0, $91 = 0, $94 = 0, $98 = 0, $c$0$lcssa = 0, $c$043 = 0, $c$1 = 0, $i$037 = 0, $i$037$us = 0, $i1$046 = 0, $m$0$lcssa = 0, $m$044 = 0, $m$1 = 0, $p$039 = 0, $p$039$us = 0, $p$1$us = 0, $q$0$lcssa = 0, $q$045 = 0, $q$1 = 0, $q$2$us = 0, $u$035 = 0, $u$035$us = 0, $u$1$us = 0, $z$0 = 0, $za$0 = 0, $za$138 = 0, $za$138$us = 0, $za$2 = 0, $za$2$us = 0, $zc$0 = 0, $zc$136 = 0, $zc$136$us = 0, $zc$2 = 0, $zc$2$us = 0, $zi$0 = 0, $zi$140 = 0, $zi$140$us = 0, $zi$2 = 0, $zi$2$us = 0, label = 0, $u$035$looptemp = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $2 = $1 & 1;
 $$sum2 = $1 + 4 + $2 | 0;
 $4 = HEAP32[$self + ($$sum2 + 2 << 2) >> 2] | 0;
 $6 = HEAP32[$self + ($$sum2 + 3 << 2) >> 2] | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $8 = HEAP32[$w >> 2] | 0;
 $10 = HEAP32[$w + 12 >> 2] | 0;
 if (!$10) $26 = 0; else {
  $13 = HEAP32[$w + 16 >> 2] | 0;
  if (!$13) {
   $$0 = HEAP32[616] | 0;
   return $$0 | 0;
  }
  if (($8 & 1027 | 0) == 0 | ($10 | 0) != 1) $26 = $10; else {
   $41 = HEAP32[$6 + 12 >> 2] | 0;
   $44 = HEAP32[$6 + ($41 + 4 + ($41 & 1) << 2) >> 2] | 0;
   $$lobit = $44 >>> 31;
   $47 = ($44 | 0) == 1 | ($44 | 0) == -1;
   $$ = $47 & ($$lobit | 0) != 0;
   $48 = $w + 24 | 0;
   $49 = $47 & 1;
   $53 = HEAP8[$48 + ($47 ? 0 : $13 + -1 | 0) >> 0] | 0;
   if (($13 | 0) > 0) {
    $c$043 = 0;
    $i1$046 = 0;
    $m$044 = 0;
    $q$045 = -1;
    while (1) {
     if ($53 << 24 >> 24 == (HEAP8[$48 + $i1$046 >> 0] | 0)) {
      $59 = $i1$046 - $q$045 | 0;
      $c$1 = ($c$043 | 0) > ($59 | 0) ? $c$043 : $59;
      $m$1 = $m$044 + 1 | 0;
      $q$1 = $i1$046;
     } else {
      $c$1 = $c$043;
      $m$1 = $m$044;
      $q$1 = $q$045;
     }
     $i1$046 = $i1$046 + 1 | 0;
     if (($i1$046 | 0) == ($13 | 0)) {
      $c$0$lcssa = $c$1;
      $m$0$lcssa = $m$1;
      $q$0$lcssa = $q$1;
      break;
     } else {
      $c$043 = $c$1;
      $m$044 = $m$1;
      $q$045 = $q$1;
     }
    }
   } else {
    $c$0$lcssa = 0;
    $m$0$lcssa = 0;
    $q$0$lcssa = -1;
   }
   $63 = $13 - $q$0$lcssa | 0;
   $65 = (($c$0$lcssa | 0) > ($63 | 0) ? $c$0$lcssa : $63) - $$lobit | 0;
   $67 = HEAP32[$4 + 12 >> 2] | 0;
   $72 = HEAP8[$4 + ($67 + 4 + ($67 & 1) << 2) + 31 >> 0] | 0;
   L18 : do switch ($72 | 0) {
   case 35:
    {
     $79 = _ga(4, $m$0$lcssa, 1, 0) | 0;
     if (!$79) {
      $$0 = 0;
      return $$0 | 0;
     } else {
      $82 = HEAP32[$79 + 12 >> 2] | 0;
      $106 = $82;
      $z$0 = $79;
      $za$0 = 0;
      $zc$0 = 0;
      $zi$0 = $79 + ($82 + 4 + ($82 & 1) << 2) | 0;
      break L18;
     }
     break;
    }
   case 36:
    {
     $73 = _ga(4, $m$0$lcssa, 2, 0) | 0;
     if (!$73) {
      $$0 = 0;
      return $$0 | 0;
     } else {
      $76 = HEAP32[$73 + 12 >> 2] | 0;
      $106 = $76;
      $z$0 = $73;
      $za$0 = 0;
      $zc$0 = 0;
      $zi$0 = $73 + ($76 + 4 + ($76 & 1) << 2) | 0;
      break L18;
     }
     break;
    }
   case -83:
   case -84:
    {
     $91 = _ga($8, $m$0$lcssa, 1, 0) | 0;
     if (!$91) {
      $$0 = 0;
      return $$0 | 0;
     } else {
      $94 = HEAP32[$91 + 12 >> 2] | 0;
      $106 = $94;
      $z$0 = $91;
      $za$0 = 0;
      $zc$0 = $91 + ($94 + 4 + ($94 & 1) << 2) | 0;
      $zi$0 = 0;
      break L18;
     }
     break;
    }
   case 60:
    {
     $85 = _ga(32, $m$0$lcssa, 1, 0) | 0;
     if (!$85) {
      $$0 = 0;
      return $$0 | 0;
     } else {
      $88 = HEAP32[$85 + 12 >> 2] | 0;
      $106 = $88;
      $z$0 = $85;
      $za$0 = $85 + ($88 + 4 + ($88 & 1) << 2) | 0;
      $zc$0 = 0;
      $zi$0 = 0;
      break L18;
     }
     break;
    }
   default:
    {
     $98 = _ga($8, Math_imul($65, $m$0$lcssa) | 0, 2, 0) | 0;
     if (!$98) {
      $$0 = 0;
      return $$0 | 0;
     } else {
      $100 = $98 + 12 | 0;
      $101 = HEAP32[$100 >> 2] | 0;
      $103 = $98 + ($101 + 4 + ($101 & 1) << 2) | 0;
      _fillv($8, HEAP32[$98 + 8 >> 2] | 0, $103);
      $106 = HEAP32[$100 >> 2] | 0;
      $z$0 = $98;
      $za$0 = 0;
      $zc$0 = $103;
      $zi$0 = 0;
      break L18;
     }
    }
   } while (0);
   if (($106 | 0) == 2) {
    HEAP32[$z$0 + 16 >> 2] = $m$0$lcssa;
    HEAP32[$z$0 + 20 >> 2] = (HEAP32[$z$0 + 8 >> 2] | 0) / ($m$0$lcssa | 0) | 0;
   }
   $113 = $$ & 1;
   if (($m$0$lcssa | 0) < 1) {
    $$0 = $z$0;
    return $$0 | 0;
   }
   $$sum13 = ($$ ^ 1) << 31 >> 31;
   $115 = $53 << 24 >> 24;
   $116 = $49 ^ 1;
   if (($44 | 0) == 1 | ($44 | 0) == -1) {
    $i$037$us = 1;
    $p$039$us = $13;
    $u$035$us = $48;
    $za$138$us = $za$0;
    $zc$136$us = $zc$0;
    $zi$140$us = $zi$0;
   } else {
    $i$037 = 1;
    $p$039 = $13;
    $u$035 = $48;
    $za$138 = $za$0;
    $zc$136 = $zc$0;
    $zi$140 = $zi$0;
    L47 : while (1) {
     $u$035$looptemp = $u$035;
     $u$035 = (_memchr($u$035 + $49 | 0, $115, $p$039 - $49 | 0) | 0) + $116 | 0;
     $147 = $u$035 - $u$035$looptemp | 0;
     $p$039 = $p$039 - $147 | 0;
     $149 = $147 - $$lobit | 0;
     switch ($72 | 0) {
     case -84:
      {
       HEAP8[$zc$136 >> 0] = HEAP8[$u$035$looptemp + $113 >> 0] | 0;
       $za$2 = $za$138;
       $zc$2 = $zc$136 + 1 | 0;
       $zi$2 = $zi$140;
       break;
      }
     case -83:
      {
       HEAP8[$zc$136 >> 0] = HEAP8[$u$035$looptemp + ($$sum13 + $149) >> 0] | 0;
       $za$2 = $za$138;
       $zc$2 = $zc$136 + 1 | 0;
       $zi$2 = $zi$140;
       break;
      }
     case 35:
     case 36:
      {
       HEAP32[$zi$140 >> 2] = $149;
       $za$2 = $za$138;
       $zc$2 = $zc$136;
       $zi$2 = $zi$140 + 4 | 0;
       break;
      }
     case 60:
      {
       $152 = _str($149, $u$035$looptemp + $113 | 0) | 0;
       HEAP32[$za$138 >> 2] = $152;
       if (!$152) {
        $$0 = 0;
        label = 45;
        break L47;
       } else {
        $za$2 = $za$138 + 4 | 0;
        $zc$2 = $zc$136;
        $zi$2 = $zi$140;
       }
       break;
      }
     default:
      {
       _memcpy($zc$136 | 0, $u$035$looptemp + $113 | 0, $149 | 0) | 0;
       $za$2 = $za$138;
       $zc$2 = $zc$136 + $65 | 0;
       $zi$2 = $zi$140;
      }
     }
     if (($i$037 | 0) >= ($m$0$lcssa | 0)) {
      $$0 = $z$0;
      label = 45;
      break;
     } else {
      $i$037 = $i$037 + 1 | 0;
      $za$138 = $za$2;
      $zc$136 = $zc$2;
      $zi$140 = $zi$2;
     }
    }
    if ((label | 0) == 45) return $$0 | 0;
   }
   L59 : while (1) {
    $117 = ($i$037$us | 0) < ($m$0$lcssa | 0);
    if ($117) {
     $121 = (_memchr($u$035$us + $49 | 0, $115, $p$039$us - $49 | 0) | 0) + $116 | 0;
     $124 = $121 - $u$035$us | 0;
     $p$1$us = $p$039$us - $124 | 0;
     $q$2$us = $124;
     $u$1$us = $121;
    } else {
     $p$1$us = $p$039$us;
     $q$2$us = $p$039$us;
     $u$1$us = $u$035$us;
    }
    $126 = $q$2$us - $$lobit | 0;
    switch ($72 | 0) {
    case -83:
     {
      HEAP8[$zc$136$us >> 0] = HEAP8[$u$035$us + ($$sum13 + $126) >> 0] | 0;
      $za$2$us = $za$138$us;
      $zc$2$us = $zc$136$us + 1 | 0;
      $zi$2$us = $zi$140$us;
      break;
     }
    case 60:
     {
      $134 = _str($126, $u$035$us + $113 | 0) | 0;
      HEAP32[$za$138$us >> 2] = $134;
      if (!$134) {
       $$0 = 0;
       label = 45;
       break L59;
      } else {
       $za$2$us = $za$138$us + 4 | 0;
       $zc$2$us = $zc$136$us;
       $zi$2$us = $zi$140$us;
      }
      break;
     }
    case 35:
    case 36:
     {
      HEAP32[$zi$140$us >> 2] = $126;
      $za$2$us = $za$138$us;
      $zc$2$us = $zc$136$us;
      $zi$2$us = $zi$140$us + 4 | 0;
      break;
     }
    case -84:
     {
      HEAP8[$zc$136$us >> 0] = HEAP8[$u$035$us + $113 >> 0] | 0;
      $za$2$us = $za$138$us;
      $zc$2$us = $zc$136$us + 1 | 0;
      $zi$2$us = $zi$140$us;
      break;
     }
    default:
     {
      _memcpy($zc$136$us | 0, $u$035$us + $113 | 0, $126 | 0) | 0;
      $za$2$us = $za$138$us;
      $zc$2$us = $zc$136$us + $65 | 0;
      $zi$2$us = $zi$140$us;
     }
    }
    if ($117) {
     $i$037$us = $i$037$us + 1 | 0;
     $p$039$us = $p$1$us;
     $u$035$us = $u$1$us;
     $za$138$us = $za$2$us;
     $zc$136$us = $zc$2$us;
     $zi$140$us = $zi$2$us;
    } else {
     $$0 = $z$0;
     label = 45;
     break;
    }
   }
   if ((label | 0) == 45) return $$0 | 0;
  }
 }
 $20 = HEAP32[$self + ($1 + 7 + $2 << 2) >> 2] | 0;
 $22 = HEAP32[$20 + 12 >> 2] | 0;
 $25 = HEAP32[$20 + ($22 + 4 + ($22 & 1) << 2) >> 2] | 0;
 if ($26) if (!(HEAP32[$w + 16 >> 2] | 0)) {
  $$0 = HEAP32[616] | 0;
  return $$0 | 0;
 }
 $$0 = _cut2(_eps($w, _take(($25 | 0) == 1 | ($25 | 0) == -1 ? HEAP32[646] | 0 : HEAP32[644] | 0, $w) | 0) | 0, $w, $self) | 0;
 return $$0 | 0;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0;
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do if (!$d_sroa_0_0_extract_trunc) {
  if ($17) {
   if ($rem) {
    HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  if (!$n_sroa_0_0_extract_trunc) {
   if ($rem) {
    HEAP32[$rem >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
  if (!($37 & $d_sroa_1_4_extract_trunc)) {
   if ($rem) {
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
   }
   $_0$1 = 0;
   $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
  if ($51 >>> 0 <= 30) {
   $57 = $51 + 1 | 0;
   $58 = 31 - $51 | 0;
   $sr_1_ph = $57;
   $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
   $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
   $q_sroa_0_1_ph = 0;
   $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
   break;
  }
  if (!$rem) {
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  HEAP32[$rem >> 2] = $a$0 | 0;
  HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
  $_0$1 = 0;
  $_0$0 = 0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 } else {
  if (!$17) {
   $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($119 >>> 0 <= 31) {
    $125 = $119 + 1 | 0;
    $126 = 31 - $119 | 0;
    $130 = $119 - 31 >> 31;
    $sr_1_ph = $125;
    $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
    break;
   }
   if (!$rem) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
  if ($66 & $d_sroa_0_0_extract_trunc) {
   $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   $89 = 64 - $88 | 0;
   $91 = 32 - $88 | 0;
   $92 = $91 >> 31;
   $95 = $88 - 32 | 0;
   $105 = $95 >> 31;
   $sr_1_ph = $88;
   $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
   $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
   $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
   $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
   break;
  }
  if ($rem) {
   HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
   HEAP32[$rem + 4 >> 2] = 0;
  }
  if (($d_sroa_0_0_extract_trunc | 0) == 1) {
   $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$0 = $a$0 | 0 | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
   $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
   $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = tempRet0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
   $150$1 = tempRet0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $carry_0203 = $151$0 & 1;
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
   $r_sroa_1_1200 = tempRet0;
   $sr_1202 = $sr_1202 - 1 | 0;
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198;
  $q_sroa_0_1_lcssa = $q_sroa_0_1199;
  $r_sroa_1_1_lcssa = $r_sroa_1_1200;
  $r_sroa_0_1_lcssa = $r_sroa_0_1201;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $carry_0203;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if ($rem) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}

function _trinkle($head, $width, $cmp, $pp$val, $pp$1$val, $pshift, $trusty, $lp) {
 $head = $head | 0;
 $width = $width | 0;
 $cmp = $cmp | 0;
 $pp$val = $pp$val | 0;
 $pp$1$val = $pp$1$val | 0;
 $pshift = $pshift | 0;
 $trusty = $trusty | 0;
 $lp = $lp | 0;
 var $$0$be$i = 0, $$0$i = 0, $$0$lcssa = 0, $$0$lcssa49 = 0, $$01$be$i = 0, $$01162 = 0, $$01162$phi = 0, $$012$i = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$lcssa = 0, $$02$lcssa51 = 0, $$02$us$i = 0, $$02$us$i10 = 0, $$02964 = 0, $$03$i = 0, $$03$lcssa = 0, $$03865 = 0, $$lcssa = 0, $$lcssa76 = 0, $0 = 0, $102 = 0, $108 = 0, $111 = 0, $112 = 0, $113 = 0, $15 = 0, $16 = 0, $22 = 0, $24 = 0, $28 = 0, $33 = 0, $37 = 0, $43 = 0, $46 = 0, $48 = 0, $51 = 0, $54 = 0, $55 = 0, $62 = 0, $67 = 0, $7 = 0, $70 = 0, $76 = 0, $79 = 0, $80 = 0, $82 = 0, $83 = 0, $86 = 0, $87 = 0, $94 = 0, $95 = 0, $99 = 0, $ar = 0, $ar$i = 0, $i$0$lcssa = 0, $i$0$lcssa$i = 0, $i$0$lcssa50 = 0, $i$01$us$i = 0, $i$01$us$i8 = 0, $i$01063 = 0, $i$04$i = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $pp$val1666 = 0, $tmp$i5 = 0, label = 0, sp = 0, $76$looptemp = 0, $i$01$us$i8$looptemp = 0, $108$looptemp = 0, $i$01$us$i$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $tmp$i5 = sp + 456 | 0;
 $ar$i = sp + 228 | 0;
 $ar = sp;
 HEAP32[$ar >> 2] = $head;
 $0 = 0 - $width | 0;
 L1 : do if (($pp$1$val | 0) != 0 | ($pp$val | 0) != 1) {
  $7 = $head + (0 - (HEAP32[$lp + ($pshift << 2) >> 2] | 0)) | 0;
  if ((ftCall_iii($cmp | 0, $7 | 0, $head | 0) | 0) < 1) {
   $$0$lcssa = $head;
   $$02$lcssa = $pshift;
   $$03$lcssa = $trusty;
   $i$0$lcssa = 1;
   label = 18;
  } else {
   $$01162 = $head;
   $$02964 = $pshift;
   $$03865 = $trusty;
   $16 = $7;
   $33 = $pp$1$val;
   $i$01063 = 1;
   $pp$val1666 = $pp$val;
   while (1) {
    if (($$03865 | 0) == 0 & ($$02964 | 0) > 1) {
     $15 = HEAP32[$lp + ($$02964 + -2 << 2) >> 2] | 0;
     if ((ftCall_iii($cmp | 0, $$01162 + $0 | 0, $16 | 0) | 0) > -1) {
      $$0$lcssa49 = $$01162;
      $$02$lcssa51 = $$02964;
      $i$0$lcssa50 = $i$01063;
      break L1;
     }
     if ((ftCall_iii($cmp | 0, $$01162 + (0 - ($15 + $width)) | 0, $16 | 0) | 0) > -1) {
      $$0$lcssa49 = $$01162;
      $$02$lcssa51 = $$02964;
      $i$0$lcssa50 = $i$01063;
      break L1;
     }
    }
    $22 = $i$01063 + 1 | 0;
    HEAP32[$ar + ($i$01063 << 2) >> 2] = $16;
    $24 = $pp$val1666 + -1 | 0;
    do if (!$24) {
     $46 = 32;
     label = 15;
    } else {
     if (!($24 & 1)) {
      $$02$i$i = $24;
      $nTrailingZeros$03$i$i = 0;
      while (1) {
       $28 = $nTrailingZeros$03$i$i + 1 | 0;
       $$02$i$i = $$02$i$i >>> 1;
       if ($$02$i$i & 1) {
        $$lcssa = $28;
        break;
       } else $nTrailingZeros$03$i$i = $28;
      }
      if (!$$lcssa) label = 10; else $43 = $$lcssa;
     } else label = 10;
     if ((label | 0) == 10) {
      label = 0;
      if (!$33) {
       $46 = 64;
       label = 15;
       break;
      }
      if (!($33 & 1)) {
       $$02$i3$i = $33;
       $nTrailingZeros$03$i2$i = 0;
      } else {
       $$0$i = 0;
       $48 = $pp$val1666;
       $51 = $33;
       $55 = 0;
       break;
      }
      while (1) {
       $37 = $nTrailingZeros$03$i2$i + 1 | 0;
       $$02$i3$i = $$02$i3$i >>> 1;
       if ($$02$i3$i & 1) {
        $$lcssa76 = $37;
        $nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
        break;
       } else $nTrailingZeros$03$i2$i = $37;
      }
      if (!$$lcssa76) {
       $$0$i = 0;
       $48 = $pp$val1666;
       $51 = $33;
       $55 = 0;
       break;
      } else $43 = $nTrailingZeros$03$i2$i$lcssa + 33 | 0;
     }
     if ($43 >>> 0 > 31) {
      $46 = $43;
      label = 15;
     } else {
      $$0$i = $43;
      $48 = $pp$val1666;
      $51 = $33;
      $55 = $43;
     }
    } while (0);
    if ((label | 0) == 15) {
     label = 0;
     $$0$i = $46 + -32 | 0;
     $48 = $33;
     $51 = 0;
     $55 = $46;
    }
    $pp$val1666 = $51 << 32 - $$0$i | $48 >>> $$0$i;
    $33 = $51 >>> $$0$i;
    $54 = $55 + $$02964 | 0;
    if (!(($33 | 0) != 0 | ($pp$val1666 | 0) != 1)) {
     $$0$lcssa49 = $16;
     $$02$lcssa51 = $54;
     $i$0$lcssa50 = $22;
     break L1;
    }
    $62 = $16 + (0 - (HEAP32[$lp + ($54 << 2) >> 2] | 0)) | 0;
    if ((ftCall_iii($cmp | 0, $62 | 0, HEAP32[$ar >> 2] | 0) | 0) < 1) {
     $$0$lcssa = $16;
     $$02$lcssa = $54;
     $$03$lcssa = 0;
     $i$0$lcssa = $22;
     label = 18;
     break;
    } else {
     $$01162$phi = $16;
     $$02964 = $54;
     $$03865 = 0;
     $16 = $62;
     $i$01063 = $22;
     $$01162 = $$01162$phi;
    }
   }
  }
 } else {
  $$0$lcssa = $head;
  $$02$lcssa = $pshift;
  $$03$lcssa = $trusty;
  $i$0$lcssa = 1;
  label = 18;
 } while (0);
 if ((label | 0) == 18) if (!$$03$lcssa) {
  $$0$lcssa49 = $$0$lcssa;
  $$02$lcssa51 = $$02$lcssa;
  $i$0$lcssa50 = $i$0$lcssa;
 } else {
  STACKTOP = sp;
  return;
 }
 L30 : do if (($i$0$lcssa50 | 0) >= 2) {
  $67 = $ar + ($i$0$lcssa50 << 2) | 0;
  HEAP32[$67 >> 2] = $tmp$i5;
  if ($width) {
   $$02$us$i10 = $width;
   $80 = $tmp$i5;
   while (1) {
    $70 = $$02$us$i10 >>> 0 > 256 ? 256 : $$02$us$i10;
    $79 = HEAP32[$ar >> 2] | 0;
    _memcpy($80 | 0, $79 | 0, $70 | 0) | 0;
    $76 = $79;
    $i$01$us$i8 = 0;
    do {
     $i$01$us$i8$looptemp = $i$01$us$i8;
     $i$01$us$i8 = $i$01$us$i8 + 1 | 0;
     $76$looptemp = $76;
     $76 = HEAP32[$ar + ($i$01$us$i8 << 2) >> 2] | 0;
     _memcpy($76$looptemp | 0, $76 | 0, $70 | 0) | 0;
     HEAP32[$ar + ($i$01$us$i8$looptemp << 2) >> 2] = $76$looptemp + $70;
    } while (($i$01$us$i8 | 0) != ($i$0$lcssa50 | 0));
    if (($$02$us$i10 | 0) == ($70 | 0)) break L30;
    $$02$us$i10 = $$02$us$i10 - $70 | 0;
    $80 = HEAP32[$67 >> 2] | 0;
   }
  }
 } while (0);
 HEAP32[$ar$i >> 2] = $$0$lcssa49;
 L39 : do if (($$02$lcssa51 | 0) > 1) {
  $$012$i = $$02$lcssa51;
  $$03$i = $$0$lcssa49;
  $87 = $$0$lcssa49;
  $i$04$i = 1;
  while (1) {
   $82 = $$03$i + $0 | 0;
   $83 = $$012$i + -2 | 0;
   $86 = $$03$i + (0 - ((HEAP32[$lp + ($83 << 2) >> 2] | 0) + $width)) | 0;
   if ((ftCall_iii($cmp | 0, $87 | 0, $86 | 0) | 0) > -1) if ((ftCall_iii($cmp | 0, $87 | 0, $82 | 0) | 0) > -1) {
    $i$0$lcssa$i = $i$04$i;
    break;
   }
   $94 = $i$04$i + 1 | 0;
   $95 = $ar$i + ($i$04$i << 2) | 0;
   if ((ftCall_iii($cmp | 0, $86 | 0, $82 | 0) | 0) > -1) {
    HEAP32[$95 >> 2] = $86;
    $$0$be$i = $86;
    $$01$be$i = $$012$i + -1 | 0;
   } else {
    HEAP32[$95 >> 2] = $82;
    $$0$be$i = $82;
    $$01$be$i = $83;
   }
   if (($$01$be$i | 0) <= 1) {
    $i$0$lcssa$i = $94;
    break;
   }
   $$012$i = $$01$be$i;
   $$03$i = $$0$be$i;
   $87 = HEAP32[$ar$i >> 2] | 0;
   $i$04$i = $94;
  }
  if (($i$0$lcssa$i | 0) < 2) $113 = $tmp$i5; else {
   $99 = $ar$i + ($i$0$lcssa$i << 2) | 0;
   HEAP32[$99 >> 2] = $tmp$i5;
   if (!$width) $113 = $tmp$i5; else {
    $$02$us$i = $width;
    $112 = $tmp$i5;
    while (1) {
     $102 = $$02$us$i >>> 0 > 256 ? 256 : $$02$us$i;
     $111 = HEAP32[$ar$i >> 2] | 0;
     _memcpy($112 | 0, $111 | 0, $102 | 0) | 0;
     $108 = $111;
     $i$01$us$i = 0;
     do {
      $i$01$us$i$looptemp = $i$01$us$i;
      $i$01$us$i = $i$01$us$i + 1 | 0;
      $108$looptemp = $108;
      $108 = HEAP32[$ar$i + ($i$01$us$i << 2) >> 2] | 0;
      _memcpy($108$looptemp | 0, $108 | 0, $102 | 0) | 0;
      HEAP32[$ar$i + ($i$01$us$i$looptemp << 2) >> 2] = $108$looptemp + $102;
     } while (($i$01$us$i | 0) != ($i$0$lcssa$i | 0));
     if (($$02$us$i | 0) == ($102 | 0)) {
      $113 = $tmp$i5;
      break L39;
     }
     $$02$us$i = $$02$us$i - $102 | 0;
     $112 = HEAP32[$99 >> 2] | 0;
    }
   }
  }
 } else $113 = $tmp$i5; while (0);
 STACKTOP = sp;
 return;
}

function _diff0($w) {
 $w = $w | 0;
 var $$0 = 0, $$16 = 0, $$719 = 0, $$sum1 = 0, $$sum1$i = 0, $1 = 0, $103 = 0, $106 = 0, $15 = 0, $168 = 0, $173 = 0, $176 = 0, $183 = 0, $187 = 0, $188 = 0, $190 = 0, $195 = 0, $198 = 0, $199 = 0, $2 = 0, $204 = 0, $205 = 0, $208 = 0, $209 = 0, $23 = 0, $24 = 0, $25 = 0, $28 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $40 = 0, $56 = 0, $58 = 0, $6 = 0, $61 = 0, $64 = 0, $68 = 0, $74 = 0, $77 = 0, $78 = 0, $8 = 0, $85 = 0, $90 = 0, $91 = 0, $96 = 0, $98 = 0, $df$0 = 0, $dg$0 = 0, label = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $1 = $w + 12 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $$sum1 = $2 + 4 + ($2 & 1) | 0;
 $6 = HEAP8[$w + ($$sum1 << 2) + 31 >> 0] | 0;
 $8 = HEAP32[$w + ($$sum1 + 2 << 2) >> 2] | 0;
 if (!$8) {
  $$16 = 1;
  $24 = 0;
  $df$0 = 0;
 } else if (!(HEAP32[$8 >> 2] & 127)) {
  $$16 = 0;
  $24 = 0;
  $df$0 = _diff0($8) | 0;
 } else {
  $$16 = 1;
  $24 = 1;
  $df$0 = 0;
 }
 $15 = HEAP32[$w + ($$sum1 + 3 << 2) >> 2] | 0;
 if (!$15) {
  $$719 = 1;
  $168 = 1;
  $23 = 0;
  $dg$0 = 0;
 } else if (!(HEAP32[$15 >> 2] & 127)) {
  $$719 = 0;
  $168 = 1;
  $23 = 0;
  $dg$0 = _diff0($15) | 0;
 } else {
  $$719 = 1;
  $168 = 0;
  $23 = 1;
  $dg$0 = 0;
 }
 if ($6 << 24 >> 24 == 38 & ($24 ^ $23)) {
  $25 = HEAP32[$1 >> 2] | 0;
  $$sum1$i = $25 + 4 + ($25 & 1) | 0;
  $28 = HEAP32[$w + ($$sum1$i + 2 << 2) >> 2] | 0;
  $31 = (HEAP32[$28 >> 2] & 127 | 0) != 0;
  $33 = HEAP32[$w + ($$sum1$i + 3 << 2) >> 2] | 0;
  $34 = $31 ? $33 : $28;
  $35 = $31 ? $28 : $33;
  if (HEAP32[$35 + 12 >> 2] | 0) {
   $$0 = 0;
   return $$0 | 0;
  }
  $40 = HEAP32[$34 + 12 >> 2] | 0;
  switch (HEAP8[$34 + ($40 + 4 + ($40 & 1) << 2) + 31 >> 0] | 0) {
  case 42:
   {
    $$0 = _qq($35, HEAP32[660] | 0) | 0;
    return $$0 | 0;
   }
  case 94:
   {
    if ($31) {
     $64 = _logar1($35) | 0;
     $$0 = _atop(_amp($64, _ds(42) | 0) | 0, $w) | 0;
     return $$0 | 0;
    }
    $68 = _pcvt(4, $35) | 0;
    if (!$68) {
     $$0 = 0;
     return $$0 | 0;
    }
    do if (HEAP32[$68 >> 2] & 4) {
     $74 = HEAP32[$68 + 12 >> 2] | 0;
     $77 = HEAP32[$68 + ($74 + 4 + ($74 & 1) << 2) >> 2] | 0;
     if (($77 | 0) == 1) {
      $$0 = _qq(HEAP32[646] | 0, HEAP32[660] | 0) | 0;
      return $$0 | 0;
     } else if (!$77) {
      $78 = HEAP32[660] | 0;
      $$0 = _qq($78, $78) | 0;
      return $$0 | 0;
     } else if (($77 | 0) == 2) {
      $$0 = _ds(-119) | 0;
      return $$0 | 0;
     } else break;
    } while (0);
    $85 = _amp($35, _ds(42) | 0) | 0;
    $$0 = _atop($85, _amp(_ds(94) | 0, _decrem($35) | 0) | 0) | 0;
    return $$0 | 0;
   }
  case -112:
   {
    if ($31) {
     $90 = _ds(37) | 0;
     $91 = _df1($35, $34) | 0;
     $$0 = _atop($90, _amp($91, _ds(42) | 0) | 0) | 0;
     return $$0 | 0;
    } else {
     $96 = _negate(_df1($35, $34) | 0) | 0;
     $98 = _amp($96, _ds(37) | 0) | 0;
     $$0 = _atop($98, _parse(_tokens(_cstr(240) | 0) | 0) | 0) | 0;
     return $$0 | 0;
    }
    break;
   }
  case -53:
   {
    if (!$31) {
     $$0 = 0;
     return $$0 | 0;
    }
    $103 = _vi($35) | 0;
    if (!$103) {
     $$0 = 0;
     return $$0 | 0;
    }
    $106 = HEAP32[$103 + 12 >> 2] | 0;
    switch (HEAP32[$103 + ($106 + 4 + ($106 & 1) << 2) >> 2] | 0) {
    case 7:
     {
      $$0 = _atop(_atop(_ds(37) | 0, _ds(-117) | 0) | 0, _amp(_sc(6) | 0, $34) | 0) | 0;
      return $$0 | 0;
     }
    case 2:
     {
      $$0 = _atop(_ds(45) | 0, _amp(HEAP32[646] | 0, $34) | 0) | 0;
      return $$0 | 0;
     }
    case 5:
     {
      $$0 = _amp(_sc(6) | 0, $34) | 0;
      return $$0 | 0;
     }
    case 1:
     {
      $$0 = _amp(HEAP32[658] | 0, $34) | 0;
      return $$0 | 0;
     }
    case 6:
     {
      $$0 = _amp(_sc(5) | 0, $34) | 0;
      return $$0 | 0;
     }
    case 3:
     {
      $$0 = _atop(_atop(_ds(37) | 0, _ds(-117) | 0) | 0, _amp(HEAP32[658] | 0, $34) | 0) | 0;
      return $$0 | 0;
     }
    default:
     {
      $$0 = 0;
      return $$0 | 0;
     }
    }
    break;
   }
  case 43:
   {
    $$0 = _qq(HEAP32[646] | 0, HEAP32[660] | 0) | 0;
    return $$0 | 0;
   }
  case 37:
   {
    if ($31) {
     $56 = _negate($35) | 0;
     $58 = _amp($56, _ds(37) | 0) | 0;
     $$0 = _atop($58, _ds(-117) | 0) | 0;
     return $$0 | 0;
    } else {
     $61 = _recip($35) | 0;
     $$0 = _qq($61, HEAP32[660] | 0) | 0;
     return $$0 | 0;
    }
    break;
   }
  case 45:
   {
    $$0 = _qq($31 ? HEAP32[644] | 0 : HEAP32[646] | 0, HEAP32[660] | 0) | 0;
    return $$0 | 0;
   }
  default:
   {
    $$0 = 0;
    return $$0 | 0;
   }
  }
 } else {
  L14 : do switch ($6 << 24 >> 24 | 0) {
  case -21:
   {
    $187 = HEAP32[$w + ($$sum1 + 4 << 2) >> 2] | 0;
    $188 = _diff0($187) | 0;
    $190 = HEAP32[$15 + 12 >> 2] | 0;
    $195 = HEAP8[$15 + ($190 + 4 + ($190 & 1) << 2) + 31 >> 0] | 0;
    if (($195 | 0) == 45 | ($195 | 0) == 43) {
     $$0 = _folk($df$0, $15, $188) | 0;
     return $$0 | 0;
    } else if (($195 | 0) == 42) {
     $198 = _folk($df$0, _ds(42) | 0, $187) | 0;
     $199 = _ds(43) | 0;
     $$0 = _folk($198, $199, _folk($8, _ds(42) | 0, $188) | 0) | 0;
     return $$0 | 0;
    } else if (($195 | 0) == 37) {
     $204 = _folk($df$0, _ds(42) | 0, $187) | 0;
     $205 = _ds(45) | 0;
     $208 = _folk($204, $205, _folk($8, _ds(42) | 0, $188) | 0) | 0;
     $209 = _ds(37) | 0;
     $$0 = _folk($208, $209, _atop(_ds(-117) | 0, $187) | 0) | 0;
     return $$0 | 0;
    } else break L14;
    break;
   }
  case -53:
   {
    $$0 = _qq(HEAP32[648] | 0, HEAP32[660] | 0) | 0;
    return $$0 | 0;
   }
  case -51:
   {
    $$0 = _atop(_ds(-54) | 0, $w) | 0;
    return $$0 | 0;
   }
  case 94:
   {
    $$0 = $w;
    return $$0 | 0;
   }
  case -75:
  case 38:
  case -93:
   {
    label = 61;
    break;
   }
  case 37:
   {
    $$0 = _parse(_tokens(_cstr(248) | 0) | 0) | 0;
    return $$0 | 0;
   }
  case 64:
   {
    if ($$16 | $168) label = 61; else {
     $176 = _df1($15, $8) | 0;
     if (!$176) {
      $$0 = 0;
      return $$0 | 0;
     }
     if (HEAP32[$176 + 12 >> 2] | 0) {
      $$0 = 0;
      return $$0 | 0;
     }
     $$0 = _qq($176, HEAP32[660] | 0) | 0;
     return $$0 | 0;
    }
    break;
   }
  case 93:
  case 91:
  case -123:
  case -125:
   {
    $$0 = _qq(HEAP32[646] | 0, HEAP32[660] | 0) | 0;
    return $$0 | 0;
   }
  case -23:
  case -24:
  case -25:
  case -26:
  case -27:
  case -28:
  case -29:
  case -30:
  case -31:
  case -32:
   {
    $$0 = _ds(-32) | 0;
    return $$0 | 0;
   }
  case 34:
   {
    if (!(HEAP32[$8 + 12 >> 2] | 0)) if (!($168 | (HEAP32[$8 >> 2] & 29 | 0) == 0)) if ((_all1(_eq($15, HEAP32[660] | 0) | 0) | 0) << 24 >> 24) {
     $173 = HEAP32[660] | 0;
     $$0 = _qq($173, $173) | 0;
     return $$0 | 0;
    }
    if (!($$16 | $168)) {
     $$0 = _qq($df$0, $15) | 0;
     return $$0 | 0;
    }
    break;
   }
  case -113:
   {
    $$0 = _parse(_tokens(_cstr(256) | 0) | 0) | 0;
    return $$0 | 0;
   }
  case -112:
   {
    $$0 = _ds(37) | 0;
    return $$0 | 0;
   }
  case -54:
   {
    $$0 = _qq(HEAP32[622] | 0, HEAP32[660] | 0) | 0;
    return $$0 | 0;
   }
  case 45:
  case -116:
   {
    $$0 = _qq(HEAP32[644] | 0, HEAP32[660] | 0) | 0;
    return $$0 | 0;
   }
  case -119:
   {
    $$0 = _qq(HEAP32[658] | 0, HEAP32[660] | 0) | 0;
    return $$0 | 0;
   }
  case -117:
   {
    $$0 = _ds(-119) | 0;
    return $$0 | 0;
   }
  case -115:
   {
    $$0 = _qq(_scf(.5) | 0, HEAP32[660] | 0) | 0;
    return $$0 | 0;
   }
  default:
   {}
  } while (0);
  if ((label | 0) == 61) if (!($$16 | $$719)) {
   $183 = _ds(42) | 0;
   $$0 = _folk($dg$0, $183, _atop($df$0, $15) | 0) | 0;
   return $$0 | 0;
  }
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function _grade($0, $w) {
 $0 = $0 | 0;
 $w = $w | 0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$02 = 0, $$lobit$i = 0, $$sum1$i = 0, $$sum11 = 0, $$sum3$i = 0, $$sum5$i = 0, $$sum9 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $110 = 0, $111 = 0, $113 = 0, $114 = 0, $116 = 0, $118 = 0, $119 = 0, $13 = 0, $130 = 0, $138 = 0, $139 = 0, $142 = 0, $144 = 0, $146 = 0, $148 = 0, $17 = 0, $18 = 0, $20 = 0, $23 = 0, $25 = 0, $3 = 0, $33 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $45 = 0, $46 = 0, $49 = 0, $5 = 0, $53 = 0, $54 = 0, $56 = 0, $62 = 0, $71 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $81 = 0, $82 = 0, $85 = 0, $88 = 0, $92 = 0, $93 = 0, $ascend$i = 0, $i$023 = 0, $i$023$us = 0, $i$038$i = 0, $i1$020 = 0, $i1$020$us = 0, $i1$041$i = 0, $i3$036$i = 0, $i5$032$i = 0, $i7$027$i = 0, $i9$028$i = 0, $j$021 = 0, $j$021$us = 0, $j$033$in$i = 0, $j$119 = 0, $j$119$us = 0, $m$0$lcssa$i = 0, $m$039$i = 0, $m$1$i = 0, $m$2$i = 0, $s$035$i = 0, $s$131$i = 0, $yv$022 = 0, $yv$022$us = 0, label = 0;
 $3 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $5 = HEAP32[$w >> 2] | 0;
 do if (!($5 & 16)) {
  $$02 = $w;
  $18 = $5;
 } else {
  $8 = _cvt(8, $w) | 0;
  if (!$8) {
   $$0 = 0;
   return $$0 | 0;
  } else {
   $$02 = $8;
   $18 = HEAP32[$8 >> 2] | 0;
   break;
  }
 } while (0);
 $10 = $$02 + 12 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 $13 = $$02 + ($11 + 4 + ($11 & 1) << 2) | 0;
 if (!$11) $23 = 1; else $23 = HEAP32[$$02 + 16 >> 2] | 0;
 $17 = _aii($$02) | 0;
 HEAP32[1918] = $17;
 $20 = Math_imul(_bp($18) | 0, $17) | 0;
 if (!($18 & 15)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $25 = HEAP32[1918] | 0;
 if (!(($23 | 0) > 1 & ($25 | 0) != 0)) {
  $$0 = _ii($$02) | 0;
  return $$0 | 0;
 }
 if (!(($18 & 7 | 0) == 0 | ($25 | 0) != 1)) {
  $ascend$i = $0 & 255;
  $33 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
  $35 = HEAP32[$$02 + 8 >> 2] | 0;
  $36 = HEAP32[$10 >> 2] | 0;
  $$sum1$i = $36 + 4 + ($36 & 1) | 0;
  $38 = $$02 + ($$sum1$i << 2) | 0;
  $39 = HEAP32[$$02 >> 2] | 0;
  $$lobit$i = $39 >>> 2 & 1;
  if (!$$lobit$i) $45 = ($39 & 1 | 0) != 0 ? 2 : 256; else $45 = $35;
  $46 = _ga(4, $45, 1, 0) | 0;
  if (!$46) {
   $$0 = 0;
   return $$0 | 0;
  }
  $49 = HEAP32[$46 + 12 >> 2] | 0;
  $$sum3$i = $49 + 4 + ($49 & 1) | 0;
  _memset($46 + ($$sum3$i << 2) | 0, 0, $45 << 2 | 0) | 0;
  $53 = ($$lobit$i | 0) != 0;
  $54 = ($35 | 0) > 0;
  L29 : do if ($53) {
   L34 : do if ($54) {
    $i$038$i = 0;
    $m$039$i = 0;
    while (1) {
     $56 = HEAP32[$$02 + ($i$038$i + $$sum1$i << 2) >> 2] | 0;
     if (($56 | 0) < 0) {
      label = 19;
      break;
     }
     if (($56 | 0) > ($m$039$i | 0)) if (($56 | 0) < ($35 | 0)) $m$1$i = $56; else {
      label = 22;
      break;
     } else $m$1$i = $m$039$i;
     $62 = $46 + ($56 + $$sum3$i << 2) | 0;
     HEAP32[$62 >> 2] = (HEAP32[$62 >> 2] | 0) + 1;
     $i$038$i = $i$038$i + 1 | 0;
     if (($i$038$i | 0) >= ($35 | 0)) {
      $m$0$lcssa$i = $m$1$i;
      break L34;
     } else $m$039$i = $m$1$i;
    }
    if ((label | 0) == 19) {
     $$0$i = HEAP32[616] | 0;
     break L29;
    } else if ((label | 0) == 22) {
     $$0$i = HEAP32[616] | 0;
     break L29;
    }
   } else $m$0$lcssa$i = 0; while (0);
   $m$2$i = $m$0$lcssa$i + 1 | 0;
   label = 26;
  } else if ($54) {
   $i1$041$i = 0;
   do {
    $71 = $46 + ((HEAPU8[$38 + $i1$041$i >> 0] | 0) + $$sum3$i << 2) | 0;
    HEAP32[$71 >> 2] = (HEAP32[$71 >> 2] | 0) + 1;
    $i1$041$i = $i1$041$i + 1 | 0;
   } while (($i1$041$i | 0) != ($35 | 0));
   $m$2$i = $45;
   label = 26;
  } else {
   $m$2$i = $45;
   label = 26;
  } while (0);
  if ((label | 0) == 26) {
   $76 = ($m$2$i | 0) > 0;
   if (!($ascend$i << 24 >> 24)) {
    if ($76) {
     $i5$032$i = 0;
     $j$033$in$i = $m$2$i;
     $s$131$i = 0;
     while (1) {
      $j$033$in$i = $j$033$in$i + -1 | 0;
      $81 = $46 + ($j$033$in$i + $$sum3$i << 2) | 0;
      $82 = HEAP32[$81 >> 2] | 0;
      HEAP32[$81 >> 2] = $s$131$i;
      $i5$032$i = $i5$032$i + 1 | 0;
      if (($i5$032$i | 0) == ($m$2$i | 0)) break; else $s$131$i = $82 + $s$131$i | 0;
     }
    }
   } else if ($76) {
    $i3$036$i = 0;
    $s$035$i = 0;
    while (1) {
     $77 = $46 + ($i3$036$i + $$sum3$i << 2) | 0;
     $78 = HEAP32[$77 >> 2] | 0;
     HEAP32[$77 >> 2] = $s$035$i;
     $i3$036$i = $i3$036$i + 1 | 0;
     if (($i3$036$i | 0) == ($m$2$i | 0)) break; else $s$035$i = $78 + $s$035$i | 0;
    }
   }
   $85 = _ga(4, $35, 1, 0) | 0;
   if (!$85) {
    $$0 = 0;
    return $$0 | 0;
   }
   $88 = HEAP32[$85 + 12 >> 2] | 0;
   $$sum5$i = $88 + 4 + ($88 & 1) | 0;
   if ($53) {
    if ($54) {
     $i7$027$i = 0;
     do {
      $92 = $46 + ((HEAP32[$$02 + ($i7$027$i + $$sum1$i << 2) >> 2] | 0) + $$sum3$i << 2) | 0;
      $93 = HEAP32[$92 >> 2] | 0;
      HEAP32[$92 >> 2] = $93 + 1;
      HEAP32[$85 + ($93 + $$sum5$i << 2) >> 2] = $i7$027$i;
      $i7$027$i = $i7$027$i + 1 | 0;
     } while (($i7$027$i | 0) != ($35 | 0));
    }
   } else if ($54) {
    $i9$028$i = 0;
    do {
     $100 = $46 + ((HEAPU8[$38 + $i9$028$i >> 0] | 0) + $$sum3$i << 2) | 0;
     $101 = HEAP32[$100 >> 2] | 0;
     HEAP32[$100 >> 2] = $101 + 1;
     HEAP32[$85 + ($101 + $$sum5$i << 2) >> 2] = $i9$028$i;
     $i9$028$i = $i9$028$i + 1 | 0;
    } while (($i9$028$i | 0) != ($35 | 0));
   }
   $$0$i = _gc($85, $33) | 0;
  }
  if (!$$0$i) {
   $$0 = 0;
   return $$0 | 0;
  }
  if (HEAP32[$$0$i + 8 >> 2] | 0) {
   $$0 = $$0$i;
   return $$0 | 0;
  }
 }
 $110 = $23 << 1;
 $111 = _ga(4, $110, 1, 0) | 0;
 if (!$111) {
  $$0 = 0;
  return $$0 | 0;
 }
 $113 = $111 + 12 | 0;
 $114 = HEAP32[$113 >> 2] | 0;
 $116 = $111 + ($114 + 4 + ($114 & 1) << 2) | 0;
 $118 = $13 - $20 | 0;
 $119 = ($23 | 0) > 0;
 if ($119) {
  if (!($0 & 255)) {
   $i$023 = 0;
   $j$021 = $118;
   $yv$022 = $116;
   while (1) {
    $j$021 = $j$021 + $20 | 0;
    HEAP32[$yv$022 >> 2] = $j$021;
    HEAP32[$yv$022 + 4 >> 2] = 0 - $i$023;
    $i$023 = $i$023 + 1 | 0;
    if (($i$023 | 0) == ($23 | 0)) break; else $yv$022 = $yv$022 + 8 | 0;
   }
  } else {
   $i$023$us = 0;
   $j$021$us = $118;
   $yv$022$us = $116;
   while (1) {
    $j$021$us = $j$021$us + $20 | 0;
    HEAP32[$yv$022$us >> 2] = $j$021$us;
    HEAP32[$yv$022$us + 4 >> 2] = $i$023$us;
    $i$023$us = $i$023$us + 1 | 0;
    if (($i$023$us | 0) == ($23 | 0)) break; else $yv$022$us = $yv$022$us + 8 | 0;
   }
  }
  $130 = HEAP32[$113 >> 2] | 0;
 } else $130 = $114;
 if (!($18 & 3)) $138 = ($18 & 4 | 0) != 0 ? 379 : 378; else $138 = 380;
 _qsort($111 + ($130 + 4 + ($130 & 1) << 2) | 0, $23, 8, $138);
 $139 = _ga(4, $23, 1, 0) | 0;
 if (!$139) {
  $$0 = 0;
  return $$0 | 0;
 }
 $142 = HEAP32[$139 + 12 >> 2] | 0;
 $$sum9 = $142 + 4 + ($142 & 1) | 0;
 $144 = HEAP32[$113 >> 2] | 0;
 $$sum11 = $144 + 4 + ($144 & 1) | 0;
 $146 = ($0 & 255 | 0) != 0;
 $$ = $146 ? 1 : $110 + -1 | 0;
 $148 = $146 ? 2 : -2;
 if ($119) if ($146) {
  $i1$020$us = 0;
  $j$119$us = $$;
  while (1) {
   HEAP32[$139 + ($$sum9 + $i1$020$us << 2) >> 2] = HEAP32[$111 + ($$sum11 + $j$119$us << 2) >> 2];
   $i1$020$us = $i1$020$us + 1 | 0;
   if (($i1$020$us | 0) == ($23 | 0)) break; else $j$119$us = $j$119$us + $148 | 0;
  }
 } else {
  $i1$020 = 0;
  $j$119 = $$;
  while (1) {
   HEAP32[$139 + ($$sum9 + $i1$020 << 2) >> 2] = 0 - (HEAP32[$111 + ($$sum11 + $j$119 << 2) >> 2] | 0);
   $i1$020 = $i1$020 + 1 | 0;
   if (($i1$020 | 0) == ($23 | 0)) break; else $j$119 = $j$119 + $148 | 0;
  }
 }
 $$0 = _gc($139, $3) | 0;
 return $$0 | 0;
}

function _foreign($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $f1 = 0, $f2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $f1 = sp + 4 | 0;
 $f2 = sp;
 $0 = _i0($a) | 0;
 $1 = _i0($w) | 0;
 L1 : do switch (($0 << 6) + $1 | 0) {
 case 76:
  {
   $$0 = _fdef(-73, 128, 0, 421, $a, $w, 0, 0, 0, 127, 1) | 0;
   break;
  }
 case 132:
  {
   $$0 = _fdef(-73, 128, 429, 430, $a, $w, 0, 0, 0, 0, 0) | 0;
   break;
  }
 case 64:
  {
   $$0 = _fdef(-73, 128, 415, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 578:
  {
   $$0 = _fdef(-73, 128, 457, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 4:
  {
   $$0 = _fdef(-73, 128, 410, 411, $a, $w, 0, 0, 1, 0, 1) | 0;
   break;
  }
 case 0:
  {
   $$0 = _fdef(-73, 128, 404, 0, $a, $w, 0, 0, 1, 0, 0) | 0;
   break;
  }
 case 68:
  {
   $$0 = _fdef(-73, 128, 419, 0, $a, $w, 0, 0, 0, 0, 0) | 0;
   break;
  }
 case 833:
  {
   $$0 = _fdef(-73, 128, 466, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 194:
  {
   $$0 = _fdef(-73, 128, 436, 0, $a, $w, 0, 0, 1, 0, 0) | 0;
   break;
  }
 case 119:
  {
   $$0 = _fdef(-73, 128, 422, 0, $a, $w, 0, 0, 0, 0, 0) | 0;
   break;
  }
 case 1:
  {
   $$0 = _fdef(-73, 128, 405, 0, $a, $w, 0, 0, 1, 0, 0) | 0;
   break;
  }
 case 311:
  {
   $$0 = _fdef(-73, 128, 439, 0, $a, $w, 0, 0, 0, 0, 0) | 0;
   break;
  }
 case 67:
  {
   $$0 = _fdef(-73, 128, 0, 418, $a, $w, 0, 0, 0, 127, 0) | 0;
   break;
  }
 case 450:
  {
   $$0 = _fdef(-73, 128, 454, 0, $a, $w, 0, 0, 1, 0, 0) | 0;
   break;
  }
 case 66:
  {
   $$0 = _fdef(-73, 128, 0, 417, $a, $w, 0, 0, 0, 127, 0) | 0;
   break;
  }
 case 836:
  {
   $$0 = _fdef(-73, 128, 469, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 705:
  {
   $$0 = _fdef(-73, 128, 0, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 516:
  {
   $$0 = _fdef(-73, 128, 0, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 581:
  {
   $$0 = _fdef(-73, 128, 460, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 193:
  {
   $$0 = _fdef(-73, 128, 435, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 528:
  {
   $$0 = _fdef(-73, 128, 0, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 519:
  {
   $$0 = _fdef(-73, 128, 0, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 130:
  {
   $$0 = _fdef(-73, 128, 425, 426, $a, $w, 0, 0, 0, 0, 0) | 0;
   break;
  }
 case 320:
  {
   $$0 = _fdef(-73, 256, 441, 0, $a, $w, 0, 0, 0, 0, 0) | 0;
   break;
  }
 case 517:
  {
   $$0 = _fdef(-73, 128, 0, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 832:
  {
   $$0 = _fdef(-73, 128, 465, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 582:
  {
   $$0 = _fdef(-73, 128, 461, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 386:
  {
   $$0 = _fdef(-73, 128, 449, 450, $a, $w, 0, 0, 1, 0, 1) | 0;
   break;
  }
 case 75:
  {
   $$0 = _fdef(-73, 128, 420, 0, $a, $w, 0, 0, 1, 0, 0) | 0;
   break;
  }
 case 837:
  {
   $$0 = _fdef(-73, 128, 470, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 257:
  {
   $$0 = _fdef(-73, 128, 437, 438, $a, $w, 0, 0, 127, 127, 127) | 0;
   break;
  }
 case 325:
  {
   $$0 = _fdef(-73, 128, 446, 0, $a, $w, 0, 0, 0, 0, 0) | 0;
   break;
  }
 case 512:
  {
   $$0 = _fdef(-73, 128, 0, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 449:
  {
   $$0 = _fdef(-73, 128, 453, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 576:
  {
   $$0 = _fdef(-73, 128, 455, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 834:
  {
   $$0 = _fdef(-73, 128, 467, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 835:
  {
   $$0 = _fdef(-73, 128, 468, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 192:
  {
   $$0 = _fdef(-73, 128, 434, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 513:
  {
   $$0 = _fdef(-73, 128, 0, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 448:
  {
   $$0 = _fdef(-73, 128, 452, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 385:
  {
   $$0 = _fdef(-73, 128, 448, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 256:
  {
   $$0 = _fdef(-73, 128, 357, 0, $a, $w, 0, 0, 0, 0, 0) | 0;
   break;
  }
 case 129:
  {
   $$0 = _fdef(-73, 128, 424, 0, $a, $w, 0, 0, 0, 0, 0) | 0;
   break;
  }
 case 579:
  {
   $$0 = _fdef(-73, 128, 458, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 2:
  {
   $$0 = _fdef(-73, 128, 406, 407, $a, $w, 0, 0, 0, 0, 0) | 0;
   break;
  }
 case 838:
  {
   $$0 = _fdef(-73, 128, 471, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 839:
  {
   $$0 = _fdef(-73, 128, 472, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 387:
  {
   $$0 = _fdef(-73, 128, 451, 0, $a, $w, 0, 0, 0, 0, 0) | 0;
   break;
  }
 case 580:
  {
   $$0 = _fdef(-73, 128, 459, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 312:
  {
   $$0 = _fdef(-73, 128, 440, 0, $a, $w, 0, 0, 0, 0, 0) | 0;
   break;
  }
 case 128:
  {
   $$0 = _fdef(-73, 128, 0, 423, $a, $w, 0, 0, 0, 0, 0) | 0;
   break;
  }
 case 322:
  {
   $$0 = _fdef(-73, 128, 443, 0, $a, $w, 0, 0, 0, 0, 0) | 0;
   break;
  }
 case 131:
  {
   $$0 = _fdef(-73, 128, 427, 428, $a, $w, 0, 0, 0, 0, 0) | 0;
   break;
  }
 case 3:
  {
   $$0 = _fdef(-73, 128, 408, 409, $a, $w, 0, 0, 0, 0, 0) | 0;
   break;
  }
 case 529:
  {
   $$0 = _fdef(-73, 128, 0, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 577:
  {
   $$0 = _fdef(-73, 128, 456, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 521:
  {
   $$0 = _fdef(-73, 128, 0, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 133:
  {
   $$0 = _fdef(-73, 128, 431, 432, $a, $w, 0, 0, 0, 0, 0) | 0;
   break;
  }
 case 321:
  {
   $$0 = _fdef(-73, 128, 442, 0, $a, $w, 0, 0, 0, 0, 0) | 0;
   break;
  }
 case 183:
  {
   $$0 = _fdef(-73, 128, 0, 433, $a, $w, 0, 0, 0, 0, 0) | 0;
   break;
  }
 case 55:
  {
   $$0 = _fdef(-73, 128, 414, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 324:
  {
   $$0 = _fdef(-73, 128, 445, 0, $a, $w, 0, 0, 0, 0, 0) | 0;
   break;
  }
 case 65:
  {
   $$0 = _fdef(-73, 128, 416, 0, $a, $w, 0, 0, 0, 0, 0) | 0;
   break;
  }
 case 531:
  {
   $$0 = _fdef(-73, 128, 0, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 384:
  {
   $$0 = _fdef(-73, 128, 447, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 584:
  {
   $$0 = _fdef(-73, 128, 463, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 583:
  {
   $$0 = _fdef(-73, 128, 462, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 5:
  {
   $$0 = _fdef(-73, 128, 412, 413, $a, $w, 0, 0, 1, 0, 1) | 0;
   break;
  }
 case 323:
  {
   $$0 = _fdef(-73, 128, 444, 0, $a, $w, 0, 0, 0, 0, 0) | 0;
   break;
  }
 case 8192:
  {
   $$0 = _fdef(-73, 128, 473, 0, $a, $w, 0, 0, 2, 0, 0) | 0;
   break;
  }
 case 585:
  {
   $$0 = _fdef(-73, 128, 464, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 704:
  {
   $$0 = _fdef(-73, 128, 0, 0, $a, $w, 0, 0, 127, 0, 0) | 0;
   break;
  }
 case 8193:
  {
   $$0 = _fdef(-73, 128, 474, 0, $a, $w, 0, 0, 2, 0, 0) | 0;
   break;
  }
 default:
  {
   if (($0 | 0) != 10) {
    _jsignal(3);
    $$0 = 0;
    break L1;
   }
   if (!((_jc($1, $f1, $f2) | 0) << 24 >> 24)) {
    _jsignal(3);
    $$0 = 0;
    break L1;
   } else {
    $$0 = _fdef(-73, 128, HEAP32[$f1 >> 2] | 0, HEAP32[$f2 >> 2] | 0, $a, $w, 0, 0, 127, 127, 127) | 0;
    break L1;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _rank2ex($a, $w, $fs, $lr, $rr, $f2) {
 $a = $a | 0;
 $w = $w | 0;
 $fs = $fs | 0;
 $lr = $lr | 0;
 $rr = $rr | 0;
 $f2 = $f2 | 0;
 var $$0 = 0, $$lcssa = 0, $$lcssa88 = 0, $10 = 0, $101 = 0, $102 = 0, $104 = 0, $113 = 0, $115 = 0, $120 = 0, $122 = 0, $124 = 0, $127 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $56 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $65 = 0, $67 = 0, $7 = 0, $71 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $81 = 0, $86 = 0, $88 = 0, $90 = 0, $91 = 0, $93 = 0, $96 = 0, $i$030 = 0, $i1$039 = 0, $i1$039$us = 0, $i3$033$us = 0, $i5$052 = 0, $i7$044 = 0, $u$029 = 0, $u$138 = 0, $u$138$us = 0, $u$251 = 0, $u$3$lcssa = 0, $u$342 = 0, $v$028 = 0, $v$137$us = 0, $v$232$us = 0, $v$350 = 0, $x$031 = 0, $x$140$us = 0, $x$234$us = 0, $x$353 = 0, $x$4$lcssa = 0, $x$443 = 0, $ya$0 = 0, $yw$0 = 0, $z$0 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $5 = $a + 12 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $a + 16 | 0;
 $8 = HEAP32[$a >> 2] | 0;
 if (($lr | 0) < 0) {
  $10 = $6 + $lr | 0;
  $15 = ($10 | 0) < 0 ? 0 : $10;
 } else $15 = ($6 | 0) > ($lr | 0) ? $lr : $6;
 $14 = $6 - $15 | 0;
 $16 = $w + 12 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 $18 = $w + 16 | 0;
 $19 = HEAP32[$w >> 2] | 0;
 if (($rr | 0) < 0) {
  $21 = $17 + $rr | 0;
  $26 = ($21 | 0) < 0 ? 0 : $21;
 } else $26 = ($17 | 0) > ($rr | 0) ? $rr : $17;
 $25 = $17 - $26 | 0;
 $27 = $a + 16 + ($14 << 2) | 0;
 $28 = _prod($15, $27) | 0;
 $30 = Math_imul(_bp($8) | 0, $28) | 0;
 $31 = HEAP32[$5 >> 2] | 0;
 $33 = $a + ($31 + 4 + ($31 & 1) << 2) | 0;
 $35 = $33 + (0 - $30) | 0;
 $36 = $w + 16 + ($25 << 2) | 0;
 $37 = _prod($26, $36) | 0;
 $39 = Math_imul(_bp($19) | 0, $37) | 0;
 $40 = HEAP32[$16 >> 2] | 0;
 $42 = $w + ($40 + 4 + ($40 & 1) << 2) | 0;
 $44 = $42 + (0 - $39) | 0;
 $45 = ($14 | 0) <= ($25 | 0);
 $46 = $45 ? $25 : $14;
 $47 = $45 ? $14 : $25;
 $48 = $45 ? $18 : $7;
 $49 = _prod($47, $48) | 0;
 $52 = _prod($46 - $47 | 0, $48 + ($47 << 2) | 0) | 0;
 if (_memcmp($7, $18, $47 << 2) | 0) {
  _jsignal(9);
  $$0 = 0;
  return $$0 | 0;
 }
 $56 = _ga($8, $28, $15, $27) | 0;
 if (!$56) {
  $$0 = 0;
  return $$0 | 0;
 }
 $59 = HEAP32[$56 + 12 >> 2] | 0;
 $61 = $56 + ($59 + 4 + ($59 & 1) << 2) | 0;
 $62 = _ga($19, $37, $26, $36) | 0;
 if (!$62) {
  $$0 = 0;
  return $$0 | 0;
 }
 $65 = HEAP32[$62 + 12 >> 2] | 0;
 $67 = $62 + ($65 + 4 + ($65 & 1) << 2) | 0;
 do if (($49 | 0) != 0 & ($52 | 0) != 0) {
  $71 = _ga(32, Math_imul($52, $49) | 0, $46, $48) | 0;
  if (!$71) {
   $$0 = 0;
   return $$0 | 0;
  }
  $74 = HEAP32[$71 + 12 >> 2] | 0;
  $76 = $71 + ($74 + 4 + ($74 & 1) << 2) | 0;
  $78 = ($49 | 0) > 0;
  L27 : do if (($52 | 0) == 1) {
   if ($78) {
    $i$030 = 0;
    $u$029 = $35;
    $v$028 = $44;
    $x$031 = $76;
    while (1) {
     $u$029 = $u$029 + $30 | 0;
     _memcpy($61 | 0, $u$029 | 0, $30 | 0) | 0;
     $v$028 = $v$028 + $39 | 0;
     _memcpy($67 | 0, $v$028 | 0, $39 | 0) | 0;
     $81 = ftCall_iiii($f2 | 0, $56 | 0, $62 | 0, $fs | 0) | 0;
     HEAP32[$x$031 >> 2] = $81;
     if (!$81) {
      $$0 = 0;
      break;
     }
     $i$030 = $i$030 + 1 | 0;
     if (($i$030 | 0) >= ($49 | 0)) break L27; else $x$031 = $x$031 + 4 | 0;
    }
    return $$0 | 0;
   }
  } else {
   if (!$45) {
    if (!$78) break;
    $86 = ($52 | 0) > 0;
    $i5$052 = 0;
    $u$251 = $35;
    $v$350 = $44;
    $x$353 = $76;
    L38 : while (1) {
     $v$350 = $v$350 + $39 | 0;
     _memcpy($67 | 0, $v$350 | 0, $39 | 0) | 0;
     if ($86) {
      $i7$044 = 0;
      $u$342 = $u$251;
      $x$443 = $x$353;
      while (1) {
       $101 = $u$342 + $30 | 0;
       _memcpy($61 | 0, $101 | 0, $30 | 0) | 0;
       $102 = ftCall_iiii($f2 | 0, $56 | 0, $62 | 0, $fs | 0) | 0;
       HEAP32[$x$443 >> 2] = $102;
       if (!$102) {
        $$0 = 0;
        break L38;
       }
       $104 = $x$443 + 4 | 0;
       $i7$044 = $i7$044 + 1 | 0;
       if (($i7$044 | 0) >= ($52 | 0)) {
        $u$3$lcssa = $101;
        $x$4$lcssa = $104;
        break;
       } else {
        $u$342 = $101;
        $x$443 = $104;
       }
      }
     } else {
      $u$3$lcssa = $u$251;
      $x$4$lcssa = $x$353;
     }
     $i5$052 = $i5$052 + 1 | 0;
     if (($i5$052 | 0) >= ($49 | 0)) break L27; else {
      $u$251 = $u$3$lcssa;
      $x$353 = $x$4$lcssa;
     }
    }
    return $$0 | 0;
   }
   if ($78) {
    if (($52 | 0) > 0) {
     $i1$039$us = 0;
     $u$138$us = $35;
     $v$137$us = $44;
     $x$140$us = $76;
    } else {
     $i1$039 = 0;
     $u$138 = $35;
     while (1) {
      $u$138 = $u$138 + $30 | 0;
      _memcpy($61 | 0, $u$138 | 0, $30 | 0) | 0;
      $i1$039 = $i1$039 + 1 | 0;
      if (($i1$039 | 0) >= ($49 | 0)) break L27;
     }
    }
    L51 : while (1) {
     $96 = $u$138$us + $30 | 0;
     _memcpy($61 | 0, $96 | 0, $30 | 0) | 0;
     $i3$033$us = 0;
     $v$232$us = $v$137$us;
     $x$234$us = $x$140$us;
     while (1) {
      $90 = $v$232$us + $39 | 0;
      _memcpy($67 | 0, $90 | 0, $39 | 0) | 0;
      $91 = ftCall_iiii($f2 | 0, $56 | 0, $62 | 0, $fs | 0) | 0;
      HEAP32[$x$234$us >> 2] = $91;
      if (!$91) {
       $$0 = 0;
       break L51;
      }
      $93 = $x$234$us + 4 | 0;
      $i3$033$us = $i3$033$us + 1 | 0;
      if (($i3$033$us | 0) >= ($52 | 0)) {
       $$lcssa = $93;
       $$lcssa88 = $90;
       break;
      } else {
       $v$232$us = $90;
       $x$234$us = $93;
      }
     }
     $88 = $i1$039$us + 1 | 0;
     if (($88 | 0) < ($49 | 0)) {
      $i1$039$us = $88;
      $u$138$us = $96;
      $v$137$us = $$lcssa88;
      $x$140$us = $$lcssa;
     } else break L27;
    }
    return $$0 | 0;
   }
  } while (0);
  $z$0 = _ope($71) | 0;
 } else {
  if (!(HEAP32[$a + 8 >> 2] | 0)) {
   $113 = _shape($56) | 0;
   $115 = _reshape($113, HEAP32[660] | 0) | 0;
   if (!$115) {
    $$0 = 0;
    return $$0 | 0;
   } else $ya$0 = $115;
  } else {
   _memcpy($61 | 0, $33 | 0, $30 | 0) | 0;
   $ya$0 = $56;
  }
  if (!(HEAP32[$w + 8 >> 2] | 0)) {
   $120 = _shape($62) | 0;
   $122 = _reshape($120, HEAP32[660] | 0) | 0;
   if (!$122) {
    $$0 = 0;
    return $$0 | 0;
   } else $yw$0 = $122;
  } else {
   _memcpy($67 | 0, $42 | 0, $39 | 0) | 0;
   $yw$0 = $62;
  }
  $124 = ftCall_iiii($f2 | 0, $ya$0 | 0, $yw$0 | 0, $fs | 0) | 0;
  if (!$124) {
   $$0 = 0;
   return $$0 | 0;
  }
  $127 = $124 + 12 | 0;
  $130 = _ga(HEAP32[$124 >> 2] | 0, 0, (HEAP32[$127 >> 2] | 0) + $46 | 0, $48) | 0;
  if (!$130) {
   $$0 = 0;
   return $$0 | 0;
  } else {
   _memcpy($130 + 16 + ($46 << 2) | 0, $124 + 16 | 0, HEAP32[$127 >> 2] << 2 | 0) | 0;
   $z$0 = $130;
   break;
  }
 } while (0);
 $$0 = _gc($z$0, $2) | 0;
 return $$0 | 0;
}

function _dbin($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $$0$i = 0.0, $$0$lcssa$i$i = 0.0, $$0$lcssa$i17$i = 0.0, $$0$lcssa$i7$i = 0.0, $$01$lcssa$i$i = 0.0, $$01$lcssa$i19$i = 0.0, $$01$lcssa$i9$i = 0.0, $$012$i$i = 0.0, $$012$i14$i = 0.0, $$012$i4$i = 0.0, $$04$i$i = 0.0, $$04$i25$i = 0.0, $$04$i36$i = 0.0, $$05$i$i = 0.0, $$05$i1$i = 0.0, $$05$i11$i = 0.0, $$lcssa64 = 0.0, $$lcssa65 = 0.0, $$lcssa66 = 0.0, $0 = 0.0, $1 = 0.0, $10 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $109 = 0, $114 = 0.0, $15 = 0, $17 = 0.0, $18 = 0.0, $2 = 0.0, $20 = 0.0, $22 = 0.0, $24 = 0.0, $31 = 0, $33 = 0.0, $34 = 0.0, $36 = 0.0, $38 = 0.0, $40 = 0.0, $47 = 0, $49 = 0.0, $50 = 0.0, $52 = 0.0, $54 = 0.0, $56 = 0.0, $72 = 0, $77 = 0.0, $84 = 0, $85 = 0.0, $87 = 0.0, $88 = 0.0, $90 = 0, $95 = 0.0, $c$01$i$i = 0.0, $c$01$i28$i = 0.0, $c$01$i39$i = 0.0, $i$03$i$i = 0, $i$03$i26$i = 0, $i$03$i37$i = 0, $i$04$i$i = 0, $i$04$i12$i = 0, $i$04$i2$i = 0, $u$$i$i = 0.0, $u$$i24$i = 0.0, $u$$i35$i = 0.0, $z$0$lcssa$i$i = 0.0, $z$0$lcssa$i18$i = 0.0, $z$0$lcssa$i23$i = 0.0, $z$0$lcssa$i33$i = 0.0, $z$0$lcssa$i44$i = 0.0, $z$0$lcssa$i8$i = 0.0, $z$02$i$i = 0.0, $z$02$i27$i = 0.0, $z$02$i38$i = 0.0, $z$03$i$i = 0.0, $z$03$i13$i = 0.0, $z$03$i3$i = 0.0;
 $0 = +HEAPF64[$u >> 3];
 $1 = +HEAPF64[$v >> 3];
 $2 = $1 - $0;
 $10 = (+Math_floor(+$0) == $0 & 1) << 1 | +Math_floor(+$1) == $1;
 if (($10 | 0) == 1) {
  if (!($1 >= 0.0)) {
   _jsignal(3);
   $$0$i = 0.0;
   HEAPF64[$x >> 3] = $$0$i;
   return;
  }
  $31 = ~~($1 + -170.0);
  if (($31 | 0) > 0) {
   $$012$i4$i = $1;
   $$05$i1$i = $0;
   $i$04$i2$i = 0;
   $z$03$i3$i = 1.0;
   while (1) {
    $33 = $$012$i4$i + -1.0;
    $34 = $$05$i1$i + -1.0;
    $36 = $z$03$i3$i * ($$012$i4$i / $$05$i1$i);
    $i$04$i2$i = $i$04$i2$i + 1 | 0;
    if (($i$04$i2$i | 0) == ($31 | 0)) {
     $$0$lcssa$i7$i = $34;
     $$01$lcssa$i9$i = $33;
     $z$0$lcssa$i8$i = $36;
     break;
    } else {
     $$012$i4$i = $33;
     $$05$i1$i = $34;
     $z$03$i3$i = $36;
    }
   }
  } else {
   $$0$lcssa$i7$i = $0;
   $$01$lcssa$i9$i = $1;
   $z$0$lcssa$i8$i = 1.0;
  }
  $38 = +_fac($$01$lcssa$i9$i);
  $40 = $38 / +_fac($$0$lcssa$i7$i);
  $$0$i = $z$0$lcssa$i8$i * ($40 / +_fac($$01$lcssa$i9$i - $$0$lcssa$i7$i));
  HEAPF64[$x >> 3] = $$0$i;
  return;
 } else if (!$10) {
  if ($2 < 0.0) if ($2 == +Math_floor(+$2)) {
   $$0$i = 0.0;
   HEAPF64[$x >> 3] = $$0$i;
   return;
  }
  $15 = ~~($1 + -170.0);
  if (($15 | 0) > 0) {
   $$012$i$i = $1;
   $$05$i$i = $0;
   $i$04$i$i = 0;
   $z$03$i$i = 1.0;
   while (1) {
    $17 = $$012$i$i + -1.0;
    $18 = $$05$i$i + -1.0;
    $20 = $z$03$i$i * ($$012$i$i / $$05$i$i);
    $i$04$i$i = $i$04$i$i + 1 | 0;
    if (($i$04$i$i | 0) == ($15 | 0)) {
     $$0$lcssa$i$i = $18;
     $$01$lcssa$i$i = $17;
     $z$0$lcssa$i$i = $20;
     break;
    } else {
     $$012$i$i = $17;
     $$05$i$i = $18;
     $z$03$i$i = $20;
    }
   }
  } else {
   $$0$lcssa$i$i = $0;
   $$01$lcssa$i$i = $1;
   $z$0$lcssa$i$i = 1.0;
  }
  $22 = +_fac($$01$lcssa$i$i);
  $24 = $22 / +_fac($$0$lcssa$i$i);
  $$0$i = $z$0$lcssa$i$i * ($24 / +_fac($$01$lcssa$i$i - $$0$lcssa$i$i));
  HEAPF64[$x >> 3] = $$0$i;
  return;
 } else if (($10 | 0) == 3) switch (($1 < 0.0 & 1) << 1 | ($0 < 0.0 & 1) << 2 | $2 < 0.0 | 0) {
 case 3:
  {
   $84 = $0 - +Math_floor(+($0 * .5)) * 2.0 != 0.0;
   $85 = $84 ? -1.0 : 1.0;
   $87 = $0 - $1 + -1.0;
   $88 = $87 - $0;
   $u$$i24$i = $88 > $0 ? $0 : $88;
   $90 = ~~$u$$i24$i;
   if (($90 | 0) > 0) {
    $$04$i25$i = $87;
    $c$01$i28$i = $u$$i24$i;
    $i$03$i26$i = 0;
    $z$02$i27$i = 1.0;
    while (1) {
     $95 = $z$02$i27$i * ($$04$i25$i / $c$01$i28$i);
     $i$03$i26$i = $i$03$i26$i + 1 | 0;
     if (($i$03$i26$i | 0) == ($90 | 0)) {
      $$lcssa66 = $95;
      break;
     } else {
      $$04$i25$i = $$04$i25$i + -1.0;
      $c$01$i28$i = $c$01$i28$i + -1.0;
      $z$02$i27$i = $95;
     }
    }
    $z$0$lcssa$i33$i = $$lcssa66 + .5;
   } else $z$0$lcssa$i33$i = 1.5;
   $$0$i = $85 * +Math_floor(+$z$0$lcssa$i33$i);
   HEAPF64[$x >> 3] = $$0$i;
   return;
  }
 case 0:
  {
   $u$$i$i = $2 > $0 ? $0 : $2;
   $72 = ~~$u$$i$i;
   if (($72 | 0) > 0) {
    $$04$i$i = $1;
    $c$01$i$i = $u$$i$i;
    $i$03$i$i = 0;
    $z$02$i$i = 1.0;
    while (1) {
     $77 = $z$02$i$i * ($$04$i$i / $c$01$i$i);
     $i$03$i$i = $i$03$i$i + 1 | 0;
     if (($i$03$i$i | 0) == ($72 | 0)) {
      $$lcssa64 = $77;
      break;
     } else {
      $$04$i$i = $$04$i$i + -1.0;
      $c$01$i$i = $c$01$i$i + -1.0;
      $z$02$i$i = $77;
     }
    }
    $z$0$lcssa$i23$i = $$lcssa64 + .5;
   } else $z$0$lcssa$i23$i = 1.5;
   $$0$i = +Math_floor(+$z$0$lcssa$i23$i);
   HEAPF64[$x >> 3] = $$0$i;
   return;
  }
 case 2:
  {
   _jsignal(3);
   $$0$i = 0.0;
   HEAPF64[$x >> 3] = $$0$i;
   return;
  }
 case 5:
 case 6:
  {
   $103 = $2 - +Math_floor(+($2 * .5)) * 2.0 != 0.0;
   $104 = $103 ? -1.0 : 1.0;
   $105 = -1.0 - $1;
   $106 = -1.0 - $0;
   $107 = $106 - $105;
   $u$$i35$i = $107 > $105 ? $105 : $107;
   $109 = ~~$u$$i35$i;
   if (($109 | 0) > 0) {
    $$04$i36$i = $106;
    $c$01$i39$i = $u$$i35$i;
    $i$03$i37$i = 0;
    $z$02$i38$i = 1.0;
    while (1) {
     $114 = $z$02$i38$i * ($$04$i36$i / $c$01$i39$i);
     $i$03$i37$i = $i$03$i37$i + 1 | 0;
     if (($i$03$i37$i | 0) == ($109 | 0)) {
      $$lcssa65 = $114;
      break;
     } else {
      $$04$i36$i = $$04$i36$i + -1.0;
      $c$01$i39$i = $c$01$i39$i + -1.0;
      $z$02$i38$i = $114;
     }
    }
    $z$0$lcssa$i44$i = $$lcssa65 + .5;
   } else $z$0$lcssa$i44$i = 1.5;
   $$0$i = $104 * +Math_floor(+$z$0$lcssa$i44$i);
   HEAPF64[$x >> 3] = $$0$i;
   return;
  }
 default:
  {
   $$0$i = 0.0;
   HEAPF64[$x >> 3] = $$0$i;
   return;
  }
 } else if (($10 | 0) == 2) {
  if (!($0 != 0.0)) {
   $$0$i = 1.0;
   HEAPF64[$x >> 3] = $$0$i;
   return;
  }
  $47 = ~~($1 + -170.0);
  if (($47 | 0) > 0) {
   $$012$i14$i = $1;
   $$05$i11$i = $0;
   $i$04$i12$i = 0;
   $z$03$i13$i = 1.0;
   while (1) {
    $49 = $$012$i14$i + -1.0;
    $50 = $$05$i11$i + -1.0;
    $52 = $z$03$i13$i * ($$012$i14$i / $$05$i11$i);
    $i$04$i12$i = $i$04$i12$i + 1 | 0;
    if (($i$04$i12$i | 0) == ($47 | 0)) {
     $$0$lcssa$i17$i = $50;
     $$01$lcssa$i19$i = $49;
     $z$0$lcssa$i18$i = $52;
     break;
    } else {
     $$012$i14$i = $49;
     $$05$i11$i = $50;
     $z$03$i13$i = $52;
    }
   }
  } else {
   $$0$lcssa$i17$i = $0;
   $$01$lcssa$i19$i = $1;
   $z$0$lcssa$i18$i = 1.0;
  }
  $54 = +_fac($$01$lcssa$i19$i);
  $56 = $54 / +_fac($$0$lcssa$i17$i);
  $$0$i = $z$0$lcssa$i18$i * ($56 / +_fac($$01$lcssa$i19$i - $$0$lcssa$i17$i));
  HEAPF64[$x >> 3] = $$0$i;
  return;
 } else {
  $$0$i = 0.0;
  HEAPF64[$x >> 3] = $$0$i;
  return;
 }
}

function _numbpx($n, $s, $v) {
 $n = $n | 0;
 $s = $s | 0;
 $v = $v | 0;
 var $$ = 0, $$0 = 0, $$byval_copy4 = 0, $0 = 0, $1 = 0, $13 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $29 = 0, $3 = 0, $30 = 0, $37 = 0, $4 = 0, $44 = 0, $47 = 0, $49 = 0, $5 = 0, $57 = 0, $6 = 0, $b = 0, $b$0$val = 0.0, $b$02$val = 0.0, $b$13$val = 0.0, $i$06 = 0, $k$0 = 0, $p = 0, $q = 0, $t$15 = 0, $u$04 = 0, $x = 0, $x$byval_copy3 = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy4 = sp + 192 | 0;
 $x$byval_copy3 = sp + 176 | 0;
 $b = sp + 160 | 0;
 $p = sp + 144 | 0;
 $q = sp + 128 | 0;
 $x = sp + 112 | 0;
 $y = sp + 96 | 0;
 $0 = sp + 80 | 0;
 $1 = sp + 64 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 32 | 0;
 $4 = sp + 16 | 0;
 $5 = sp;
 $6 = _memchr($s, 98, $n) | 0;
 if (!$6) {
  $47 = _memchr($s, 112, $n) | 0;
  if (!$47) {
   $49 = _memchr($s, 120, $n) | 0;
   if (!$49) {
    $$0 = _numj($n, $s, $v) | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    $t$15 = $49;
    $u$04 = $49;
   }
  } else {
   $t$15 = $47;
   $u$04 = 0;
  }
  if (!((_numj($t$15 - $s | 0, $s, $x) | 0) << 24 >> 24)) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $57 = $t$15 + 1 | 0;
  if (!((_numj($s + $n - $57 | 0, $57, $y) | 0) << 24 >> 24)) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  if (!$u$04) {
   HEAP32[$x$byval_copy3 >> 2] = HEAP32[2074];
   HEAP32[$x$byval_copy3 + 4 >> 2] = HEAP32[2075];
   HEAP32[$x$byval_copy3 + 8 >> 2] = HEAP32[2076];
   HEAP32[$x$byval_copy3 + 12 >> 2] = HEAP32[2077];
   HEAP32[$$byval_copy4 >> 2] = HEAP32[$y >> 2];
   HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$y + 4 >> 2];
   HEAP32[$$byval_copy4 + 8 >> 2] = HEAP32[$y + 8 >> 2];
   HEAP32[$$byval_copy4 + 12 >> 2] = HEAP32[$y + 12 >> 2];
   _zpow($4, $x$byval_copy3, $$byval_copy4);
   HEAP32[$x$byval_copy3 >> 2] = HEAP32[$x >> 2];
   HEAP32[$x$byval_copy3 + 4 >> 2] = HEAP32[$x + 4 >> 2];
   HEAP32[$x$byval_copy3 + 8 >> 2] = HEAP32[$x + 8 >> 2];
   HEAP32[$x$byval_copy3 + 12 >> 2] = HEAP32[$x + 12 >> 2];
   HEAP32[$$byval_copy4 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
   HEAP32[$$byval_copy4 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
   HEAP32[$$byval_copy4 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
   _ztymes($5, $x$byval_copy3, $$byval_copy4);
   HEAP32[$v >> 2] = HEAP32[$5 >> 2];
   HEAP32[$v + 4 >> 2] = HEAP32[$5 + 4 >> 2];
   HEAP32[$v + 8 >> 2] = HEAP32[$5 + 8 >> 2];
   HEAP32[$v + 12 >> 2] = HEAP32[$5 + 12 >> 2];
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  } else {
   HEAP32[$$byval_copy4 >> 2] = HEAP32[$y >> 2];
   HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$y + 4 >> 2];
   HEAP32[$$byval_copy4 + 8 >> 2] = HEAP32[$y + 8 >> 2];
   HEAP32[$$byval_copy4 + 12 >> 2] = HEAP32[$y + 12 >> 2];
   _zexp($2, $$byval_copy4);
   HEAP32[$x$byval_copy3 >> 2] = HEAP32[$x >> 2];
   HEAP32[$x$byval_copy3 + 4 >> 2] = HEAP32[$x + 4 >> 2];
   HEAP32[$x$byval_copy3 + 8 >> 2] = HEAP32[$x + 8 >> 2];
   HEAP32[$x$byval_copy3 + 12 >> 2] = HEAP32[$x + 12 >> 2];
   HEAP32[$$byval_copy4 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$$byval_copy4 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
   HEAP32[$$byval_copy4 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
   _ztymes($3, $x$byval_copy3, $$byval_copy4);
   HEAP32[$v >> 2] = HEAP32[$3 >> 2];
   HEAP32[$v + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$v + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   HEAP32[$v + 12 >> 2] = HEAP32[$3 + 12 >> 2];
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 if (!((_numbpx($6 - $s | 0, $s, $b) | 0) << 24 >> 24)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $13 = $6 + 1 | 0;
 $15 = (HEAP8[$13 >> 0] | 0) == 45;
 $$ = $15 ? $6 + 2 | 0 : $13;
 $18 = $s + $n | 0;
 $19 = $$;
 $20 = $18 - $19 | 0;
 $21 = _memchr($$, 46, $20) | 0;
 $22 = ($21 | 0) != 0;
 $k$0 = $22 ? $21 - $19 | 0 : $20;
 if (!($15 | ($20 | 0) > ($22 & 1 | 0))) {
  _jsignal(5);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $b$02$val = +HEAPF64[$b >> 3];
 $b$13$val = +HEAPF64[$b + 8 >> 3];
 if (!((_numb($k$0, $$, $p, $b$02$val, $b$13$val) | 0) << 24 >> 24)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 do if ($22) {
  $29 = $20 + -1 - $k$0 | 0;
  $30 = $b$02$val == 0.0 & $b$13$val == 0.0;
  if ($30) {
   HEAPF64[$b >> 3] = 1.0;
   $b$0$val = 1.0;
  } else $b$0$val = $b$02$val;
  if (!((_numb($29, $21 + 1 | 0, $q, $b$0$val, $b$13$val) | 0) << 24 >> 24)) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  if ($30) {
   if (!(+HEAPF64[$q >> 3] != 0.0)) break;
   HEAPF64[$p >> 3] = +HEAPF64[317];
   break;
  }
  if (($29 | 0) > 0) {
   $37 = $18 + -1 - $k$0 - $19 | 0;
   $i$06 = 0;
   do {
    HEAP32[$x$byval_copy3 >> 2] = HEAP32[$q >> 2];
    HEAP32[$x$byval_copy3 + 4 >> 2] = HEAP32[$q + 4 >> 2];
    HEAP32[$x$byval_copy3 + 8 >> 2] = HEAP32[$q + 8 >> 2];
    HEAP32[$x$byval_copy3 + 12 >> 2] = HEAP32[$q + 12 >> 2];
    HEAP32[$$byval_copy4 >> 2] = HEAP32[$b >> 2];
    HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$b + 4 >> 2];
    HEAP32[$$byval_copy4 + 8 >> 2] = HEAP32[$b + 8 >> 2];
    HEAP32[$$byval_copy4 + 12 >> 2] = HEAP32[$b + 12 >> 2];
    _zdiv($0, $x$byval_copy3, $$byval_copy4);
    HEAP32[$q >> 2] = HEAP32[$0 >> 2];
    HEAP32[$q + 4 >> 2] = HEAP32[$0 + 4 >> 2];
    HEAP32[$q + 8 >> 2] = HEAP32[$0 + 8 >> 2];
    HEAP32[$q + 12 >> 2] = HEAP32[$0 + 12 >> 2];
    $i$06 = $i$06 + 1 | 0;
   } while (($i$06 | 0) != ($37 | 0));
  };
  HEAP32[$x$byval_copy3 >> 2] = HEAP32[$p >> 2];
  HEAP32[$x$byval_copy3 + 4 >> 2] = HEAP32[$p + 4 >> 2];
  HEAP32[$x$byval_copy3 + 8 >> 2] = HEAP32[$p + 8 >> 2];
  HEAP32[$x$byval_copy3 + 12 >> 2] = HEAP32[$p + 12 >> 2];
  HEAP32[$$byval_copy4 >> 2] = HEAP32[$q >> 2];
  HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$q + 4 >> 2];
  HEAP32[$$byval_copy4 + 8 >> 2] = HEAP32[$q + 8 >> 2];
  HEAP32[$$byval_copy4 + 12 >> 2] = HEAP32[$q + 12 >> 2];
  _zplus($1, $x$byval_copy3, $$byval_copy4);
  HEAP32[$p >> 2] = HEAP32[$1 >> 2];
  HEAP32[$p + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$p + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$p + 12 >> 2] = HEAP32[$1 + 12 >> 2];
 } while (0);
 HEAP32[$v >> 2] = HEAP32[$p >> 2];
 HEAP32[$v + 4 >> 2] = HEAP32[$p + 4 >> 2];
 HEAP32[$v + 8 >> 2] = HEAP32[$p + 8 >> 2];
 HEAP32[$v + 12 >> 2] = HEAP32[$p + 12 >> 2];
 if (!$15) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAPF64[$v >> 3] = -+HEAPF64[$v >> 3];
 $44 = $v + 8 | 0;
 HEAPF64[$44 >> 3] = -+HEAPF64[$44 >> 3];
 $$0 = 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _ex($w) {
 $w = $w | 0;
 var $$0 = 0, $$0$i = 0, $$neg$i$i = 0, $$neg$i21$i = 0, $100 = 0, $103 = 0, $104 = 0, $106 = 0, $109 = 0, $11 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $126 = 0, $127 = 0, $129 = 0, $13 = 0, $130 = 0, $132 = 0, $135 = 0, $136 = 0, $14 = 0, $144 = 0, $148 = 0, $149 = 0, $153 = 0, $155 = 0, $163 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $43 = 0, $49 = 0, $51 = 0, $54 = 0, $55 = 0, $57 = 0, $59 = 0, $6 = 0, $61 = 0, $63 = 0, $65 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $79 = 0, $82 = 0, $83 = 0, $9 = 0, $91 = 0, $95 = 0, $96 = 0, $i$05$i$i = 0, $i$07 = 0, $i$111$i$i = 0, $i$111$i22$i = 0, $i$2$i$i = 0, $i$2$i26$i = 0, $wv$05 = 0, $zv$06 = 0, label = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 32)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $4 = $w + 8 | 0;
 $6 = $w + 12 | 0;
 $9 = _ga(1, HEAP32[$4 >> 2] | 0, HEAP32[$6 >> 2] | 0, $w + 16 | 0) | 0;
 if (!$9) {
  $$0 = 0;
  return $$0 | 0;
 }
 $11 = HEAP32[$6 >> 2] | 0;
 $13 = HEAP32[$9 + 12 >> 2] | 0;
 $14 = HEAP32[$4 >> 2] | 0;
 if (($14 | 0) <= 0) {
  $$0 = $9;
  return $$0 | 0;
 }
 $i$07 = 0;
 $wv$05 = $w + ($11 + 4 + ($11 & 1) << 2) | 0;
 $zv$06 = $9 + ($13 + 4 + ($13 & 1) << 2) | 0;
 while (1) {
  $21 = _stdnm(HEAP32[$wv$05 >> 2] | 0) | 0;
  L16 : do if (!$21) $$0$i = 0; else {
   $23 = $21 + 8 | 0;
   $24 = HEAP32[$23 >> 2] | 0;
   $25 = $21 + 12 | 0;
   $26 = HEAP32[$25 >> 2] | 0;
   $28 = $21 + ($26 + 4 + ($26 & 1) << 2) | 0;
   if (($24 | 0) == 1) {
    $29 = HEAP8[$28 >> 0] | 0;
    if (!($29 << 24 >> 24 == -110 | $29 << 24 >> 24 == -46 | $29 << 24 >> 24 == -47)) {
     $31 = $29;
     label = 11;
    }
   } else if (!$24) {
    $$0$i = 0;
    break;
   } else {
    $31 = HEAP8[$28 >> 0] | 0;
    label = 11;
   }
   do if ((label | 0) == 11) {
    label = 0;
    if ((HEAP8[5792 + ($31 << 24 >> 24) >> 0] | 0) != 2) {
     $$0$i = 0;
     break L16;
    }
    $35 = $24 + -1 | 0;
    $36 = ($24 | 0) > 1;
    L24 : do if ($36) {
     $163 = 2;
     $i$05$i$i = 0;
     while (1) {
      if (!($163 << 24 >> 24 == 5 | $163 << 24 >> 24 == 2)) {
       $$0$i = 0;
       break L16;
      }
      $37 = $i$05$i$i + 1 | 0;
      if (($37 | 0) >= ($35 | 0)) break L24;
      $163 = HEAP8[5792 + (HEAP8[$28 + $37 >> 0] | 0) >> 0] | 0;
      $i$05$i$i = $37;
     }
    } while (0);
    $40 = HEAP8[$28 + $35 >> 0] | 0;
    if ($40 << 24 >> 24 != 95) {
     $49 = HEAP8[5792 + ($40 << 24 >> 24) >> 0] | 0;
     if ($49 << 24 >> 24 == 7 | $49 << 24 >> 24 == 5 | $49 << 24 >> 24 == 2) break; else {
      $$0$i = 0;
      break L16;
     }
    }
    if (!$36) {
     $$0$i = 0;
     break L16;
    }
    if ($31 << 24 >> 24 != 95) {
     $43 = 1;
     while (1) {
      if (($43 | 0) >= ($35 | 0)) {
       $$0$i = 0;
       break L16;
      }
      if ((HEAP8[$28 + $43 >> 0] | 0) == 95) break; else $43 = $43 + 1 | 0;
     }
    }
   } while (0);
   $51 = HEAPU8[3600] | 0;
   $54 = (_cl($21) | 0) << 24 >> 24 == 58 & 1;
   $55 = HEAP32[894] | 0;
   if (!$55) label = 31; else {
    $57 = HEAP32[$25 >> 2] | 0;
    $59 = $21 + ($57 + 4 + ($57 & 1) << 2) | 0;
    $61 = HEAP32[$55 + 12 >> 2] | 0;
    $63 = $55 + ($61 + 4 + ($61 & 1) << 2) | 0;
    $65 = HEAP32[$55 + 8 >> 2] | 0;
    $73 = (HEAP8[$59 + ((HEAP32[$23 >> 2] | 0) + -1) >> 0] | 0) + (HEAPU8[$59 >> 0] << 8) | 0;
    $74 = ($73 | 0) % ($65 | 0) | 0;
    $76 = ($73 | 0) % ($65 + -2 | 0) | 0;
    $77 = $76 + 1 | 0;
    $$neg$i21$i = ~$76;
    $79 = HEAP32[$63 + ($74 << 3) >> 2] | 0;
    L40 : do if (!$79) $i$2$i26$i = $74; else {
     $82 = $79;
     $i$111$i22$i = $74;
     while (1) {
      $83 = HEAP32[$82 + 12 >> 2] | 0;
      if (!(_strcmp($59, $82 + ($83 + 4 + ($83 & 1) << 2) | 0) | 0)) {
       $i$2$i26$i = $i$111$i22$i;
       break L40;
      }
      $91 = $i$111$i22$i + $$neg$i21$i + (($i$111$i22$i | 0) < ($77 | 0) ? $65 : 0) | 0;
      $82 = HEAP32[$63 + ($91 << 3) >> 2] | 0;
      if (!$82) {
       $i$2$i26$i = $91;
       break;
      } else $i$111$i22$i = $91;
     }
    } while (0);
    $95 = $63 + ($i$2$i26$i << 3) + 4 | 0;
    $96 = HEAP32[$95 >> 2] | 0;
    $100 = ($96 | 0) == 0 | ($96 | 0) == (HEAP32[620] | 0);
    if (!(($51 | 0) != ($54 | 0) | $100)) {
     $103 = (HEAP32[892] | 0) == ($55 | 0);
     if ($103) {
      $104 = $63 + ($i$2$i26$i << 3) | 0;
      _fa(HEAP32[$104 >> 2] | 0) | 0;
      HEAP32[$104 >> 2] = 0;
      $106 = HEAP32[$95 >> 2] | 0;
     } else $106 = $96;
     _fa($106) | 0;
     HEAP32[$95 >> 2] = $103 ? 0 : HEAP32[620] | 0;
    }
    if ($100) label = 31;
   }
   if ((label | 0) == 31) {
    label = 0;
    $109 = HEAP32[892] | 0;
    $110 = HEAP32[$25 >> 2] | 0;
    $112 = $21 + ($110 + 4 + ($110 & 1) << 2) | 0;
    $114 = HEAP32[$109 + 12 >> 2] | 0;
    $116 = $109 + ($114 + 4 + ($114 & 1) << 2) | 0;
    $118 = HEAP32[$109 + 8 >> 2] | 0;
    $126 = (HEAP8[$112 + ((HEAP32[$23 >> 2] | 0) + -1) >> 0] | 0) + (HEAPU8[$112 >> 0] << 8) | 0;
    $127 = ($126 | 0) % ($118 | 0) | 0;
    $129 = ($126 | 0) % ($118 + -2 | 0) | 0;
    $130 = $129 + 1 | 0;
    $$neg$i$i = ~$129;
    $132 = HEAP32[$116 + ($127 << 3) >> 2] | 0;
    L53 : do if (!$132) $i$2$i$i = $127; else {
     $135 = $132;
     $i$111$i$i = $127;
     while (1) {
      $136 = HEAP32[$135 + 12 >> 2] | 0;
      if (!(_strcmp($112, $135 + ($136 + 4 + ($136 & 1) << 2) | 0) | 0)) {
       $i$2$i$i = $i$111$i$i;
       break L53;
      }
      $144 = $i$111$i$i + $$neg$i$i + (($i$111$i$i | 0) < ($130 | 0) ? $118 : 0) | 0;
      $135 = HEAP32[$116 + ($144 << 3) >> 2] | 0;
      if (!$135) {
       $i$2$i$i = $144;
       break;
      } else $i$111$i$i = $144;
     }
    } while (0);
    $148 = $116 + ($i$2$i$i << 3) + 4 | 0;
    $149 = HEAP32[$148 >> 2] | 0;
    $153 = ($149 | 0) == 0 | ($149 | 0) == (HEAP32[620] | 0);
    if (!(($51 | 0) != ($54 | 0) | $153)) {
     $155 = $116 + ($i$2$i$i << 3) | 0;
     _fa(HEAP32[$155 >> 2] | 0) | 0;
     HEAP32[$155 >> 2] = 0;
     _fa(HEAP32[$148 >> 2] | 0) | 0;
     HEAP32[$148 >> 2] = 0;
    }
    if ($153) {
     $$0$i = 1;
     break;
    }
   }
   $$0$i = ($51 | 0) == ($54 | 0) & 1;
  } while (0);
  HEAP8[$zv$06 >> 0] = $$0$i;
  if (HEAP8[2472] | 0) {
   $$0 = 0;
   label = 40;
   break;
  }
  $i$07 = $i$07 + 1 | 0;
  if (($i$07 | 0) >= ($14 | 0)) {
   $$0 = $9;
   label = 40;
   break;
  } else {
   $wv$05 = $wv$05 + 4 | 0;
   $zv$06 = $zv$06 + 1 | 0;
  }
 }
 if ((label | 0) == 40) return $$0 | 0;
 return 0;
}

function _unw($n, $s, $s1, $0) {
 $n = $n | 0;
 $s = $s | 0;
 $s1 = $s1 | 0;
 $0 = $0 | 0;
 var $$0 = 0, $$02$lcssa = 0, $$0225 = 0, $$lcssa = 0, $$lcssa55 = 0, $$sum3 = 0, $1 = 0, $105 = 0, $116 = 0, $12 = 0, $123 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $31 = 0, $33 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $43 = 0, $45 = 0, $46 = 0, $52 = 0, $53 = 0, $55 = 0, $58 = 0, $59 = 0, $60 = 0, $63 = 0, $64 = 0, $69 = 0, $7 = 0, $73 = 0, $74 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $87 = 0, $90 = 0, $94 = 0, $98 = 0, $99 = 0, $d$015 = 0, $d$01519 = 0, $i$027 = 0, $i1$026 = 0, $m = 0, $nm$0 = 0, $r = 0, $x$024 = 0, $z$0 = 0, $z$1 = 0, label = 0, sp = 0, $98$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = sp + 8 | 0;
 $m = sp + 4 | 0;
 $r = sp;
 $2 = _fi($s, $m) | 0;
 HEAP32[$1 >> 2] = $2;
 if (!$2) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $4 = HEAP32[$m >> 2] | 0;
 HEAP32[$s1 >> 2] = $2 + $4;
 $7 = $s;
 $8 = $2 - $7 | 0;
 if (($4 | 0) < 6 | ($4 | 0) > ($n - $8 | 0)) {
  _jsignal(9);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $12 = $2 + 1 | 0;
 HEAP32[$1 >> 2] = $12;
 $13 = HEAP8[$2 >> 0] | 0;
 do if ($13 << 24 >> 24 == 120) {
  $14 = $2 + 2 | 0;
  HEAP32[$1 >> 2] = $14;
  $15 = HEAP8[$12 >> 0] | 0;
  if ($15 << 24 >> 24 == 98) {
   $20 = $14;
   $d$01519 = 32;
   break;
  } else if ($15 << 24 >> 24 == 97) {
   $126 = $14;
   $d$015 = 256;
   label = 8;
   break;
  }
  if ($15 << 24 >> 24 == 107) {
   $20 = $14;
   $d$01519 = 64;
   break;
  } else if ($15 << 24 >> 24 == 99) {
   $126 = $14;
   $d$015 = 512;
   label = 8;
   break;
  }
  if ($15 << 24 >> 24 == 118) {
   $126 = $14;
   $d$015 = 128;
   label = 8;
  } else label = 9;
 } else if ($13 << 24 >> 24 == 112 | $13 << 24 >> 24 == 99) {
  $20 = $12;
  $d$01519 = 2;
 } else if ($13 << 24 >> 24 == 110) {
  $126 = $12;
  $d$015 = 4;
  label = 8;
 } else label = 9; while (0);
 if ((label | 0) == 8) if (!($d$015 & 4 | $0 & 255)) label = 9; else {
  $20 = $126;
  $d$01519 = $d$015;
 }
 if ((label | 0) == 9) {
  _jsignal(3);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $21 = _strchr($20, 32) | 0;
 $24 = $21 - $20 | 0;
 if (!(($21 | 0) != 0 & ($21 | 0) != ($20 | 0))) {
  _jsignal(4);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($24 | 0) > 1) label = 14; else if ((HEAP8[$20 >> 0] | 0) == 45) $nm$0 = 0; else label = 14;
 if ((label | 0) == 14) {
  $31 = _onm(_str($24, $20) | 0) | 0;
  if (!$31) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else $nm$0 = $31;
 }
 $33 = _fi($21, $r) | 0;
 HEAP32[$1 >> 2] = $33;
 if (!$33) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $35 = HEAP32[$r >> 2] | 0;
 if (($35 | 0) >= 128) {
  _jsignal(10);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $37 = $33 + 1 | 0;
 HEAP32[$1 >> 2] = $37;
 if ((HEAP8[$33 >> 0] | 0) != 32) {
  _jsignal(3);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $40 = _ga(4, $35, 1, 0) | 0;
 if (!$40) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $43 = HEAP32[$40 + 12 >> 2] | 0;
 $$sum3 = $43 + 4 + ($43 & 1) | 0;
 $45 = $40 + ($$sum3 << 2) | 0;
 $46 = HEAP32[$r >> 2] | 0;
 do if (!$46) {
  $58 = 0;
  $60 = $37;
 } else {
  do if (($46 | 0) > 0) {
   $52 = $37;
   $i$027 = 0;
   while (1) {
    $53 = _fi($52, $40 + ($i$027 + $$sum3 << 2) | 0) | 0;
    $i$027 = $i$027 + 1 | 0;
    if (!$53) break;
    if (($i$027 | 0) >= ($46 | 0)) {
     $$lcssa55 = $53;
     label = 25;
     break;
    } else $52 = $53;
   }
   if ((label | 0) == 25) {
    HEAP32[$1 >> 2] = $$lcssa55;
    $$lcssa = $$lcssa55;
    break;
   }
   HEAP32[$1 >> 2] = 0;
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else $$lcssa = $37; while (0);
  $55 = $$lcssa + 1 | 0;
  HEAP32[$1 >> 2] = $55;
  if ((HEAP8[$$lcssa >> 0] | 0) == 32) {
   $58 = HEAP32[$r >> 2] | 0;
   $60 = $55;
   break;
  }
  _jsignal(3);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 $59 = _prod($58, $45) | 0;
 $63 = $60 - $7 - $8 | 0;
 $64 = $n - $63 | 0;
 do if (!($d$01519 & 2)) {
  if ($d$01519 & 896) {
   $69 = HEAP32[$m >> 2] | 0;
   if (($69 - $63 | 0) < 3) {
    $73 = $69;
    label = 33;
    break;
   }
  }
  if ($d$01519 & 4) {
   $80 = _connum((HEAP32[$m >> 2] | 0) - $63 | 0, $60) | 0;
   if (!$80) $$0 = 0; else {
    $z$0 = $80;
    break;
   }
   STACKTOP = sp;
   return $$0 | 0;
  }
  $82 = $d$01519 & 64;
  $84 = $59 << ($82 >>> 6);
  $87 = _ga(($82 | 0) != 0 ? $d$01519 : 32, $59, HEAP32[$r >> 2] | 0, $45) | 0;
  if (!$87) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $90 = HEAP32[$87 + 12 >> 2] | 0;
  L70 : do if (($84 | 0) > 0) {
   $94 = $84 + -1 | 0;
   $$0225 = $64;
   $98 = $60;
   $i1$026 = 0;
   $x$024 = $87 + ($90 + 4 + ($90 & 1) << 2) | 0;
   while (1) {
    $99 = _unw($$0225, $98, $1, 0) | 0;
    HEAP32[$x$024 >> 2] = $99;
    if (!$99) {
     $$0 = 0;
     label = 55;
     break;
    }
    $98$looptemp = $98;
    $98 = HEAP32[$1 >> 2] | 0;
    $105 = $98$looptemp - $98 + $$0225 | 0;
    if (!(($i1$026 | 0) == ($94 | 0) | ($105 | 0) != 0)) break;
    $i1$026 = $i1$026 + 1 | 0;
    if (($i1$026 | 0) >= ($84 | 0)) {
     $$02$lcssa = $105;
     break L70;
    } else {
     $$0225 = $105;
     $x$024 = $x$024 + 4 | 0;
    }
   }
   if ((label | 0) == 55) {
    STACKTOP = sp;
    return $$0 | 0;
   }
   _jsignal(9);
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else $$02$lcssa = $64; while (0);
  if ((HEAP32[$m >> 2] | 0) == ($n - $$02$lcssa | 0)) $z$0 = $87; else {
   _jsignal(9);
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } else {
  $73 = HEAP32[$m >> 2] | 0;
  label = 33;
 } while (0);
 if ((label | 0) == 33) {
  $74 = _str($73 - $63 | 0, $60) | 0;
  if (!$74) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else $z$0 = $74;
 }
 if (($59 | 0) != (HEAP32[$z$0 + 8 >> 2] | 0)) {
  _jsignal(9);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!($d$01519 & 896)) if (!($d$01519 & 6)) $z$1 = $z$0; else {
  $123 = _reshape($40, $z$0) | 0;
  if (!$123) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else $z$1 = $123;
 } else {
  $116 = _fx($z$0) | 0;
  if (!$116) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  if (!(HEAP32[$116 >> 2] & $d$01519)) {
   _jsignal(3);
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else $z$1 = $116;
 }
 _symbis($nm$0, $z$1, HEAP32[892] | 0) | 0;
 $$0 = $z$1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _cut2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$ = 0, $$0 = 0, $$0442 = 0, $$0443 = 0, $$1 = 0, $$lcssa = 0, $$lobit = 0, $$pre = 0, $$sum5 = 0, $100 = 0, $104 = 0, $111 = 0, $112 = 0, $12 = 0, $123 = 0, $124 = 0, $126 = 0, $130 = 0, $137 = 0, $145 = 0, $146 = 0, $16 = 0, $17 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $31 = 0, $33 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $55 = 0, $57 = 0, $62 = 0, $66 = 0, $69 = 0, $7 = 0, $71 = 0, $73 = 0, $76 = 0, $81 = 0, $82 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $94 = 0, $98 = 0, $i$027 = 0, $i$027$us = 0, $i2$033 = 0, $m$032 = 0, $p$1$ph = 0, $p$128 = 0, $p$128$us = 0, $q$0$us = 0, $u$1$ph = 0, $u$129$us = 0, $u$2$us = 0, $v$1$ph = 0, $v$130 = 0, $v$130$us = 0, $zv$031 = 0, $zv$031$us = 0, label = 0, $v$130$looptemp = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $$sum5 = $4 + 4 + ($4 & 1) | 0;
 $7 = HEAP32[$self + ($$sum5 + 2 << 2) >> 2] | 0;
 $9 = HEAP32[$self + ($$sum5 + 3 << 2) >> 2] | 0;
 if (!$7) $111 = 0; else {
  $12 = HEAP32[$7 + 12 >> 2] | 0;
  $111 = HEAP32[$7 + ($12 + 4 + ($12 & 1) << 2) >> 2] | 0;
 }
 $16 = _lr($self) | 0;
 $17 = _rr($self) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $21 = HEAP32[$a + 12 >> 2] | 0;
 if (($16 | 0) >= ($21 | 0)) {
  $23 = $w + 12 | 0;
  $24 = HEAP32[$23 >> 2] | 0;
  if (($17 | 0) >= ($24 | 0)) {
   if (!$24) $31 = 1; else $31 = HEAP32[$w + 16 >> 2] | 0;
   do if (!$21) {
    $33 = _reshape(_sc($31) | 0, $a) | 0;
    if (!$33) {
     $$0 = 0;
     return $$0 | 0;
    } else {
     $$pre = HEAP32[$33 + 12 >> 2] | 0;
     if (!$$pre) {
      $$0443 = $33;
      $146 = 0;
      $39 = 1;
      break;
     } else {
      $$0442 = $33;
      $145 = $$pre;
      label = 12;
      break;
     }
    }
   } else {
    $$0442 = $a;
    $145 = $21;
    label = 12;
   } while (0);
   if ((label | 0) == 12) {
    $$0443 = $$0442;
    $146 = $145;
    $39 = HEAP32[$$0442 + 16 >> 2] | 0;
   }
   if (($31 | 0) != ($39 | 0)) {
    _jsignal(9);
    $$0 = 0;
    return $$0 | 0;
   }
   do if ((HEAP32[$$0443 >> 2] | 0) == 1) {
    $$1 = $$0443;
    $44 = $146;
   } else {
    $42 = _cvt(1, $$0443) | 0;
    if (!$42) {
     $$0 = 0;
     return $$0 | 0;
    } else {
     $$1 = $42;
     $44 = HEAP32[$42 + 12 >> 2] | 0;
     break;
    }
   } while (0);
   $46 = $$1 + ($44 + 4 + ($44 & 1) << 2) | 0;
   $47 = HEAP32[$23 >> 2] | 0;
   $$ = ($47 | 0) < 1 ? 1 : $47;
   $49 = $w + 16 | 0;
   $50 = HEAP32[$w >> 2] | 0;
   $52 = $w + ($47 + 4 + ($47 & 1) << 2) | 0;
   $53 = _aii($w) | 0;
   $55 = Math_imul(_bp($50) | 0, $53) | 0;
   $57 = HEAP32[$$1 + 8 >> 2] | 0;
   if (($57 | 0) > 0) {
    $i2$033 = 0;
    $m$032 = 0;
    while (1) {
     $62 = (HEAP8[$46 + $i2$033 >> 0] | 0) + $m$032 | 0;
     $i2$033 = $i2$033 + 1 | 0;
     if (($i2$033 | 0) == ($57 | 0)) {
      $$lcssa = $62;
      break;
     } else $m$032 = $62;
    }
    if ($$lcssa) {
     $66 = _ga(32, $$lcssa, 1, 0) | 0;
     if (!$66) {
      $$0 = 0;
      return $$0 | 0;
     }
     $69 = HEAP32[$66 + 12 >> 2] | 0;
     $71 = $66 + ($69 + 4 + ($69 & 1) << 2) | 0;
     $73 = HEAP32[$9 + 12 >> 2] | 0;
     $76 = HEAP32[$9 + ($73 + 4 + ($73 & 1) << 2) >> 2] | 0;
     $$lobit = $76 >>> 31;
     $81 = (($76 | 0) == 1 | ($76 | 0) == -1) & 1;
     if (($76 | 0) == 1 | ($76 | 0) == -1) {
      $82 = _memchr($46, 1, $31) | 0;
      $p$1$ph = $46 + $31 - $82 | 0;
      $u$1$ph = $82;
      $v$1$ph = $82;
     } else {
      $p$1$ph = $31;
      $u$1$ph = 0;
      $v$1$ph = $46;
     }
     L42 : do if (($$lcssa | 0) >= 1) {
      $88 = (($$lobit | 0) == 0 ? 0 : $81) + $31 | 0;
      $89 = $81 ^ 1;
      if (($76 | 0) == 1 | ($76 | 0) == -1) {
       $i$027$us = 1;
       $p$128$us = $p$1$ph;
       $u$129$us = $u$1$ph;
       $v$130$us = $v$1$ph;
       $zv$031$us = $71;
      } else {
       $i$027 = 1;
       $p$128 = $p$1$ph;
       $v$130 = $v$1$ph;
       $zv$031 = $71;
       while (1) {
        $v$130$looptemp = $v$130;
        $v$130 = (_memchr($v$130 + $81 | 0, 1, $p$128 - $81 | 0) | 0) + $89 | 0;
        $123 = $v$130 - $v$130$looptemp | 0;
        $124 = $123 - $$lobit | 0;
        $126 = _ga($50, Math_imul($124, $53) | 0, $$, $49) | 0;
        if (!$126) {
         $$0 = 0;
         label = 36;
         break;
        }
        HEAP32[$126 + 16 >> 2] = $124;
        $130 = HEAP32[$126 + 12 >> 2] | 0;
        _memcpy($126 + ($130 + 4 + ($130 & 1) << 2) | 0, $52 + (Math_imul($88 - $p$128 | 0, $55) | 0) | 0, Math_imul($124, $55) | 0) | 0;
        $137 = ftCall_iii($111 | 0, $126 | 0, $7 | 0) | 0;
        HEAP32[$zv$031 >> 2] = $137;
        if (!$137) {
         $$0 = 0;
         label = 36;
         break;
        }
        if (($i$027 | 0) >= ($$lcssa | 0)) break L42; else {
         $i$027 = $i$027 + 1 | 0;
         $p$128 = $p$128 - $123 | 0;
         $zv$031 = $zv$031 + 4 | 0;
        }
       }
       if ((label | 0) == 36) return $$0 | 0;
      }
      while (1) {
       $90 = ($i$027$us | 0) < ($$lcssa | 0);
       if ($90) {
        $94 = (_memchr($v$130$us + $81 | 0, 1, $p$128$us - $81 | 0) | 0) + $89 | 0;
        $q$0$us = $94 - $v$130$us | 0;
        $u$2$us = $94;
       } else {
        $q$0$us = $p$128$us;
        $u$2$us = $u$129$us;
       }
       $98 = $q$0$us - $$lobit | 0;
       $100 = _ga($50, Math_imul($98, $53) | 0, $$, $49) | 0;
       if (!$100) {
        $$0 = 0;
        label = 36;
        break;
       }
       HEAP32[$100 + 16 >> 2] = $98;
       $104 = HEAP32[$100 + 12 >> 2] | 0;
       _memcpy($100 + ($104 + 4 + ($104 & 1) << 2) | 0, $52 + (Math_imul($88 - $p$128$us | 0, $55) | 0) | 0, Math_imul($98, $55) | 0) | 0;
       $112 = ftCall_iii($111 | 0, $100 | 0, $7 | 0) | 0;
       HEAP32[$zv$031$us >> 2] = $112;
       if (!$112) {
        $$0 = 0;
        label = 36;
        break;
       }
       if ($90) {
        $i$027$us = $i$027$us + 1 | 0;
        $p$128$us = $p$128$us - $q$0$us | 0;
        $u$129$us = $u$2$us;
        $v$130$us = $u$2$us;
        $zv$031$us = $zv$031$us + 4 | 0;
       } else break L42;
      }
      if ((label | 0) == 36) return $$0 | 0;
     } while (0);
     $$0 = _gc(_ope($66) | 0, $2) | 0;
     return $$0 | 0;
    }
   }
   $$0 = HEAP32[616] | 0;
   return $$0 | 0;
  }
 }
 $$0 = _rank2ex($a, $w, $self, $16, $17, 281) | 0;
 return $$0 | 0;
}

function _debdisp($si) {
 $si = $si | 0;
 var $104 = 0, $107 = 0, $109 = 0, $11 = 0, $111 = 0, $120 = 0, $123 = 0, $129 = 0, $13 = 0, $133 = 0, $135 = 0, $138 = 0, $140 = 0, $143 = 0, $148 = 0, $15 = 0, $151 = 0, $153 = 0, $155 = 0, $18 = 0, $19 = 0, $22 = 0, $23 = 0, $26 = 0, $28 = 0, $3 = 0, $30 = 0, $36 = 0, $37 = 0, $40 = 0, $44 = 0, $46 = 0, $48 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $69 = 0, $72 = 0, $75 = 0, $8 = 0, $82 = 0, $86 = 0, $88 = 0, $89 = 0, $99 = 0, $i$02$i = 0, $i$02$i$i = 0, $i$02$i$i$i = 0, $i$02$i$i$i$i = 0, $i$02$i8$i$i = 0, $i$02$i9 = 0, $s$i$i$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $s$i$i$i = sp + 12 | 0;
 if (!$si) {
  STACKTOP = sp;
  return;
 }
 switch (HEAP32[$si + 24 >> 2] | 0) {
 case 3:
  {
   $123 = HEAP32[2120] | 0;
   if ($123) _fputc(0, $123 | 0) | 0;
   _jputc(HEAP8[2457] | 0);
   HEAP32[$vararg_buffer1 >> 2] = HEAP32[$si + 28 >> 2];
   _sprintf(2256, 664, $vararg_buffer1) | 0;
   _jputs(2256);
   break;
  }
 case 4:
  {
   $129 = HEAP32[2120] | 0;
   if ($129) _fputc(0, $129 | 0) | 0;
   _jputc(HEAP8[2457] | 0);
   $133 = HEAP32[650] | 0;
   $135 = HEAP32[$133 + 12 >> 2] | 0;
   $138 = HEAP32[$133 + ((HEAP32[$si + 28 >> 2] | 0) + 4 + $135 + ($135 & 1) << 2) >> 2] | 0;
   $140 = HEAP32[$138 + 12 >> 2] | 0;
   _jputs($138 + ($140 + 4 + ($140 & 1) << 2) | 0);
   break;
  }
 case 2:
  {
   $99 = HEAP32[2120] | 0;
   if ($99) _fputc(0, $99 | 0) | 0;
   _jputc(HEAP8[2457] | 0);
   $104 = HEAP32[$si + 36 >> 2] | 0;
   if ($104) {
    $107 = HEAP32[$104 + 12 >> 2] | 0;
    $109 = $104 + ($107 + 4 + ($107 & 1) << 2) | 0;
    $111 = HEAP32[$104 + 8 >> 2] | 0;
    if (($111 | 0) > 0) {
     $i$02$i$i = 0;
     do {
      _jputc(HEAP8[$109 + $i$02$i$i >> 0] | 0);
      $i$02$i$i = $i$02$i$i + 1 | 0;
     } while (($i$02$i$i | 0) != ($111 | 0));
    }
   }
   $120 = (HEAP32[$si + 32 >> 2] | 0) == 1 ? 648 : 656;
   HEAP32[$vararg_buffer >> 2] = HEAP32[$si + 28 >> 2];
   _sprintf(2256, $120, $vararg_buffer) | 0;
   _jputs(2256);
   break;
  }
 case 1:
  {
   $3 = HEAP32[2120] | 0;
   if ($3) _fputc(0, $3 | 0) | 0;
   _jputc(HEAP8[2457] | 0);
   _jputs(8504);
   $8 = HEAP32[$si + 28 >> 2] | 0;
   $11 = $si + 44 | 0;
   $13 = HEAP32[$11 + ((HEAP32[$si + 32 >> 2] | 0) + $8 << 2) >> 2] | 0;
   HEAP8[552] = 0;
   if (($8 | 0) > 0) {
    $15 = $s$i$i$i + 2 | 0;
    $i$02$i = 0;
    do {
     if (($i$02$i | 0) == ($13 | 0)) _jputs(560);
     $18 = HEAP32[$11 + ($i$02$i << 2) >> 2] | 0;
     $19 = HEAP32[$18 >> 2] | 0;
     do if (($19 | 0) == 2) {
      if ((_all1(_match(HEAP32[626] | 0, $18) | 0) | 0) << 24 >> 24) {
       _jputs((HEAP8[552] | 0) != 0 ? 616 : 624);
       break;
      }
      _jputc(39);
      $62 = HEAP32[$18 + 12 >> 2] | 0;
      $64 = $18 + ($62 + 4 + ($62 & 1) << 2) | 0;
      $66 = HEAP32[$18 + 8 >> 2] | 0;
      if (($66 | 0) > 0) {
       $i$02$i8$i$i = 0;
       do {
        $68 = $64 + $i$02$i8$i$i | 0;
        $69 = HEAP8[$68 >> 0] | 0;
        if ($69 << 24 >> 24 == 39) {
         _jputc(39);
         $72 = HEAP8[$68 >> 0] | 0;
        } else $72 = $69;
        _jputc($72 << 24 >> 24);
        $i$02$i8$i$i = $i$02$i8$i$i + 1 | 0;
       } while (($i$02$i8$i$i | 0) != ($66 | 0));
      }
      _jputc(39);
     } else if (($19 | 0) == 8192) {
      $75 = HEAP32[$18 + 12 >> 2] | 0;
      _jputs((HEAP32[$18 + ($75 + 4 + ($75 & 1) << 2) >> 2] | 0) != 0 ? 632 : 640);
     } else if (($19 | 0) == 4096) _jputc(41); else if (($19 | 0) == 16 | ($19 | 0) == 8 | ($19 | 0) == 4 | ($19 | 0) == 1) {
      if (HEAP8[552] | 0) _jputc(32);
      $22 = HEAP8[2472] | 0;
      HEAP8[2472] = 0;
      $23 = _thorn1($18) | 0;
      HEAP8[2472] = $22;
      if (!$23) {
       _jputs(568);
       break;
      }
      $26 = HEAP32[$23 + 12 >> 2] | 0;
      $28 = $23 + ($26 + 4 + ($26 & 1) << 2) | 0;
      $30 = HEAP32[$23 + 8 >> 2] | 0;
      if (($30 | 0) > 0) {
       $i$02$i$i$i = 0;
       do {
        _jputc(HEAP8[$28 + $i$02$i$i$i >> 0] | 0);
        $i$02$i$i$i = $i$02$i$i$i + 1 | 0;
       } while (($i$02$i$i$i | 0) != ($30 | 0));
      }
     } else if (($19 | 0) == 2048) _jputc(40); else if (($19 | 0) == 1024) {
      $36 = $18 + 12 | 0;
      $37 = HEAP32[$36 >> 2] | 0;
      $40 = HEAP8[$18 + ($37 + 4 + ($37 & 1) << 2) >> 0] | 0;
      if ($40 << 24 >> 24 == -110) {
       _jputs(600);
       break;
      }
      if (HEAP8[552] | 0) _jputc(32);
      if ($40 << 24 >> 24 == -46) {
       _jputs(608);
       break;
      } else if ($40 << 24 >> 24 == -47) {
       _jputs(3328);
       break;
      } else {
       $44 = HEAP32[$36 >> 2] | 0;
       $46 = $18 + ($44 + 4 + ($44 & 1) << 2) | 0;
       $48 = HEAP32[$18 + 8 >> 2] | 0;
       if (($48 | 0) > 0) $i$02$i$i$i$i = 0; else break;
       do {
        _jputc(HEAP8[$46 + $i$02$i$i$i$i >> 0] | 0);
        $i$02$i$i$i$i = $i$02$i$i$i$i + 1 | 0;
       } while (($i$02$i$i$i$i | 0) != ($48 | 0));
      }
     } else if (($19 | 0) != 16384) {
      $82 = HEAP32[$18 + 12 >> 2] | 0;
      $86 = HEAP8[$18 + ($82 + 4 + ($82 & 1) << 2) + 31 >> 0] | 0;
      HEAP8[$15 >> 0] = 0;
      _spellit($86 << 24 >> 24, $s$i$i$i);
      $88 = HEAP8[$s$i$i$i >> 0] | 0;
      $89 = $88 << 24 >> 24;
      if ($88 << 24 >> 24 == 58 | $88 << 24 >> 24 == 46) label = 38; else if (HEAP8[552] | 0) if ((HEAP8[5792 + $89 >> 0] | 0) == 2) label = 38;
      if ((label | 0) == 38) {
       label = 0;
       _jputc(32);
      }
      _jputs($s$i$i$i);
     } while (0);
     HEAP8[552] = ($19 & 1053 | 0) != 0 & 1;
     $i$02$i = $i$02$i + 1 | 0;
    } while (($i$02$i | 0) != ($8 | 0));
   }
   break;
  }
 case 5:
  {
   $143 = HEAP32[2120] | 0;
   if ($143) _fputc(0, $143 | 0) | 0;
   _jputc(HEAP8[2457] | 0);
   $148 = HEAP32[$si + 40 >> 2] | 0;
   if ($148) {
    $151 = HEAP32[$148 + 12 >> 2] | 0;
    $153 = $148 + ($151 + 4 + ($151 & 1) << 2) | 0;
    $155 = HEAP32[$148 + 8 >> 2] | 0;
    if (($155 | 0) > 0) {
     $i$02$i9 = 0;
     do {
      _jputc(HEAP8[$153 + $i$02$i9 >> 0] | 0);
      $i$02$i9 = $i$02$i9 + 1 | 0;
     } while (($i$02$i9 | 0) != ($155 | 0));
    }
   }
   break;
  }
 default:
  {}
 }
 _jputc(10);
 STACKTOP = sp;
 return;
}

function _ply1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$lcssa153 = 0, $$sum10 = 0, $$sum12 = 0, $$sum3 = 0, $$sum8 = 0, $10 = 0, $102 = 0, $110 = 0, $116 = 0, $121 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $25 = 0, $27 = 0, $30 = 0, $33 = 0, $4 = 0, $41 = 0, $43 = 0, $49 = 0, $52 = 0, $57 = 0, $61 = 0, $63 = 0, $7 = 0, $70 = 0, $72 = 0, $78 = 0, $83 = 0, $88 = 0, $91 = 0, $94 = 0, $95 = 0, $99 = 0, $i$073 = 0, $i$162 = 0, $i1$066 = 0, $i2$057 = 0, $k$0$lcssa = 0, $k$077 = 0, $k$175 = 0, $k$175$lcssa150 = 0, $k$2$lcssa = 0, $k$268 = 0, $k$364 = 0, $k$4$lcssa = 0, $k$458 = 0, $p$056 = 0, $p$082 = 0, $p$082$lcssa = 0, $z$074 = 0, $z$163 = 0, label = 0, $z$074$looptemp = 0, $z$163$looptemp = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $$sum3 = $4 + 4 + ($4 & 1) | 0;
 $7 = HEAP32[$self + ($$sum3 + 2 << 2) >> 2] | 0;
 if (!$7) $63 = 0; else {
  $10 = HEAP32[$7 + 12 >> 2] | 0;
  $63 = HEAP32[$7 + ($10 + 4 + ($10 & 1) << 2) >> 2] | 0;
 }
 $15 = HEAP32[$self + ($$sum3 + 4 << 2) >> 2] | 0;
 $17 = HEAP32[$15 + 8 >> 2] | 0;
 $18 = $15 + 12 | 0;
 $19 = HEAP32[$18 >> 2] | 0;
 $$sum8 = $19 + 4 + ($19 & 1) | 0;
 $22 = _grade1(_ravel($15) | 0) | 0;
 if (!$22) {
  $$0 = 0;
  return $$0 | 0;
 }
 $25 = HEAP32[$22 + 12 >> 2] | 0;
 $$sum10 = $25 + 4 + ($25 & 1) | 0;
 $27 = $22 + ($$sum10 << 2) | 0;
 $30 = _ga(32, $17, HEAP32[$18 >> 2] | 0, $15 + 16 | 0) | 0;
 if (!$30) {
  $$0 = 0;
  return $$0 | 0;
 }
 $33 = HEAP32[$30 + 12 >> 2] | 0;
 $$sum12 = $33 + 4 + ($33 & 1) | 0;
 L10 : do if (($17 | 0) > 0) {
  $p$082 = 0;
  while (1) {
   if ((HEAP32[$15 + ((HEAP32[$22 + ($p$082 + $$sum10 << 2) >> 2] | 0) + $$sum8 << 2) >> 2] | 0) >= 0) {
    $p$082$lcssa = $p$082;
    label = 8;
    break;
   }
   $41 = $p$082 + 1 | 0;
   if (($41 | 0) < ($17 | 0)) $p$082 = $41; else {
    $p$056 = $41;
    break;
   }
  }
  L14 : do if ((label | 0) == 8) {
   $43 = _ca($w) | 0;
   if (!$43) {
    $$0 = 0;
    return $$0 | 0;
   }
   $49 = HEAP32[$15 + ((HEAP32[$22 + ($17 + -1 + $$sum10 << 2) >> 2] | 0) + $$sum8 << 2) >> 2] | 0;
   L19 : do if (($p$082$lcssa | 0) < ($17 | 0)) {
    $k$077 = $p$082$lcssa;
    while (1) {
     $52 = HEAP32[$22 + ($k$077 + $$sum10 << 2) >> 2] | 0;
     if (HEAP32[$15 + ($52 + $$sum8 << 2) >> 2] | 0) {
      $k$0$lcssa = $k$077;
      break L19;
     }
     HEAP32[$30 + ($52 + $$sum12 << 2) >> 2] = $43;
     $57 = $k$077 + 1 | 0;
     if (($57 | 0) < ($17 | 0)) $k$077 = $57; else {
      $k$0$lcssa = $57;
      break;
     }
    }
   } else $k$0$lcssa = $p$082$lcssa; while (0);
   $61 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
   if (($49 | 0) < 1) $p$056 = $p$082$lcssa; else {
    $i$073 = 1;
    $k$175 = $k$0$lcssa;
    $z$074 = $43;
    while (1) {
     $z$074$looptemp = $z$074;
     $z$074 = ftCall_iii($63 | 0, $z$074 | 0, $7 | 0) | 0;
     if (!$z$074) {
      $$0 = 0;
      label = 36;
      break;
     }
     if ((_all1(_match($z$074$looptemp, $z$074) | 0) | 0) << 24 >> 24) {
      $$lcssa153 = $z$074;
      $k$175$lcssa150 = $k$175;
      break;
     }
     L28 : do if (($17 | 0) > ($k$175 | 0)) {
      $k$268 = $k$175;
      while (1) {
       $78 = HEAP32[$22 + ($k$268 + $$sum10 << 2) >> 2] | 0;
       if (($i$073 | 0) != (HEAP32[$15 + ($78 + $$sum8 << 2) >> 2] | 0)) {
        $k$2$lcssa = $k$268;
        break L28;
       }
       HEAP32[$30 + ($78 + $$sum12 << 2) >> 2] = $z$074;
       $83 = $k$268 + 1 | 0;
       if (($83 | 0) < ($17 | 0)) $k$268 = $83; else {
        $k$2$lcssa = $83;
        break;
       }
      }
     } else $k$2$lcssa = $k$175; while (0);
     _gc3($30, $z$074, 0, $61);
     if (($i$073 | 0) >= ($49 | 0)) {
      $p$056 = $p$082$lcssa;
      break L14;
     } else {
      $i$073 = $i$073 + 1 | 0;
      $k$175 = $k$2$lcssa;
     }
    }
    if ((label | 0) == 36) return $$0 | 0;
    $70 = $17 - $k$175$lcssa150 | 0;
    if (($70 | 0) > 0) {
     $72 = $k$175$lcssa150 + $$sum10 | 0;
     $i1$066 = 0;
     do {
      HEAP32[$30 + ((HEAP32[$22 + ($72 + $i1$066 << 2) >> 2] | 0) + $$sum12 << 2) >> 2] = $$lcssa153;
      $i1$066 = $i1$066 + 1 | 0;
     } while (($i1$066 | 0) != ($70 | 0));
     $p$056 = $p$082$lcssa;
    } else $p$056 = $p$082$lcssa;
   }
  } while (0);
  if (($p$056 | 0) > 0) {
   $88 = _inv($7) | 0;
   if (!$88) {
    $$0 = 0;
    return $$0 | 0;
   }
   $91 = HEAP32[$88 + 12 >> 2] | 0;
   $94 = HEAP32[$88 + ($91 + 4 + ($91 & 1) << 2) >> 2] | 0;
   $95 = _ca($w) | 0;
   if (!$95) {
    $$0 = 0;
    return $$0 | 0;
   }
   $99 = HEAP32[$15 + ((HEAP32[$27 >> 2] | 0) + $$sum8 << 2) >> 2] | 0;
   $102 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
   if (($99 | 0) <= -1) {
    $i$162 = -1;
    $k$364 = $p$056 + -1 | 0;
    $z$163 = $95;
    while (1) {
     $z$163$looptemp = $z$163;
     $z$163 = ftCall_iii($94 | 0, $z$163 | 0, $88 | 0) | 0;
     if (!$z$163) {
      $$0 = 0;
      label = 36;
      break;
     }
     $110 = ($k$364 | 0) > -1;
     if ((_all1(_match($z$163$looptemp, $z$163) | 0) | 0) << 24 >> 24) break;
     L52 : do if ($110) {
      $k$458 = $k$364;
      while (1) {
       $116 = HEAP32[$22 + ($k$458 + $$sum10 << 2) >> 2] | 0;
       if (($i$162 | 0) != (HEAP32[$15 + ($116 + $$sum8 << 2) >> 2] | 0)) {
        $k$4$lcssa = $k$458;
        break L52;
       }
       HEAP32[$30 + ($116 + $$sum12 << 2) >> 2] = $z$163;
       $121 = $k$458 + -1 | 0;
       if (($k$458 | 0) > 0) $k$458 = $121; else {
        $k$4$lcssa = $121;
        break;
       }
      }
     } else $k$4$lcssa = $k$364; while (0);
     _gc3($30, $z$163, 0, $102);
     if (($i$162 | 0) <= ($99 | 0)) break L10; else {
      $i$162 = $i$162 + -1 | 0;
      $k$364 = $k$4$lcssa;
     }
    }
    if ((label | 0) == 36) return $$0 | 0;
    if ($110) {
     $i2$057 = 0;
     while (1) {
      HEAP32[$30 + ((HEAP32[$22 + ($i2$057 + $$sum10 << 2) >> 2] | 0) + $$sum12 << 2) >> 2] = $z$163;
      if (($i2$057 | 0) == ($k$364 | 0)) break; else $i2$057 = $i2$057 + 1 | 0;
     }
    }
   }
  }
 } while (0);
 $$0 = _gc(_ope($30) | 0, $2) | 0;
 return $$0 | 0;
}

function _over($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $103 = 0, $109 = 0, $112 = 0, $117 = 0, $119 = 0, $120 = 0, $123 = 0, $124 = 0, $127 = 0, $128 = 0, $130 = 0, $137 = 0, $140 = 0, $145 = 0, $147 = 0, $148 = 0, $15 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $2 = 0, $21 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $5 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $62 = 0, $64 = 0, $65 = 0, $67 = 0, $69 = 0, $7 = 0, $72 = 0, $75 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $83 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $95 = 0, $98 = 0, $i$0$neg33 = 0, $i$032 = 0, $i1$031 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = $a;
 HEAP32[$1 >> 2] = $w;
 $2 = _coerce2($0, $1, 0) | 0;
 if (!$2) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $4 = _bp($2) | 0;
 $5 = HEAP32[$0 >> 2] | 0;
 $7 = HEAP32[$5 + 12 >> 2] | 0;
 $8 = HEAP32[$1 >> 2] | 0;
 $10 = HEAP32[$8 + 12 >> 2] | 0;
 $15 = ($7 | 0) == (0 - $10 | 0) ? 1 : ($7 | 0) > ($10 | 0) ? $7 : $10;
 $16 = ($15 | 0) == ($7 | 0);
 $17 = ($7 | 0) == 0;
 if ($17 | $16 ^ 1) $30 = 1; else $30 = HEAP32[$5 + 16 >> 2] | 0;
 $21 = $5 + ($7 + 4 + ($7 & 1) << 2) | 0;
 if (($15 | 0) != ($10 | 0) | ($10 | 0) == 0) $31 = 1; else $31 = HEAP32[$8 + 16 >> 2] | 0;
 $27 = $8 + ($10 + 4 + ($10 & 1) << 2) | 0;
 if (($15 | 0) < 2) {
  $32 = _ga($2, $31 + $30 | 0, 1, 0) | 0;
  if (!$32) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $35 = HEAP32[$32 + 12 >> 2] | 0;
  $37 = $32 + ($35 + 4 + ($35 & 1) << 2) | 0;
  $38 = Math_imul($30, $4) | 0;
  _memcpy($37 | 0, $21 | 0, $38 | 0) | 0;
  _memcpy($37 + $38 | 0, $27 | 0, Math_imul($31, $4) | 0) | 0;
  $$0 = $32;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $41 = $16 ? $5 : $8;
 if (!$41) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $43 = $41 + 12 | 0;
 $45 = _ga(4, HEAP32[$43 >> 2] | 0, 1, 0) | 0;
 if (!$45) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $47 = $45 + 12 | 0;
 $48 = HEAP32[$47 >> 2] | 0;
 _memcpy($45 + ($48 + 4 + ($48 & 1) << 2) | 0, $41 + 16 | 0, HEAP32[$43 >> 2] << 2 | 0) | 0;
 $54 = HEAP32[$47 >> 2] | 0;
 $$sum5 = $54 + 4 + ($54 & 1) | 0;
 $56 = $45 + ($$sum5 << 2) | 0;
 $57 = HEAP32[$0 >> 2] | 0;
 $58 = $57 + 16 | 0;
 $59 = HEAP32[$1 >> 2] | 0;
 $60 = $59 + 16 | 0;
 $62 = ($7 | 0) < ($10 | 0) ? $7 : $10;
 if (($62 | 0) > 0) {
  $64 = $7 + -1 | 0;
  $65 = $10 + -1 | 0;
  $67 = $15 + -1 + $$sum5 | 0;
  $69 = ($10 | 0) > ($7 | 0) ? $7 : $10;
  $i$0$neg33 = 0;
  $i$032 = 0;
  while (1) {
   $72 = HEAP32[$57 + 16 + ($64 + $i$0$neg33 << 2) >> 2] | 0;
   $75 = HEAP32[$59 + 16 + ($65 + $i$0$neg33 << 2) >> 2] | 0;
   HEAP32[$45 + ($67 + $i$0$neg33 << 2) >> 2] = ($72 | 0) > ($75 | 0) ? $72 : $75;
   $78 = $i$032 + 1 | 0;
   if (($78 | 0) == ($69 | 0)) break; else {
    $i$0$neg33 = ~$i$032;
    $i$032 = $78;
   }
  }
 }
 if ($62) {
  $80 = $15 - $62 | 0;
  if (($80 | 0) > 0) {
   $i1$031 = 0;
   do {
    $82 = $45 + ($i1$031 + $$sum5 << 2) | 0;
    $83 = HEAP32[$82 >> 2] | 0;
    HEAP32[$82 >> 2] = ($83 | 0) < 1 ? 1 : $83;
    $i1$031 = $i1$031 + 1 | 0;
   } while (($i1$031 | 0) < ($80 | 0));
  }
 }
 $89 = _prod($15 + -1 | 0, $45 + ($$sum5 + 1 << 2) | 0) | 0;
 $90 = Math_imul($89, $4) | 0;
 $91 = Math_imul($90, $30) | 0;
 $92 = Math_imul($90, $31) | 0;
 $93 = $31 + $30 | 0;
 HEAP32[$56 >> 2] = $93;
 $95 = _ga($2, Math_imul($89, $93) | 0, $15, $56) | 0;
 if (!$95) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $98 = HEAP32[$95 + 12 >> 2] | 0;
 $100 = $95 + ($98 + 4 + ($98 & 1) << 2) | 0;
 $101 = HEAP32[$0 >> 2] | 0;
 $103 = HEAP32[$101 + 8 >> 2] | 0;
 do if (!$103) _fillv($2, Math_imul($89, $30) | 0, $100); else {
  if ($17) {
   _mvc($91, $100, $4, $21);
   break;
  }
  if (($103 | 0) < (Math_imul($89, $30) | 0)) {
   if (($7 | 0) < ($15 | 0)) {
    $109 = _apv($15, 1, 0) | 0;
    if (!$109) {
     $$0 = 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $112 = HEAP32[$109 + 12 >> 2] | 0;
    _memcpy($109 + (4 - $7 + $15 + $112 + ($112 & 1) << 2) | 0, $58 | 0, $7 << 2 | 0) | 0;
    $117 = _reshape($109, HEAP32[$0 >> 2] | 0) | 0;
    HEAP32[$0 >> 2] = $117;
    if (!$117) {
     $$0 = 0;
     STACKTOP = sp;
     return $$0 | 0;
    } else $119 = $117;
   } else $119 = $101;
   HEAP32[$56 >> 2] = $30;
   $120 = _take($45, $119) | 0;
   HEAP32[$0 >> 2] = $120;
   if (!$120) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else $123 = $120;
  } else $123 = $101;
  $124 = HEAP32[$123 + 12 >> 2] | 0;
  _memcpy($100 | 0, $123 + ($124 + 4 + ($124 & 1) << 2) | 0, $91 | 0) | 0;
 } while (0);
 $127 = $100 + $91 | 0;
 $128 = HEAP32[$1 >> 2] | 0;
 $130 = HEAP32[$128 + 8 >> 2] | 0;
 if (!$130) {
  _fillv($2, Math_imul($89, $31) | 0, $127);
  $$0 = $95;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!$10) {
  _mvc($92, $127, $4, $27);
  $$0 = $95;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($130 | 0) < (Math_imul($89, $31) | 0)) {
  if (($10 | 0) < ($15 | 0)) {
   $137 = _apv($15, 1, 0) | 0;
   if (!$137) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $140 = HEAP32[$137 + 12 >> 2] | 0;
   _memcpy($137 + (4 - $10 + $15 + $140 + ($140 & 1) << 2) | 0, $60 | 0, $10 << 2 | 0) | 0;
   $145 = _reshape($137, HEAP32[$1 >> 2] | 0) | 0;
   HEAP32[$1 >> 2] = $145;
   if (!$145) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else $147 = $145;
  } else $147 = $128;
  HEAP32[$56 >> 2] = $31;
  $148 = _take($45, $147) | 0;
  HEAP32[$1 >> 2] = $148;
  if (!$148) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else $151 = $148;
 } else $151 = $128;
 $152 = HEAP32[$151 + 12 >> 2] | 0;
 _memcpy($127 | 0, $151 + ($152 + 4 + ($152 & 1) << 2) | 0, $92 | 0) | 0;
 $$0 = $95;
 STACKTOP = sp;
 return $$0 | 0;
}

function _diff($w) {
 $w = $w | 0;
 var $$ = 0, $$$not21 = 0, $$0 = 0, $$sum1$i = 0, $$sum2 = 0, $$sum9 = 0, $0 = 0, $10 = 0, $103 = 0, $109 = 0, $12 = 0, $13 = 0, $131 = 0, $137 = 0, $140 = 0, $143 = 0, $148 = 0, $150 = 0, $155 = 0, $156 = 0, $159 = 0, $161 = 0, $162 = 0, $163 = 0, $167 = 0, $169 = 0, $170 = 0, $171 = 0, $174 = 0, $175 = 0, $18 = 0, $20 = 0, $21 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $40 = 0, $43 = 0, $44 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $6 = 0, $66 = 0, $78 = 0, $87 = 0, $96 = 0;
 $0 = _fix($w) | 0;
 if (!$0) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$0 >> 2] & 128)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $5 = $0 + 12 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $$sum2 = $6 + 4 + ($6 & 1) | 0;
 $10 = HEAP8[$0 + ($$sum2 << 2) + 31 >> 0] | 0;
 $12 = HEAP32[$0 + ($$sum2 + 2 << 2) >> 2] | 0;
 $13 = ($12 | 0) != 0;
 if ($13) $18 = (HEAP32[$12 >> 2] & 127 | 0) != 0; else $18 = 0;
 $$ = $13 & ($18 ^ 1);
 $20 = HEAP32[$0 + ($$sum2 + 3 << 2) >> 2] | 0;
 $21 = ($20 | 0) != 0;
 if ($21) $26 = (HEAP32[$20 >> 2] & 127 | 0) != 0; else $26 = 0;
 $25 = $26 ^ 1;
 $27 = _diff0($0) | 0;
 $29 = $10 << 24 >> 24;
 if ($27) {
  if (!($10 << 24 >> 24 != 34 | $25)) if ((_all1(_eq($20, HEAP32[660] | 0) | 0) | 0) << 24 >> 24) {
   $$0 = $27;
   return $$0 | 0;
  }
  $$0 = _atco(_parse(_tokens(_cstr(264) | 0) | 0) | 0, $27) | 0;
  return $$0 | 0;
 }
 if ($10 << 24 >> 24 == 38 & ($18 ^ $26)) {
  $40 = HEAP32[$5 >> 2] | 0;
  $$sum1$i = $40 + 4 + ($40 & 1) | 0;
  $43 = HEAP32[$0 + ($$sum1$i + 2 << 2) >> 2] | 0;
  $44 = HEAP32[$43 >> 2] | 0;
  $46 = ($44 & 127 | 0) != 0;
  $48 = HEAP32[$0 + ($$sum1$i + 3 << 2) >> 2] | 0;
  $49 = $46 ? $48 : $43;
  $51 = HEAP32[$49 + 12 >> 2] | 0;
  switch (HEAP8[$49 + ($51 + 4 + ($51 & 1) << 2) + 31 >> 0] | 0) {
  case -52:
   {
    $66 = HEAP32[$43 + 8 >> 2] | 0;
    if (!$46) {
     $$0 = 0;
     return $$0 | 0;
    }
    if ((HEAP32[$43 + 12 >> 2] | 0) >= 2) {
     $$0 = 0;
     return $$0 | 0;
    }
    if ($66) {
     if (!($44 & 29)) {
      $$0 = 0;
      return $$0 | 0;
     }
     if (($66 | 0) > 1) {
      $$0 = _amp(_behead(_tymes($43, _ii($43) | 0) | 0) | 0, $48) | 0;
      return $$0 | 0;
     }
    }
    $78 = HEAP32[660] | 0;
    $$0 = _qq($78, $78) | 0;
    return $$0 | 0;
   }
  case -60:
  case -63:
  case 123:
  case -105:
  case -106:
   {
    if (!$46) {
     $$0 = 0;
     return $$0 | 0;
    }
    $$0 = _atop(_hook(_parse(_tokens(_cstr(280) | 0) | 0) | 0, $0) | 0, _parse(_tokens(_cstr(288) | 0) | 0) | 0) | 0;
    return $$0 | 0;
   }
  default:
   {
    $$0 = 0;
    return $$0 | 0;
   }
  }
 }
 switch ($29 | 0) {
 case 47:
  {
   if (!$$) {
    $$0 = 0;
    return $$0 | 0;
   }
   $87 = HEAP32[$12 + 12 >> 2] | 0;
   if ((HEAP8[$12 + ($87 + 4 + ($87 & 1) << 2) + 31 >> 0] | 0) != 43) {
    $$0 = 0;
    return $$0 | 0;
   }
   $$0 = _parse(_tokens(_cstr(328) | 0) | 0) | 0;
   return $$0 | 0;
  }
 case 38:
 case 64:
  {
   $$$not21 = $18 | $13 ^ 1;
   if (!($$$not21 | $25)) {
    $137 = _df1($20, $12) | 0;
    $$0 = _qq($137, HEAP32[624] | 0) | 0;
    return $$0 | 0;
   }
   if ($$$not21 | ($26 | $21 ^ 1)) {
    $$0 = 0;
    return $$0 | 0;
   } else {
    $140 = _diff($20) | 0;
    $143 = _parse(_tokens(_cstr(392) | 0) | 0) | 0;
    return _folk($140, $143, _atop(_diff($12) | 0, $20) | 0) | 0;
   }
   break;
  }
 case -106:
  {
   $$0 = _parse(_tokens(_cstr(296) | 0) | 0) | 0;
   return $$0 | 0;
  }
 case -23:
 case -24:
 case -25:
 case -26:
 case -27:
 case -28:
 case -29:
 case -30:
 case -31:
 case -32:
  {
   $$0 = _atop(_amp(_ds(36) | 0, HEAP32[660] | 0) | 0, _ds(36) | 0) | 0;
   return $$0 | 0;
  }
 case 34:
  {
   if ((HEAP32[$12 >> 2] & 29 | 0) == 0 | $25) if ($18 | $13 ^ 1 | $25) {
    $$0 = 0;
    return $$0 | 0;
   } else return _qq(_diff($12) | 0, $20) | 0;
   $131 = _atop(_amp(_ds(36) | 0, HEAP32[660] | 0) | 0, _ds(36) | 0) | 0;
   if ((_mr($0) | 0) > 127) {
    $$0 = $131;
    return $$0 | 0;
   }
   $$0 = _qq($131, $20) | 0;
   return $$0 | 0;
  }
 case -105:
  {
   $$0 = _parse(_tokens(_cstr(312) | 0) | 0) | 0;
   return $$0 | 0;
  }
 case -90:
 case 92:
  {
   $96 = HEAP32[$12 + 12 >> 2] | 0;
   $$sum9 = $96 + 4 + ($96 & 1) | 0;
   if ((HEAP8[$12 + ($$sum9 << 2) + 31 >> 0] | 0) != 47) {
    $$0 = 0;
    return $$0 | 0;
   }
   $103 = HEAP32[$12 + ($$sum9 + 2 << 2) >> 2] | 0;
   if (!$103) {
    $$0 = 0;
    return $$0 | 0;
   }
   if (!(HEAP32[$103 >> 2] & 128)) {
    $$0 = 0;
    return $$0 | 0;
   }
   $109 = HEAP32[$103 + 12 >> 2] | 0;
   if ((HEAP8[$103 + ($109 + 4 + ($109 & 1) << 2) + 31 >> 0] | 0) != 43) {
    $$0 = 0;
    return $$0 | 0;
   }
   $$0 = _parse(_tokens(_cstr($10 << 24 >> 24 == -90 ? 360 : 376) | 0) | 0) | 0;
   return $$0 | 0;
  }
 case -21:
  {
   $148 = HEAP32[$0 + ($$sum2 + 4 << 2) >> 2] | 0;
   $150 = HEAP32[$20 + 12 >> 2] | 0;
   $155 = HEAP8[$20 + ($150 + 4 + ($150 & 1) << 2) + 31 >> 0] | 0;
   if (($155 | 0) == 45 | ($155 | 0) == 43) {
    $156 = _diff($12) | 0;
    return _folk($156, $20, _diff($148) | 0) | 0;
   } else if (($155 | 0) == 42) {
    $159 = _diff($12) | 0;
    $161 = _folk($159, _ds(42) | 0, $148) | 0;
    $162 = _ds(43) | 0;
    $163 = _diff($148) | 0;
    return _folk($161, $162, _folk($12, _ds(42) | 0, $163) | 0) | 0;
   } else if (($155 | 0) == 37) {
    $167 = _diff($12) | 0;
    $169 = _folk($167, _ds(42) | 0, $148) | 0;
    $170 = _ds(45) | 0;
    $171 = _diff($148) | 0;
    $174 = _folk($169, $170, _folk($12, _ds(42) | 0, $171) | 0) | 0;
    $175 = _ds(37) | 0;
    return _folk($174, $175, _atop(_ds(-117) | 0, $148) | 0) | 0;
   } else {
    $$0 = 0;
    return $$0 | 0;
   }
   break;
  }
 default:
  {
   $$0 = 0;
   return $$0 | 0;
  }
 }
 return 0;
}

function _fmod($x, $y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $106 = 0, $107 = 0, $11 = 0, $112 = 0, $113 = 0, $115 = 0, $118 = 0, $12 = 0, $120 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $146 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $2 = 0, $23 = 0.0, $25 = 0, $26 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $55 = 0, $6 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $78 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $93 = 0, $94 = 0, $96 = 0, $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $4 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 $6 = $4 & 2047;
 $7 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0;
 $12 = tempRet0;
 if (!(($11 | 0) == 0 & ($12 | 0) == 0)) {
  $16 = $3 & 2147483647;
  if (!($16 >>> 0 > 2146435072 | ($16 | 0) == 2146435072 & $2 >>> 0 > 0 | ($6 | 0) == 2047)) {
   $25 = _bitshift64Shl($0 | 0, $1 | 0, 1) | 0;
   $26 = tempRet0;
   if (!($26 >>> 0 > $12 >>> 0 | ($26 | 0) == ($12 | 0) & $25 >>> 0 > $11 >>> 0)) return +(($25 | 0) == ($11 | 0) & ($26 | 0) == ($12 | 0) ? $x * 0.0 : $x);
   if (!$6) {
    $37 = _bitshift64Shl($0 | 0, $1 | 0, 12) | 0;
    $38 = tempRet0;
    if (($38 | 0) > -1 | ($38 | 0) == -1 & $37 >>> 0 > 4294967295) {
     $45 = $37;
     $46 = $38;
     $ex$026 = 0;
     while (1) {
      $44 = $ex$026 + -1 | 0;
      $45 = _bitshift64Shl($45 | 0, $46 | 0, 1) | 0;
      $46 = tempRet0;
      if (!(($46 | 0) > -1 | ($46 | 0) == -1 & $45 >>> 0 > 4294967295)) {
       $ex$0$lcssa = $44;
       break;
      } else $ex$026 = $44;
     }
    } else $ex$0$lcssa = 0;
    $55 = _bitshift64Shl($0 | 0, $1 | 0, 1 - $ex$0$lcssa | 0) | 0;
    $83 = $55;
    $84 = tempRet0;
    $ex$1 = $ex$0$lcssa;
   } else {
    $83 = $0;
    $84 = $1 & 1048575 | 1048576;
    $ex$1 = $6;
   }
   if (!$9) {
    $60 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0;
    $61 = tempRet0;
    if (($61 | 0) > -1 | ($61 | 0) == -1 & $60 >>> 0 > 4294967295) {
     $68 = $60;
     $69 = $61;
     $ey$020 = 0;
     while (1) {
      $67 = $ey$020 + -1 | 0;
      $68 = _bitshift64Shl($68 | 0, $69 | 0, 1) | 0;
      $69 = tempRet0;
      if (!(($69 | 0) > -1 | ($69 | 0) == -1 & $68 >>> 0 > 4294967295)) {
       $ey$0$lcssa = $67;
       break;
      } else $ey$020 = $67;
     }
    } else $ey$0$lcssa = 0;
    $78 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $ey$0$lcssa | 0) | 0;
    $85 = $78;
    $86 = tempRet0;
    $ey$1$ph = $ey$0$lcssa;
   } else {
    $85 = $2;
    $86 = $3 & 1048575 | 1048576;
    $ey$1$ph = $9;
   }
   $87 = _i64Subtract($83 | 0, $84 | 0, $85 | 0, $86 | 0) | 0;
   $88 = tempRet0;
   $93 = ($88 | 0) > -1 | ($88 | 0) == -1 & $87 >>> 0 > 4294967295;
   L23 : do if (($ex$1 | 0) > ($ey$1$ph | 0)) {
    $152 = $93;
    $153 = $87;
    $154 = $88;
    $94 = $83;
    $96 = $84;
    $ex$212 = $ex$1;
    while (1) {
     if ($152) if (($94 | 0) == ($85 | 0) & ($96 | 0) == ($86 | 0)) break; else {
      $100 = $153;
      $101 = $154;
     } else {
      $100 = $94;
      $101 = $96;
     }
     $102 = _bitshift64Shl($100 | 0, $101 | 0, 1) | 0;
     $103 = tempRet0;
     $104 = $ex$212 + -1 | 0;
     $106 = _i64Subtract($102 | 0, $103 | 0, $85 | 0, $86 | 0) | 0;
     $107 = tempRet0;
     $112 = ($107 | 0) > -1 | ($107 | 0) == -1 & $106 >>> 0 > 4294967295;
     if (($104 | 0) > ($ey$1$ph | 0)) {
      $152 = $112;
      $153 = $106;
      $154 = $107;
      $94 = $102;
      $96 = $103;
      $ex$212 = $104;
     } else {
      $$lcssa7 = $112;
      $113 = $102;
      $115 = $103;
      $155 = $106;
      $156 = $107;
      $ex$2$lcssa = $104;
      break L23;
     }
    }
    $$0 = $x * 0.0;
    return +$$0;
   } else {
    $$lcssa7 = $93;
    $113 = $83;
    $115 = $84;
    $155 = $87;
    $156 = $88;
    $ex$2$lcssa = $ex$1;
   } while (0);
   if ($$lcssa7) if (($113 | 0) == ($85 | 0) & ($115 | 0) == ($86 | 0)) {
    $$0 = $x * 0.0;
    return +$$0;
   } else {
    $118 = $156;
    $120 = $155;
   } else {
    $118 = $115;
    $120 = $113;
   }
   if ($118 >>> 0 < 1048576 | ($118 | 0) == 1048576 & $120 >>> 0 < 0) {
    $126 = $120;
    $127 = $118;
    $ex$39 = $ex$2$lcssa;
    while (1) {
     $128 = _bitshift64Shl($126 | 0, $127 | 0, 1) | 0;
     $129 = tempRet0;
     $130 = $ex$39 + -1 | 0;
     if ($129 >>> 0 < 1048576 | ($129 | 0) == 1048576 & $128 >>> 0 < 0) {
      $126 = $128;
      $127 = $129;
      $ex$39 = $130;
     } else {
      $137 = $128;
      $138 = $129;
      $ex$3$lcssa = $130;
      break;
     }
    }
   } else {
    $137 = $120;
    $138 = $118;
    $ex$3$lcssa = $ex$2$lcssa;
   }
   if (($ex$3$lcssa | 0) > 0) {
    $139 = _i64Add($137 | 0, $138 | 0, 0, -1048576) | 0;
    $140 = tempRet0;
    $141 = _bitshift64Shl($ex$3$lcssa | 0, 0, 52) | 0;
    $149 = $140 | tempRet0;
    $151 = $139 | $141;
   } else {
    $146 = _bitshift64Lshr($137 | 0, $138 | 0, 1 - $ex$3$lcssa | 0) | 0;
    $149 = tempRet0;
    $151 = $146;
   }
   HEAP32[tempDoublePtr >> 2] = $151;
   HEAP32[tempDoublePtr + 4 >> 2] = $149 | $10;
   $$0 = +HEAPF64[tempDoublePtr >> 3];
   return +$$0;
  }
 }
 $23 = $x * $y;
 $$0 = $23 / $23;
 return +$$0;
}

function _srdlg($w) {
 $w = $w | 0;
 var $$0 = 0, $$neg$i$i = 0, $$neg$i$i18 = 0, $$neg$i$i6 = 0, $$ph29 = 0, $1 = 0, $100 = 0, $101 = 0, $103 = 0, $104 = 0, $106 = 0, $109 = 0, $11 = 0, $110 = 0, $118 = 0, $123 = 0, $128 = 0, $129 = 0, $131 = 0, $133 = 0, $135 = 0, $137 = 0, $141 = 0, $145 = 0, $146 = 0, $148 = 0, $149 = 0, $15 = 0, $151 = 0, $154 = 0, $155 = 0, $163 = 0, $169 = 0, $18 = 0, $2 = 0, $23 = 0, $26 = 0, $27 = 0, $30 = 0, $33 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $65 = 0, $66 = 0, $74 = 0, $80 = 0, $83 = 0, $85 = 0, $87 = 0, $89 = 0, $91 = 0, $96 = 0, $i$111$i$i = 0, $i$111$i$i19 = 0, $i$111$i$i7 = 0, $i$2$i$i = 0, $i$2$i$i11 = 0, $i$2$i$i23 = 0, $q$0$lcssa$i = 0, $q$07$i = 0, $w25$ph = 0, $w25$ph28 = 0, label = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $1 = $w + 12 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $4 = $w + ($2 + 4 + ($2 & 1) << 2) | 0;
 $6 = HEAP32[$w + 8 >> 2] | 0;
 do if ((HEAP8[$4 + ($6 + -1) >> 0] | 0) == 95) {
  $11 = $4 + ($6 + -2) | 0;
  L6 : do if ($4 >>> 0 < $11 >>> 0) {
   $q$07$i = $11;
   while (1) {
    if ((HEAP8[$q$07$i >> 0] | 0) == 95) {
     $q$0$lcssa$i = $q$07$i;
     break L6;
    }
    $15 = $q$07$i + -1 | 0;
    if ($4 >>> 0 < $15 >>> 0) $q$07$i = $15; else {
     $q$0$lcssa$i = $15;
     break;
    }
   }
  } else $q$0$lcssa$i = $11; while (0);
  if (($4 | 0) == ($q$0$lcssa$i | 0)) $w25$ph = 0; else {
   $18 = $q$0$lcssa$i;
   if (($11 | 0) == ($q$0$lcssa$i | 0)) {
    $169 = 0;
    label = 9;
   } else {
    $23 = _str($11 - $18 | 0, $q$0$lcssa$i + 1 | 0) | 0;
    if (!$23) {
     $$ph29 = 0;
     $w25$ph28 = 0;
    } else {
     $169 = $23;
     label = 9;
    }
   }
   if ((label | 0) == 9) {
    $26 = $18 - $4 | 0;
    $27 = _ga(1024, $26, 1, 0) | 0;
    if (!$27) {
     $w25$ph = 0;
     break;
    }
    $30 = HEAP32[$27 + 12 >> 2] | 0;
    $33 = HEAP32[$1 >> 2] | 0;
    _memcpy($27 + ($30 + 4 + ($30 & 1) << 2) | 0, $w + ($33 + 4 + ($33 & 1) << 2) | 0, $26 | 0) | 0;
    $$ph29 = $169;
    $w25$ph28 = $27;
   }
   $36 = _stfind($$ph29) | 0;
   if (!$36) {
    $$0 = 0;
    return $$0 | 0;
   }
   $39 = HEAP32[$w25$ph28 + 12 >> 2] | 0;
   $41 = $w25$ph28 + ($39 + 4 + ($39 & 1) << 2) | 0;
   $43 = HEAP32[$36 + 12 >> 2] | 0;
   $45 = $36 + ($43 + 4 + ($43 & 1) << 2) | 0;
   $47 = HEAP32[$36 + 8 >> 2] | 0;
   $56 = (HEAP8[$41 + ((HEAP32[$w25$ph28 + 8 >> 2] | 0) + -1) >> 0] | 0) + (HEAPU8[$41 >> 0] << 8) | 0;
   $57 = ($56 | 0) % ($47 | 0) | 0;
   $59 = ($56 | 0) % ($47 + -2 | 0) | 0;
   $60 = $59 + 1 | 0;
   $$neg$i$i = ~$59;
   $62 = HEAP32[$45 + ($57 << 3) >> 2] | 0;
   L21 : do if (!$62) $i$2$i$i = $57; else {
    $65 = $62;
    $i$111$i$i = $57;
    while (1) {
     $66 = HEAP32[$65 + 12 >> 2] | 0;
     if (!(_strcmp($41, $65 + ($66 + 4 + ($66 & 1) << 2) | 0) | 0)) {
      $i$2$i$i = $i$111$i$i;
      break L21;
     }
     $74 = $i$111$i$i + $$neg$i$i + (($i$111$i$i | 0) < ($60 | 0) ? $47 : 0) | 0;
     $65 = HEAP32[$45 + ($74 << 3) >> 2] | 0;
     if (!$65) {
      $i$2$i$i = $74;
      break;
     } else $i$111$i$i = $74;
    }
   } while (0);
   $$0 = HEAP32[$45 + ($i$2$i$i << 3) + 4 >> 2] | 0;
   return $$0 | 0;
  }
 } else $w25$ph = $w; while (0);
 $80 = HEAP32[894] | 0;
 if (!$80) {
  $129 = HEAP32[$w25$ph + 12 >> 2] | 0;
  $141 = HEAP32[$w25$ph + 8 >> 2] | 0;
 } else {
  $83 = HEAP32[$w25$ph + 12 >> 2] | 0;
  $85 = $w25$ph + ($83 + 4 + ($83 & 1) << 2) | 0;
  $87 = HEAP32[$80 + 12 >> 2] | 0;
  $89 = $80 + ($87 + 4 + ($87 & 1) << 2) | 0;
  $91 = HEAP32[$80 + 8 >> 2] | 0;
  $96 = HEAP32[$w25$ph + 8 >> 2] | 0;
  $100 = (HEAP8[$85 + ($96 + -1) >> 0] | 0) + (HEAPU8[$85 >> 0] << 8) | 0;
  $101 = ($100 | 0) % ($91 | 0) | 0;
  $103 = ($100 | 0) % ($91 + -2 | 0) | 0;
  $104 = $103 + 1 | 0;
  $$neg$i$i6 = ~$103;
  $106 = HEAP32[$89 + ($101 << 3) >> 2] | 0;
  L31 : do if (!$106) $i$2$i$i11 = $101; else {
   $109 = $106;
   $i$111$i$i7 = $101;
   while (1) {
    $110 = HEAP32[$109 + 12 >> 2] | 0;
    if (!(_strcmp($85, $109 + ($110 + 4 + ($110 & 1) << 2) | 0) | 0)) {
     $i$2$i$i11 = $i$111$i$i7;
     break L31;
    }
    $118 = $i$111$i$i7 + $$neg$i$i6 + (($i$111$i$i7 | 0) < ($104 | 0) ? $91 : 0) | 0;
    $109 = HEAP32[$89 + ($118 << 3) >> 2] | 0;
    if (!$109) {
     $i$2$i$i11 = $118;
     break;
    } else $i$111$i$i7 = $118;
   }
  } while (0);
  $123 = HEAP32[$89 + ($i$2$i$i11 << 3) + 4 >> 2] | 0;
  if (!$123) {
   $129 = $83;
   $141 = $96;
  } else {
   $$0 = ($123 | 0) == (HEAP32[620] | 0) ? 0 : $123;
   return $$0 | 0;
  }
 }
 $128 = HEAP32[892] | 0;
 $131 = $w25$ph + ($129 + 4 + ($129 & 1) << 2) | 0;
 $133 = HEAP32[$128 + 12 >> 2] | 0;
 $135 = $128 + ($133 + 4 + ($133 & 1) << 2) | 0;
 $137 = HEAP32[$128 + 8 >> 2] | 0;
 $145 = (HEAP8[$131 + ($141 + -1) >> 0] | 0) + (HEAPU8[$131 >> 0] << 8) | 0;
 $146 = ($145 | 0) % ($137 | 0) | 0;
 $148 = ($145 | 0) % ($137 + -2 | 0) | 0;
 $149 = $148 + 1 | 0;
 $$neg$i$i18 = ~$148;
 $151 = HEAP32[$135 + ($146 << 3) >> 2] | 0;
 L39 : do if (!$151) $i$2$i$i23 = $146; else {
  $154 = $151;
  $i$111$i$i19 = $146;
  while (1) {
   $155 = HEAP32[$154 + 12 >> 2] | 0;
   if (!(_strcmp($131, $154 + ($155 + 4 + ($155 & 1) << 2) | 0) | 0)) {
    $i$2$i$i23 = $i$111$i$i19;
    break L39;
   }
   $163 = $i$111$i$i19 + $$neg$i$i18 + (($i$111$i$i19 | 0) < ($149 | 0) ? $137 : 0) | 0;
   $154 = HEAP32[$135 + ($163 << 3) >> 2] | 0;
   if (!$154) {
    $i$2$i$i23 = $163;
    break;
   } else $i$111$i$i19 = $163;
  }
 } while (0);
 $$0 = HEAP32[$135 + ($i$2$i$i23 << 3) + 4 >> 2] | 0;
 return $$0 | 0;
}

function _tokens($w) {
 $w = $w | 0;
 var $$0$i = 0, $$lcssa = 0, $$sum4$i = 0, $$sum7$i = 0, $0 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $21 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $32 = 0, $35 = 0, $4 = 0, $47 = 0, $52 = 0, $55 = 0, $58 = 0, $6 = 0, $61 = 0, $63 = 0, $64 = 0, $75 = 0, $78 = 0, $8 = 0, $81 = 0, $83 = 0, $e$0$i = 0, $i$011$i$i = 0, $i$032$i = 0, $i1$07$i$i = 0, $m$0$lcssa$i$i = 0, $m$010$i$i = 0, $m$1$i$i = 0, $or$cond$i$i = 0, $or$cond2$i$i = 0, $p$08$i$i = 0, $p$14$i$i = 0, $t$09$i$i = 0, $t$15$i$i = 0, $u$033$i = 0, $x$0$lcssa$i = 0, $x$030$i = 0, $x$030$i$lcssa68 = 0, $x$030$i$lcssa69 = 0, $x$030$i72 = 0, $x$06$i$i = 0, $x$1$i = 0, $x$1$i$i = 0, label = 0;
 $0 = _wordil($w) | 0;
 if (!(($w | 0) != 0 & ($0 | 0) != 0)) {
  $$0$i = 0;
  return $$0$i | 0;
 }
 $4 = HEAP32[$w + 12 >> 2] | 0;
 $6 = $w + ($4 + 4 + ($4 & 1) << 2) | 0;
 $8 = HEAP32[$0 + 12 >> 2] | 0;
 $$sum4$i = $8 + 4 + ($8 & 1) | 0;
 $11 = HEAP32[$0 + ($$sum4$i << 2) >> 2] | 0;
 $12 = $11 >> 31 ^ $11;
 $14 = _ga(32, $12 + 5 | 0, 1, 0) | 0;
 if (!$14) {
  $$0$i = 0;
  return $$0$i | 0;
 }
 $17 = HEAP32[$14 + 12 >> 2] | 0;
 $$sum7$i = $17 + 4 + ($17 & 1) | 0;
 $21 = $14 + ($$sum7$i + 1 << 2) | 0;
 HEAP32[$14 + ($$sum7$i << 2) >> 2] = HEAP32[620];
 L7 : do if (($12 | 0) > 0) {
  $i$032$i = 0;
  $u$033$i = $0 + ($$sum4$i + 1 << 2) | 0;
  $x$030$i = $21;
  L9 : while (1) {
   $25 = HEAP32[$u$033$i >> 2] | 0;
   $26 = $6 + $25 | 0;
   $28 = HEAP32[$u$033$i + 4 >> 2] | 0;
   $u$033$i = $u$033$i + 8 | 0;
   $29 = HEAP8[$26 >> 0] | 0;
   $32 = HEAP8[5792 + ($29 << 24 >> 24) >> 0] | 0;
   do if (($28 | 0) > 1) {
    $35 = HEAP8[$6 + ($25 + -1 + $28) >> 0] | 0;
    if (!($32 << 24 >> 24 != 5 & $35 << 24 >> 24 == 46)) if (!($32 << 24 >> 24 != 2 & $35 << 24 >> 24 == 58)) {
     $e$0$i = $29;
     break;
    }
    $e$0$i = _spellin($28, $26) | 0;
   } else $e$0$i = $29; while (0);
   if ($29 << 24 >> 24 < 0 | $e$0$i << 24 >> 24 == 0) {
    $$lcssa = $26;
    label = 10;
    break;
   }
   $47 = _ds($e$0$i << 24 >> 24) | 0;
   if (!$47) {
    $$0$i = 0;
    label = 36;
    break;
   }
   do if (!(HEAP32[$47 >> 2] & 16384)) HEAP32[$x$030$i >> 2] = $47; else {
    $52 = $32 << 24 >> 24;
    if (($52 | 0) == 5 | ($52 | 0) == 1) {
     $61 = _connum($28, $26) | 0;
     HEAP32[$x$030$i >> 2] = $61;
     if (!$61) {
      $$0$i = 0;
      label = 36;
      break L9;
     } else break;
    } else if (($52 | 0) == 8) {
     $63 = ($28 | 0) > 2;
     if ($63) {
      $64 = $28 + -2 | 0;
      $i$011$i$i = 0;
      $m$010$i$i = 0;
      $p$08$i$i = 0;
      $t$09$i$i = $26;
      while (1) {
       $t$09$i$i = $t$09$i$i + 1 | 0;
       $or$cond$i$i = $p$08$i$i << 24 >> 24 == 0 & (HEAP8[$t$09$i$i >> 0] | 0) == 39;
       $m$1$i$i = ($or$cond$i$i & 1 ^ 1) + $m$010$i$i | 0;
       $i$011$i$i = $i$011$i$i + 1 | 0;
       if (($i$011$i$i | 0) == ($64 | 0)) {
        $m$0$lcssa$i$i = $m$1$i$i;
        break;
       } else {
        $m$010$i$i = $m$1$i$i;
        $p$08$i$i = $or$cond$i$i & 1;
       }
      }
     } else $m$0$lcssa$i$i = 0;
     $75 = _ga(2, $m$0$lcssa$i$i, ($m$0$lcssa$i$i | 0) != 1 & 1, 0) | 0;
     if (!$75) {
      $x$030$i$lcssa68 = $x$030$i;
      label = 24;
      break L9;
     }
     $78 = HEAP32[$75 + 12 >> 2] | 0;
     if (!$63) {
      HEAP32[$x$030$i >> 2] = $75;
      break;
     }
     $81 = $28 + -2 | 0;
     $i1$07$i$i = 0;
     $p$14$i$i = 0;
     $t$15$i$i = $26;
     $x$06$i$i = $75 + ($78 + 4 + ($78 & 1) << 2) | 0;
     while (1) {
      $t$15$i$i = $t$15$i$i + 1 | 0;
      $83 = HEAP8[$t$15$i$i >> 0] | 0;
      $or$cond2$i$i = $p$14$i$i << 24 >> 24 == 0 & $83 << 24 >> 24 == 39;
      if ($or$cond2$i$i) $x$1$i$i = $x$06$i$i; else {
       HEAP8[$x$06$i$i >> 0] = $83;
       $x$1$i$i = $x$06$i$i + 1 | 0;
      }
      $i1$07$i$i = $i1$07$i$i + 1 | 0;
      if (($i1$07$i$i | 0) == ($81 | 0)) break; else {
       $p$14$i$i = $or$cond2$i$i & 1;
       $x$06$i$i = $x$1$i$i;
      }
     }
     HEAP32[$x$030$i >> 2] = $75;
     break;
    } else if (($52 | 0) == 2) {
     if (!((_vnm($28, $26) | 0) << 24 >> 24)) {
      $x$030$i$lcssa69 = $x$030$i;
      label = 15;
      break L9;
     }
     $55 = _ga(1024, $28, 1, 0) | 0;
     if (!$55) {
      $x$030$i72 = $x$030$i;
      break L9;
     }
     $58 = HEAP32[$55 + 12 >> 2] | 0;
     _memcpy($55 + ($58 + 4 + ($58 & 1) << 2) | 0, $26 | 0, $28 | 0) | 0;
     HEAP32[$x$030$i >> 2] = $55;
     break;
    } else {
     label = 32;
     break L9;
    }
   } while (0);
   $x$1$i = $x$030$i + 4 | 0;
   $i$032$i = $i$032$i + 1 | 0;
   if (($i$032$i | 0) >= ($12 | 0)) {
    $x$0$lcssa$i = $x$1$i;
    break L7;
   } else $x$030$i = $x$1$i;
  }
  if ((label | 0) == 10) {
   _jsignalx(16, $w, $$lcssa - $6 | 0);
   _debug();
   $$0$i = 0;
   return $$0$i | 0;
  } else if ((label | 0) == 15) {
   _jsignal(4);
   $x$030$i72 = $x$030$i$lcssa69;
  } else if ((label | 0) == 24) {
   HEAP32[$x$030$i$lcssa68 >> 2] = 0;
   $$0$i = 0;
   return $$0$i | 0;
  } else if ((label | 0) == 32) {
   _jsignal(3);
   $$0$i = 0;
   return $$0$i | 0;
  } else if ((label | 0) == 36) return $$0$i | 0;
  HEAP32[$x$030$i72 >> 2] = 0;
  $$0$i = 0;
  return $$0$i | 0;
 } else $x$0$lcssa$i = $21; while (0);
 HEAP32[$x$0$lcssa$i >> 2] = HEAP32[620];
 HEAP32[$x$0$lcssa$i + 4 >> 2] = HEAP32[620];
 HEAP32[$x$0$lcssa$i + 8 >> 2] = HEAP32[620];
 HEAP32[$x$0$lcssa$i + 12 >> 2] = HEAP32[620];
 $$0$i = $14;
 return $$0$i | 0;
}

function _canta($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$0$i = 0, $$lcssa = 0, $$sum2 = 0, $$sum4 = 0, $10 = 0, $100 = 0, $103 = 0, $106 = 0, $109 = 0, $115 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $24 = 0, $29 = 0, $32 = 0, $34 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $54 = 0, $57 = 0, $6 = 0, $62 = 0, $65 = 0, $66 = 0, $69 = 0, $72 = 0, $73 = 0, $8 = 0, $89 = 0, $92 = 0, $94 = 0, $98 = 0, $d$0$lcssa = 0, $d$031 = 0, $d$1 = 0, $ev$024$us = 0, $i$037 = 0, $i1$054 = 0, $i10$026$us = 0, $i12$023$us = 0, $i2$050$us = 0, $i4$044$us = 0, $i6$041 = 0, $i8$032 = 0, $k$040 = 0, $k$1$lcssa = 0, $k$130 = 0, $k$2 = 0, $k$322$us = 0, $pv$038 = 0, $qv$025$us = 0, $v$021$us = 0, $zr$0$ = 0, $zr$0$$lcssa = 0, $zr$053 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $6 = HEAP32[$a + 8 >> 2] | 0;
 $8 = HEAP32[$a + 12 >> 2] | 0;
 $$sum2 = $8 + 4 + ($8 & 1) | 0;
 $10 = $w + 12 | 0;
 if (($6 | 0) != (HEAP32[$10 >> 2] | 0)) {
  _jsignal(9);
  $$0 = 0;
  return $$0 | 0;
 }
 if (!$6) {
  $$0 = _ca($w) | 0;
  return $$0 | 0;
 }
 $14 = ($6 | 0) > 0;
 L12 : do if ($14) {
  $i1$054 = 0;
  $zr$053 = 0;
  while (1) {
   $17 = HEAP32[$a + ($i1$054 + $$sum2 << 2) >> 2] | 0;
   $zr$0$ = ($zr$053 | 0) > ($17 | 0) ? $zr$053 : $17;
   $i1$054 = $i1$054 + 1 | 0;
   if (($i1$054 | 0) == ($6 | 0)) {
    $zr$0$$lcssa = $zr$0$;
    break;
   } else $zr$053 = $zr$0$;
  }
  $20 = $zr$0$$lcssa + 1 | 0;
  if (($zr$0$$lcssa | 0) > -1) {
   if ($14) $i2$050$us = 0; else break;
   while (1) {
    $i4$044$us = 0;
    do {
     $24 = ($i2$050$us | 0) == (HEAP32[$a + ($i4$044$us + $$sum2 << 2) >> 2] | 0);
     $i4$044$us = $i4$044$us + 1 | 0;
    } while (($i4$044$us | 0) < ($6 | 0) & ($24 ^ 1));
    $i2$050$us = $i2$050$us + 1 | 0;
    if (!$24) break L12;
    if (($i2$050$us | 0) >= ($20 | 0)) {
     $115 = 1;
     break;
    }
   }
  } else $115 = 0;
  $29 = _ga(4, $6, 1, 0) | 0;
  if (!$29) {
   $$0 = 0;
   return $$0 | 0;
  }
  $32 = HEAP32[$29 + 12 >> 2] | 0;
  $$sum4 = $32 + 4 + ($32 & 1) | 0;
  $34 = _ga(32, $20, 1, 0) | 0;
  if (!$34) {
   $$0 = 0;
   return $$0 | 0;
  }
  $37 = HEAP32[$34 + 12 >> 2] | 0;
  $39 = $34 + ($37 + 4 + ($37 & 1) << 2) | 0;
  if ($14) {
   $40 = $6 + -1 | 0;
   $i6$041 = 0;
   $k$040 = 1;
   do {
    $41 = $40 - $i6$041 | 0;
    HEAP32[$29 + ($41 + $$sum4 << 2) >> 2] = $k$040;
    $k$040 = Math_imul(HEAP32[$w + 16 + ($41 << 2) >> 2] | 0, $k$040) | 0;
    $i6$041 = $i6$041 + 1 | 0;
   } while (($i6$041 | 0) != ($6 | 0));
  }
  L36 : do if ($115) {
   $i$037 = 0;
   $pv$038 = $39;
   while (1) {
    if ($14) {
     $d$031 = 0;
     $i8$032 = 0;
     $k$130 = 2147483647;
     while (1) {
      if (($i$037 | 0) == (HEAP32[$a + ($i8$032 + $$sum2 << 2) >> 2] | 0)) {
       $54 = HEAP32[$w + 16 + ($i8$032 << 2) >> 2] | 0;
       $d$1 = (HEAP32[$29 + ($i8$032 + $$sum4 << 2) >> 2] | 0) + $d$031 | 0;
       $k$2 = ($k$130 | 0) < ($54 | 0) ? $k$130 : $54;
      } else {
       $d$1 = $d$031;
       $k$2 = $k$130;
      }
      $i8$032 = $i8$032 + 1 | 0;
      if (($i8$032 | 0) == ($6 | 0)) {
       $d$0$lcssa = $d$1;
       $k$1$lcssa = $k$2;
       break;
      } else {
       $d$031 = $d$1;
       $k$130 = $k$2;
      }
     }
    } else {
     $d$0$lcssa = 0;
     $k$1$lcssa = 2147483647;
    }
    $57 = _apv($k$1$lcssa, 0, $d$0$lcssa) | 0;
    HEAP32[$pv$038 >> 2] = $57;
    if (!$57) {
     $$0 = 0;
     break;
    }
    $i$037 = $i$037 + 1 | 0;
    if (($i$037 | 0) >= ($20 | 0)) break L36; else $pv$038 = $pv$038 + 4 | 0;
   }
   return $$0 | 0;
  } while (0);
  $62 = _catalog($34) | 0;
  if (!$62) {
   $$0 = 0;
   return $$0 | 0;
  }
  $65 = HEAP32[$62 + 12 >> 2] | 0;
  $66 = $62 + 8 | 0;
  $69 = _ga(4, HEAP32[$66 >> 2] | 0, $20, $62 + 16 | 0) | 0;
  if (!$69) {
   $$0 = 0;
   return $$0 | 0;
  }
  $72 = HEAP32[$69 + 12 >> 2] | 0;
  $73 = HEAP32[$66 >> 2] | 0;
  do if (($73 | 0) > 0) {
   if (!$115) {
    _memset($69 + (($72 + ($72 & 1) << 2) + 16) | 0, 0, $73 << 2 | 0) | 0;
    break;
   }
   $ev$024$us = $69 + ($72 + 4 + ($72 & 1) << 2) | 0;
   $i10$026$us = 0;
   $qv$025$us = $62 + ($65 + 4 + ($65 & 1) << 2) | 0;
   while (1) {
    $92 = HEAP32[$qv$025$us >> 2] | 0;
    $94 = HEAP32[$92 + 12 >> 2] | 0;
    $i12$023$us = 0;
    $k$322$us = 0;
    $v$021$us = $92 + ($94 + 4 + ($94 & 1) << 2) | 0;
    while (1) {
     $89 = (HEAP32[$v$021$us >> 2] | 0) + $k$322$us | 0;
     $i12$023$us = $i12$023$us + 1 | 0;
     if (($i12$023$us | 0) >= ($20 | 0)) {
      $$lcssa = $89;
      break;
     } else {
      $k$322$us = $89;
      $v$021$us = $v$021$us + 4 | 0;
     }
    }
    HEAP32[$ev$024$us >> 2] = $$lcssa;
    $i10$026$us = $i10$026$us + 1 | 0;
    if (($i10$026$us | 0) == ($73 | 0)) break; else {
     $ev$024$us = $ev$024$us + 4 | 0;
     $qv$025$us = $qv$025$us + 4 | 0;
    }
   }
  } while (0);
  $98 = $w + 8 | 0;
  $100 = _ga(HEAP32[$w >> 2] | 0, HEAP32[$98 >> 2] | 0, 1, 0) | 0;
  if (!$100) $$0$i = 0; else {
   $103 = HEAP32[$100 + 12 >> 2] | 0;
   $106 = HEAP32[$10 >> 2] | 0;
   $109 = HEAP32[$98 >> 2] | 0;
   _memcpy($100 + ($103 + 4 + ($103 & 1) << 2) | 0, $w + ($106 + 4 + ($106 & 1) << 2) | 0, Math_imul(_bp(HEAP32[$w >> 2] | 0) | 0, $109) | 0) | 0;
   $$0$i = $100;
  }
  $$0 = _gc(_from($69, $$0$i) | 0, $2) | 0;
  return $$0 | 0;
 } while (0);
 _jsignal(6);
 $$0 = 0;
 return $$0 | 0;
}

function _zrem($agg$result, $u, $v) {
 $agg$result = $agg$result | 0;
 $u = $u | 0;
 $v = $v | 0;
 var $$pre = 0.0, $0 = 0.0, $1 = 0, $15 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $24 = 0.0, $38 = 0, $39 = 0, $40 = 0.0, $43 = 0.0, $47 = 0.0, $49 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $61 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $80 = 0.0, $82 = 0.0, $9 = 0.0, $94 = 0.0, $96 = 0.0, $98 = 0.0, $a$0$i = 0.0, $b$0$i = 0.0, $c$0$i = 0.0, $d$0$i = 0.0, $or$cond$i = 0, $or$cond$i21 = 0, $or$cond$i22 = 0, $s = 0, $s$byval_copy = 0, $t = 0, $t$byval_copy = 0, $zi$0$i = 0.0, $zi$0$i$i = 0.0, $zi$0$i8 = 0.0, $zr$0$i = 0.0, $zr$0$i$i = 0.0, $zr$0$i7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $t$byval_copy = sp + 48 | 0;
 $s$byval_copy = sp + 32 | 0;
 $s = sp + 16 | 0;
 $t = sp;
 $0 = +HEAPF64[$u >> 3];
 $1 = $0 != 0.0;
 $$pre = +HEAPF64[$u + 8 >> 3];
 do if ($1) {
  $19 = +HEAPF64[$v + 8 >> 3];
  $98 = +HEAPF64[$v >> 3];
  $or$cond$i22 = $1 | $$pre != 0.0;
  label = 6;
 } else {
  if (!($$pre != 0.0)) {
   HEAP32[$agg$result >> 2] = HEAP32[$v >> 2];
   HEAP32[$agg$result + 4 >> 2] = HEAP32[$v + 4 >> 2];
   HEAP32[$agg$result + 8 >> 2] = HEAP32[$v + 8 >> 2];
   HEAP32[$agg$result + 12 >> 2] = HEAP32[$v + 12 >> 2];
   STACKTOP = sp;
   return;
  }
  $7 = +HEAPF64[$v >> 3];
  $9 = +HEAPF64[$v + 8 >> 3];
  $or$cond$i = $1 | $$pre != 0.0;
  if ($or$cond$i) {
   $19 = $9;
   $98 = $7;
   $or$cond$i22 = 1;
   label = 6;
  } else if ($7 != 0.0 | $9 != 0.0) {
   $38 = ($7 < 0.0 & 1) << 1 | $9 < 0.0;
   if (($38 | 0) == 1) {
    $43 = +HEAPF64[317];
    if ($7 > -$9) {
     $94 = $7;
     $96 = $9;
     $or$cond$i21 = $or$cond$i;
     $zi$0$i = 0.0;
     $zr$0$i = $43;
     break;
    }
    $94 = $7;
    $96 = $9;
    $or$cond$i21 = $or$cond$i;
    $zi$0$i = -$43;
    $zr$0$i = 0.0;
    break;
   } else if (($38 | 0) == 2) {
    $47 = +HEAPF64[317];
    if (!($7 < -$9)) {
     $94 = $7;
     $96 = $9;
     $or$cond$i21 = $or$cond$i;
     $zi$0$i = $47;
     $zr$0$i = 0.0;
     break;
    }
    $94 = $7;
    $96 = $9;
    $or$cond$i21 = $or$cond$i;
    $zi$0$i = 0.0;
    $zr$0$i = -$47;
    break;
   } else if (!$38) {
    $39 = $7 > $9;
    $40 = +HEAPF64[317];
    $94 = $7;
    $96 = $9;
    $or$cond$i21 = $or$cond$i;
    $zi$0$i = $39 ? 0.0 : $40;
    $zr$0$i = $39 ? $40 : 0.0;
    break;
   } else if (($38 | 0) == 3) {
    $49 = $7 < $9;
    $51 = -+HEAPF64[317];
    $94 = $7;
    $96 = $9;
    $or$cond$i21 = $or$cond$i;
    $zi$0$i = $49 ? 0.0 : $51;
    $zr$0$i = $49 ? $51 : 0.0;
    break;
   } else {
    $94 = $7;
    $96 = $9;
    $or$cond$i21 = 0;
    $zi$0$i = 0.0;
    $zr$0$i = 0.0;
    break;
   }
  } else {
   $94 = $7;
   $96 = $9;
   $or$cond$i21 = 0;
   $zi$0$i = 0.0;
   $zr$0$i = 0.0;
  }
 } while (0);
 if ((label | 0) == 6) {
  $15 = -$$pre;
  if (($0 >= 0.0 ? $0 : -$0) < ($$pre >= 0.0 ? $$pre : $15)) {
   $a$0$i = -$19;
   $b$0$i = $98;
   $c$0$i = $15;
   $d$0$i = $0;
  } else {
   $a$0$i = $98;
   $b$0$i = $19;
   $c$0$i = $0;
   $d$0$i = $$pre;
  }
  $20 = $a$0$i / $c$0$i;
  $21 = $b$0$i / $c$0$i;
  $22 = $d$0$i / $c$0$i;
  $24 = $22 * $22 + 1.0;
  $94 = $98;
  $96 = $19;
  $or$cond$i21 = $or$cond$i22;
  $zi$0$i = ($21 - $20 * $22) / $24;
  $zr$0$i = ($20 + $21 * $22) / $24;
 }
 $52 = +HEAPF64[304];
 $53 = +HEAPF64[305];
 $54 = $52 - $zr$0$i;
 $55 = $53 - $zi$0$i;
 $56 = +Math_floor(+$54);
 $57 = $54 - $56;
 $58 = +Math_floor(+$55);
 $59 = $55 - $58;
 $61 = +HEAPF64[52];
 do if (!($61 + ($57 + $59) >= 1.0)) {
  $zi$0$i$i = $58;
  $zr$0$i$i = $56;
 } else if (!($57 >= $59)) {
  $zi$0$i$i = $58 + 1.0;
  $zr$0$i$i = $56;
  break;
 } else {
  $zi$0$i$i = $58;
  $zr$0$i$i = $56 + 1.0;
  break;
 } while (0);
 HEAPF64[$s >> 3] = $52 - $zr$0$i$i;
 HEAPF64[$s + 8 >> 3] = $53 - $zi$0$i$i;
 $70 = +Math_floor(+$zr$0$i);
 $71 = $zr$0$i - $70;
 $72 = +Math_floor(+$zi$0$i);
 $73 = $zi$0$i - $72;
 do if (!($61 + ($71 + $73) >= 1.0)) {
  $80 = $70;
  $82 = $72;
 } else if (!($71 >= $73)) {
  $80 = $70;
  $82 = $72 + 1.0;
  break;
 } else {
  $80 = $70 + 1.0;
  $82 = $72;
  break;
 } while (0);
 HEAPF64[$t >> 3] = $80;
 HEAPF64[$t + 8 >> 3] = $82;
 HEAP32[$s$byval_copy >> 2] = HEAP32[$s >> 2];
 HEAP32[$s$byval_copy + 4 >> 2] = HEAP32[$s + 4 >> 2];
 HEAP32[$s$byval_copy + 8 >> 2] = HEAP32[$s + 8 >> 2];
 HEAP32[$s$byval_copy + 12 >> 2] = HEAP32[$s + 12 >> 2];
 HEAP32[$t$byval_copy >> 2] = HEAP32[$t >> 2];
 HEAP32[$t$byval_copy + 4 >> 2] = HEAP32[$t + 4 >> 2];
 HEAP32[$t$byval_copy + 8 >> 2] = HEAP32[$t + 8 >> 2];
 HEAP32[$t$byval_copy + 12 >> 2] = HEAP32[$t + 12 >> 2];
 if ((_zeq($s$byval_copy, $t$byval_copy) | 0) << 24 >> 24) {
  HEAP32[$agg$result >> 2] = HEAP32[608];
  HEAP32[$agg$result + 4 >> 2] = HEAP32[609];
  HEAP32[$agg$result + 8 >> 2] = HEAP32[610];
  HEAP32[$agg$result + 12 >> 2] = HEAP32[611];
  STACKTOP = sp;
  return;
 }
 if ($or$cond$i21) if ($80 != 0.0 | $82 != 0.0) {
  $zi$0$i8 = $82 * $0 + $80 * $$pre;
  $zr$0$i7 = $80 * $0 - $82 * $$pre;
 } else {
  $zi$0$i8 = 0.0;
  $zr$0$i7 = 0.0;
 } else {
  $zi$0$i8 = 0.0;
  $zr$0$i7 = 0.0;
 }
 HEAPF64[$agg$result >> 3] = $94 - $zr$0$i7;
 HEAPF64[$agg$result + 8 >> 3] = $96 - $zi$0$i8;
 STACKTOP = sp;
 return;
}

function _match($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $39 = 0, $49 = 0, $5 = 0, $52 = 0, $55 = 0, $58 = 0, $60 = 0, $61 = 0, $62 = 0, $68 = 0, $69 = 0, $7 = 0, $72 = 0, $75 = 0, $78 = 0, $81 = 0, $9 = 0, $91 = 0, $97 = 0, $av$0 = 0, $b$1 = 0, $b$3 = 0, $i$032 = 0, $i3$022 = 0, $i7$016 = 0, $u$030 = 0, $u1$020 = 0, $u5$014 = 0, $u5$014$byval_copy = 0, $v$031 = 0, $v2$021 = 0, $v6$015 = 0, $v6$015$byval_copy = 0, $wv$0 = 0, $z$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $v6$015$byval_copy = sp + 16 | 0;
 $u5$014$byval_copy = sp;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $5 = HEAP32[$a >> 2] | 0;
 $7 = HEAP32[$a + 12 >> 2] | 0;
 $9 = $a + ($7 + 4 + ($7 & 1) << 2) | 0;
 $10 = HEAP32[$w >> 2] | 0;
 $12 = HEAP32[$w + 12 >> 2] | 0;
 $14 = $w + ($12 + 4 + ($12 & 1) << 2) | 0;
 $16 = HEAP32[$a + 8 >> 2] | 0;
 $17 = ($5 | 0) > ($10 | 0);
 $18 = $17 ? $5 : $10;
 if (($7 | 0) == ($12 | 0) ? ($16 | 0) == (HEAP32[$w + 8 >> 2] | 0) : 0) if (!(_memcmp($a + 16 | 0, $w + 16 | 0, $7 << 2) | 0)) {
  if (!$16) {
   $$0 = HEAP32[646] | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  if (!((_homo($5, $10) | 0) << 24 >> 24)) {
   $$0 = HEAP32[660] | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  L15 : do if (!($18 & 32)) {
   if ($18 & 64) {
    $49 = _shape($a) | 0;
    $52 = _reshape($49, _box(HEAP32[660] | 0) | 0) | 0;
    if (!$52) {
     $$0 = 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $55 = ($5 & 32 | 0) != 0;
    if ($55) $60 = $52; else $60 = _kast(0, $a) | 0;
    $58 = ($10 & 32 | 0) != 0;
    if ($58) $61 = $52; else $61 = _kast(0, $w) | 0;
    $62 = _match($60, $61) | 0;
    if (!$62) {
     $$0 = 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
    if (($62 | 0) == (HEAP32[660] | 0)) {
     $z$1 = $62;
     break;
    }
    if ($55) $68 = $a; else $68 = _kast(1, $a) | 0;
    if ($58) $69 = $w; else $69 = _kast(1, $w) | 0;
    $z$1 = _match($68, $69) | 0;
    break;
   }
   do if (($18 | 0) == ($5 | 0)) $av$0 = $9; else {
    $72 = _cvt($18, $a) | 0;
    if (!$72) {
     $$0 = 0;
     STACKTOP = sp;
     return $$0 | 0;
    } else {
     $75 = HEAP32[$72 + 12 >> 2] | 0;
     $av$0 = $72 + ($75 + 4 + ($75 & 1) << 2) | 0;
     break;
    }
   } while (0);
   do if ($17) {
    $78 = _cvt($18, $w) | 0;
    if (!$78) {
     $$0 = 0;
     STACKTOP = sp;
     return $$0 | 0;
    } else {
     $81 = HEAP32[$78 + 12 >> 2] | 0;
     $wv$0 = $78 + ($81 + 4 + ($81 & 1) << 2) | 0;
     break;
    }
   } else $wv$0 = $14; while (0);
   if (($18 & 24 | 0) == 0 | +HEAPF64[52] == 0.0) {
    $91 = (_memcmp($av$0, $wv$0, Math_imul(_bp($18) | 0, $16) | 0) | 0) != 0;
    $z$1 = $91 ? HEAP32[660] | 0 : HEAP32[646] | 0;
    break;
   }
   $97 = ($16 | 0) > 0;
   if (!($18 & 8)) {
    L63 : do if ($97) {
     $i7$016 = 0;
     $u5$014 = $av$0;
     $v6$015 = $wv$0;
     while (1) {
      HEAP32[$u5$014$byval_copy >> 2] = HEAP32[$u5$014 >> 2];
      HEAP32[$u5$014$byval_copy + 4 >> 2] = HEAP32[$u5$014 + 4 >> 2];
      HEAP32[$u5$014$byval_copy + 8 >> 2] = HEAP32[$u5$014 + 8 >> 2];
      HEAP32[$u5$014$byval_copy + 12 >> 2] = HEAP32[$u5$014 + 12 >> 2];
      HEAP32[$v6$015$byval_copy >> 2] = HEAP32[$v6$015 >> 2];
      HEAP32[$v6$015$byval_copy + 4 >> 2] = HEAP32[$v6$015 + 4 >> 2];
      HEAP32[$v6$015$byval_copy + 8 >> 2] = HEAP32[$v6$015 + 8 >> 2];
      HEAP32[$v6$015$byval_copy + 12 >> 2] = HEAP32[$v6$015 + 12 >> 2];
      if (!((_zeq($u5$014$byval_copy, $v6$015$byval_copy) | 0) << 24 >> 24)) {
       $b$3 = 1;
       break L63;
      }
      $i7$016 = $i7$016 + 1 | 0;
      if (($i7$016 | 0) >= ($16 | 0)) {
       $b$3 = 0;
       break;
      } else {
       $u5$014 = $u5$014 + 16 | 0;
       $v6$015 = $v6$015 + 16 | 0;
      }
     }
    } else $b$3 = 0; while (0);
    $z$1 = $b$3 ? HEAP32[660] | 0 : HEAP32[646] | 0;
    break;
   } else {
    L56 : do if ($97) {
     $i3$022 = 0;
     $u1$020 = $av$0;
     $v2$021 = $wv$0;
     while (1) {
      if (!((_teq(+HEAPF64[$u1$020 >> 3], +HEAPF64[$v2$021 >> 3]) | 0) << 24 >> 24)) {
       $b$1 = 1;
       break L56;
      }
      $i3$022 = $i3$022 + 1 | 0;
      if (($i3$022 | 0) >= ($16 | 0)) {
       $b$1 = 0;
       break;
      } else {
       $u1$020 = $u1$020 + 8 | 0;
       $v2$021 = $v2$021 + 8 | 0;
      }
     }
    } else $b$1 = 0; while (0);
    $z$1 = $b$1 ? HEAP32[660] | 0 : HEAP32[646] | 0;
    break;
   }
  } else if (($16 | 0) > 0) {
   $i$032 = 0;
   $u$030 = $9;
   $v$031 = $14;
   while (1) {
    $39 = _match(HEAP32[$u$030 >> 2] | 0, HEAP32[$v$031 >> 2] | 0) | 0;
    if (($39 | 0) == 0 | ($39 | 0) == (HEAP32[660] | 0)) {
     $z$1 = $39;
     break L15;
    }
    $i$032 = $i$032 + 1 | 0;
    if (($i$032 | 0) >= ($16 | 0)) {
     $z$1 = $39;
     break;
    } else {
     $u$030 = $u$030 + 4 | 0;
     $v$031 = $v$031 + 4 | 0;
    }
   }
  } else $z$1 = 0; while (0);
  $$0 = _gc($z$1, $2) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$0 = HEAP32[660] | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _gtrain($w) {
 $w = $w | 0;
 var $$0 = 0, $$sum1 = 0, $10 = 0, $102 = 0, $103 = 0, $111 = 0, $112 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $22 = 0, $33 = 0, $35 = 0, $36 = 0, $39 = 0, $44 = 0, $51 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $73 = 0, $74 = 0, $83 = 0, $88 = 0, $96 = 0, $f1$0$i = 0, $f1$0$i12 = 0, $f2$0$i = 0, $f2$0$i13 = 0, $i$030 = 0, $i1$024 = 0, $i3$022 = 0, $j$023 = 0, $j$120 = 0, $t$0$i = 0, $t$0$i14 = 0, $u$0$lcssa = 0, $u$025 = 0, $u$1$lcssa = 0, $u$121 = 0, label = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 8 >> 2] | 0;
 if ((HEAP32[$w + 12 >> 2] | 0) >= 2) {
  _jsignal(14);
  $$0 = 0;
  return $$0 | 0;
 }
 if (!$2) {
  _jsignal(9);
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 32)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $10 = _every($w, 299) | 0;
 if (!$10) {
  $$0 = 0;
  return $$0 | 0;
 }
 $13 = HEAP32[$10 + 12 >> 2] | 0;
 $$sum1 = $13 + 4 + ($13 & 1) | 0;
 $15 = $10 + ($$sum1 << 2) | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 if (!($17 & 896)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $22 = ($17 & 128 | 0) != 0 ? $17 : 768;
 L23 : do if (($2 | 0) > 0) {
  $i$030 = 0;
  while (1) {
   if (!(HEAP32[HEAP32[$10 + ($i$030 + $$sum1 << 2) >> 2] >> 2] & $22)) break;
   $i$030 = $i$030 + 1 | 0;
   if (($i$030 | 0) >= ($2 | 0)) break L23;
  }
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 } while (0);
 $33 = $2 + -1 | 0;
 if ($22 & 128) {
  $35 = HEAP32[$10 + ($$sum1 + $33 << 2) >> 2] | 0;
  $36 = ($33 | 0) / 2 | 0;
  L32 : do if (($33 | 0) > 1) {
   $39 = $$sum1 + 1 | 0;
   $i1$024 = 0;
   $j$023 = $2 + -3 | 0;
   $u$025 = $35;
   while (1) {
    $44 = _folk(HEAP32[$10 + ($j$023 + $$sum1 << 2) >> 2] | 0, HEAP32[$10 + ($39 + $j$023 << 2) >> 2] | 0, $u$025) | 0;
    if (!$44) {
     $$0 = 0;
     break;
    }
    $i1$024 = $i1$024 + 1 | 0;
    if (($i1$024 | 0) >= ($36 | 0)) {
     $u$0$lcssa = $44;
     break L32;
    } else {
     $j$023 = $j$023 + -2 | 0;
     $u$025 = $44;
    }
   }
   return $$0 | 0;
  } else $u$0$lcssa = $35; while (0);
  if ($2 & 1) {
   $$0 = $u$0$lcssa;
   return $$0 | 0;
  }
  $51 = HEAP32[$15 >> 2] | 0;
  if (!(($u$0$lcssa | 0) != 0 & ($51 | 0) != 0)) {
   $$0 = 0;
   return $$0 | 0;
  }
  if (!(HEAP32[$51 >> 2] & 128 & HEAP32[$u$0$lcssa >> 2])) {
   _jsignal(3);
   $$0 = 0;
   return $$0 | 0;
  } else {
   $$0 = _fdef(-22, 128, 325, 326, $51, $u$0$lcssa, 0, 0, 127, 127, 127) | 0;
   return $$0 | 0;
  }
 }
 $60 = ($33 | 0) / 2 | 0;
 L51 : do if (($33 | 0) > 1) {
  $62 = $$sum1 + 1 | 0;
  $i3$022 = 0;
  $j$120 = 1;
  $u$121 = $16;
  L53 : while (1) {
   $64 = HEAP32[$10 + ($j$120 + $$sum1 << 2) >> 2] | 0;
   $66 = HEAP32[$10 + ($62 + $j$120 << 2) >> 2] | 0;
   if (!(($u$121 | 0) != 0 & ($64 | 0) != 0 & ($66 | 0) != 0)) {
    $$0 = 0;
    label = 51;
    break;
   }
   $73 = (HEAP32[$u$121 >> 2] | 0) >>> 5 & 8 ^ 8;
   $74 = HEAP32[$64 >> 2] | 0;
   if (!($74 & 127)) if (!($74 & 128)) $83 = $74 >>> 7 & 2 ^ 6; else $83 = 2; else $83 = 0;
   switch ($83 + $73 + ((HEAP32[$66 >> 2] | 0) >>> 8 & 1 ^ 1) | 0) {
   case 15:
    {
     $f1$0$i = 0;
     $f2$0$i = 332;
     $t$0$i = 512;
     break;
    }
   case 11:
    {
     $f1$0$i = 0;
     $f2$0$i = 333;
     $t$0$i = 512;
     break;
    }
   case 6:
    {
     $f1$0$i = 0;
     $f2$0$i = 328;
     $t$0$i = 512;
     break;
    }
   case 7:
    {
     $f1$0$i = 0;
     $f2$0$i = 329;
     $t$0$i = 512;
     break;
    }
   case 12:
    {
     $f1$0$i = 0;
     $f2$0$i = 330;
     $t$0$i = 512;
     break;
    }
   case 14:
    {
     $f1$0$i = 0;
     $f2$0$i = 331;
     $t$0$i = 512;
     break;
    }
   case 4:
    {
     $f1$0$i = 327;
     $f2$0$i = 0;
     $t$0$i = 256;
     break;
    }
   default:
    {
     label = 38;
     break L53;
    }
   }
   $88 = _fdef(-18, $t$0$i, $f1$0$i, $f2$0$i, $u$121, $64, $66, 0, 0, 0, 0) | 0;
   if (!$88) {
    $$0 = 0;
    label = 51;
    break;
   }
   $i3$022 = $i3$022 + 1 | 0;
   if (($i3$022 | 0) >= ($60 | 0)) {
    $u$1$lcssa = $88;
    break L51;
   } else {
    $j$120 = $j$120 + 2 | 0;
    $u$121 = $88;
   }
  }
  if ((label | 0) == 38) {
   _jsignal(3);
   $$0 = 0;
   return $$0 | 0;
  } else if ((label | 0) == 51) return $$0 | 0;
 } else $u$1$lcssa = $16; while (0);
 if ($2 & 1) {
  $$0 = $u$1$lcssa;
  return $$0 | 0;
 }
 $96 = HEAP32[$10 + ($$sum1 + $33 << 2) >> 2] | 0;
 if (!(($u$1$lcssa | 0) != 0 & ($96 | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $102 = (HEAP32[$u$1$lcssa >> 2] | 0) >>> 5 & 8 ^ 8;
 $103 = HEAP32[$96 >> 2] | 0;
 if (!($103 & 127)) if (!($103 & 128)) $112 = $103 >>> 7 & 2 ^ 6; else $112 = 2; else $112 = 0;
 $111 = $112 + $102 | 0;
 if (($111 | 0) == 4) {
  $f1$0$i12 = 334;
  $f2$0$i13 = 0;
  $t$0$i14 = 256;
 } else if (($111 | 0) == 12) {
  $f1$0$i12 = 0;
  $f2$0$i13 = 336;
  $t$0$i14 = 512;
 } else if (($111 | 0) == 6) {
  $f1$0$i12 = 335;
  $f2$0$i13 = 0;
  $t$0$i14 = 256;
 } else {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = _fdef(-19, $t$0$i14, $f1$0$i12, $f2$0$i13, $u$1$lcssa, $96, 0, 0, 0, 0, 0) | 0;
 return $$0 | 0;
}

function _zlcm($agg$result, $u, $v) {
 $agg$result = $agg$result | 0;
 $u = $u | 0;
 $v = $v | 0;
 var $0 = 0, $1 = 0.0, $11 = 0.0, $13 = 0, $14 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $27 = 0.0, $31 = 0.0, $33 = 0, $39 = 0.0, $46 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $54 = 0.0, $6 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $72 = 0.0, $76 = 0.0, $78 = 0, $80 = 0.0, $82 = 0.0, $a$0$i = 0.0, $b$0$i = 0.0, $c$0$i = 0.0, $d$0$i = 0.0, $u1 = 0, $u1$byval_copy = 0, $v2 = 0, $v2$byval_copy = 0, $z$sroa$0$0$i = 0.0, $z$sroa$5$0$i = 0.0, $zi$0$i = 0.0, $zi$0$i7 = 0.0, $zr$0$i = 0.0, $zr$0$i6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $v2$byval_copy = sp + 64 | 0;
 $u1$byval_copy = sp + 48 | 0;
 $0 = sp + 32 | 0;
 $v2 = sp + 16 | 0;
 $u1 = sp;
 $1 = +HEAPF64[$u >> 3];
 $2 = $1 != 0.0;
 if ($2) label = 3; else if (+HEAPF64[$u + 8 >> 3] != 0.0) label = 3;
 do if ((label | 0) == 3) {
  $6 = +HEAPF64[$v >> 3];
  $7 = $6 != 0.0;
  if (!$7) if (!(+HEAPF64[$v + 8 >> 3] != 0.0)) break;
  HEAP32[$v2 >> 2] = HEAP32[$v >> 2];
  HEAP32[$v2 + 4 >> 2] = HEAP32[$v + 4 >> 2];
  HEAP32[$v2 + 8 >> 2] = HEAP32[$v + 8 >> 2];
  HEAP32[$v2 + 12 >> 2] = HEAP32[$v + 12 >> 2];
  HEAP32[$u1 >> 2] = HEAP32[$u >> 2];
  HEAP32[$u1 + 4 >> 2] = HEAP32[$u + 4 >> 2];
  HEAP32[$u1 + 8 >> 2] = HEAP32[$u + 8 >> 2];
  HEAP32[$u1 + 12 >> 2] = HEAP32[$u + 12 >> 2];
  $11 = +HEAPF64[$u1 >> 3];
  $13 = $u1 + 8 | 0;
  $14 = +HEAPF64[$13 >> 3];
  if ($11 != 0.0 | $14 != 0.0) {
   $17 = $0 + 8 | 0;
   $18 = $v2 + 8 | 0;
   $21 = $11;
   $22 = $14;
   while (1) {
    HEAP32[$u1$byval_copy >> 2] = HEAP32[$u1 >> 2];
    HEAP32[$u1$byval_copy + 4 >> 2] = HEAP32[$u1 + 4 >> 2];
    HEAP32[$u1$byval_copy + 8 >> 2] = HEAP32[$u1 + 8 >> 2];
    HEAP32[$u1$byval_copy + 12 >> 2] = HEAP32[$u1 + 12 >> 2];
    HEAP32[$v2$byval_copy >> 2] = HEAP32[$v2 >> 2];
    HEAP32[$v2$byval_copy + 4 >> 2] = HEAP32[$v2 + 4 >> 2];
    HEAP32[$v2$byval_copy + 8 >> 2] = HEAP32[$v2 + 8 >> 2];
    HEAP32[$v2$byval_copy + 12 >> 2] = HEAP32[$v2 + 12 >> 2];
    _zrem($0, $u1$byval_copy, $v2$byval_copy);
    $19 = +HEAPF64[$0 >> 3];
    $20 = +HEAPF64[$17 >> 3];
    HEAPF64[$v2 >> 3] = $21;
    HEAPF64[$18 >> 3] = $22;
    HEAPF64[$u1 >> 3] = $19;
    HEAPF64[$13 >> 3] = $20;
    if ($19 != 0.0 | $20 != 0.0) {
     $21 = $19;
     $22 = $20;
    } else {
     $27 = $21;
     $31 = $22;
     break;
    }
   }
  } else {
   $27 = +HEAPF64[$v2 >> 3];
   $31 = +HEAPF64[$v2 + 8 >> 3];
  }
  $33 = ($27 < 0.0 & 1) << 1 | $31 < 0.0;
  if (($33 | 0) == 1) {
   $z$sroa$0$0$i = -$31;
   $z$sroa$5$0$i = $27;
  } else if (($33 | 0) == 2) {
   $z$sroa$0$0$i = $31;
   $z$sroa$5$0$i = -$27;
  } else if (($33 | 0) == 3) {
   $z$sroa$0$0$i = -$27;
   $z$sroa$5$0$i = -$31;
  } else {
   $z$sroa$0$0$i = $27;
   $z$sroa$5$0$i = $31;
  }
  $39 = +HEAPF64[$v + 8 >> 3];
  do if ($z$sroa$5$0$i != 0.0 | $z$sroa$0$0$i != 0.0) {
   $46 = -$z$sroa$5$0$i;
   if (($z$sroa$0$0$i >= 0.0 ? $z$sroa$0$0$i : -$z$sroa$0$0$i) < ($z$sroa$5$0$i >= 0.0 ? $z$sroa$5$0$i : $46)) {
    $a$0$i = -$39;
    $b$0$i = $6;
    $c$0$i = $46;
    $d$0$i = $z$sroa$0$0$i;
   } else {
    $a$0$i = $6;
    $b$0$i = $39;
    $c$0$i = $z$sroa$0$0$i;
    $d$0$i = $z$sroa$5$0$i;
   }
   $50 = $a$0$i / $c$0$i;
   $51 = $b$0$i / $c$0$i;
   $52 = $d$0$i / $c$0$i;
   $54 = $52 * $52 + 1.0;
   $zi$0$i = ($51 - $50 * $52) / $54;
   $zr$0$i = ($50 + $51 * $52) / $54;
  } else if ($7 | $39 != 0.0) {
   $67 = ($6 < 0.0 & 1) << 1 | $39 < 0.0;
   if (!$67) {
    $68 = $6 > $39;
    $69 = +HEAPF64[317];
    $zi$0$i = $68 ? 0.0 : $69;
    $zr$0$i = $68 ? $69 : 0.0;
    break;
   } else if (($67 | 0) == 2) {
    $76 = +HEAPF64[317];
    if (!($6 < -$39)) {
     $zi$0$i = $76;
     $zr$0$i = 0.0;
     break;
    }
    $zi$0$i = 0.0;
    $zr$0$i = -$76;
    break;
   } else if (($67 | 0) == 1) {
    $72 = +HEAPF64[317];
    if ($6 > -$39) {
     $zi$0$i = 0.0;
     $zr$0$i = $72;
     break;
    }
    $zi$0$i = -$72;
    $zr$0$i = 0.0;
    break;
   } else if (($67 | 0) == 3) {
    $78 = $6 < $39;
    $80 = -+HEAPF64[317];
    $zi$0$i = $78 ? 0.0 : $80;
    $zr$0$i = $78 ? $80 : 0.0;
    break;
   } else {
    $zi$0$i = 0.0;
    $zr$0$i = 0.0;
    break;
   }
  } else {
   $zi$0$i = 0.0;
   $zr$0$i = 0.0;
  } while (0);
  $82 = +HEAPF64[$u + 8 >> 3];
  if ($2 | $82 != 0.0) if ($zi$0$i != 0.0 | $zr$0$i != 0.0) {
   $zi$0$i7 = $zi$0$i * $1 + $zr$0$i * $82;
   $zr$0$i6 = $zr$0$i * $1 - $zi$0$i * $82;
  } else {
   $zi$0$i7 = 0.0;
   $zr$0$i6 = 0.0;
  } else {
   $zi$0$i7 = 0.0;
   $zr$0$i6 = 0.0;
  }
  HEAPF64[$agg$result >> 3] = $zr$0$i6;
  HEAPF64[$agg$result + 8 >> 3] = $zi$0$i7;
  STACKTOP = sp;
  return;
 } while (0);
 HEAP32[$agg$result >> 2] = HEAP32[608];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[609];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[610];
 HEAP32[$agg$result + 12 >> 2] = HEAP32[611];
 STACKTOP = sp;
 return;
}

function _catalog($w) {
 $w = $w | 0;
 var $$0 = 0, $$sum1 = 0, $$sum5 = 0, $$sum7 = 0, $$sum9 = 0, $103 = 0, $105 = 0, $106 = 0, $108 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $32 = 0, $33 = 0, $36 = 0, $38 = 0, $39 = 0, $42 = 0, $44 = 0, $45 = 0, $48 = 0, $5 = 0, $50 = 0, $53 = 0, $57 = 0, $59 = 0, $61 = 0, $65 = 0, $71 = 0, $72 = 0, $75 = 0, $77 = 0, $80 = 0, $82 = 0, $9 = 0, $90 = 0, $93 = 0, $94 = 0, $bu$025 = 0, $i$030 = 0, $i1$053 = 0, $i10$027 = 0, $i2$047 = 0, $i4$042 = 0, $i6$037 = 0, $i8$026 = 0, $r$0$lcssa = 0, $r$046 = 0, $s$041 = 0, $s$1$lcssa = 0, $s$135 = 0, $t$0$lcssa = 0, $t$052 = 0, $t$1 = 0, $u$036 = 0, $x$031 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $5 = HEAP32[$w + 12 >> 2] | 0;
 if (($5 | 0) > 1) {
  $$0 = _rank1ex($w, 0, 1, 69) | 0;
  return $$0 | 0;
 }
 $9 = HEAP32[$w + 8 >> 2] | 0;
 if ($9) if (HEAP32[$w >> 2] & 32) {
  $$sum1 = $5 + 4 + ($5 & 1) | 0;
  $16 = ($9 | 0) > 0;
  L11 : do if ($16) {
   $i1$053 = 0;
   $t$052 = 0;
   while (1) {
    $18 = HEAP32[$w + ($i1$053 + $$sum1 << 2) >> 2] | 0;
    if (!(HEAP32[$18 + 8 >> 2] | 0)) $t$1 = $t$052; else {
     $22 = HEAP32[$18 >> 2] | 0;
     $24 = ($t$052 | 0) != 0 ? $t$052 : $22;
     if (!((_homo($24, $22) | 0) << 24 >> 24)) break;
     $t$1 = ($24 | 0) > ($22 | 0) ? $24 : $22;
    }
    $i1$053 = $i1$053 + 1 | 0;
    if (($i1$053 | 0) >= ($9 | 0)) {
     $t$0$lcssa = $t$1;
     break L11;
    } else $t$052 = $t$1;
   }
   _jsignal(3);
   $$0 = 0;
   return $$0 | 0;
  } else $t$0$lcssa = 0; while (0);
  $32 = ($t$0$lcssa | 0) < 1 ? 1 : $t$0$lcssa;
  $33 = _ga($32, $9, 1, 0) | 0;
  if (!$33) {
   $$0 = 0;
   return $$0 | 0;
  }
  $36 = HEAP32[$33 + 12 >> 2] | 0;
  $38 = $33 + ($36 + 4 + ($36 & 1) << 2) | 0;
  $39 = _ga(4, $9, 1, 0) | 0;
  if (!$39) {
   $$0 = 0;
   return $$0 | 0;
  }
  $42 = HEAP32[$39 + 12 >> 2] | 0;
  $$sum5 = $42 + 4 + ($42 & 1) | 0;
  $44 = $39 + ($$sum5 << 2) | 0;
  $45 = _ga(32, $9, 1, 0) | 0;
  if (!$45) {
   $$0 = 0;
   return $$0 | 0;
  }
  $48 = HEAP32[$45 + 12 >> 2] | 0;
  $$sum7 = $48 + 4 + ($48 & 1) | 0;
  $50 = _apv($9, 0, 0) | 0;
  if (!$50) {
   $$0 = 0;
   return $$0 | 0;
  }
  $53 = HEAP32[$50 + 12 >> 2] | 0;
  $$sum9 = $53 + 4 + ($53 & 1) | 0;
  L33 : do if ($16) {
   $i2$047 = 0;
   $r$046 = 0;
   while (1) {
    $57 = _cvt($32, HEAP32[$w + ($i2$047 + $$sum1 << 2) >> 2] | 0) | 0;
    if (!$57) {
     $$0 = 0;
     break;
    }
    $59 = $57 + 12 | 0;
    $61 = (HEAP32[$59 >> 2] | 0) + $r$046 | 0;
    HEAP32[$39 + ($i2$047 + $$sum5 << 2) >> 2] = HEAP32[$57 + 8 >> 2];
    $65 = HEAP32[$59 >> 2] | 0;
    HEAP32[$45 + ($i2$047 + $$sum7 << 2) >> 2] = $57 + ($65 + 4 + ($65 & 1) << 2);
    $i2$047 = $i2$047 + 1 | 0;
    if (($i2$047 | 0) >= ($9 | 0)) {
     $r$0$lcssa = $61;
     break L33;
    } else $r$046 = $61;
   }
   return $$0 | 0;
  } else $r$0$lcssa = 0; while (0);
  $71 = _prod($9, $44) | 0;
  $72 = _ga(32, $71, $r$0$lcssa, 0) | 0;
  if (!$72) {
   $$0 = 0;
   return $$0 | 0;
  }
  $75 = HEAP32[$72 + 12 >> 2] | 0;
  $77 = $72 + ($75 + 4 + ($75 & 1) << 2) | 0;
  if ($16) {
   $i4$042 = 0;
   $s$041 = $72 + 16 | 0;
   while (1) {
    $80 = HEAP32[$w + ($i4$042 + $$sum1 << 2) >> 2] | 0;
    $82 = HEAP32[$80 + 12 >> 2] | 0;
    if (($82 | 0) > 0) {
     $i6$037 = 0;
     $s$135 = $s$041;
     $u$036 = $80 + 16 | 0;
     while (1) {
      HEAP32[$s$135 >> 2] = HEAP32[$u$036 >> 2];
      $i6$037 = $i6$037 + 1 | 0;
      if (($i6$037 | 0) == ($82 | 0)) break; else {
       $s$135 = $s$135 + 4 | 0;
       $u$036 = $u$036 + 4 | 0;
      }
     }
     $s$1$lcssa = $s$041 + ($82 << 2) | 0;
    } else $s$1$lcssa = $s$041;
    $i4$042 = $i4$042 + 1 | 0;
    if (($i4$042 | 0) == ($9 | 0)) break; else $s$041 = $s$1$lcssa;
   }
  }
  $90 = _bp($32) | 0;
  if (($71 | 0) > 0) {
   $93 = $38 + (0 - $90) | 0;
   $94 = $9 + -1 | 0;
   $i$030 = 0;
   $x$031 = $77;
   while (1) {
    L57 : do if ($16) {
     $bu$025 = $93;
     $i8$026 = 0;
     do {
      $bu$025 = $bu$025 + $90 | 0;
      _memcpy($bu$025 | 0, (HEAP32[$45 + ($i8$026 + $$sum7 << 2) >> 2] | 0) + (Math_imul(HEAP32[$50 + ($i8$026 + $$sum9 << 2) >> 2] | 0, $90) | 0) | 0, $90 | 0) | 0;
      $i8$026 = $i8$026 + 1 | 0;
     } while (($i8$026 | 0) != ($9 | 0));
     if ($16) {
      $i10$027 = 0;
      do {
       $103 = $94 - $i10$027 | 0;
       $105 = HEAP32[$39 + ($103 + $$sum5 << 2) >> 2] | 0;
       $106 = $50 + ($103 + $$sum9 << 2) | 0;
       $108 = (HEAP32[$106 >> 2] | 0) + 1 | 0;
       HEAP32[$106 >> 2] = $108;
       if (($105 | 0) > ($108 | 0)) break L57;
       HEAP32[$106 >> 2] = 0;
       $i10$027 = $i10$027 + 1 | 0;
      } while (($i10$027 | 0) < ($9 | 0));
     }
    } while (0);
    HEAP32[$x$031 >> 2] = _ca($33) | 0;
    $i$030 = $i$030 + 1 | 0;
    if (($i$030 | 0) == ($71 | 0)) break; else $x$031 = $x$031 + 4 | 0;
   }
  }
  $$0 = _gc($72, $2) | 0;
  return $$0 | 0;
 }
 $$0 = _box($w) | 0;
 return $$0 | 0;
}

function _thook($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$0$i60 = 0, $$sum11 = 0, $$sum14 = 0, $$sum2 = 0, $$sum7 = 0, $10 = 0, $102 = 0, $106 = 0, $113 = 0, $115 = 0, $119 = 0, $12 = 0, $121 = 0, $124 = 0, $128 = 0, $137 = 0, $14 = 0, $140 = 0, $144 = 0, $150 = 0, $155 = 0, $157 = 0, $158 = 0, $16 = 0, $18 = 0, $21 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $34 = 0, $39 = 0, $42 = 0, $46 = 0, $5 = 0, $51 = 0, $52 = 0, $53 = 0, $56 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $75 = 0, $77 = 0, $79 = 0, $8 = 0, $86 = 0, $91 = 0, $93 = 0, $96 = 0, $98 = 0, $99 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $3 = HEAP32[$a + 12 >> 2] | 0;
 $$sum2 = $3 + 4 + ($3 & 1) | 0;
 $5 = $a + ($$sum2 << 2) | 0;
 $7 = HEAP8[$5 + 31 >> 0] | 0;
 $8 = $7 << 24 >> 24 == -19;
 $10 = HEAP32[$a + ($$sum2 + 2 << 2) >> 2] | 0;
 $12 = HEAP32[$a + ($$sum2 + 3 << 2) >> 2] | 0;
 $14 = HEAP32[$a + ($$sum2 + 4 << 2) >> 2] | 0;
 $16 = HEAP32[$w + 12 >> 2] | 0;
 $$sum7 = $16 + 4 + ($16 & 1) | 0;
 $18 = $w + ($$sum7 << 2) | 0;
 $21 = (HEAP8[$18 + 31 >> 0] | 0) == -19;
 $23 = HEAP32[$w + ($$sum7 + 2 << 2) >> 2] | 0;
 $25 = HEAP32[$w + ($$sum7 + 3 << 2) >> 2] | 0;
 if ($8) {
  $26 = HEAP32[822] | 0;
  $27 = ($10 | 0) != 0;
  if ($27 & ($26 | 0) != 0) {
   $30 = HEAP32[$10 + 12 >> 2] | 0;
   $34 = HEAP32[$26 + 12 >> 2] | 0;
   if (!(_memcmp($10 + ($30 + 4 + ($30 & 1) << 2) | 0, $26 + ($34 + 4 + ($34 & 1) << 2) | 0, 32) | 0)) {
    $51 = _thook($12, $w) | 0;
    $52 = _hooko($10, $51) | 0;
    return $52 | 0;
   }
  }
  $39 = HEAP32[818] | 0;
  if ($27 & ($39 | 0) != 0) {
   $42 = HEAP32[$10 + 12 >> 2] | 0;
   $46 = HEAP32[$39 + 12 >> 2] | 0;
   if (!(_memcmp($10 + ($42 + 4 + ($42 & 1) << 2) | 0, $39 + ($46 + 4 + ($46 & 1) << 2) | 0, 32) | 0)) {
    $51 = _thook($12, $w) | 0;
    $52 = _hooko($10, $51) | 0;
    return $52 | 0;
   }
  }
 }
 $53 = HEAP32[820] | 0;
 if ($53) {
  $56 = HEAP32[$53 + 12 >> 2] | 0;
  if (!(_memcmp($5, $53 + ($56 + 4 + ($56 & 1) << 2) | 0, 32) | 0)) if (HEAP32[$w >> 2] & 256) {
   $$0 = $w;
   return $$0 | 0;
  }
  $65 = HEAP32[$53 + 12 >> 2] | 0;
  if (!(_memcmp($18, $53 + ($65 + 4 + ($65 & 1) << 2) | 0, 32) | 0)) {
   $$0 = $a;
   return $$0 | 0;
  }
 }
 do if (($7 + 19 & 255) < 2) {
  $70 = HEAP32[816] | 0;
  $71 = $8 ? $12 : $14;
  if (($71 | 0) != 0 & ($70 | 0) != 0) {
   $75 = HEAP32[$70 + 12 >> 2] | 0;
   $77 = $70 + ($75 + 4 + ($75 & 1) << 2) | 0;
   $79 = HEAP32[$71 + 12 >> 2] | 0;
   if (!((_memcmp($77, $71 + ($79 + 4 + ($79 & 1) << 2) | 0, 32) | 0) != 0 | $21 ^ 1 | ($25 | 0) == 0)) {
    $86 = HEAP32[$25 + 12 >> 2] | 0;
    if (!(_memcmp($77, $25 + ($86 + 4 + ($86 & 1) << 2) | 0, 32) | 0)) {
     $91 = $8 ? $10 : $12;
     $93 = HEAP32[$91 + 12 >> 2] | 0;
     $$sum11 = $93 + 4 + ($93 & 1) | 0;
     $96 = HEAP32[814] | 0;
     $98 = HEAP32[$91 + ($$sum11 + 2 << 2) >> 2] | 0;
     $99 = ($96 | 0) != 0;
     if ($99 & ($98 | 0) != 0) {
      $102 = HEAP32[$96 + 12 >> 2] | 0;
      $106 = HEAP32[$98 + 12 >> 2] | 0;
      $$0$i60 = (_memcmp($96 + ($102 + 4 + ($102 & 1) << 2) | 0, $98 + ($106 + 4 + ($106 & 1) << 2) | 0, 32) | 0) == 0 & 1;
     } else $$0$i60 = 0;
     $113 = HEAP32[$23 + 12 >> 2] | 0;
     $$sum14 = $113 + 4 + ($113 & 1) | 0;
     $115 = $23 + ($$sum14 << 2) | 0;
     if ((HEAP8[$91 + ($$sum11 << 2) + 31 >> 0] | 0) == -20) {
      $119 = $$0$i60 << 24 >> 24 == 0;
      if ($119) {
       $121 = HEAP32[$91 + ($$sum11 + 3 << 2) >> 2] | 0;
       if (!($99 & ($121 | 0) != 0)) break;
       $124 = HEAP32[$96 + 12 >> 2] | 0;
       $128 = HEAP32[$121 + 12 >> 2] | 0;
       if (_memcmp($96 + ($124 + 4 + ($124 & 1) << 2) | 0, $121 + ($128 + 4 + ($128 & 1) << 2) | 0, 32) | 0) break;
      }
      if ((HEAP8[$115 + 31 >> 0] | 0) == -20) {
       $137 = HEAP32[$23 + ($$sum14 + 3 << 2) >> 2] | 0;
       if ($99 & ($137 | 0) != 0) {
        $140 = HEAP32[$96 + 12 >> 2] | 0;
        $144 = HEAP32[$137 + 12 >> 2] | 0;
        if (!(_memcmp($96 + ($140 + 4 + ($140 & 1) << 2) | 0, $137 + ($144 + 4 + ($144 & 1) << 2) | 0, 32) | 0)) if ($119) {
         $155 = _tie(HEAP32[$23 + ($$sum14 + 2 << 2) >> 2] | 0, $98) | 0;
         $157 = _advform($155, HEAP32[814] | 0) | 0;
         $158 = HEAP32[816] | 0;
         if ($8) {
          $$0 = _hooko($157, $158) | 0;
          return $$0 | 0;
         } else {
          $$0 = _forko($10, $157, $158) | 0;
          return $$0 | 0;
         }
        } else if ($8) {
         $$0 = _forko($10, $23, $70) | 0;
         return $$0 | 0;
        } else {
         $150 = _hooko($10, $12) | 0;
         $$0 = _forko($150, $23, HEAP32[816] | 0) | 0;
         return $$0 | 0;
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 if ($21) if (HEAP32[$23 >> 2] & 256 & HEAP32[$25 >> 2]) {
  $$0 = _forko($a, $23, $25) | 0;
  return $$0 | 0;
 }
 $$0 = _hooko($a, $w) | 0;
 return $$0 | 0;
}

function _cforkv($agg$result, $b, $e, $stack) {
 $agg$result = $agg$result | 0;
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 var $109 = 0, $116 = 0, $12 = 0, $122 = 0, $128 = 0, $13 = 0, $138 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $153 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $164 = 0, $19 = 0, $22 = 0, $26 = 0, $29 = 0, $3 = 0, $39 = 0, $4 = 0, $43 = 0, $44 = 0, $45 = 0, $54 = 0, $58 = 0, $59 = 0, $60 = 0, $66 = 0, $73 = 0, $77 = 0, $8 = 0, $80 = 0, $81 = 0, $86 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $97 = 0, $z$sroa$2$0 = 0;
 $3 = HEAP32[$stack + ($b << 3) + 4 >> 2] | 0;
 $4 = $b + 1 | 0;
 $8 = HEAP32[$stack + ($4 << 3) + 4 >> 2] | 0;
 $12 = HEAP32[$stack + ($e << 3) + 4 >> 2] | 0;
 $13 = HEAP32[$stack + ($b << 3) >> 2] | 0;
 $14 = HEAP32[$stack + ($4 << 3) >> 2] | 0;
 $15 = HEAP32[$stack + ($e << 3) >> 2] | 0;
 $16 = _folk($13, $14, $15) | 0;
 $19 = $3;
 $22 = $8;
 $26 = $12;
 $29 = (($8 | 0) != 0 ? 2 : 0) | (($3 | 0) != 0 ? 4 : 0) | ($12 | 0) != 0;
 L1 : do if (!(HEAP8[3248] | 0)) switch ($29 | 0) {
 case 7:
  {
   if (!$3) $157 = _advform(HEAP32[818] | 0, $13) | 0; else $157 = $19;
   $153 = HEAP32[814] | 0;
   if (!$8) $158 = _advform(HEAP32[818] | 0, $14) | 0; else $158 = $22;
   $159 = _tfork($157, $153, $158) | 0;
   $160 = HEAP32[814] | 0;
   if (!$12) $164 = _advform(HEAP32[818] | 0, $15) | 0; else $164 = $26;
   $z$sroa$2$0 = _thook(_tfork($159, $160, $164) | 0, HEAP32[816] | 0) | 0;
   break L1;
   break;
  }
 case 3:
  {
   $116 = _tfork($22, HEAP32[814] | 0, $26) | 0;
   $z$sroa$2$0 = _thook($116, _thook(_advform($13, HEAP32[814] | 0) | 0, HEAP32[816] | 0) | 0) | 0;
   break L1;
   break;
  }
 case 1:
  {
   $z$sroa$2$0 = _thook($26, _thook(_advform(_tie($13, $14) | 0, HEAP32[814] | 0) | 0, HEAP32[816] | 0) | 0) | 0;
   break L1;
   break;
  }
 case 5:
  {
   $128 = HEAP32[820] | 0;
   $z$sroa$2$0 = _thook($128, _forko(_thook(HEAP32[822] | 0, $19) | 0, $14, _thook(HEAP32[822] | 0, $26) | 0) | 0) | 0;
   break L1;
   break;
  }
 case 6:
  {
   if (!$3) $142 = _advform(HEAP32[818] | 0, $13) | 0; else $142 = $19;
   $138 = HEAP32[814] | 0;
   if (!$8) $143 = _advform(HEAP32[818] | 0, $14) | 0; else $143 = $22;
   $144 = _tfork($142, $138, $143) | 0;
   $z$sroa$2$0 = _thook($144, _thook(_advform(HEAP32[814] | 0, $15) | 0, HEAP32[816] | 0) | 0) | 0;
   break L1;
   break;
  }
 case 2:
  {
   $109 = _thook($22, _advform($13, HEAP32[814] | 0) | 0) | 0;
   $z$sroa$2$0 = _thook($109, _thook(_advform(HEAP32[814] | 0, $15) | 0, HEAP32[816] | 0) | 0) | 0;
   break L1;
   break;
  }
 case 4:
  {
   $122 = _tie($14, $15) | 0;
   $z$sroa$2$0 = _thook($19, _thook(_advform(HEAP32[814] | 0, $122) | 0, HEAP32[816] | 0) | 0) | 0;
   break L1;
   break;
  }
 default:
  {
   $z$sroa$2$0 = 0;
   break L1;
  }
 } else switch ($29 | 0) {
 case 3:
  {
   if (!$8) $58 = _advform(HEAP32[818] | 0, $14) | 0; else $58 = $22;
   $54 = HEAP32[814] | 0;
   if (!$12) $59 = _advform(HEAP32[818] | 0, $15) | 0; else $59 = $26;
   $60 = _tfork($58, $54, $59) | 0;
   $z$sroa$2$0 = _thook($60, _thook(_advform($13, HEAP32[814] | 0) | 0, HEAP32[816] | 0) | 0) | 0;
   break L1;
   break;
  }
 case 4:
  {
   $66 = _tie($14, $15) | 0;
   $z$sroa$2$0 = _thook($19, _thook(_advform(HEAP32[814] | 0, $66) | 0, HEAP32[816] | 0) | 0) | 0;
   break L1;
   break;
  }
 case 7:
  {
   if (!$3) $90 = _advform(HEAP32[818] | 0, $13) | 0; else $90 = $19;
   $86 = HEAP32[814] | 0;
   if (!$8) $91 = _advform(HEAP32[818] | 0, $14) | 0; else $91 = $22;
   $92 = _tfork($90, $86, $91) | 0;
   $93 = HEAP32[814] | 0;
   if (!$12) $97 = _advform(HEAP32[818] | 0, $15) | 0; else $97 = $26;
   $z$sroa$2$0 = _thook(_tfork($92, $93, $97) | 0, HEAP32[816] | 0) | 0;
   break L1;
   break;
  }
 case 5:
  {
   if (!$3) {
    $73 = HEAP32[818] | 0;
    $80 = _hooko($73, _advform($73, $13) | 0) | 0;
   } else $80 = $19;
   if (!$12) {
    $77 = HEAP32[818] | 0;
    $81 = _hooko($77, _advform($77, $15) | 0) | 0;
   } else $81 = $26;
   $z$sroa$2$0 = _forko($80, $14, $81) | 0;
   break L1;
   break;
  }
 case 1:
  {
   $z$sroa$2$0 = _thook($26, _thook(_advform(_tie($13, $14) | 0, HEAP32[814] | 0) | 0, HEAP32[816] | 0) | 0) | 0;
   break L1;
   break;
  }
 case 6:
 case 2:
  {
   if (!$3) $43 = _advform(HEAP32[818] | 0, $13) | 0; else $43 = $19;
   $39 = HEAP32[814] | 0;
   if (!$8) $44 = _advform(HEAP32[818] | 0, $14) | 0; else $44 = $22;
   $45 = _tfork($43, $39, $44) | 0;
   $z$sroa$2$0 = _thook($45, _thook(_advform(HEAP32[814] | 0, $15) | 0, HEAP32[816] | 0) | 0) | 0;
   break L1;
   break;
  }
 default:
  {
   $z$sroa$2$0 = 0;
   break L1;
  }
 } while (0);
 HEAP32[$agg$result >> 2] = $16;
 HEAP32[$agg$result + 4 >> 2] = $z$sroa$2$0;
 return;
}

function _tparse($0, $w) {
 $0 = $0 | 0;
 $w = $w | 0;
 var $$0 = 0, $$in6 = 0, $1 = 0, $10 = 0, $102 = 0, $104 = 0, $105 = 0, $11 = 0, $114 = 0, $118 = 0, $12 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $42 = 0, $46 = 0, $47 = 0, $50 = 0, $55 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $74 = 0, $79 = 0, $80 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $91 = 0, $93 = 0, $i$0$lcssa = 0, $i$08 = 0, $i1$013 = 0, $j$011 = 0, $k$012 = 0, $m$0 = 0, $m$1 = 0, $n$0 = 0, $n$1 = 0, $n$1$lcssa = 0, $sext$mask2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = sp;
 if (!$w) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $4 = HEAP32[$w + 12 >> 2] | 0;
 $6 = $w + ($4 + 4 + ($4 & 1) << 2) | 0;
 $10 = ((HEAP32[$w + 8 >> 2] | 0) / 2 | 0) + -4 | 0;
 HEAP8[3296] = 0;
 $sext$mask2 = $0 & 255;
 $11 = ($sext$mask2 | 0) == 0;
 $m$0 = $10;
 $n$0 = $10;
 while (1) {
  $12 = HEAP32[806] | 0;
  L6 : do if (($12 | 0) > 0) {
   $14 = $6 + ($n$0 << 3) | 0;
   $16 = HEAP32[HEAP32[$14 >> 2] >> 2] | 0;
   $17 = $14 + 8 | 0;
   $18 = $14 + 16 | 0;
   $19 = $14 + 24 | 0;
   $i$08 = 0;
   while (1) {
    if ($16 & HEAP32[2704 + ($i$08 * 40 | 0) >> 2]) if (HEAP32[HEAP32[$17 >> 2] >> 2] & HEAP32[2704 + ($i$08 * 40 | 0) + 4 >> 2]) if (HEAP32[HEAP32[$18 >> 2] >> 2] & HEAP32[2704 + ($i$08 * 40 | 0) + 8 >> 2]) if (HEAP32[HEAP32[$19 >> 2] >> 2] & HEAP32[2704 + ($i$08 * 40 | 0) + 12 >> 2]) {
     $i$0$lcssa = $i$08;
     break L6;
    }
    $42 = $i$08 + 1 | 0;
    if (($42 | 0) < ($12 | 0)) $i$08 = $42; else {
     $i$0$lcssa = $42;
     break;
    }
   }
  } else $i$0$lcssa = 0; while (0);
  if (($i$0$lcssa | 0) < ($12 | 0)) {
   $46 = HEAP32[2704 + ($i$0$lcssa * 40 | 0) + 28 >> 2] | 0;
   $47 = $46 + $n$0 | 0;
   $50 = (HEAP32[2704 + ($i$0$lcssa * 40 | 0) + 32 >> 2] | 0) + $n$0 | 0;
   ftCall_viiii(HEAP32[($11 ? 2704 + ($i$0$lcssa * 40 | 0) + 24 | 0 : 2704 + ($i$0$lcssa * 40 | 0) + 20 | 0) >> 2] | 0, $1 | 0, $47 | 0, $50 | 0, $6 | 0);
   $55 = $1;
   $57 = HEAP32[$55 >> 2] | 0;
   $60 = HEAP32[$55 + 4 >> 2] | 0;
   $61 = $6 + ($50 << 3) | 0;
   HEAP32[$61 >> 2] = $57;
   HEAP32[$61 + 4 >> 2] = $60;
   if (!$57) {
    $$0 = 0;
    label = 32;
    break;
   }
   if (HEAP8[3296] | 0) {
    label = 14;
    break;
   }
   if (($46 | 0) > 0) {
    $i1$013 = 0;
    $j$011 = $47;
    $k$012 = $50;
    do {
     $k$012 = $k$012 + -1 | 0;
     $j$011 = $j$011 + -1 | 0;
     $74 = $6 + ($j$011 << 3) | 0;
     $79 = HEAP32[$74 + 4 >> 2] | 0;
     $80 = $6 + ($k$012 << 3) | 0;
     HEAP32[$80 >> 2] = HEAP32[$74 >> 2];
     HEAP32[$80 + 4 >> 2] = $79;
     $i1$013 = $i1$013 + 1 | 0;
    } while (($i1$013 | 0) != ($46 | 0));
    $m$1 = $m$0;
    $n$1 = $50 - $46 | 0;
   } else {
    $m$1 = $m$0;
    $n$1 = $50;
   }
  } else {
   $85 = $n$0 + -1 | 0;
   $86 = $6 + ($85 << 3) | 0;
   $87 = $m$0 + -1 | 0;
   $89 = ($87 | 0) < 0 ? 0 : $87;
   $91 = HEAP32[$6 + ($89 << 3) >> 2] | 0;
   $93 = HEAP32[$6 + ($89 << 3) + 4 >> 2] | 0;
   if (!(HEAP32[$91 >> 2] & 1024)) {
    $$in6 = $91;
    $118 = $93;
   } else if (!(HEAP32[HEAP32[$6 + ($n$0 << 3) >> 2] >> 2] & 8192)) {
    $102 = HEAP32[826] | 0;
    $104 = _indexof($102, _box($91) | 0) | 0;
    $105 = _swap($91) | 0;
    if (!((_all1(_lt($104, _tally(HEAP32[826] | 0) | 0) | 0) | 0) << 24 >> 24)) $114 = 0; else $114 = _ope(_from($104, HEAP32[828] | 0) | 0) | 0;
    $$in6 = $105;
    $118 = $114;
   } else {
    $$in6 = $91;
    $118 = $93;
   }
   HEAP32[$86 >> 2] = $$in6;
   HEAP32[$6 + ($85 << 3) + 4 >> 2] = $118;
   $m$1 = $87;
   $n$1 = $n$0 - (($m$0 | 0) > 0 & 1) | 0;
  }
  if (($m$1 | 0) > -1) {
   $m$0 = $m$1;
   $n$0 = $n$1;
  } else {
   $n$1$lcssa = $n$1;
   label = 24;
   break;
  }
 }
 if ((label | 0) == 14) {
  $$0 = HEAP32[620] | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 24) {
  if (!(HEAP32[HEAP32[$6 + ($n$1$lcssa + 2 << 3) >> 2] >> 2] & 16384)) {
   _jsignal(18);
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $130 = $n$1$lcssa + 1 | 0;
  $132 = HEAP32[$6 + ($130 << 3) >> 2] | 0;
  $134 = HEAP32[$6 + ($130 << 3) + 4 >> 2] | 0;
  $136 = ($sext$mask2 | 0) != 0;
  if (!(HEAP32[$132 >> 2] & ($136 ? 127 : 255))) {
   _jsignal(18);
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  if ($134) {
   $$0 = $134;
   STACKTOP = sp;
   return $$0 | 0;
  }
  if ($136) {
   $$0 = _qq($132, HEAP32[624] | 0) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else {
   $$0 = _advform(_ds(-86) | 0, $132) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } else if ((label | 0) == 32) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}
function _abase2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $103 = 0, $105 = 0, $106 = 0, $12 = 0, $24 = 0, $28 = 0, $31 = 0, $33 = 0, $35 = 0, $36 = 0, $38 = 0, $40 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $64 = 0, $7 = 0, $72 = 0, $73 = 0, $74 = 0, $78 = 0, $8 = 0, $81 = 0, $83 = 0, $84 = 0, $87 = 0, $91 = 0, $95 = 0, $96 = 0, $i$032$us = 0, $i1$025$us = 0, $i5$024 = 0, $u$028$us = 0, $u4$023 = 0, $wv$034$us = 0, $x$027$us = 0, $zv$033$us = 0, $zv$126$us = 0, $zv3$022 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = $a;
 HEAP32[$1 >> 2] = $w;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $5 = HEAP32[$a + 8 >> 2] | 0;
 $6 = $a + 12 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $8 = HEAP32[$a >> 2] | 0;
 $10 = HEAP32[$w + 8 >> 2] | 0;
 $12 = HEAP32[$w + 12 >> 2] | 0;
 do if (!$7) {
  $$0 = _va2($a, $w, 124) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else if (($7 | 0) == 1) {
  if (($8 & 5 | 0) == 0 | (HEAP32[$w >> 2] & 5 | 0) == 0) {
   $103 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
   label = 17;
   break;
  }
  if (!(_coerce2($0, $1, 4) | 0)) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $24 = Math_imul($10, $5) | 0;
  $28 = _ga(4, $24, $12 + 1 | 0, (HEAP32[$1 >> 2] | 0) + 16 | 0) | 0;
  if (!$28) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  HEAP32[$28 + 16 + ($12 << 2) >> 2] = $5;
  $31 = HEAP32[$0 >> 2] | 0;
  $33 = HEAP32[$31 + 12 >> 2] | 0;
  $35 = $31 + ($5 + 4 + $33 + ($33 & 1) << 2) | 0;
  $36 = HEAP32[$1 >> 2] | 0;
  $38 = HEAP32[$36 + 12 >> 2] | 0;
  $40 = HEAP32[$28 + 12 >> 2] | 0;
  if (!(($10 | 0) > 0 & ($5 | 0) > 0)) {
   $$0 = $28;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $i$032$us = 0;
  $wv$034$us = $36 + ($10 + 4 + $38 + ($38 & 1) << 2) | 0;
  $zv$033$us = $28 + ((HEAP32[$28 + 8 >> 2] | 0) + 4 + $40 + ($40 & 1) << 2) | 0;
  while (1) {
   $64 = $wv$034$us + -4 | 0;
   $i1$025$us = 0;
   $u$028$us = $35;
   $x$027$us = HEAP32[$64 >> 2] | 0;
   $zv$126$us = $zv$033$us;
   while (1) {
    $u$028$us = $u$028$us + -4 | 0;
    $51 = HEAP32[$u$028$us >> 2] | 0;
    if (!$51) {
     $62 = $zv$126$us + -4 | 0;
     HEAP32[$62 >> 2] = $x$027$us;
     $105 = $62;
     $106 = 0;
    } else {
     $53 = ($x$027$us | 0) % ($51 | 0) | 0;
     $58 = ((($51 | 0) > 0 ? ($53 | 0) < 0 : ($53 | 0) > 0) ? $51 : 0) + $53 | 0;
     $59 = $zv$126$us + -4 | 0;
     HEAP32[$59 >> 2] = $58;
     $105 = $59;
     $106 = ($x$027$us - $58 | 0) / ($51 | 0) | 0;
    }
    $i1$025$us = $i1$025$us + 1 | 0;
    if (($i1$025$us | 0) == ($5 | 0)) {
     $$lcssa = $105;
     break;
    } else {
     $x$027$us = $106;
     $zv$126$us = $105;
    }
   }
   $49 = $i$032$us + 1 | 0;
   if (($49 | 0) == ($10 | 0)) {
    $$0 = $28;
    break;
   } else {
    $i$032$us = $49;
    $wv$034$us = $64;
    $zv$033$us = $$lcssa;
   }
  }
  STACKTOP = sp;
  return $$0 | 0;
 } else if (($7 | 0) <= 1) {
  $103 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
  label = 17;
 } while (0);
 if ((label | 0) == 17) if (($12 | 0) <= 0) {
  $72 = _bp($8) | 0;
  $73 = Math_imul($72, $5) | 0;
  $74 = HEAP32[$6 >> 2] | 0;
  $78 = _ga($8, 1, 0, 0) | 0;
  if (!$78) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $81 = HEAP32[$78 + 12 >> 2] | 0;
  $83 = $78 + ($81 + 4 + ($81 & 1) << 2) | 0;
  $84 = _ga(32, $5, 1, 0) | 0;
  if (!$84) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $87 = HEAP32[$84 + 12 >> 2] | 0;
  L40 : do if (($5 | 0) > 0) {
   $91 = 0 - $72 | 0;
   $95 = $w;
   $i5$024 = 0;
   $u4$023 = $a + ($74 + 4 + ($74 & 1) << 2) + $73 | 0;
   $zv3$022 = $84 + ($5 + 4 + $87 + ($87 & 1) << 2) | 0;
   while (1) {
    $u4$023 = $u4$023 + $91 | 0;
    _memcpy($83 | 0, $u4$023 | 0, $72 | 0) | 0;
    $96 = _va2($78, $95, 124) | 0;
    $zv3$022 = $zv3$022 + -4 | 0;
    HEAP32[$zv3$022 >> 2] = $96;
    $95 = _va2(_va2($95, $96, 45) | 0, $78, 37) | 0;
    HEAP32[$1 >> 2] = $95;
    $i5$024 = $i5$024 + 1 | 0;
    if (!$95) {
     $$0 = 0;
     break;
    }
    if (($i5$024 | 0) >= ($5 | 0)) break L40;
   }
   STACKTOP = sp;
   return $$0 | 0;
  } while (0);
  $101 = _ope($84) | 0;
  if (!$101) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $$0 = _gc($101, $103) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$0 = _rank2ex($a, $w, 0, 1, 0, 126) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _iden($w) {
 $w = $w | 0;
 var $$0 = 0, $$sum1 = 0, $$sum5 = 0, $$sum5$i = 0, $$sum5$i11 = 0, $$sum5$i24 = 0, $0 = 0, $106 = 0, $108 = 0, $11 = 0, $118 = 0, $12 = 0, $124 = 0, $131 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $23 = 0, $40 = 0, $42 = 0, $47 = 0, $5 = 0, $54 = 0, $56 = 0, $6 = 0, $66 = 0, $73 = 0, $80 = 0, $82 = 0, $9 = 0, $92 = 0, $99 = 0, $x$0 = 0, label = 0;
 $0 = _fix($w) | 0;
 if (!$0) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$0 >> 2] & 128)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $5 = $0 + 12 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $$sum1 = $6 + 4 + ($6 & 1) | 0;
 $9 = HEAP32[$0 + ($$sum1 + 2 << 2) >> 2] | 0;
 $11 = HEAP32[$0 + ($$sum1 + 3 << 2) >> 2] | 0;
 $12 = _ds(36) | 0;
 if (!$12) {
  $$0 = 0;
  return $$0 | 0;
 }
 $15 = _atop(_ds(-82) | 0, $12) | 0;
 if (!$15) {
  $$0 = 0;
  return $$0 | 0;
 }
 $17 = _ds(-55) | 0;
 $18 = HEAP32[646] | 0;
 $21 = _atop($17, _amp($18, _ds(-84) | 0) | 0) | 0;
 if (!$21) {
  $$0 = 0;
  return $$0 | 0;
 }
 $23 = HEAP32[$5 >> 2] | 0;
 $$sum5 = $23 + 4 + ($23 & 1) | 0;
 L17 : do switch (HEAP8[$0 + ($$sum5 << 2) + 31 >> 0] | 0) {
 case 47:
  {
   if (HEAP32[$9 >> 2] & 128) {
    $131 = _iden($9) | 0;
    return _atop($131, _ds(35) | 0) | 0;
   }
   break;
  }
 case 44:
  {
   $$0 = _atop(_atop(_atop(_ds(-55) | 0, _amp(HEAP32[660] | 0, _ds(44) | 0) | 0) | 0, _amp(HEAP32[658] | 0, _ds(-82) | 0) | 0) | 0, $12) | 0;
   return $$0 | 0;
  }
 case -76:
  {
   $x$0 = _df1(_df1(HEAP32[616] | 0, _iden($9) | 0) | 0, _inv($11) | 0) | 0;
   label = 34;
   break;
  }
 case -126:
  {
   $x$0 = HEAP32[624] | 0;
   label = 34;
   break;
  }
 case -51:
 case -54:
 case -120:
 case 60:
 case 62:
 case -107:
 case 124:
 case 45:
 case 43:
  {
   $x$0 = HEAP32[660] | 0;
   label = 34;
   break;
  }
 case -118:
 case -125:
 case -123:
 case 61:
 case 33:
 case -113:
 case 94:
 case 37:
 case 42:
  {
   $x$0 = HEAP32[646] | 0;
   label = 34;
   break;
  }
 case -124:
  {
   $x$0 = _negate(HEAP32[624] | 0) | 0;
   label = 34;
   break;
  }
 case -62:
  {
   switch (_i0($9) | 0) {
   case 7:
   case 6:
   case 5:
   case 4:
   case 2:
    {
     $x$0 = HEAP32[660] | 0;
     label = 34;
     break L17;
     break;
    }
   case 13:
   case 11:
   case 9:
   case 1:
    {
     $x$0 = HEAP32[646] | 0;
     label = 34;
     break L17;
     break;
    }
   default:
    break L17;
   }
   break;
  }
 case 46:
  {
   $40 = HEAP32[$0 + ($$sum5 + 2 << 2) >> 2] | 0;
   $42 = HEAP32[$0 + ($$sum5 + 3 << 2) >> 2] | 0;
   if (HEAP32[$40 >> 2] & 128) {
    $47 = HEAP32[$40 + 12 >> 2] | 0;
    $$sum5$i = $47 + 4 + ($47 & 1) | 0;
    if ((HEAP8[$40 + ($$sum5$i << 2) + 31 >> 0] | 0) == 47) {
     $54 = HEAP32[$40 + ($$sum5$i + 2 << 2) >> 2] | 0;
     $56 = HEAP32[$54 + 12 >> 2] | 0;
     if ((HEAP8[$54 + ($56 + 4 + ($56 & 1) << 2) + 31 >> 0] | 0) == 43) if (HEAP32[$42 >> 2] & 128) {
      $66 = HEAP32[$42 + 12 >> 2] | 0;
      if ((HEAP8[$42 + ($66 + 4 + ($66 & 1) << 2) + 31 >> 0] | 0) == 42) {
       label = 22;
       break L17;
      }
     }
    }
    $73 = HEAP32[$40 + 12 >> 2] | 0;
    $$sum5$i11 = $73 + 4 + ($73 & 1) | 0;
    if ((HEAP8[$40 + ($$sum5$i11 << 2) + 31 >> 0] | 0) == 47) {
     $80 = HEAP32[$40 + ($$sum5$i11 + 2 << 2) >> 2] | 0;
     $82 = HEAP32[$80 + 12 >> 2] | 0;
     if ((HEAP8[$80 + ($82 + 4 + ($82 & 1) << 2) + 31 >> 0] | 0) == -120) if (HEAP32[$42 >> 2] & 128) {
      $92 = HEAP32[$42 + 12 >> 2] | 0;
      if ((HEAP8[$42 + ($92 + 4 + ($92 & 1) << 2) + 31 >> 0] | 0) == -118) {
       label = 22;
       break L17;
      }
     }
    }
    $99 = HEAP32[$40 + 12 >> 2] | 0;
    $$sum5$i24 = $99 + 4 + ($99 & 1) | 0;
    if ((HEAP8[$40 + ($$sum5$i24 << 2) + 31 >> 0] | 0) == 47) {
     $106 = HEAP32[$40 + ($$sum5$i24 + 2 << 2) >> 2] | 0;
     $108 = HEAP32[$106 + 12 >> 2] | 0;
     if ((HEAP8[$106 + ($108 + 4 + ($108 & 1) << 2) + 31 >> 0] | 0) == -107) if (HEAP32[$42 >> 2] & 128) {
      $118 = HEAP32[$42 + 12 >> 2] | 0;
      if ((HEAP8[$42 + ($118 + 4 + ($118 & 1) << 2) + 31 >> 0] | 0) == -118) label = 22;
     }
    }
   }
   break;
  }
 case -114:
  {
   label = 22;
   break;
  }
 case 123:
 case -60:
  {
   $$0 = _atop($21, $15) | 0;
   return $$0 | 0;
  }
 default:
  {}
 } while (0);
 if ((label | 0) == 22) {
  $124 = _ds(61) | 0;
  $$0 = _atop($124, _atop($21, $15) | 0) | 0;
  return $$0 | 0;
 }
 if ((label | 0) == 34) if ($x$0) {
  $$0 = _atop(_amp($12, $x$0) | 0, $15) | 0;
  return $$0 | 0;
 }
 _jsignal(3);
 $$0 = 0;
 return $$0 | 0;
}

function _cant2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$sum4 = 0, $$sum6 = 0, $100 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $25 = 0, $27 = 0, $29 = 0, $35 = 0, $36 = 0, $5 = 0, $50 = 0, $55 = 0, $6 = 0, $67 = 0, $74 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $83 = 0, $88 = 0, $89 = 0, $9 = 0, $99 = 0, $i$09$i = 0, $i1$015 = 0, $i1$06$i = 0, $i3$012 = 0, $j$0$lcssa = 0, $j$021 = 0, $j$114 = 0, $pv$0$lcssa = 0, $pv$019 = 0, $pv$113 = 0, $pv$2$lcssa = 0, $pv$211 = 0, $uglygep = 0, $v$15$i = 0, $vv$08$i = 0, $x$07$i = 0, $x$1$lcssa$i = 0, $x$14$i = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = $a + 12 | 0;
 if ((HEAP32[$2 >> 2] | 0) <= 1) {
  $5 = $w + 12 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  if (($6 | 0) <= 127) {
   $9 = _sc($6) | 0;
   if (!$9) {
    $$0 = 0;
    return $$0 | 0;
   }
   if (!(HEAP32[$a >> 2] & 32)) {
    $67 = _pinv(_pfill($9, $a) | 0) | 0;
    if (!$67) {
     $$0 = 0;
     return $$0 | 0;
    }
    if (!((_all1(_match($67, _v2(1, 0) | 0) | 0) | 0) << 24 >> 24)) {
     $$0 = _canta($67, $w) | 0;
     return $$0 | 0;
    }
    $74 = HEAP32[$w + 16 >> 2] | 0;
    $76 = HEAP32[$w + 20 >> 2] | 0;
    $77 = HEAP32[$w >> 2] | 0;
    $78 = _bp($77) | 0;
    $79 = Math_imul($78, $76) | 0;
    $83 = _ga($77, HEAP32[$w + 8 >> 2] | 0, HEAP32[$5 >> 2] | 0, 0) | 0;
    if (!$83) {
     $$0 = 0;
     return $$0 | 0;
    }
    HEAP32[$83 + 16 >> 2] = $76;
    HEAP32[$83 + 20 >> 2] = $74;
    $88 = HEAP32[$83 + 12 >> 2] | 0;
    $89 = HEAP32[$5 >> 2] | 0;
    if (($76 | 0) <= 0) {
     $$0 = $83;
     return $$0 | 0;
    }
    $99 = ($74 | 0) > 0;
    $100 = Math_imul($78, $74) | 0;
    $i$09$i = 0;
    $vv$08$i = $w + ($89 + 4 + ($89 & 1) << 2) + (0 - $79) | 0;
    $x$07$i = $83 + ($88 + 4 + ($88 & 1) << 2) + (0 - $78) | 0;
    while (1) {
     if ($99) {
      $i1$06$i = 0;
      $v$15$i = $vv$08$i;
      $x$14$i = $x$07$i;
      do {
       $x$14$i = $x$14$i + $78 | 0;
       $v$15$i = $v$15$i + $79 | 0;
       _memcpy($x$14$i | 0, $v$15$i | 0, $78 | 0) | 0;
       $i1$06$i = $i1$06$i + 1 | 0;
      } while (($i1$06$i | 0) != ($74 | 0));
      $x$1$lcssa$i = $x$07$i + $100 | 0;
     } else $x$1$lcssa$i = $x$07$i;
     $i$09$i = $i$09$i + 1 | 0;
     if (($i$09$i | 0) == ($76 | 0)) {
      $$0 = $83;
      break;
     } else {
      $vv$08$i = $vv$08$i + $78 | 0;
      $x$07$i = $x$1$lcssa$i;
     }
    }
    return $$0 | 0;
   }
   $14 = _raze($a) | 0;
   if (!$14) {
    $$0 = 0;
    return $$0 | 0;
   }
   $16 = _pfill($9, $14) | 0;
   if (!$16) {
    $$0 = 0;
    return $$0 | 0;
   }
   $19 = HEAP32[$16 + 12 >> 2] | 0;
   $21 = $16 + ($19 + 4 + ($19 & 1) << 2) | 0;
   $22 = _ca($16) | 0;
   if (!$22) {
    $$0 = 0;
    return $$0 | 0;
   }
   $25 = HEAP32[$22 + 12 >> 2] | 0;
   $$sum4 = $25 + 4 + ($25 & 1) | 0;
   $27 = HEAP32[$2 >> 2] | 0;
   $$sum6 = $27 + 4 + ($27 & 1) | 0;
   $29 = HEAP32[$5 >> 2] | 0;
   if (!(HEAP32[$14 + 12 >> 2] | 0)) $36 = 1; else $36 = HEAP32[$14 + 16 >> 2] | 0;
   $35 = $29 - $36 | 0;
   if (($35 | 0) > 0) {
    $uglygep = $16 + (($29 + $19 + ($19 & 1) << 2) + 16 - ($36 << 2)) | 0;
    $j$021 = 0;
    $pv$019 = $21;
    while (1) {
     HEAP32[$22 + ((HEAP32[$pv$019 >> 2] | 0) + $$sum4 << 2) >> 2] = $j$021;
     $j$021 = $j$021 + 1 | 0;
     if (($j$021 | 0) == ($35 | 0)) break; else $pv$019 = $pv$019 + 4 | 0;
    }
    $j$0$lcssa = $35;
    $pv$0$lcssa = $uglygep;
   } else {
    $j$0$lcssa = 0;
    $pv$0$lcssa = $21;
   }
   $50 = HEAP32[$a + 8 >> 2] | 0;
   if (($50 | 0) > 0) {
    $i1$015 = 0;
    $j$114 = $j$0$lcssa;
    $pv$113 = $pv$0$lcssa;
    while (1) {
     $55 = HEAP32[(HEAP32[$a + ($$sum6 + $i1$015 << 2) >> 2] | 0) + 8 >> 2] | 0;
     if (($55 | 0) > 0) {
      $i3$012 = 0;
      $pv$211 = $pv$113;
      while (1) {
       HEAP32[$22 + ((HEAP32[$pv$211 >> 2] | 0) + $$sum4 << 2) >> 2] = $j$114;
       $i3$012 = $i3$012 + 1 | 0;
       if (($i3$012 | 0) == ($55 | 0)) break; else $pv$211 = $pv$211 + 4 | 0;
      }
      $pv$2$lcssa = $pv$113 + ($55 << 2) | 0;
     } else $pv$2$lcssa = $pv$113;
     $i1$015 = $i1$015 + 1 | 0;
     if (($i1$015 | 0) == ($50 | 0)) break; else {
      $j$114 = (($55 | 0) != 0 & 1) + $j$114 | 0;
      $pv$113 = $pv$2$lcssa;
     }
    }
   }
   $$0 = _canta($22, $w) | 0;
   return $$0 | 0;
  }
 }
 $$0 = _rank2ex($a, $w, 0, 1, 127, 112) | 0;
 return $$0 | 0;
}

function _fx($w) {
 $w = $w | 0;
 var $$0 = 0, $$0$i = 0, $$0$i17 = 0, $$sum1 = 0, $$sum6 = 0, $$sum9 = 0, $1 = 0, $10 = 0, $103 = 0, $107 = 0, $108 = 0, $119 = 0, $120 = 0, $17 = 0, $23 = 0, $26 = 0, $28 = 0, $34 = 0, $4 = 0, $40 = 0, $42 = 0, $45 = 0, $52 = 0, $55 = 0, $6 = 0, $62 = 0, $69 = 0, $76 = 0, $79 = 0, $84 = 0, $90 = 0, $93 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $1 = HEAP32[$w >> 2] | 0;
 $4 = HEAP32[$w + 12 >> 2] | 0;
 $$sum1 = $4 + 4 + ($4 & 1) | 0;
 $6 = ($1 & 32 | 0) != 0;
 if ($6) $17 = HEAP32[$w + ($$sum1 << 2) >> 2] | 0; else $17 = $w;
 $10 = HEAP32[$w + ($$sum1 + 1 << 2) >> 2] | 0;
 if (($4 | 0) >= 2) {
  _jsignal(14);
  $$0 = 0;
  return $$0 | 0;
 }
 if ($6) {
  if ((HEAP32[$w + 8 >> 2] | 0) != 2) {
   _jsignal(9);
   $$0 = 0;
   return $$0 | 0;
  }
 } else if (!($1 & 2)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(_vs($17) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $23 = HEAP32[$17 + 12 >> 2] | 0;
 $26 = _spellin(HEAP32[$17 + 8 >> 2] | 0, $17 + ($23 + 4 + ($23 & 1) << 2) | 0) | 0;
 if (!($26 << 24 >> 24)) {
  _jsignal(16);
  $$0 = 0;
  return $$0 | 0;
 }
 $28 = $26 << 24 >> 24;
 if ((HEAP8[5792 + $28 >> 0] | 0) != 5) {
  $84 = _ds($28) | 0;
  if (!$84) {
   $$0 = 0;
   return $$0 | 0;
  }
  if (!(HEAP32[$84 >> 2] & 1023)) {
   _jsignal(3);
   $$0 = 0;
   return $$0 | 0;
  }
  if (!$6) {
   $$0 = $84;
   return $$0 | 0;
  }
  $90 = HEAP32[$10 + 12 >> 2] | 0;
  if (($90 | 0) >= 2) {
   _jsignal(14);
   $$0 = 0;
   return $$0 | 0;
  }
  $93 = HEAP32[$10 + 8 >> 2] | 0;
  $$sum6 = $90 + 4 + ($90 & 1) | 0;
  if (!$93) {
   $$0 = $84;
   return $$0 | 0;
  }
  if (!(HEAP32[$10 >> 2] & 32)) {
   _jsignal(3);
   $$0 = 0;
   return $$0 | 0;
  }
  if ((_nc($84) | 0) != ($93 + 3 | 0)) {
   _jsignal(9);
   $$0 = 0;
   return $$0 | 0;
  }
  $103 = ($93 | 0) == 1;
  $107 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
  $108 = _fx(HEAP32[$10 + ($$sum6 << 2) >> 2] | 0) | 0;
  do if (!$108) $$0$i = 0; else if (!(HEAP32[$108 >> 2] & 255)) {
   _jsignal(3);
   $$0$i = 0;
   break;
  } else {
   $$0$i = _gc($108, $107) | 0;
   break;
  } while (0);
  if ($103) {
   $$0 = _df1($$0$i, $84) | 0;
   return $$0 | 0;
  }
  $119 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
  $120 = _fx(HEAP32[$10 + ($$sum6 + 1 << 2) >> 2] | 0) | 0;
  do if (!$120) $$0$i17 = 0; else if (!(HEAP32[$120 >> 2] & 255)) {
   _jsignal(3);
   $$0$i17 = 0;
   break;
  } else {
   $$0$i17 = _gc($120, $119) | 0;
   break;
  } while (0);
  $$0 = _df2($$0$i, $$0$i17, $84) | 0;
  return $$0 | 0;
 }
 if (!$6) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 if ($26 << 24 >> 24 == 48) {
  $$0 = $10;
  return $$0 | 0;
 }
 $34 = HEAP32[$10 + 12 >> 2] | 0;
 if (($34 | 0) >= 2) {
  _jsignal(14);
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$10 >> 2] & 32)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $40 = HEAP32[$10 + 8 >> 2] | 0;
 $$sum9 = $34 + 4 + ($34 & 1) | 0;
 $42 = $10 + ($$sum9 << 2) | 0;
 switch ($28 | 0) {
 case 51:
  {
   if (($40 | 0) == 3) {
    $52 = _fx(HEAP32[$42 >> 2] | 0) | 0;
    $55 = _fx(HEAP32[$10 + ($$sum9 + 1 << 2) >> 2] | 0) | 0;
    return _folk($52, $55, _fx(HEAP32[$10 + ($$sum9 + 2 << 2) >> 2] | 0) | 0) | 0;
   }
   _jsignal(9);
   $$0 = 0;
   return $$0 | 0;
  }
 case 54:
  {
   if (($40 | 0) == 3) {
    $76 = _fx(HEAP32[$42 >> 2] | 0) | 0;
    $79 = _fx(HEAP32[$10 + ($$sum9 + 1 << 2) >> 2] | 0) | 0;
    return _forko($76, $79, _fx(HEAP32[$10 + ($$sum9 + 2 << 2) >> 2] | 0) | 0) | 0;
   }
   _jsignal(9);
   $$0 = 0;
   return $$0 | 0;
  }
 case 52:
  {
   if (($40 | 0) == 2) {
    $62 = _fx(HEAP32[$42 >> 2] | 0) | 0;
    return _advform($62, _fx(HEAP32[$10 + ($$sum9 + 1 << 2) >> 2] | 0) | 0) | 0;
   }
   _jsignal(9);
   $$0 = 0;
   return $$0 | 0;
  }
 case 50:
  {
   if (($40 | 0) == 2) {
    $45 = _fx(HEAP32[$42 >> 2] | 0) | 0;
    return _hook($45, _fx(HEAP32[$10 + ($$sum9 + 1 << 2) >> 2] | 0) | 0) | 0;
   }
   _jsignal(9);
   $$0 = 0;
   return $$0 | 0;
  }
 case 53:
  {
   if (($40 | 0) == 2) {
    $69 = _fx(HEAP32[$42 >> 2] | 0) | 0;
    return _hooko($69, _fx(HEAP32[$10 + ($$sum9 + 1 << 2) >> 2] | 0) | 0) | 0;
   }
   _jsignal(9);
   $$0 = 0;
   return $$0 | 0;
  }
 default:
  {
   _jsignal(3);
   $$0 = 0;
   return $$0 | 0;
  }
 }
 return 0;
}

function _mdiv($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$ph26 = 0, $$pr$pre = 0, $$sum2 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $27 = 0, $28 = 0, $39 = 0, $40 = 0, $42 = 0, $47 = 0.0, $54 = 0.0, $58 = 0, $60 = 0, $62 = 0, $64 = 0, $76 = 0, $8 = 0, $83 = 0, $84 = 0, $86 = 0, $91 = 0.0, $98 = 0.0, $d$0$lcssa$i = 0.0, $d$0$lcssa$i13 = 0.0, $d$010$i = 0.0, $d$010$i9 = 0.0, $i$09$i = 0, $i$09$i10 = 0, $i1$07$i = 0, $i1$07$i18 = 0, $v$08$i = 0, $v$08$i11 = 0, $z$0$ph$ph = 0, $z$1 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$a + 12 >> 2] | 0) <= 127) {
  $8 = $w + 12 | 0;
  if ((HEAP32[$8 >> 2] | 0) <= 2) {
   $12 = HEAP32[$w >> 2] | 0;
   $13 = _qr($w) | 0;
   if (!$13) {
    $$0 = 0;
    return $$0 | 0;
   }
   $16 = HEAP32[$13 + 12 >> 2] | 0;
   $$sum2 = $16 + 4 + ($16 & 1) | 0;
   $20 = HEAP32[$13 + ($$sum2 << 2) >> 2] | 0;
   $21 = HEAP32[$13 + ($$sum2 + 1 << 2) >> 2] | 0;
   $22 = _rinv($21) | 0;
   $25 = _cant1($20) | 0;
   if (!($12 & 16)) $27 = $25; else $27 = _conjug($25) | 0;
   $28 = _pdt($22, $27) | 0;
   $$pr$pre = HEAP32[$8 >> 2] | 0;
   do if (($12 & 5 | 0) != 0 & ($$pr$pre | 0) == 2) {
    if ((HEAP32[$w + 16 >> 2] | 0) != (HEAP32[$w + 20 >> 2] | 0)) {
     $z$1 = _pdt($28, $a) | 0;
     break;
    }
    if (($21 | 0) != 0 & ($28 | 0) != 0) {
     $39 = HEAP32[$21 + 16 >> 2] | 0;
     $40 = $39 + 1 | 0;
     $42 = HEAP32[$21 + 12 >> 2] | 0;
     if (($39 | 0) > 0) {
      $d$010$i = 1.0;
      $i$09$i = 0;
      $v$08$i = $21 + ($42 + 4 + ($42 & 1) << 2) | 0;
      while (1) {
       $47 = $d$010$i * +HEAPF64[$v$08$i >> 3];
       $i$09$i = $i$09$i + 1 | 0;
       if (($i$09$i | 0) == ($39 | 0)) {
        $d$0$lcssa$i = $47;
        break;
       } else {
        $d$010$i = $47;
        $v$08$i = $v$08$i + ($40 << 3) | 0;
       }
      }
     } else $d$0$lcssa$i = 1.0;
     $54 = +Math_floor(+(($d$0$lcssa$i >= 0.0 ? $d$0$lcssa$i : -$d$0$lcssa$i) + .5));
     if ($54 == 0.0 | $54 > 1.0e20) $z$0$ph$ph = $28; else {
      $58 = HEAP32[$28 + 12 >> 2] | 0;
      $60 = $28 + ($58 + 4 + ($58 & 1) << 2) | 0;
      $62 = HEAP32[$28 + 8 >> 2] | 0;
      if (($62 | 0) > 0) {
       $i1$07$i = 0;
       do {
        $64 = $60 + ($i1$07$i << 3) | 0;
        HEAPF64[$64 >> 3] = +Math_floor(+($54 * +HEAPF64[$64 >> 3] + .5)) / $54;
        $i1$07$i = $i1$07$i + 1 | 0;
       } while (($i1$07$i | 0) != ($62 | 0));
       $z$0$ph$ph = $28;
      } else $z$0$ph$ph = $28;
     }
    } else $z$0$ph$ph = 0;
    $76 = _pdt($z$0$ph$ph, $a) | 0;
    if (!(HEAP32[$a >> 2] & 5)) $z$1 = $76; else if (($21 | 0) != 0 & ($76 | 0) != 0) {
     $83 = HEAP32[$21 + 16 >> 2] | 0;
     $84 = $83 + 1 | 0;
     $86 = HEAP32[$21 + 12 >> 2] | 0;
     if (($83 | 0) > 0) {
      $d$010$i9 = 1.0;
      $i$09$i10 = 0;
      $v$08$i11 = $21 + ($86 + 4 + ($86 & 1) << 2) | 0;
      while (1) {
       $91 = $d$010$i9 * +HEAPF64[$v$08$i11 >> 3];
       $i$09$i10 = $i$09$i10 + 1 | 0;
       if (($i$09$i10 | 0) == ($83 | 0)) {
        $d$0$lcssa$i13 = $91;
        break;
       } else {
        $d$010$i9 = $91;
        $v$08$i11 = $v$08$i11 + ($84 << 3) | 0;
       }
      }
     } else $d$0$lcssa$i13 = 1.0;
     $98 = +Math_floor(+(($d$0$lcssa$i13 >= 0.0 ? $d$0$lcssa$i13 : -$d$0$lcssa$i13) + .5));
     if ($98 == 0.0 | $98 > 1.0e20) $z$1 = $76; else {
      $102 = HEAP32[$76 + 12 >> 2] | 0;
      $104 = $76 + ($102 + 4 + ($102 & 1) << 2) | 0;
      $106 = HEAP32[$76 + 8 >> 2] | 0;
      if (($106 | 0) > 0) {
       $i1$07$i18 = 0;
       do {
        $108 = $104 + ($i1$07$i18 << 3) | 0;
        HEAPF64[$108 >> 3] = +Math_floor(+($98 * +HEAPF64[$108 >> 3] + .5)) / $98;
        $i1$07$i18 = $i1$07$i18 + 1 | 0;
       } while (($i1$07$i18 | 0) != ($106 | 0));
       $z$1 = $76;
      } else $z$1 = $76;
     }
    } else $z$1 = 0;
   } else {
    if (($$pr$pre | 0) < 2) $$ph26 = _reshape(_shape($w) | 0, $28) | 0; else $$ph26 = $28;
    $z$1 = _pdt($$ph26, $a) | 0;
   } while (0);
   $$0 = _gc($z$1, $2) | 0;
   return $$0 | 0;
  }
 }
 $$0 = _rank2ex($a, $w, 0, 127, 2, 98) | 0;
 return $$0 | 0;
}

function _abase1($w) {
 $w = $w | 0;
 var $$0 = 0, $$0$i = 0, $$0$i10 = 0, $$lcssa37 = 0, $0 = 0, $10 = 0, $104 = 0, $18 = 0, $19 = 0, $21 = 0, $24 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $42 = 0, $5 = 0, $51 = 0, $55 = 0, $59 = 0, $6 = 0, $62 = 0, $69 = 0, $7 = 0, $72 = 0, $76 = 0, $79 = 0, $81 = 0, $91 = 0, $93 = 0, $95 = 0, $c$1 = 0, $c$2 = 0, $i$024 = 0, $i1$018$us = 0, $i3$016$us = 0, $v$022 = 0, $v$117$us = 0, $x$023 = 0, $x$1 = 0, $x$214$us = 0, $zv$019$us = 0, $zv$115$us = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 if (!$w) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $3 = HEAP32[$w + 8 >> 2] | 0;
 $4 = $w + 12 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = HEAP32[$w >> 2] | 0;
 $7 = ($3 | 0) != 0;
 if (!($7 & ($6 & 1 | 0) == 0)) {
  $10 = _shape($w) | 0;
  $$0 = _reshape(_over($10, $7 ? HEAP32[646] | 0 : HEAP32[660] | 0) | 0, $w) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!($6 & 4)) {
  $18 = HEAP32[658] | 0;
  $19 = HEAP32[646] | 0;
  HEAP32[$0 >> 2] = _ravel($w) | 0;
  $21 = _coerce1($0, 1) | 0;
  do if (($21 | 0) == 4) {
   $24 = _sc(-2147483648) | 0;
   $28 = (_all1(_eps($24, HEAP32[$0 >> 2] | 0) | 0) | 0) << 24 >> 24 == 0;
   $29 = HEAP32[$0 >> 2] | 0;
   if ($28) {
    $$0$i = _sex1($29, 4, 371) | 0;
    break;
   } else {
    $$0$i = _sex1(_cvt(8, $29) | 0, 8, 370) | 0;
    break;
   }
  } else if (($21 | 0) == 1) $$0$i = _ca(HEAP32[$0 >> 2] | 0) | 0; else if (($21 | 0) == 16) $$0$i = _sex1(HEAP32[$0 >> 2] | 0, 8, 372) | 0; else if (($21 | 0) == 8) $$0$i = _sex1(HEAP32[$0 >> 2] | 0, 8, 370) | 0; else $$0$i = 0; while (0);
  HEAP32[$0 >> 2] = _logar2($18, _va2($19, _df1($$0$i, _slash(_ds(-124) | 0) | 0) | 0, -124) | 0) | 0;
  $42 = _coerce1($0, 1) | 0;
  if (($42 | 0) == 4 | ($42 | 0) == 1) $$0$i10 = _ca(HEAP32[$0 >> 2] | 0) | 0; else if (($42 | 0) == 8) $$0$i10 = _icvt(_sex1(HEAP32[$0 >> 2] | 0, 8, 373) | 0) | 0; else if (($42 | 0) == 16) $$0$i10 = _sex1(HEAP32[$0 >> 2] | 0, 16, 374) | 0; else $$0$i10 = 0;
  $51 = _va2(HEAP32[646] | 0, $$0$i10, 43) | 0;
  $$0 = _abase2(_reshape($51, HEAP32[658] | 0) | 0, $w) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $55 = ($3 | 0) > 0;
 L26 : do if ($55) {
  $i$024 = 0;
  $v$022 = $w + ($5 + 4 + ($5 & 1) << 2) | 0;
  $x$023 = 0;
  while (1) {
   $59 = HEAP32[$v$022 >> 2] | 0;
   if (($59 | 0) == -2147483648) {
    $c$2 = 32;
    break L26;
   }
   if (($x$023 | 0) < ($59 | 0)) $104 = $59; else {
    $62 = 0 - $59 | 0;
    $104 = ($x$023 | 0) < ($62 | 0) ? $62 : $x$023;
   }
   $i$024 = $i$024 + 1 | 0;
   if (($i$024 | 0) >= ($3 | 0)) {
    $$lcssa37 = $104;
    break;
   } else {
    $v$022 = $v$022 + 4 | 0;
    $x$023 = $104;
   }
  }
  if (!$$lcssa37) $c$2 = 0; else {
   $c$1 = 0;
   $x$1 = $$lcssa37;
   while (1) {
    $69 = $c$1 + 1 | 0;
    if (($x$1 + 1 | 0) >>> 0 > 2) {
     $c$1 = $69;
     $x$1 = ($x$1 | 0) / 2 | 0;
    } else {
     $c$2 = $69;
     break;
    }
   }
  }
 } else $c$2 = 0; while (0);
 $72 = ($c$2 | 0) < 1 ? 1 : $c$2;
 $76 = _ga(1, Math_imul($72, $3) | 0, $5 + 1 | 0, $w + 16 | 0) | 0;
 if (!$76) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$76 + 16 + ($5 << 2) >> 2] = $72;
 $79 = HEAP32[$4 >> 2] | 0;
 $81 = HEAP32[$76 + 12 >> 2] | 0;
 if (!($55 & ($72 | 0) > 0)) {
  $$0 = $76;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $91 = ($c$2 | 0) > 1 ? 0 - $c$2 | 0 : -1;
 $i1$018$us = 0;
 $v$117$us = $w + ($3 + 4 + $79 + ($79 & 1) << 2) | 0;
 $zv$019$us = $76 + ($81 + 4 + ($81 & 1) << 2) + (HEAP32[$76 + 8 >> 2] | 0) | 0;
 while (1) {
  $v$117$us = $v$117$us + -4 | 0;
  $i3$016$us = 0;
  $x$214$us = HEAP32[$v$117$us >> 2] | 0;
  $zv$115$us = $zv$019$us;
  while (1) {
   $93 = ($x$214$us | 0) % 2 | 0;
   $95 = ($93 | 0) < 0 ? 1 : $93;
   $zv$115$us = $zv$115$us + -1 | 0;
   HEAP8[$zv$115$us >> 0] = $95;
   $i3$016$us = $i3$016$us + 1 | 0;
   if (($i3$016$us | 0) >= ($72 | 0)) break; else $x$214$us = ($x$214$us - $95 | 0) / 2 | 0;
  }
  $i1$018$us = $i1$018$us + 1 | 0;
  if (($i1$018$us | 0) == ($3 | 0)) {
   $$0 = $76;
   break;
  } else $zv$019$us = $zv$019$us + $91 | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _symbis($a, $w, $symb) {
 $a = $a | 0;
 $w = $w | 0;
 $symb = $symb | 0;
 var $$0 = 0, $$02 = 0, $$neg$i = 0, $100 = 0, $102 = 0, $103 = 0, $107 = 0, $108 = 0, $110 = 0, $115 = 0, $117 = 0, $13 = 0, $17 = 0, $2 = 0, $20 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $48 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $82 = 0, $83 = 0, $91 = 0, $95 = 0, $96 = 0, $i$111$i = 0, $i$2$i = 0, $q$0$lcssa$i = 0, $q$07$i = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = $a;
 $3 = $a + 12 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $6 = $a + ($4 + 4 + ($4 & 1) << 2) | 0;
 $8 = HEAP32[$a + 8 >> 2] | 0;
 do if ((HEAP8[$6 + ($8 + -1) >> 0] | 0) == 95) {
  $13 = $6 + ($8 + -2) | 0;
  L6 : do if ($6 >>> 0 < $13 >>> 0) {
   $q$07$i = $13;
   while (1) {
    if ((HEAP8[$q$07$i >> 0] | 0) == 95) {
     $q$0$lcssa$i = $q$07$i;
     break L6;
    }
    $17 = $q$07$i + -1 | 0;
    if ($6 >>> 0 < $17 >>> 0) $q$07$i = $17; else {
     $q$0$lcssa$i = $17;
     break;
    }
   }
  } else $q$0$lcssa$i = $13; while (0);
  if (($6 | 0) == ($q$0$lcssa$i | 0)) {
   $$02 = $symb;
   $48 = 0;
  } else {
   $20 = $q$0$lcssa$i;
   if (($13 | 0) == ($q$0$lcssa$i | 0)) $39 = 0; else {
    $25 = _str($13 - $20 | 0, $q$0$lcssa$i + 1 | 0) | 0;
    if (!$25) {
     $$0 = 0;
     return $$0 | 0;
    } else $39 = $25;
   }
   $28 = $20 - $6 | 0;
   $29 = _ga(1024, $28, 1, 0) | 0;
   if (!$29) {
    $$02 = $symb;
    $48 = 0;
   } else {
    $31 = $29;
    $33 = HEAP32[$29 + 12 >> 2] | 0;
    $36 = HEAP32[$3 >> 2] | 0;
    _memcpy($29 + ($33 + 4 + ($33 & 1) << 2) | 0, $a + ($36 + 4 + ($36 & 1) << 2) | 0, $28 | 0) | 0;
    $40 = _stfind($39) | 0;
    if (!$40) {
     if (!$39) {
      $$0 = 0;
      return $$0 | 0;
     }
     $44 = _ga(32768, HEAP32[885] | 0, 1, 0) | 0;
     if (!$44) {
      $$0 = 0;
      return $$0 | 0;
     } else {
      HEAP32[$44 + 4 >> 2] = 1073741823;
      _symbis($39, $44, HEAP32[898] | 0) | 0;
      $$02 = $44;
      $48 = $31;
      break;
     }
    } else {
     $$02 = $40;
     $48 = $31;
    }
   }
  }
 } else {
  $$02 = $symb;
  $48 = $2;
 } while (0);
 $50 = _ra($48) | 0;
 $51 = $50;
 $52 = _ra($w) | 0;
 $54 = (_cl($50) | 0) << 24 >> 24 == 58;
 $56 = HEAP32[$50 + 12 >> 2] | 0;
 $58 = $50 + ($56 + 4 + ($56 & 1) << 2) | 0;
 $59 = $$02 + 12 | 0;
 $60 = HEAP32[$59 >> 2] | 0;
 $62 = $$02 + ($60 + 4 + ($60 & 1) << 2) | 0;
 $64 = HEAP32[$$02 + 8 >> 2] | 0;
 $73 = (HEAP8[$58 + ((HEAP32[$50 + 8 >> 2] | 0) + -1) >> 0] | 0) + (HEAPU8[$58 >> 0] << 8) | 0;
 $74 = ($73 | 0) % ($64 | 0) | 0;
 $76 = ($73 | 0) % ($64 + -2 | 0) | 0;
 $77 = $76 + 1 | 0;
 $$neg$i = ~$76;
 $79 = HEAP32[$62 + ($74 << 3) >> 2] | 0;
 L25 : do if (!$79) $i$2$i = $74; else {
  $82 = $79;
  $i$111$i = $74;
  while (1) {
   $83 = HEAP32[$82 + 12 >> 2] | 0;
   if (!(_strcmp($58, $82 + ($83 + 4 + ($83 & 1) << 2) | 0) | 0)) {
    $i$2$i = $i$111$i;
    break L25;
   }
   $91 = $i$111$i + $$neg$i + (($i$111$i | 0) < ($77 | 0) ? $64 : 0) | 0;
   $82 = HEAP32[$62 + ($91 << 3) >> 2] | 0;
   if (!$82) {
    $i$2$i = $91;
    break;
   } else $i$111$i = $91;
  }
 } while (0);
 $95 = $62 + ($i$2$i << 3) + 4 | 0;
 $96 = HEAP32[$95 >> 2] | 0;
 $100 = ($96 | 0) == 0 | ($96 | 0) == (HEAP32[620] | 0);
 if (!($54 | $100)) {
  $102 = (HEAP32[892] | 0) == ($$02 | 0);
  $103 = $62 + ($i$2$i << 3) | 0;
  _fa(HEAP32[$103 >> 2] | 0) | 0;
  HEAP32[$103 >> 2] = 0;
  _fa(HEAP32[$95 >> 2] | 0) | 0;
  HEAP32[$95 >> 2] = $102 ? 0 : HEAP32[620] | 0;
 }
 if (!($100 | $54 ^ 1)) {
  _jsignal(12);
  $$0 = 0;
  return $$0 | 0;
 }
 $107 = _probe($50, $$02, 1) | 0;
 $108 = HEAP32[$59 >> 2] | 0;
 $110 = $$02 + ($108 + 4 + ($108 & 1) << 2) | 0;
 HEAP32[$110 + ($107 << 3) >> 2] = $51;
 HEAP32[$110 + ($107 << 3) + 4 >> 2] = $52;
 if ((HEAP32[$52 >> 2] | 0) == 128) {
  $115 = _ra($50) | 0;
  $117 = HEAP32[$52 + 12 >> 2] | 0;
  HEAP32[$52 + ($117 + 9 + ($117 & 1) << 2) >> 2] = $115;
 }
 $$0 = HEAP32[620] | 0;
 return $$0 | 0;
}

function _wordil($w) {
 $w = $w | 0;
 var $$0 = 0, $$lcssa = 0, $$sink = 0, $10 = 0, $11 = 0, $13 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $25 = 0, $31 = 0, $33 = 0, $4 = 0, $40 = 0, $51 = 0, $6 = 0, $63 = 0, $65 = 0, $69 = 0, $8 = 0, $b$0$lcssa29 = 0, $b$010 = 0, $b$1 = 0, $b$1$lcssa = 0, $i$09 = 0, $nv$0$lcssa23 = 0, $nv$016 = 0, $nv$3 = 0, $nv$3$lcssa = 0, $s$0$lcssa24 = 0, $s$015 = 0, $t$0$lcssa28 = 0, $t$011 = 0, $t$1 = 0, $t$2 = 0, $t$2$lcssa = 0, $x$0$lcssa27 = 0, $x$012 = 0, $x$1 = 0, $x$2 = 0, $x$2$lcssa = 0, $x$3 = 0, $x$4 = 0, $xb$0$lcssa26 = 0, $xb$013 = 0, $xb$2 = 0, $xb$2$lcssa = 0, $xe$0$lcssa25 = 0, $xe$014 = 0, $xe$1 = 0, $xe$1$lcssa = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 8 >> 2] | 0;
 $4 = HEAP32[$w + 12 >> 2] | 0;
 $6 = $w + ($4 + 4 + ($4 & 1) << 2) | 0;
 $8 = _ga(4, $2 << 1 | 1, 1, 0) | 0;
 if (!$8) {
  $$0 = 0;
  return $$0 | 0;
 }
 $10 = $8 + 12 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 $13 = $8 + ($11 + 5 + ($11 & 1) << 2) | 0;
 if (($2 | 0) > 0) {
  $b$010 = 0;
  $i$09 = 0;
  $nv$016 = 0;
  $s$015 = 0;
  $t$011 = 0;
  $x$012 = $13;
  $xb$013 = 0;
  $xe$014 = 0;
  while (1) {
   $20 = HEAP8[6048 + (HEAPU8[$6 + $i$09 >> 0] | 0) >> 0] | 0;
   $21 = $s$015 << 24 >> 24;
   $23 = HEAP8[8072 + ($21 * 18 | 0) + ($20 << 1) >> 0] | 0;
   $25 = HEAP8[8072 + ($21 * 18 | 0) + ($20 << 1) + 1 >> 0] | 0;
   do if ($25 << 24 >> 24 == 1) {
    $31 = $s$015 << 24 >> 24 == 6 & ($t$011 & 255) & 255;
    $33 = $nv$016 << 24 >> 24 != 0;
    if ($31 << 24 >> 24) {
     $nv$3 = $33 ? $nv$016 : 1;
     $t$1 = $31;
     $x$2 = $x$012;
     $xb$2 = $33 ? $xb$013 : $b$010;
     $xe$1 = $i$09;
     break;
    }
    if ($33) {
     HEAP32[$x$012 >> 2] = $xb$013;
     HEAP32[$x$012 + 4 >> 2] = $xe$014 - $xb$013;
     $x$1 = $x$012 + 8 | 0;
    } else $x$1 = $x$012;
    HEAP32[$x$1 >> 2] = $b$010;
    HEAP32[$x$1 + 4 >> 2] = $i$09 - $b$010;
    $nv$3 = 0;
    $t$1 = 0;
    $x$2 = $x$1 + 8 | 0;
    $xb$2 = $xb$013;
    $xe$1 = $xe$014;
   } else {
    $nv$3 = $nv$016;
    $t$1 = $t$011;
    $x$2 = $x$012;
    $xb$2 = $xb$013;
    $xe$1 = $xe$014;
   } while (0);
   $40 = $25 << 24 >> 24 == 0;
   $b$1 = $40 ? $b$010 : $i$09;
   $t$2 = $40 ? $t$1 : $23 << 24 >> 24 == 6 & 1;
   $i$09 = $i$09 + 1 | 0;
   if (($i$09 | 0) == ($2 | 0)) {
    $$lcssa = $23;
    $b$1$lcssa = $b$1;
    $nv$3$lcssa = $nv$3;
    $t$2$lcssa = $t$2;
    $x$2$lcssa = $x$2;
    $xb$2$lcssa = $xb$2;
    $xe$1$lcssa = $xe$1;
    break;
   } else {
    $b$010 = $b$1;
    $nv$016 = $nv$3;
    $s$015 = $23;
    $t$011 = $t$2;
    $x$012 = $x$2;
    $xb$013 = $xb$2;
    $xe$014 = $xe$1;
   }
  }
  if ($$lcssa << 24 >> 24 == 7) {
   _jsignalx(13, $w, -1);
   _debug();
   $$0 = 0;
   return $$0 | 0;
  } else {
   $b$0$lcssa29 = $b$1$lcssa;
   $nv$0$lcssa23 = $nv$3$lcssa;
   $s$0$lcssa24 = $$lcssa;
   $t$0$lcssa28 = $t$2$lcssa;
   $x$0$lcssa27 = $x$2$lcssa;
   $xb$0$lcssa26 = $xb$2$lcssa;
   $xe$0$lcssa25 = $xe$1$lcssa;
  }
 } else {
  $b$0$lcssa29 = 0;
  $nv$0$lcssa23 = 0;
  $s$0$lcssa24 = 0;
  $t$0$lcssa28 = 0;
  $x$0$lcssa27 = $13;
  $xb$0$lcssa26 = 0;
  $xe$0$lcssa25 = 0;
 }
 if (!($s$0$lcssa24 << 24 >> 24 == 6 & ($t$0$lcssa28 & 255))) {
  if (!($nv$0$lcssa23 << 24 >> 24)) $x$3 = $x$0$lcssa27; else {
   HEAP32[$x$0$lcssa27 >> 2] = $xb$0$lcssa26;
   HEAP32[$x$0$lcssa27 + 4 >> 2] = $xe$0$lcssa25 - $xb$0$lcssa26;
   $x$3 = $x$0$lcssa27 + 8 | 0;
  }
  if (!($s$0$lcssa24 << 24 >> 24)) $x$4 = $x$3; else {
   HEAP32[$x$3 >> 2] = $b$0$lcssa29;
   HEAP32[$x$3 + 4 >> 2] = $2 - $b$0$lcssa29;
   $x$4 = $x$3 + 8 | 0;
  }
 } else {
  $51 = $nv$0$lcssa23 << 24 >> 24 != 0 ? $xb$0$lcssa26 : $b$0$lcssa29;
  HEAP32[$x$0$lcssa27 >> 2] = $51;
  HEAP32[$x$0$lcssa27 + 4 >> 2] = $2 - $51;
  $x$4 = $x$0$lcssa27 + 8 | 0;
 }
 $63 = HEAP32[$10 >> 2] | 0;
 $65 = $8 + ($63 + 4 + ($63 & 1) << 2) | 0;
 $69 = $x$4 - $65 >> 2;
 if ($s$0$lcssa24 << 24 >> 24 == 5 | $s$0$lcssa24 << 24 >> 24 == 9) $$sink = 0 - $69 | 0; else $$sink = $69;
 HEAP32[$65 >> 2] = ($$sink | 0) / 2 | 0;
 $$0 = $8;
 return $$0 | 0;
}

function _dfc($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$sum11 = 0, $$sum6 = 0, $$sum8 = 0, $15 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $27 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $46 = 0, $55 = 0, $57 = 0, $58 = 0, $61 = 0, $64 = 0, $79 = 0, $80 = 0, $90 = 0, $94 = 0, $i$024 = 0, $i$03$i = 0, $i1$025 = 0, $i3$027 = 0, $j$032$in = 0, $v$02$i = 0, label = 0, $i3$027$looptemp = 0, $j$032$in$looptemp = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$a + 12 >> 2] | 0)) if (HEAP32[$a >> 2] & 4) if ((HEAP32[$a + 16 >> 2] | 0) > -1) {
  $15 = _reshape($a, HEAP32[646] | 0) | 0;
  if (!$15) {
   $$0 = 0;
   return $$0 | 0;
  }
  $18 = HEAP32[$15 + 12 >> 2] | 0;
  $20 = $15 + ($18 + 4 + ($18 & 1) << 2) | 0;
  $21 = _iota($a) | 0;
  if (!$21) {
   $$0 = 0;
   return $$0 | 0;
  }
  $24 = HEAP32[$21 + 12 >> 2] | 0;
  $$sum6 = $24 + 4 + ($24 & 1) | 0;
  $27 = HEAP32[$w + 12 >> 2] | 0;
  $$sum8 = $27 + 4 + ($27 & 1) | 0;
  $30 = HEAP32[$w + 8 >> 2] | 0;
  L14 : do if (($30 | 0) > 0) {
   $j$032$in = $30;
   L15 : while (1) {
    $j$032$in$looptemp = $j$032$in;
    $j$032$in = $j$032$in + -1 | 0;
    $33 = HEAP32[$w + ($$sum8 + $j$032$in << 2) >> 2] | 0;
    $34 = _i0($a) | 0;
    $35 = 0 - $34 | 0;
    $37 = _ca(_vi($33) | 0) | 0;
    if (!$37) {
     $$0 = 0;
     label = 32;
     break;
    }
    $39 = $37 + 12 | 0;
    $40 = HEAP32[$39 >> 2] | 0;
    $41 = $37 + 8 | 0;
    $42 = HEAP32[$41 >> 2] | 0;
    if (($42 | 0) > 0) {
     $i$03$i = 0;
     $v$02$i = $37 + ($40 + 4 + ($40 & 1) << 2) | 0;
     while (1) {
      $46 = HEAP32[$v$02$i >> 2] | 0;
      if (!(($46 | 0) >= ($35 | 0) & ($46 | 0) < ($34 | 0))) {
       label = 13;
       break L15;
      }
      HEAP32[$v$02$i >> 2] = (($46 | 0) < 0 ? $34 : 0) + $46;
      $i$03$i = $i$03$i + 1 | 0;
      if (($i$03$i | 0) >= ($42 | 0)) break; else $v$02$i = $v$02$i + 4 | 0;
     }
     $55 = HEAP32[$39 >> 2] | 0;
     $58 = HEAP32[$41 >> 2] | 0;
    } else {
     $55 = $40;
     $58 = $42;
    }
    $$sum11 = $55 + 4 + ($55 & 1) | 0;
    $57 = $37 + ($$sum11 << 2) | 0;
    if ($58) {
     $61 = ($58 | 0) > 0;
     if ($61) {
      $i$024 = 0;
      do {
       $64 = $20 + (HEAP32[$37 + ($i$024 + $$sum11 << 2) >> 2] | 0) | 0;
       if (!(HEAP8[$64 >> 0] | 0)) {
        label = 23;
        break L15;
       }
       HEAP8[$64 >> 0] = 0;
       $i$024 = $i$024 + 1 | 0;
      } while (($i$024 | 0) < ($58 | 0));
      if ($61) {
       $i1$025 = 0;
       do {
        HEAP8[$20 + (HEAP32[$37 + ($i1$025 + $$sum11 << 2) >> 2] | 0) >> 0] = 1;
        $i1$025 = $i1$025 + 1 | 0;
       } while (($i1$025 | 0) != ($58 | 0));
       $79 = HEAP32[$21 + ((HEAP32[$57 >> 2] | 0) + $$sum6 << 2) >> 2] | 0;
       $80 = $58 + -1 | 0;
       if (($58 | 0) > 1) {
        $i3$027 = 0;
        do {
         $i3$027$looptemp = $i3$027;
         $i3$027 = $i3$027 + 1 | 0;
         HEAP32[$21 + ((HEAP32[$37 + ($i3$027$looptemp + $$sum11 << 2) >> 2] | 0) + $$sum6 << 2) >> 2] = HEAP32[$21 + ((HEAP32[$37 + ($i3$027 + $$sum11 << 2) >> 2] | 0) + $$sum6 << 2) >> 2];
        } while (($i3$027 | 0) != ($80 | 0));
        $90 = $80;
        $94 = $79;
       } else {
        $90 = $80;
        $94 = $79;
       }
      } else label = 26;
     } else label = 26;
     if ((label | 0) == 26) {
      label = 0;
      $90 = $58 + -1 | 0;
      $94 = HEAP32[$21 + ((HEAP32[$57 >> 2] | 0) + $$sum6 << 2) >> 2] | 0;
     }
     HEAP32[$21 + ((HEAP32[$37 + ($$sum11 + $90 << 2) >> 2] | 0) + $$sum6 << 2) >> 2] = $94;
    }
    if (($j$032$in$looptemp | 0) <= 1) break L14;
   }
   if ((label | 0) == 13) {
    _jsignal(6);
    $$0 = 0;
    return $$0 | 0;
   } else if ((label | 0) == 23) {
    _jsignal(6);
    $$0 = 0;
    return $$0 | 0;
   } else if ((label | 0) == 32) return $$0 | 0;
  } while (0);
  $$0 = _gc($21, $2) | 0;
  return $$0 | 0;
 }
 _jsignal(6);
 $$0 = 0;
 return $$0 | 0;
}

function _parse($w) {
 $w = $w | 0;
 var $$0 = 0, $$sum1 = 0, $$sum8 = 0, $100 = 0, $109 = 0, $12 = 0, $13 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $42 = 0, $46 = 0, $47 = 0, $50 = 0, $52 = 0, $6 = 0, $63 = 0, $7 = 0, $76 = 0, $78 = 0, $8 = 0, $81 = 0, $86 = 0, $i$0$lcssa = 0, $i$015 = 0, $i1$020 = 0, $j$018 = 0, $k$019 = 0, $m$0 = 0, $m$1 = 0, $n$0 = 0, $n$1 = 0, $n$1$lcssa = 0, label = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 8 >> 2] | 0;
 $4 = HEAP32[$w + 12 >> 2] | 0;
 $$sum1 = $4 + 4 + ($4 & 1) | 0;
 $6 = $w + ($$sum1 << 2) | 0;
 $7 = $2 + -4 | 0;
 HEAP8[2512] = 0;
 $8 = _deba($6, $2) | 0;
 if (!$8) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!((_dbcheck() | 0) << 24 >> 24)) {
  $m$0 = $7;
  $n$0 = $7;
 } else {
  _jsignal(17);
  _debug();
  _debz();
  $$0 = 0;
  return $$0 | 0;
 }
 while (1) {
  $$sum8 = $n$0 + $$sum1 | 0;
  $12 = $w + ($$sum8 + 3 << 2) | 0;
  $13 = HEAP32[806] | 0;
  L12 : do if (($13 | 0) > 0) {
   $17 = HEAP32[HEAP32[$w + ($$sum8 << 2) >> 2] >> 2] | 0;
   $18 = $w + ($$sum8 + 1 << 2) | 0;
   $19 = $w + ($$sum8 + 2 << 2) | 0;
   $i$015 = 0;
   while (1) {
    if ($17 & HEAP32[2704 + ($i$015 * 40 | 0) >> 2]) if (HEAP32[HEAP32[$18 >> 2] >> 2] & HEAP32[2704 + ($i$015 * 40 | 0) + 4 >> 2]) if (HEAP32[HEAP32[$19 >> 2] >> 2] & HEAP32[2704 + ($i$015 * 40 | 0) + 8 >> 2]) if (HEAP32[HEAP32[$12 >> 2] >> 2] & HEAP32[2704 + ($i$015 * 40 | 0) + 12 >> 2]) {
     $i$0$lcssa = $i$015;
     break L12;
    }
    $42 = $i$015 + 1 | 0;
    if (($42 | 0) < ($13 | 0)) $i$015 = $42; else {
     $i$0$lcssa = $42;
     break;
    }
   }
  } else $i$0$lcssa = 0; while (0);
  if (($i$0$lcssa | 0) < ($13 | 0)) {
   $46 = HEAP32[2704 + ($i$0$lcssa * 40 | 0) + 28 >> 2] | 0;
   $47 = $46 + $n$0 | 0;
   $50 = (HEAP32[2704 + ($i$0$lcssa * 40 | 0) + 32 >> 2] | 0) + $n$0 | 0;
   $52 = HEAP32[2704 + ($i$0$lcssa * 40 | 0) + 16 >> 2] | 0;
   HEAP8[2512] = ($52 | 0) == 25 & 1;
   HEAP32[$8 + ($50 << 2) >> 2] = HEAP32[$8 + ((HEAP32[2704 + ($i$0$lcssa * 40 | 0) + 36 >> 2] | 0) + $n$0 << 2) >> 2];
   HEAP32[(HEAP32[108] | 0) + 32 >> 2] = $50;
   $63 = ftCall_iiii($52 | 0, $47 | 0, $50 | 0, $6 | 0) | 0;
   HEAP32[$w + ($50 + $$sum1 << 2) >> 2] = $63;
   if (!$63) {
    label = 15;
    break;
   }
   if (($46 | 0) > 0) {
    $i1$020 = 0;
    $j$018 = $47;
    $k$019 = $50;
    do {
     $j$018 = $j$018 + -1 | 0;
     $k$019 = $k$019 + -1 | 0;
     HEAP32[$w + ($k$019 + $$sum1 << 2) >> 2] = HEAP32[$w + ($j$018 + $$sum1 << 2) >> 2];
     HEAP32[$8 + ($k$019 << 2) >> 2] = HEAP32[$8 + ($j$018 << 2) >> 2];
     $i1$020 = $i1$020 + 1 | 0;
    } while (($i1$020 | 0) != ($46 | 0));
    $m$1 = $m$0;
    $n$1 = $50 - $46 | 0;
   } else {
    $m$1 = $m$0;
    $n$1 = $50;
   }
  } else {
   $76 = $m$0 + -1 | 0;
   $78 = ($76 | 0) < 0 ? 0 : $76;
   $81 = $n$0 + -1 | 0;
   HEAP32[$8 + ((($81 | 0) < 0 ? 0 : $81) << 2) >> 2] = HEAP32[$8 + ($78 << 2) >> 2];
   $86 = HEAP32[$w + ($78 + $$sum1 << 2) >> 2] | 0;
   do if (!(HEAP32[$86 >> 2] & 1024)) $100 = $86; else if (!(HEAP32[HEAP32[$w + ($$sum8 << 2) >> 2] >> 2] & 8192)) if (((_cf($86) | 0) + 47 & 255) < 2) {
    $100 = _symbrd($86) | 0;
    break;
   } else {
    $100 = _swap($86) | 0;
    break;
   } else $100 = $86; while (0);
   HEAP32[$w + ($81 + $$sum1 << 2) >> 2] = $100;
   if (!$100) {
    label = 23;
    break;
   }
   $m$1 = $76;
   $n$1 = $n$0 - (($m$0 | 0) > 0 & 1) | 0;
  }
  if (($m$1 | 0) > -1) {
   $m$0 = $m$1;
   $n$0 = $n$1;
  } else {
   $n$1$lcssa = $n$1;
   label = 27;
   break;
  }
 }
 if ((label | 0) == 15) {
  _debug();
  _debz();
  $$0 = 0;
  return $$0 | 0;
 } else if ((label | 0) == 23) {
  _debz();
  $$0 = 0;
  return $$0 | 0;
 } else if ((label | 0) == 27) {
  $109 = HEAP32[$w + ($$sum1 + 1 + $n$1$lcssa << 2) >> 2] | 0;
  if (HEAP32[$109 >> 2] & 17407) if (HEAP32[HEAP32[$w + ($$sum1 + 2 + $n$1$lcssa << 2) >> 2] >> 2] & 16384) {
   _debz();
   $$0 = $109;
   return $$0 | 0;
  }
  _jsignal(18);
  _debug();
  _debz();
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function _th($w, $wd, $fmt) {
 $w = $w | 0;
 $wd = $wd | 0;
 $fmt = $fmt | 0;
 var $$0 = 0, $$lcssa = 0, $$sum5 = 0, $13 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $22 = 0, $24 = 0, $25 = 0, $36 = 0, $39 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $54 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $67 = 0, $69 = 0, $7 = 0, $72 = 0, $74 = 0, $77 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $i$038 = 0, $i1$036$us = 0, $i3$031$us = 0, $i5$026 = 0, $i7$022$us = 0, $i9$019$us = 0, $p$0$lcssa = 0, $p$025 = 0, $x$040 = 0, $x$123$us = 0, $x$218$us = 0, $y$039 = 0, $y$137$us = 0, $y$232$us = 0, $y$321$us = 0, $y$417$us = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $5 = HEAP32[$w + 8 >> 2] | 0;
 $6 = $w + 12 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $8 = $w + 16 | 0;
 $9 = ($7 | 0) != 0;
 if ($9) $14 = HEAP32[$w + 16 + ($7 + -1 << 2) >> 2] | 0; else $14 = 1;
 $13 = ($5 | 0) / ($14 | 0) | 0;
 $16 = _bp(HEAP32[$w >> 2] | 0) | 0;
 $19 = _ga(2, Math_imul($5 + 1 | 0, $wd) | 0, 1, 0) | 0;
 if (!$19) {
  $$0 = 0;
  return $$0 | 0;
 }
 $22 = HEAP32[$19 + 12 >> 2] | 0;
 $24 = $19 + ($22 + 4 + ($22 & 1) << 2) | 0;
 $25 = HEAP32[$6 >> 2] | 0;
 if (($5 | 0) > 0) {
  $i$038 = 0;
  $x$040 = $w + ($25 + 4 + ($25 & 1) << 2) + (0 - $16) | 0;
  $y$039 = $24 + (0 - $wd) | 0;
  do {
   $y$039 = $y$039 + $wd | 0;
   $x$040 = $x$040 + $16 | 0;
   ftCall_vii($fmt | 0, $y$039 | 0, $x$040 | 0);
   $i$038 = $i$038 + 1 | 0;
  } while (($i$038 | 0) != ($5 | 0));
 }
 $36 = _apv($14, 1, 0) | 0;
 if (!$36) {
  $$0 = 0;
  return $$0 | 0;
 }
 $39 = HEAP32[$36 + 12 >> 2] | 0;
 $$sum5 = $39 + 4 + ($39 & 1) | 0;
 if ((HEAP32[$w >> 2] | 0) != 1 & ($13 | 0) > 0 & ($14 | 0) > 0) {
  $45 = Math_imul($14, $wd) | 0;
  $i1$036$us = 0;
  $y$137$us = $24;
  while (1) {
   $i3$031$us = 0;
   $y$232$us = $y$137$us;
   while (1) {
    $47 = _strlen($y$232$us | 0) | 0;
    $48 = $36 + ($i3$031$us + $$sum5 << 2) | 0;
    $49 = HEAP32[$48 >> 2] | 0;
    HEAP32[$48 >> 2] = ($49 | 0) > ($47 | 0) ? $49 : $47;
    $i3$031$us = $i3$031$us + 1 | 0;
    if (($i3$031$us | 0) == ($14 | 0)) break; else $y$232$us = $y$232$us + $wd | 0;
   }
   $i1$036$us = $i1$036$us + 1 | 0;
   if (($i1$036$us | 0) == ($13 | 0)) break; else $y$137$us = $y$137$us + $45 | 0;
  }
 }
 $54 = $36 + ($14 + -1 + $$sum5 << 2) | 0;
 HEAP32[$54 >> 2] = (HEAP32[$54 >> 2] | 0) + -1;
 $57 = ($14 | 0) > 0;
 if ($57) {
  $i5$026 = 0;
  $p$025 = 0;
  while (1) {
   $58 = $36 + ($i5$026 + $$sum5 << 2) | 0;
   $60 = (HEAP32[$58 >> 2] | 0) + 1 | 0;
   HEAP32[$58 >> 2] = $60;
   $61 = $60 + $p$025 | 0;
   $i5$026 = $i5$026 + 1 | 0;
   if (($i5$026 | 0) == ($14 | 0)) {
    $p$0$lcssa = $61;
    break;
   } else $p$025 = $61;
  }
 } else $p$0$lcssa = 0;
 $67 = _ga(2, Math_imul($p$0$lcssa, $13) | 0, ($9 & 1 ^ 1) + $7 | 0, $8) | 0;
 if (!$67) {
  $$0 = 0;
  return $$0 | 0;
 }
 $69 = $67 + 12 | 0;
 HEAP32[$67 + 16 + ((HEAP32[$69 >> 2] | 0) + -1 << 2) >> 2] = $p$0$lcssa;
 $72 = HEAP32[$69 >> 2] | 0;
 $74 = $67 + ($72 + 4 + ($72 & 1) << 2) | 0;
 _memset($74 | 0, 32, HEAP32[$67 + 8 >> 2] | 0) | 0;
 if (!(($13 | 0) < 1 | $57 ^ 1)) {
  $77 = Math_imul($14, $wd) | 0;
  $i7$022$us = 0;
  $x$123$us = $74;
  $y$321$us = $24;
  while (1) {
   $i9$019$us = 0;
   $x$218$us = $x$123$us;
   $y$417$us = $y$321$us;
   while (1) {
    $80 = HEAP32[$36 + ($i9$019$us + $$sum5 << 2) >> 2] | 0;
    $81 = $x$218$us + $80 | 0;
    $82 = _strlen($y$417$us | 0) | 0;
    $i9$019$us = $i9$019$us + 1 | 0;
    _memcpy($x$218$us + ($80 + ((($14 | 0) > ($i9$019$us | 0)) << 31 >> 31) - $82) | 0, $y$417$us | 0, $82 | 0) | 0;
    if (($i9$019$us | 0) == ($14 | 0)) {
     $$lcssa = $81;
     break;
    } else {
     $x$218$us = $81;
     $y$417$us = $y$417$us + $wd | 0;
    }
   }
   $78 = $i7$022$us + 1 | 0;
   if (($78 | 0) == ($13 | 0)) break; else {
    $i7$022$us = $78;
    $x$123$us = $$lcssa;
    $y$321$us = $y$321$us + $77 | 0;
   }
  }
 }
 $$0 = _gc($67, $2) | 0;
 return $$0 | 0;
}

function _sscan($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $1 = 0, $101 = 0, $103 = 0, $105 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $19 = 0, $25 = 0, $30 = 0, $31 = 0, $37 = 0, $40 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $51 = 0, $56 = 0, $6 = 0, $65 = 0, $68 = 0, $7 = 0, $70 = 0, $73 = 0, $75 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $84 = 0, $86 = 0, $87 = 0, $92 = 0, $95 = 0, $97 = 0, $98 = 0, $cv = 0, $f2 = 0, $i$024 = 0, $i3$030 = 0, $q$027 = 0, $v$026 = 0, $wv$029 = 0, $x$025 = 0, $zv$028 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $cv = sp + 4 | 0;
 $f2 = sp;
 if (!$w) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $1 = $w + 12 | 0;
 if (!(HEAP32[$1 >> 2] | 0)) $8 = 1; else $8 = HEAP32[$w + 16 >> 2] | 0;
 $6 = HEAP32[$w >> 2] | 0;
 $7 = _aii($w) | 0;
 if (($8 | 0) < 2 | ($6 & 29 | 0) == 0) {
  $12 = HEAP32[662] | 0;
  $13 = HEAP32[664] | 0;
  $15 = HEAP32[$self + 12 >> 2] | 0;
  $18 = HEAP32[$self + ($15 + 6 + ($15 & 1) << 2) >> 2] | 0;
  $19 = _mr($self) | 0;
  if (($19 | 0) < (HEAP32[$1 >> 2] | 0)) {
   $$0 = _rank1ex($w, $self, $19, 257) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else {
   $25 = _table(_ii($w) | 0) | 0;
   $$0 = _gc(_df2($25, $w, _atop($18, _ds(-82) | 0) | 0) | 0, $13 + $12 | 0) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $30 = $self + 12 | 0;
 $31 = HEAP32[$30 >> 2] | 0;
 _vaa(HEAP32[$self + ($31 + 6 + ($31 & 1) << 2) >> 2] | 0, $6, $f2, $cv);
 $37 = HEAP32[$cv >> 2] | 0;
 if (($6 & 1 | 0) != 0 | ($37 & 16 | 0) == 0) {
  $40 = _cva($37, $w) | 0;
  if (!$40) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $43 = _bp(HEAP32[$40 >> 2] | 0) | 0;
  $45 = HEAP32[$40 + 12 >> 2] | 0;
  $47 = $40 + ($45 + 4 + ($45 & 1) << 2) | 0;
  $49 = Math_imul(Math_imul($7, $8) | 0, $43) | 0;
  $51 = Math_imul($7, $8 + -1 | 0) | 0;
  if (($51 | 0) > 0) {
   $56 = 0 - $43 | 0;
   $i$024 = 0;
   $v$026 = $47 + ($49 - (Math_imul($43, $7) | 0)) | 0;
   $x$025 = $47 + $49 | 0;
   do {
    $x$025 = $x$025 + $56 | 0;
    $v$026 = $v$026 + $56 | 0;
    ftCall_viii(HEAP32[$f2 >> 2] | 0, $v$026 | 0, $x$025 | 0, $v$026 | 0);
    $i$024 = $i$024 + 1 | 0;
   } while (($i$024 | 0) != ($51 | 0));
  }
  if (HEAP8[2472] | 0) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $$0 = _cvz(HEAP32[$cv >> 2] | 0, $40) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $65 = HEAP32[$30 >> 2] | 0;
 $68 = HEAP32[$self + ($65 + 6 + ($65 & 1) << 2) >> 2] | 0;
 $70 = HEAP32[$68 + 12 >> 2] | 0;
 $73 = HEAP32[$68 + ($70 + 6 + ($70 & 1) << 2) >> 2] | 0;
 $75 = HEAP32[$73 + 12 >> 2] | 0;
 $78 = HEAP32[$73 + ($75 + 5 + ($75 & 1) << 2) >> 2] | 0;
 $80 = Math_imul(_bp($6) | 0, $7) | 0;
 $81 = HEAP32[$1 >> 2] | 0;
 $84 = $8 + -1 | 0;
 $86 = $w + ($81 + 4 + ($81 & 1) << 2) + (Math_imul($80, $84) | 0) | 0;
 $87 = _tail($w) | 0;
 if (!$87) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $92 = _ga($6, $7, HEAP32[$87 + 12 >> 2] | 0, $87 + 16 | 0) | 0;
 if (!$92) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $95 = HEAP32[$92 + 12 >> 2] | 0;
 $97 = $92 + ($95 + 4 + ($95 & 1) << 2) | 0;
 $98 = _ga(32, $8, 1, 0) | 0;
 if (!$98) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $101 = HEAP32[$98 + 12 >> 2] | 0;
 $103 = $98 + ($8 + 3 + $101 + ($101 & 1) << 2) | 0;
 HEAP32[$103 >> 2] = $87;
 L39 : do if (($8 | 0) > 1) {
  $105 = 0 - $80 | 0;
  $i3$030 = 0;
  $q$027 = $87;
  $wv$029 = $86;
  $zv$028 = $103;
  while (1) {
   $wv$029 = $wv$029 + $105 | 0;
   _memcpy($97 | 0, $wv$029 | 0, $80 | 0) | 0;
   $q$027 = ftCall_iiii($78 | 0, $92 | 0, $q$027 | 0, $73 | 0) | 0;
   $zv$028 = $zv$028 + -4 | 0;
   HEAP32[$zv$028 >> 2] = $q$027;
   $i3$030 = $i3$030 + 1 | 0;
   if (!$q$027) {
    $$0 = 0;
    break;
   }
   if (($i3$030 | 0) >= ($84 | 0)) break L39;
  }
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 $$0 = _ope($98) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _raze($w) {
 $w = $w | 0;
 var $$0 = 0, $$lcssa81 = 0, $$lcssa82 = 0, $$lcssa83 = 0, $$sum2 = 0, $$sum7 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $25 = 0, $28 = 0, $31 = 0, $35 = 0, $39 = 0, $4 = 0, $45 = 0, $48 = 0, $49 = 0, $55 = 0, $59 = 0, $6 = 0, $63 = 0, $67 = 0, $70 = 0, $72 = 0, $b$3$in = 0, $c$029 = 0, $c$15559 = 0, $i$031 = 0, $i1$023 = 0, $i3$016 = 0, $i5$020 = 0, $m$028 = 0, $m$15460 = 0, $r$0$ = 0, $r$0$$lcssa = 0, $r$030 = 0, $r$15658 = 0, $v$017 = 0, $v$119 = 0, $x$018 = 0, $z$0$lcssa = 0, $z$015 = 0, label = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 8 >> 2] | 0;
 $4 = HEAP32[$w + 12 >> 2] | 0;
 $$sum2 = $4 + 4 + ($4 & 1) | 0;
 $6 = $w + ($$sum2 << 2) | 0;
 if ($2) if (HEAP32[$w >> 2] & 32) {
  $12 = HEAP32[$6 >> 2] | 0;
  $13 = $12 + 20 | 0;
  $14 = HEAP32[$12 >> 2] | 0;
  $15 = _bp($14) | 0;
  $16 = ($2 | 0) > 0;
  L7 : do if ($16) {
   $c$029 = 0;
   $i$031 = 0;
   $m$028 = 0;
   $r$030 = 1;
   while (1) {
    $18 = HEAP32[$w + ($i$031 + $$sum2 << 2) >> 2] | 0;
    $20 = HEAP32[$18 + 12 >> 2] | 0;
    if (!$20) $25 = 1; else $25 = HEAP32[$18 + 16 >> 2] | 0;
    $24 = $25 + $c$029 | 0;
    $28 = (HEAP32[$18 + 8 >> 2] | 0) + $m$028 | 0;
    $r$0$ = ($r$030 | 0) > ($20 | 0) ? $r$030 : $20;
    $31 = ($14 | 0) != (HEAP32[$18 >> 2] | 0);
    $i$031 = $i$031 + 1 | 0;
    if (!(($i$031 | 0) < ($2 | 0) & ($31 ^ 1))) {
     $$lcssa81 = $24;
     $$lcssa82 = $28;
     $$lcssa83 = $31;
     $r$0$$lcssa = $r$0$;
     break;
    } else {
     $c$029 = $24;
     $m$028 = $28;
     $r$030 = $r$0$;
    }
   }
   $35 = ($r$0$$lcssa << 2) + -4 | 0;
   L14 : do if (($r$0$$lcssa | 0) > 1 & ($$lcssa83 ^ 1)) {
    if (!$16) {
     $c$15559 = $$lcssa81;
     $m$15460 = $$lcssa82;
     $r$15658 = $r$0$$lcssa;
     break L7;
    }
    $i1$023 = 0;
    while (1) {
     $39 = HEAP32[$w + ($i1$023 + $$sum2 << 2) >> 2] | 0;
     if (($r$0$$lcssa | 0) > (HEAP32[$39 + 12 >> 2] | 0)) break L14;
     $45 = (_memcmp($13, $39 + 20 | 0, $35) | 0) != 0;
     $i1$023 = $i1$023 + 1 | 0;
     if (!(($i1$023 | 0) < ($2 | 0) & ($45 ^ 1))) {
      $b$3$in = $45;
      label = 14;
      break;
     }
    }
   } else {
    $b$3$in = $$lcssa83;
    label = 14;
   } while (0);
   if ((label | 0) == 14) if (!$b$3$in) {
    $c$15559 = $$lcssa81;
    $m$15460 = $$lcssa82;
    $r$15658 = $r$0$$lcssa;
    break;
   }
   $$sum7 = $2 + -1 | 0;
   $48 = $w + ($$sum7 + $$sum2 << 2) | 0;
   $49 = HEAP32[$48 >> 2] | 0;
   L23 : do if (($2 | 0) > 1) {
    $i3$016 = 0;
    $v$017 = $48;
    $z$015 = $49;
    while (1) {
     $v$017 = $v$017 + -4 | 0;
     $55 = _over(HEAP32[$v$017 >> 2] | 0, $z$015) | 0;
     $i3$016 = $i3$016 + 1 | 0;
     if (!$55) {
      $$0 = 0;
      break;
     }
     if (($i3$016 | 0) >= ($$sum7 | 0)) {
      $z$0$lcssa = $55;
      break L23;
     } else $z$015 = $55;
    }
    return $$0 | 0;
   } else $z$0$lcssa = $49; while (0);
   $$0 = _rankle($z$0$lcssa) | 0;
   return $$0 | 0;
  } else {
   $c$15559 = 0;
   $m$15460 = 0;
   $r$15658 = 1;
  } while (0);
  $59 = _ga($14, $m$15460, $r$15658, $12 + 16 | 0) | 0;
  if (!$59) {
   $$0 = 0;
   return $$0 | 0;
  }
  HEAP32[$59 + 16 >> 2] = $c$15559;
  $63 = HEAP32[$59 + 12 >> 2] | 0;
  if (!$16) {
   $$0 = $59;
   return $$0 | 0;
  }
  $i5$020 = 0;
  $v$119 = $6;
  $x$018 = $59 + ($63 + 4 + ($63 & 1) << 2) | 0;
  while (1) {
   $67 = HEAP32[$v$119 >> 2] | 0;
   $70 = Math_imul(HEAP32[$67 + 8 >> 2] | 0, $15) | 0;
   $72 = HEAP32[$67 + 12 >> 2] | 0;
   _memcpy($x$018 | 0, $67 + ($72 + 4 + ($72 & 1) << 2) | 0, $70 | 0) | 0;
   $i5$020 = $i5$020 + 1 | 0;
   if (($i5$020 | 0) == ($2 | 0)) {
    $$0 = $59;
    break;
   } else {
    $v$119 = $v$119 + 4 | 0;
    $x$018 = $x$018 + $70 | 0;
   }
  }
  return $$0 | 0;
 }
 $$0 = _ravel($w) | 0;
 return $$0 | 0;
}

function _copy2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0$i = 0, $$0$i1 = 0, $$0$i79 = 0, $$sum1$i4 = 0, $$sum2$i = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $26 = 0, $27 = 0, $30 = 0, $32 = 0, $35 = 0, $39 = 0, $45 = 0, $47 = 0, $51 = 0, $60 = 0, $63 = 0, $64 = 0, $i$010$i = 0, $i$03$i = 0, $j$011$i = 0, $j$1$i = 0, $j$1$i$lcssa = 0, $k$012$i = 0, $m$013$i = 0, $m$1$i = 0, $m$1$i$lcssa = 0, $qv$02$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 if ((HEAP32[$w + 8 >> 2] | 0) > 1) {
  $$0$i = _rank2ex($a, $w, 0, 0, 0, 430) | 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 if (!(HEAP32[$a >> 2] & 32)) {
  _jsignal(3);
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 $12 = _wopen($w, 1) | 0;
 if (!$12) {
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 HEAP32[$vararg_buffer >> 2] = 20;
 _sprintf(411, 8328, $vararg_buffer) | 0;
 $14 = _every($a, 475) | 0;
 L15 : do if (!(_ung() | 0)) $$0$i1 = 0; else {
  $18 = _ii(HEAP32[2084] | 0) | 0;
  $20 = _indexof(HEAP32[2088] | 0, $14) | 0;
  $21 = _eps($18, $20) | 0;
  $23 = _repeat($21, HEAP32[2084] | 0) | 0;
  $26 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
  $27 = _grade2($23, $23) | 0;
  if (!$27) $$0$i1 = 0; else {
   $30 = HEAP32[$27 + 16 >> 2] | 0;
   $32 = HEAP32[$27 + 20 >> 2] | 0;
   if (($30 | 0) < 2) {
    $$0$i79 = $27;
    $64 = $30;
   } else {
    $35 = HEAP32[$27 + 12 >> 2] | 0;
    $$sum1$i4 = $35 + 4 + ($35 & 1) | 0;
    $$sum2$i = $$sum1$i4 + 1 | 0;
    $i$010$i = 1;
    $j$011$i = 0;
    $k$012$i = $32;
    $m$013$i = HEAP32[$27 + ($$sum2$i << 2) >> 2] | 0;
    while (1) {
     $39 = $27 + ($k$012$i + $$sum1$i4 << 2) | 0;
     $45 = $27 + ($k$012$i + $$sum2$i << 2) | 0;
     if ((HEAP32[$39 >> 2] | 0) == ((HEAP32[$27 + ($j$011$i + $$sum1$i4 << 2) >> 2] | 0) + $m$013$i | 0)) {
      $47 = (HEAP32[$45 >> 2] | 0) + $m$013$i | 0;
      if (($47 | 0) > 32e3) label = 13; else {
       $j$1$i = $j$011$i;
       $m$1$i = $47;
      }
     } else label = 13;
     if ((label | 0) == 13) {
      label = 0;
      HEAP32[$27 + ($j$011$i + $$sum2$i << 2) >> 2] = $m$013$i;
      $51 = $j$011$i + $32 | 0;
      HEAP32[$27 + ($51 + $$sum1$i4 << 2) >> 2] = HEAP32[$39 >> 2];
      $j$1$i = $51;
      $m$1$i = HEAP32[$45 >> 2] | 0;
     }
     $i$010$i = $i$010$i + 1 | 0;
     if (($i$010$i | 0) == ($30 | 0)) {
      $j$1$i$lcssa = $j$1$i;
      $m$1$i$lcssa = $m$1$i;
      break;
     } else {
      $j$011$i = $j$1$i;
      $k$012$i = $k$012$i + $32 | 0;
      $m$013$i = $m$1$i;
     }
    }
    HEAP32[$27 + ($j$1$i$lcssa + $$sum2$i << 2) >> 2] = $m$1$i$lcssa;
    $60 = _take(_sc((($j$1$i$lcssa | 0) / ($32 | 0) | 0) + 1 | 0) | 0, $27) | 0;
    if (!$60) {
     $$0$i1 = 0;
     break;
    }
    $$0$i79 = $60;
    $64 = HEAP32[$60 + 16 >> 2] | 0;
   }
   $63 = HEAP32[$$0$i79 + 12 >> 2] | 0;
   if (($64 | 0) > 0) {
    $i$03$i = 0;
    $qv$02$i = $$0$i79 + ($63 + 4 + ($63 & 1) << 2) | 0;
    while (1) {
     if (!(_unsr(_rd($12, HEAP32[$qv$02$i >> 2] | 0, HEAP32[$qv$02$i + 4 >> 2] | 0) | 0) | 0)) {
      $$0$i1 = 0;
      break L15;
     }
     _tpop($26) | 0;
     $i$03$i = $i$03$i + 1 | 0;
     if (($i$03$i | 0) >= ($64 | 0)) break; else $qv$02$i = $qv$02$i + 12 | 0;
    }
   }
   if (!(HEAP32[646] | 0)) $$0$i1 = 0; else $$0$i1 = _lt($20, _tally(HEAP32[2088] | 0) | 0) | 0;
  }
 } while (0);
 _fclose($12 | 0) | 0;
 HEAP8[411] = HEAP8[8344] | 0;
 HEAP8[412] = HEAP8[8345] | 0;
 HEAP8[413] = HEAP8[8346] | 0;
 $$0$i = _gc($$0$i1, $2) | 0;
 STACKTOP = sp;
 return $$0$i | 0;
}

function _overr($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $13 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $26 = 0, $28 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $47 = 0, $49 = 0, $6 = 0, $7 = 0, $75 = 0, $85 = 0, $9 = 0, $94 = 0, $i$033 = 0, $i1$029 = 0, $i3$026 = 0, $i5$024 = 0, $u$035 = 0, $u$131 = 0, $u$227 = 0, $u$323 = 0, $v$034 = 0, $v$130 = 0, $v$225 = 0, $v$322 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = $a;
 HEAP32[$1 >> 2] = $w;
 $2 = _coerce2($0, $1, 0) | 0;
 if (!$2) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $4 = HEAP32[$0 >> 2] | 0;
 $6 = HEAP32[$4 + 12 >> 2] | 0;
 $7 = HEAP32[$1 >> 2] | 0;
 $9 = HEAP32[$7 + 12 >> 2] | 0;
 if (($6 | 0) > 2 | ($9 | 0) > 2) {
  $$0 = _rank2ex($4, $7, 0, -1, -1, 44) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $13 = ($6 | 0) != 0;
 $14 = ($9 | 0) != 0;
 if (!($9 | $6)) {
  $$0 = _over($4, $7) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $19 = $4 + ($6 + 4 + ($6 & 1) << 2) | 0;
 if ($13) {
  $21 = HEAP32[$4 + 16 >> 2] | 0;
  if (($6 | 0) > 1) {
   $32 = $21;
   $37 = HEAP32[$4 + 20 >> 2] | 0;
  } else {
   $32 = $21;
   $37 = 1;
  }
 } else {
  $32 = 1;
  $37 = 1;
 }
 $26 = $7 + ($9 + 4 + ($9 & 1) << 2) | 0;
 if ($14) {
  $28 = HEAP32[$7 + 16 >> 2] | 0;
  if (($9 | 0) > 1) $94 = HEAP32[$7 + 20 >> 2] | 0; else $94 = 1;
  if (($32 | 0) == ($28 | 0) | $13 ^ 1) {
   $34 = $28;
   $38 = $94;
  } else {
   _jsignal(9);
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } else {
  $34 = 1;
  $38 = 1;
 }
 $35 = $13 ? $32 : $34;
 $36 = $38 + $37 | 0;
 $39 = _bp($2) | 0;
 $40 = Math_imul($39, $36) | 0;
 $42 = _ga($2, Math_imul($35, $36) | 0, 2, 0) | 0;
 if (!$42) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$42 + 16 >> 2] = $35;
 HEAP32[$42 + 20 >> 2] = $36;
 $47 = HEAP32[$42 + 12 >> 2] | 0;
 $49 = $42 + ($47 + 4 + ($47 & 1) << 2) | 0;
 if (!$13) _mvc(Math_imul(HEAP32[$42 + 8 >> 2] | 0, $39) | 0, $49, $39, $19);
 if (!$14) _mvc(Math_imul(HEAP32[$42 + 8 >> 2] | 0, $39) | 0, $49, $39, $26);
 if (($6 | 0) == 1 & ($35 | 0) > 0) {
  $i$033 = 0;
  $u$035 = $49 + (0 - $40) | 0;
  $v$034 = $19 + (0 - $39) | 0;
  do {
   $u$035 = $u$035 + $40 | 0;
   $v$034 = $v$034 + $39 | 0;
   _memcpy($u$035 | 0, $v$034 | 0, $39 | 0) | 0;
   $i$033 = $i$033 + 1 | 0;
  } while (($i$033 | 0) != ($35 | 0));
 }
 if (($9 | 0) == 1 & ($35 | 0) > 0) {
  $i1$029 = 0;
  $u$131 = $49 + ((Math_imul($39, $37) | 0) - $40) | 0;
  $v$130 = $26 + (0 - $39) | 0;
  do {
   $u$131 = $u$131 + $40 | 0;
   $v$130 = $v$130 + $39 | 0;
   _memcpy($u$131 | 0, $v$130 | 0, $39 | 0) | 0;
   $i1$029 = $i1$029 + 1 | 0;
  } while (($i1$029 | 0) != ($35 | 0));
 }
 if (($6 | 0) == 2) {
  $75 = Math_imul($39, $37) | 0;
  if (($35 | 0) > 0) {
   $i3$026 = 0;
   $u$227 = $49 + (0 - $40) | 0;
   $v$225 = $19 + (0 - $75) | 0;
   do {
    $u$227 = $u$227 + $40 | 0;
    $v$225 = $v$225 + $75 | 0;
    _memcpy($u$227 | 0, $v$225 | 0, $75 | 0) | 0;
    $i3$026 = $i3$026 + 1 | 0;
   } while (($i3$026 | 0) != ($35 | 0));
  }
 }
 if (($9 | 0) != 2) {
  $$0 = $42;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $85 = Math_imul($39, $38) | 0;
 if (($35 | 0) <= 0) {
  $$0 = $42;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $i5$024 = 0;
 $u$323 = $49 + ((Math_imul($39, $37) | 0) - $40) | 0;
 $v$322 = $26 + (0 - $85) | 0;
 do {
  $u$323 = $u$323 + $40 | 0;
  $v$322 = $v$322 + $85 | 0;
  _memcpy($u$323 | 0, $v$322 | 0, $85 | 0) | 0;
  $i5$024 = $i5$024 + 1 | 0;
 } while (($i5$024 | 0) != ($35 | 0));
 $$0 = $42;
 STACKTOP = sp;
 return $$0 | 0;
}

function _trep($w) {
 $w = $w | 0;
 var $$0$i = 0, $$c$0$i = 0, $$sum1$i = 0, $11 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $22 = 0, $25 = 0, $29 = 0, $32 = 0, $33 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $48 = 0, $50 = 0, $51 = 0, $6 = 0, $70 = 0, $81 = 0, $9 = 0, $c$0$i = 0, $c$2$i = 0, $e$0$lcssa$i = 0, $e$029$i = 0, $i$024$i = 0, $i1$030$i = 0, $i2$021$i = 0, $j$018$i = 0, $p$025$i = 0, $u$020$i = 0, $x$026$i = 0, $xv$016$i = 0, $yv$017$i = 0, $yv$119$i = 0, $zv$023$i = 0, label = 0, $x$026$i$looptemp = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 HEAP8[3520] = HEAP8[2458] | 0;
 $4 = HEAP32[616] | 0;
 $6 = _troot($4, _trr($w) | 0) | 0;
 if (!$6) {
  $$0$i = 0;
  $81 = _gc($$0$i, $2) | 0;
  return $81 | 0;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0;
 $11 = HEAP32[$6 + 12 >> 2] | 0;
 $$sum1$i = $11 + 4 + ($11 & 1) | 0;
 $15 = (HEAP32[$6 + ($$sum1$i << 2) >> 2] | 0) + 16 | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 $17 = ($9 | 0) > 0;
 if ($17) {
  $e$029$i = 0;
  $i1$030$i = 0;
  while (1) {
   $22 = (HEAP32[(HEAP32[$6 + ($i1$030$i + $$sum1$i << 2) >> 2] | 0) + 20 >> 2] | 0) + $e$029$i | 0;
   $i1$030$i = $i1$030$i + 1 | 0;
   if (($i1$030$i | 0) == ($9 | 0)) {
    $e$0$lcssa$i = $22;
    break;
   } else $e$029$i = $22;
  }
 } else $e$0$lcssa$i = 0;
 $25 = _ga(2, Math_imul($e$0$lcssa$i, $16) | 0, 2, $15) | 0;
 if (!$25) {
  $$0$i = 0;
  $81 = _gc($$0$i, $2) | 0;
  return $81 | 0;
 }
 HEAP32[$25 + 20 >> 2] = $e$0$lcssa$i;
 $29 = HEAP32[$25 + 12 >> 2] | 0;
 if (!$17) {
  $$0$i = $25;
  $81 = _gc($$0$i, $2) | 0;
  return $81 | 0;
 }
 $32 = 0 - $e$0$lcssa$i | 0;
 $33 = ($16 | 0) > 0;
 $i$024$i = 0;
 $p$025$i = 0;
 $x$026$i = 0;
 $zv$023$i = $25 + ($29 + 4 + ($29 & 1) << 2) | 0;
 while (1) {
  $x$026$i$looptemp = $x$026$i;
  $x$026$i = HEAP32[$6 + ($i$024$i + $$sum1$i << 2) >> 2] | 0;
  $37 = HEAP32[$x$026$i + 20 >> 2] | 0;
  $38 = $x$026$i + 12 | 0;
  $39 = HEAP32[$38 >> 2] | 0;
  if (!$i$024$i) {
   $70 = $39;
   label = 14;
  } else {
   $42 = HEAP32[$x$026$i$looptemp + 12 >> 2] | 0;
   if ($33) {
    $j$018$i = 0;
    $xv$016$i = $x$026$i$looptemp + ($42 + 4 + ($42 & 1) << 2) + ($p$025$i + -1) | 0;
    $yv$017$i = $x$026$i + ($39 + 4 + ($39 & 1) << 2) | 0;
    while (1) {
     $48 = HEAP8[3520] | 0;
     $50 = $48 << 24 >> 24 == (HEAP8[$xv$016$i >> 0] | 0);
     $51 = HEAP8[$yv$017$i >> 0] | 0;
     $c$0$i = $50 & $51 << 24 >> 24 == (HEAP8[2457] | 0) ? HEAP8[2453] | 0 : $51;
     if ($48 << 24 >> 24 == (HEAP8[$yv$017$i + 1 >> 0] | 0)) {
      $$c$0$i = $c$0$i << 24 >> 24 == (HEAP8[2453] | 0) ? HEAP8[2452] | 0 : $c$0$i;
      $c$2$i = $$c$0$i << 24 >> 24 == (HEAP8[2457] | 0) ? HEAP8[2451] | 0 : $$c$0$i;
     } else $c$2$i = $c$0$i;
     HEAP8[$yv$017$i >> 0] = $50 & $c$2$i << 24 >> 24 == (HEAP8[2454] | 0) ? HEAP8[2455] | 0 : $c$2$i;
     $j$018$i = $j$018$i + 1 | 0;
     if (($j$018$i | 0) == ($16 | 0)) break; else {
      $xv$016$i = $xv$016$i + $p$025$i | 0;
      $yv$017$i = $yv$017$i + $37 | 0;
     }
    }
    $70 = HEAP32[$38 >> 2] | 0;
    label = 14;
   }
  }
  if ((label | 0) == 14) {
   label = 0;
   if ($33) {
    $i2$021$i = 0;
    $u$020$i = $zv$023$i + $32 | 0;
    $yv$119$i = $x$026$i + ($70 + 4 + ($70 & 1) << 2) + (0 - $37) | 0;
    do {
     $u$020$i = $u$020$i + $e$0$lcssa$i | 0;
     $yv$119$i = $yv$119$i + $37 | 0;
     _memcpy($u$020$i | 0, $yv$119$i | 0, $37 | 0) | 0;
     $i2$021$i = $i2$021$i + 1 | 0;
    } while (($i2$021$i | 0) != ($16 | 0));
   }
  }
  $i$024$i = $i$024$i + 1 | 0;
  if (($i$024$i | 0) == ($9 | 0)) {
   $$0$i = $25;
   break;
  } else {
   $p$025$i = $37;
   $zv$023$i = $zv$023$i + $37 | 0;
  }
 }
 $81 = _gc($$0$i, $2) | 0;
 return $81 | 0;
}

function _sex2($a, $w, $zt, $f2) {
 $a = $a | 0;
 $w = $w | 0;
 $zt = $zt | 0;
 $f2 = $f2 | 0;
 var $$0 = 0, $$0115$i = 0, $$016$i = 0, $$0514$i = 0, $$1237$us$i = 0, $$138$us$i = 0, $$1636$us$i = 0, $$225$us$i = 0, $$2329$us$i = 0, $$2728$us$i = 0, $$319$us$i = 0, $$3424$us$i = 0, $$3822$us$i = 0, $$417$us$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $21 = 0, $22 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $46 = 0, $5 = 0, $52 = 0, $53 = 0, $6 = 0, $60 = 0, $61 = 0, $8 = 0, $9 = 0, $i$013$i = 0, $i1$035$us$i = 0, $i3$027$us$i = 0, $i5$023$us$i = 0, $i7$018$us$i = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $3 = HEAP32[$a + 8 >> 2] | 0;
 $4 = $a + 12 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $a + 16 | 0;
 $8 = HEAP32[$w + 8 >> 2] | 0;
 $9 = $w + 12 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 $11 = $w + 16 | 0;
 $12 = ($5 | 0) <= ($10 | 0);
 $13 = $12 ? $3 : $8;
 if (!$13) $22 = 0; else $22 = (($12 ? $8 : $3) | 0) / ($13 | 0) | 0;
 if (_memcmp($6, $11, ($12 ? $5 : $10) << 2) | 0) {
  _jsignal(9);
  $$0 = 0;
  return $$0 | 0;
 }
 $21 = Math_imul($22, $13) | 0;
 $25 = _ga($zt, $21, $12 ? $10 : $5, $12 ? $11 : $6) | 0;
 if (!$25) {
  $$0 = 0;
  return $$0 | 0;
 }
 $28 = _bp(HEAP32[$a >> 2] | 0) | 0;
 $29 = _bp($zt) | 0;
 $30 = HEAP32[$4 >> 2] | 0;
 $33 = HEAP32[$9 >> 2] | 0;
 $37 = HEAP32[$25 + 12 >> 2] | 0;
 $40 = 0 - $28 | 0;
 $41 = $a + ($30 + 4 + ($30 & 1) << 2) + $40 | 0;
 $42 = $w + ($33 + 4 + ($33 & 1) << 2) + $40 | 0;
 $44 = $25 + ($37 + 4 + ($37 & 1) << 2) + (0 - $29) | 0;
 $46 = ($13 | 0) > 0;
 do if (($22 | 0) == 1) {
  if ($46) {
   $$0115$i = $42;
   $$016$i = $41;
   $$0514$i = $44;
   $i$013$i = 0;
   do {
    $$016$i = $$016$i + $28 | 0;
    $$0115$i = $$0115$i + $28 | 0;
    $$0514$i = $$0514$i + $29 | 0;
    ftCall_viii($f2 | 0, $$016$i | 0, $$0115$i | 0, $$0514$i | 0);
    $i$013$i = $i$013$i + 1 | 0;
   } while (($i$013$i | 0) != ($13 | 0));
  }
 } else if ($12) {
  if (!$46) break;
  if (($22 | 0) <= 0) break;
  $52 = Math_imul($29, $22) | 0;
  $53 = Math_imul($28, $22) | 0;
  $$1237$us$i = $42;
  $$138$us$i = $41;
  $$1636$us$i = $44;
  $i1$035$us$i = 0;
  while (1) {
   $$138$us$i = $$138$us$i + $28 | 0;
   $$2329$us$i = $$1237$us$i;
   $$2728$us$i = $$1636$us$i;
   $i3$027$us$i = 0;
   do {
    $$2329$us$i = $$2329$us$i + $28 | 0;
    $$2728$us$i = $$2728$us$i + $29 | 0;
    ftCall_viii($f2 | 0, $$138$us$i | 0, $$2329$us$i | 0, $$2728$us$i | 0);
    $i3$027$us$i = $i3$027$us$i + 1 | 0;
   } while (($i3$027$us$i | 0) != ($22 | 0));
   $i1$035$us$i = $i1$035$us$i + 1 | 0;
   if (($i1$035$us$i | 0) == ($13 | 0)) break; else {
    $$1237$us$i = $$1237$us$i + $53 | 0;
    $$1636$us$i = $$1636$us$i + $52 | 0;
   }
  }
 } else {
  if (!$46) break;
  if (($22 | 0) <= 0) break;
  $60 = Math_imul($29, $22) | 0;
  $61 = Math_imul($28, $22) | 0;
  $$225$us$i = $41;
  $$3424$us$i = $42;
  $$3822$us$i = $44;
  $i5$023$us$i = 0;
  while (1) {
   $$3424$us$i = $$3424$us$i + $28 | 0;
   $$319$us$i = $$225$us$i;
   $$417$us$i = $$3822$us$i;
   $i7$018$us$i = 0;
   do {
    $$319$us$i = $$319$us$i + $28 | 0;
    $$417$us$i = $$417$us$i + $29 | 0;
    ftCall_viii($f2 | 0, $$319$us$i | 0, $$3424$us$i | 0, $$417$us$i | 0);
    $i7$018$us$i = $i7$018$us$i + 1 | 0;
   } while (($i7$018$us$i | 0) != ($22 | 0));
   $i5$023$us$i = $i5$023$us$i + 1 | 0;
   if (($i5$023$us$i | 0) == ($13 | 0)) break; else {
    $$225$us$i = $$225$us$i + $61 | 0;
    $$3822$us$i = $$3822$us$i + $60 | 0;
   }
  }
 } while (0);
 $$0 = (HEAP8[2472] | 0) != 0 ? 0 : $25;
 return $$0 | 0;
}

function _expm1($x) {
 $x = +$x;
 var $$0 = 0.0, $$02 = 0.0, $$pn = 0.0, $0 = 0, $1 = 0, $2 = 0, $24 = 0, $25 = 0.0, $29 = 0.0, $3 = 0, $35 = 0.0, $36 = 0.0, $46 = 0.0, $48 = 0.0, $53 = 0.0, $6 = 0, $61 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $78 = 0.0, $85 = 0, $86 = 0, $__x = 0, $c$0 = 0.0, $hi$0 = 0.0, $k$0 = 0, $k$1 = 0, $lo$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__x = sp;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $2 = $1 & 2147483647;
 $3 = _bitshift64Lshr($0 | 0, $1 | 0, 63) | 0;
 do if ($2 >>> 0 > 1078159481) {
  $6 = $1 & 2147483647;
  if ($6 >>> 0 > 2146435072 | ($6 | 0) == 2146435072 & $0 >>> 0 > 0) {
   $$0 = $x;
   STACKTOP = sp;
   return +$$0;
  }
  if ($3) {
   $$0 = -1.0;
   STACKTOP = sp;
   return +$$0;
  }
  if ($x > 709.782712893384) {
   $$0 = $x * 8988465674311579538646525.0e283;
   STACKTOP = sp;
   return +$$0;
  } else label = 11;
 } else {
  if ($2 >>> 0 > 1071001154) {
   if ($2 >>> 0 >= 1072734898) {
    label = 11;
    break;
   }
   if (!$3) {
    $hi$0 = $x + -.6931471803691238;
    $k$0 = 1;
    $lo$0 = 1.9082149292705877e-10;
    label = 12;
    break;
   } else {
    $hi$0 = $x + .6931471803691238;
    $k$0 = -1;
    $lo$0 = -1.9082149292705877e-10;
    label = 12;
    break;
   }
  }
  if ($2 >>> 0 < 1016070144) {
   if ($2 >>> 0 >= 1048576) {
    $$0 = $x;
    STACKTOP = sp;
    return +$$0;
   }
   HEAPF32[$__x >> 2] = $x;
   $$0 = $x;
   STACKTOP = sp;
   return +$$0;
  } else {
   $$02 = $x;
   $c$0 = 0.0;
   $k$1 = 0;
  }
 } while (0);
 if ((label | 0) == 11) {
  $24 = ~~($x * 1.4426950408889634 + (($3 | 0) != 0 ? -.5 : .5));
  $25 = +($24 | 0);
  $hi$0 = $x - $25 * .6931471803691238;
  $k$0 = $24;
  $lo$0 = $25 * 1.9082149292705877e-10;
  label = 12;
 }
 if ((label | 0) == 12) {
  $29 = $hi$0 - $lo$0;
  $$02 = $29;
  $c$0 = $hi$0 - $29 - $lo$0;
  $k$1 = $k$0;
 }
 $35 = $$02 * .5;
 $36 = $$02 * $35;
 $46 = $36 * ($36 * ($36 * ($36 * (4.008217827329362e-06 - $36 * 2.0109921818362437e-07) + -7.93650757867488e-05) + 1.5873015872548146e-03) + -.03333333333333313) + 1.0;
 $48 = 3.0 - $35 * $46;
 $53 = $36 * (($46 - $48) / (6.0 - $$02 * $48));
 if (!$k$1) {
  $$0 = $$02 - ($$02 * $53 - $36);
  STACKTOP = sp;
  return +$$0;
 }
 $61 = $$02 * ($53 - $c$0) - $c$0 - $36;
 if (($k$1 | 0) == 1) if ($$02 < -.25) {
  $$0 = ($61 - ($$02 + .5)) * -2.0;
  STACKTOP = sp;
  return +$$0;
 } else {
  $$0 = ($$02 - $61) * 2.0 + 1.0;
  STACKTOP = sp;
  return +$$0;
 } else if (($k$1 | 0) == -1) {
  $$0 = ($$02 - $61) * .5 + -.5;
  STACKTOP = sp;
  return +$$0;
 } else {
  $73 = _bitshift64Shl($k$1 + 1023 | 0, 0, 52) | 0;
  $74 = tempRet0;
  HEAP32[tempDoublePtr >> 2] = $73;
  HEAP32[tempDoublePtr + 4 >> 2] = $74;
  $75 = +HEAPF64[tempDoublePtr >> 3];
  if ($k$1 >>> 0 > 56) {
   $78 = $$02 - $61 + 1.0;
   $$0 = (($k$1 | 0) == 1024 ? $78 * 2.0 * 8988465674311579538646525.0e283 : $75 * $78) + -1.0;
   STACKTOP = sp;
   return +$$0;
  }
  $85 = _bitshift64Shl(1023 - $k$1 | 0, 0, 52) | 0;
  $86 = tempRet0;
  if (($k$1 | 0) < 20) {
   HEAP32[tempDoublePtr >> 2] = $85;
   HEAP32[tempDoublePtr + 4 >> 2] = $86;
   $$pn = 1.0 - +HEAPF64[tempDoublePtr >> 3] + ($$02 - $61);
  } else {
   HEAP32[tempDoublePtr >> 2] = $85;
   HEAP32[tempDoublePtr + 4 >> 2] = $86;
   $$pn = $$02 - (+HEAPF64[tempDoublePtr >> 3] + $61) + 1.0;
  }
  $$0 = $75 * $$pn;
  STACKTOP = sp;
  return +$$0;
 }
 return +(0.0);
}

function _nlx($w) {
 $w = $w | 0;
 var $$0 = 0, $$0$i = 0, $$sum3$i = 0, $0 = 0, $19 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $35 = 0, $37 = 0, $41 = 0, $44 = 0, $46 = 0, $48 = 0, $5 = 0, $63 = 0, $73 = 0, $76 = 0, $9 = 0, $e$02$i$i = 0, $e$09$i = 0, $f$0$lcssa = 0, $f$05 = 0, $f$1 = 0, $i$010$i = 0, $i$03$i$i = 0, $i$08 = 0, $k$0$lcssa$i = 0, $k$08$i = 0, $k$1$i = 0, $tm$0$lcssa = 0, $tm$06 = 0, $tm$1 = 0, $v$07 = 0, $z$0 = 0, $z$1 = 0;
 $0 = _vi($w) | 0;
 if (!$0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $3 = HEAP32[$0 + 12 >> 2] | 0;
 $5 = HEAP32[$0 + 8 >> 2] | 0;
 L4 : do if (($5 | 0) > 0) {
  $f$05 = 0;
  $i$08 = 0;
  $tm$06 = 0;
  $v$07 = $0 + ($3 + 4 + ($3 & 1) << 2) | 0;
  while (1) {
   $9 = HEAP32[$v$07 >> 2] | 0;
   if (($9 + -1 | 0) >>> 0 >= 6) break;
   if (($9 | 0) == 6) {
    $f$1 = 1;
    $tm$1 = $tm$06;
   } else {
    $f$1 = $f$05;
    $tm$1 = (HEAP32[3864 + ($9 << 2) >> 2] | 0) + $tm$06 | 0;
   }
   $i$08 = $i$08 + 1 | 0;
   if (($i$08 | 0) >= ($5 | 0)) {
    $f$0$lcssa = $f$1;
    $tm$0$lcssa = $tm$1;
    break L4;
   } else {
    $f$05 = $f$1;
    $tm$06 = $tm$1;
    $v$07 = $v$07 + 4 | 0;
   }
  }
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 } else {
  $f$0$lcssa = 0;
  $tm$0$lcssa = 0;
 } while (0);
 $19 = _nls($tm$0$lcssa, HEAP32[892] | 0) | 0;
 if (!$19) {
  $$0 = 0;
  return $$0 | 0;
 }
 $21 = HEAP32[894] | 0;
 if (!$21) $z$0 = $19; else {
  $24 = _over(_nls($tm$0$lcssa, $21) | 0, $19) | 0;
  if (!$24) {
   $$0 = 0;
   return $$0 | 0;
  } else $z$0 = $24;
 }
 $26 = $f$0$lcssa << 24 >> 24 == 0;
 if ($26) $z$1 = $z$0; else {
  $27 = HEAP32[898] | 0;
  $29 = HEAP32[$27 + 12 >> 2] | 0;
  $30 = $27 + 8 | 0;
  $32 = _ga(32, HEAP32[$30 >> 2] | 0, 1, 0) | 0;
  if (!$32) $$0$i = 0; else {
   $35 = HEAP32[$32 + 12 >> 2] | 0;
   $$sum3$i = $35 + 4 + ($35 & 1) | 0;
   $37 = HEAP32[$30 >> 2] | 0;
   if (($37 | 0) > 0) {
    $e$09$i = $27 + ($29 + 4 + ($29 & 1) << 2) | 0;
    $i$010$i = 0;
    $k$08$i = 0;
    while (1) {
     $41 = HEAP32[$e$09$i >> 2] | 0;
     L30 : do if (!$41) $k$1$i = $k$08$i; else {
      $44 = HEAP32[$e$09$i + 4 >> 2] | 0;
      $46 = HEAP32[$44 + 12 >> 2] | 0;
      $48 = HEAP32[$44 + 8 >> 2] | 0;
      if (($48 | 0) > 0) {
       $e$02$i$i = $44 + ($46 + 4 + ($46 & 1) << 2) | 0;
       $i$03$i$i = 0;
       while (1) {
        if (HEAP32[$e$02$i$i >> 2] | 0) if (HEAP32[$e$02$i$i + 4 >> 2] | 0) break;
        $i$03$i$i = $i$03$i$i + 1 | 0;
        if (($i$03$i$i | 0) >= ($48 | 0)) {
         $k$1$i = $k$08$i;
         break L30;
        } else $e$02$i$i = $e$02$i$i + 8 | 0;
       }
       $63 = HEAP32[$41 + 12 >> 2] | 0;
       HEAP32[$32 + ($$sum3$i + $k$08$i << 2) >> 2] = _str(HEAP32[$41 + 8 >> 2] | 0, $41 + ($63 + 4 + ($63 & 1) << 2) | 0) | 0;
       $k$1$i = $k$08$i + 1 | 0;
      } else $k$1$i = $k$08$i;
     } while (0);
     $i$010$i = $i$010$i + 1 | 0;
     if (($i$010$i | 0) == ($37 | 0)) {
      $k$0$lcssa$i = $k$1$i;
      break;
     } else {
      $e$09$i = $e$09$i + 8 | 0;
      $k$08$i = $k$1$i;
     }
    }
   } else $k$0$lcssa$i = 0;
   $$0$i = _take(_sc($k$0$lcssa$i) | 0, $32) | 0;
  }
  $73 = _over($$0$i, $z$0) | 0;
  if (!$73) {
   $$0 = 0;
   return $$0 | 0;
  } else $z$1 = $73;
 }
 $76 = _grade2($z$1, _ope($z$1) | 0) | 0;
 if (!$76) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ($26 & (HEAP32[894] | 0) == 0) {
  $$0 = $76;
  return $$0 | 0;
 }
 $$0 = _repeat(_ne($76, _behead(_over($76, HEAP32[636] | 0) | 0) | 0) | 0, $76) | 0;
 return $$0 | 0;
}

function _cdot1($w) {
 $w = $w | 0;
 var $$0 = 0, $$0$i = 0, $$0$i1 = 0, $$lcssa = 0, $$lcssa39 = 0, $$lcssa40 = 0, $$sum1$i = 0, $$sum5$i = 0, $$sum7$i = 0, $$sum9$i = 0, $31 = 0, $32 = 0, $35 = 0, $38 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0, $47 = 0, $50 = 0, $52 = 0, $55 = 0, $57 = 0, $60 = 0, $70 = 0, $72 = 0, $73 = 0, $79 = 0, $8 = 0, $82 = 0, $86 = 0, $88 = 0, $c$0$i = 0, $d$0$i = 0, $i$0$ph$i = 0, $i$0$ph$i43 = 0, $j$0$ph$i = 0, $j$019$i = 0, $j$019$i$lcssa = 0, $k$0$i = 0, $r$0$i = 0, label = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$w + 12 >> 2] | 0) > 1) {
  $$0 = _rank1ex($w, 0, 1, 157) | 0;
  return $$0 | 0;
 }
 if (HEAP32[$w >> 2] & 32) {
  $8 = _raze($w) | 0;
  do if (!$8) $$0$i = 0; else if (!(HEAP32[$8 + 8 >> 2] | 0)) {
   $$0$i = _sc(0) | 0;
   break;
  } else {
   $$0$i = _cvt(4, _increm(_df1($8, _slash(_ds(-124) | 0) | 0) | 0) | 0) | 0;
   break;
  } while (0);
  $$0 = _dfc($$0$i, $w) | 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w + 8 >> 2] | 0)) $$0$i1 = _sc(0) | 0; else $$0$i1 = _cvt(4, _increm(_df1($w, _slash(_ds(-124) | 0) | 0) | 0) | 0) | 0;
 $31 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $32 = _pfill($$0$i1, $w) | 0;
 if (!$32) {
  $$0 = 0;
  return $$0 | 0;
 }
 $35 = HEAP32[$32 + 12 >> 2] | 0;
 $$sum1$i = $35 + 4 + ($35 & 1) | 0;
 $38 = HEAP32[$32 + 8 >> 2] | 0;
 $39 = _tally($32) | 0;
 $41 = _reshape($39, HEAP32[660] | 0) | 0;
 if (!$41) {
  $$0 = 0;
  return $$0 | 0;
 }
 $44 = HEAP32[$41 + 12 >> 2] | 0;
 $46 = $41 + ($44 + 4 + ($44 & 1) << 2) | 0;
 $47 = _ga(4, $38, 1, 0) | 0;
 if (!$47) {
  $$0 = 0;
  return $$0 | 0;
 }
 $50 = HEAP32[$47 + 12 >> 2] | 0;
 $$sum5$i = $50 + 4 + ($50 & 1) | 0;
 $52 = _ga(4, $38, 1, 0) | 0;
 if (!$52) {
  $$0 = 0;
  return $$0 | 0;
 }
 $55 = HEAP32[$52 + 12 >> 2] | 0;
 $$sum7$i = $55 + 4 + ($55 & 1) | 0;
 $57 = _ga(32, $38, 1, 0) | 0;
 if (!$57) {
  $$0 = 0;
  return $$0 | 0;
 }
 $60 = HEAP32[$57 + 12 >> 2] | 0;
 $$sum9$i = $60 + 4 + ($60 & 1) | 0;
 $i$0$ph$i = 0;
 $j$0$ph$i = 0;
 L37 : while (1) {
  if (($j$0$ph$i | 0) < ($38 | 0)) $j$019$i = $j$0$ph$i; else {
   $i$0$ph$i43 = $i$0$ph$i;
   break;
  }
  while (1) {
   if (!(HEAP8[$46 + $j$019$i >> 0] | 0)) {
    $j$019$i$lcssa = $j$019$i;
    break;
   }
   $j$019$i = $j$019$i + 1 | 0;
   if (($j$019$i | 0) >= ($38 | 0)) {
    $i$0$ph$i43 = $i$0$ph$i;
    break L37;
   }
  }
  $c$0$i = $j$019$i$lcssa;
  $d$0$i = 0;
  $k$0$i = 0;
  $r$0$i = 0;
  while (1) {
   HEAP8[$46 + $c$0$i >> 0] = 1;
   $70 = ($d$0$i | 0) > ($c$0$i | 0) ? $d$0$i : $c$0$i;
   $72 = ($c$0$i | 0) == ($70 | 0) ? $k$0$i : $r$0$i;
   $73 = $k$0$i + 1 | 0;
   HEAP32[$52 + ($$sum7$i + $k$0$i << 2) >> 2] = $c$0$i;
   $c$0$i = HEAP32[$32 + ($$sum1$i + $c$0$i << 2) >> 2] | 0;
   if (($c$0$i | 0) == ($j$019$i$lcssa | 0)) {
    $$lcssa = $70;
    $$lcssa39 = $72;
    $$lcssa40 = $73;
    break;
   } else {
    $d$0$i = $70;
    $k$0$i = $73;
    $r$0$i = $72;
   }
  }
  HEAP32[$47 + ($$sum5$i + $i$0$ph$i << 2) >> 2] = $$lcssa;
  $79 = _sc($$lcssa39) | 0;
  $82 = _rotate($79, _take(_sc($$lcssa40) | 0, $52) | 0) | 0;
  HEAP32[$57 + ($$sum9$i + $i$0$ph$i << 2) >> 2] = $82;
  if (!$82) {
   $$0 = 0;
   label = 27;
   break;
  } else {
   $i$0$ph$i = $i$0$ph$i + 1 | 0;
   $j$0$ph$i = $j$019$i$lcssa;
  }
 }
 if ((label | 0) == 27) return $$0 | 0;
 $86 = _sc($i$0$ph$i43) | 0;
 if (!$86) {
  $$0 = 0;
  return $$0 | 0;
 }
 $88 = _take($86, $57) | 0;
 $$0 = _gc(_grade2($88, _take($86, $47) | 0) | 0, $31) | 0;
 return $$0 | 0;
}

function _deriv1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$01 = 0, $$sum1$i21 = 0, $$sum2 = 0, $$sum7$i = 0, $0 = 0, $1 = 0, $16 = 0, $18 = 0, $21 = 0, $26 = 0, $30 = 0, $35 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $46 = 0, $50 = 0, $52 = 0, $55 = 0, $56 = 0, $58 = 0, $6 = 0, $61 = 0, $64 = 0, $69 = 0, $7 = 0, $71 = 0, $73 = 0, $75 = 0, $78 = 0.0, $81 = 0.0, $82 = 0, $86 = 0, $88 = 0, $a$tr1$i = 0, $a$tr1$i$lcssa = 0, $d$tr2$i = 0, $fs$0$i = 0, $i$013$i = 0, label = 0;
 $0 = $self + 12 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $$sum2 = $1 + 4 + ($1 & 1) | 0;
 $4 = HEAP32[$self + ($$sum2 + 2 << 2) >> 2] | 0;
 $6 = HEAP32[$self + ($$sum2 + 3 << 2) >> 2] | 0;
 $7 = _mr($self) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($7 | 0) < (HEAP32[$w + 12 >> 2] | 0)) {
  $$0 = _rank1ex($w, $self, $7, 283) | 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 24)) {
  $16 = _cvt(8, $w) | 0;
  if (!$16) {
   $$0 = 0;
   return $$0 | 0;
  } else $$01 = $16;
 } else $$01 = $w;
 $18 = _vi($6) | 0;
 if (!$18) {
  $$0 = 0;
  return $$0 | 0;
 }
 $21 = HEAP32[$18 + 12 >> 2] | 0;
 if (!$4) {
  $26 = HEAP32[$0 >> 2] | 0;
  $$sum1$i21 = $26 + 4 + ($26 & 1) | 0;
 } else {
  $a$tr1$i = $4;
  $d$tr2$i = HEAP32[$18 + ($21 + 4 + ($21 & 1) << 2) >> 2] | 0;
  while (1) {
   $30 = (($d$tr2$i | 0) > 0 & 1) - ($d$tr2$i >>> 31) | 0;
   if (($30 | 0) == -1) {
    label = 11;
    break;
   } else if (($30 | 0) != 1) {
    $a$tr1$i$lcssa = $a$tr1$i;
    label = 13;
    break;
   }
   $a$tr1$i = _diff($a$tr1$i) | 0;
   if (!$a$tr1$i) break; else $d$tr2$i = $d$tr2$i + -1 | 0;
  }
  if ((label | 0) == 11) _jsignal(11); else if ((label | 0) == 13) {
   $$0 = _df1($$01, $a$tr1$i$lcssa) | 0;
   return $$0 | 0;
  }
  $35 = HEAP32[$0 >> 2] | 0;
  if (!$$01) {
   $$0 = 0;
   return $$0 | 0;
  } else $$sum1$i21 = $35 + 4 + ($35 & 1) | 0;
 }
 $39 = HEAP32[$self + ($$sum1$i21 + 2 << 2) >> 2] | 0;
 $41 = HEAP32[$self + ($$sum1$i21 + 3 << 2) >> 2] | 0;
 $43 = HEAP32[$41 + 12 >> 2] | 0;
 $46 = HEAP32[$41 + ($43 + 4 + ($43 & 1) << 2) >> 2] | 0;
 if (($46 | 0) > 1) {
  $50 = _ddot($39, _sc($46 + -1 | 0) | 0) | 0;
  if (!$50) {
   $$0 = 0;
   return $$0 | 0;
  } else $fs$0$i = $50;
 } else $fs$0$i = $39;
 $52 = _df1($$01, $fs$0$i) | 0;
 if (!$52) {
  $$0 = 0;
  return $$0 | 0;
 }
 $55 = HEAP32[$$01 + 8 >> 2] | 0;
 $56 = _ca($$01) | 0;
 if (!$56) {
  $$0 = 0;
  return $$0 | 0;
 }
 $58 = $$01 + 12 | 0;
 $61 = _ga(32, $55, HEAP32[$58 >> 2] | 0, $$01 + 16 | 0) | 0;
 if (!$61) {
  $$0 = 0;
  return $$0 | 0;
 }
 $64 = HEAP32[$61 + 12 >> 2] | 0;
 $$sum7$i = $64 + 4 + ($64 & 1) | 0;
 $69 = HEAP32[$58 >> 2] | 0;
 if (!(HEAP32[$$01 >> 2] & 8)) {
  _jsignal(11);
  $$0 = 0;
  return $$0 | 0;
 }
 $71 = $$01 + ($69 + 4 + ($69 & 1) << 2) | 0;
 $73 = HEAP32[$56 + 12 >> 2] | 0;
 $75 = $56 + ($73 + 4 + ($73 & 1) << 2) | 0;
 L45 : do if (($55 | 0) > 0) {
  $i$013$i = 0;
  while (1) {
   $78 = +HEAPF64[$71 + ($i$013$i << 3) >> 3];
   $81 = $78 != 0.0 ? $78 * 1.0e-06 : 1.0e-06;
   $82 = $75 + ($i$013$i << 3) | 0;
   HEAPF64[$82 >> 3] = +HEAPF64[$82 >> 3] + $81;
   $86 = _minus(_df1($56, $fs$0$i) | 0, $52) | 0;
   $88 = _divide($86, _scf($81) | 0) | 0;
   HEAP32[$61 + ($$sum7$i + $i$013$i << 2) >> 2] = $88;
   if (!$88) {
    $$0 = 0;
    break;
   }
   HEAPF64[$82 >> 3] = +HEAPF64[$82 >> 3] - $81;
   $i$013$i = $i$013$i + 1 | 0;
   if (($i$013$i | 0) >= ($55 | 0)) break L45;
  }
  return $$0 | 0;
 } while (0);
 $$0 = _ope($61) | 0;
 return $$0 | 0;
}

function _pcopy1($w) {
 $w = $w | 0;
 var $$0$i = 0, $$0$i1 = 0, $$0$i68 = 0, $$sum1$i3 = 0, $$sum2$i = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $26 = 0, $29 = 0, $33 = 0, $39 = 0, $41 = 0, $45 = 0, $54 = 0, $57 = 0, $58 = 0, $8 = 0, $i$010$i = 0, $i$03$i = 0, $j$011$i = 0, $j$1$i = 0, $j$1$i$lcssa = 0, $k$012$i = 0, $m$013$i = 0, $m$1$i = 0, $m$1$i$lcssa = 0, $qv$02$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!$w) {
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 if ((HEAP32[$w + 8 >> 2] | 0) > 1) {
  $$0$i = _rank1ex($w, 0, 0, 431) | 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 $8 = _wopen($w, 1) | 0;
 if (!$8) {
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 HEAP32[$vararg_buffer >> 2] = 20;
 _sprintf(411, 8328, $vararg_buffer) | 0;
 $10 = HEAP32[2088] | 0;
 $11 = HEAP32[894] | 0;
 HEAP32[894] = 0;
 $13 = _nl1(_apv(4, 2, 1) | 0) | 0;
 HEAP32[894] = $11;
 $15 = _not(_eps($10, $13) | 0) | 0;
 $17 = _repeat($15, HEAP32[2084] | 0) | 0;
 $20 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $21 = _grade2($17, $17) | 0;
 L11 : do if (!$21) $$0$i1 = 0; else {
  $24 = HEAP32[$21 + 16 >> 2] | 0;
  $26 = HEAP32[$21 + 20 >> 2] | 0;
  if (($24 | 0) < 2) {
   $$0$i68 = $21;
   $58 = $24;
  } else {
   $29 = HEAP32[$21 + 12 >> 2] | 0;
   $$sum1$i3 = $29 + 4 + ($29 & 1) | 0;
   $$sum2$i = $$sum1$i3 + 1 | 0;
   $i$010$i = 1;
   $j$011$i = 0;
   $k$012$i = $26;
   $m$013$i = HEAP32[$21 + ($$sum2$i << 2) >> 2] | 0;
   while (1) {
    $33 = $21 + ($k$012$i + $$sum1$i3 << 2) | 0;
    $39 = $21 + ($k$012$i + $$sum2$i << 2) | 0;
    if ((HEAP32[$33 >> 2] | 0) == ((HEAP32[$21 + ($j$011$i + $$sum1$i3 << 2) >> 2] | 0) + $m$013$i | 0)) {
     $41 = (HEAP32[$39 >> 2] | 0) + $m$013$i | 0;
     if (($41 | 0) > 32e3) label = 10; else {
      $j$1$i = $j$011$i;
      $m$1$i = $41;
     }
    } else label = 10;
    if ((label | 0) == 10) {
     label = 0;
     HEAP32[$21 + ($j$011$i + $$sum2$i << 2) >> 2] = $m$013$i;
     $45 = $j$011$i + $26 | 0;
     HEAP32[$21 + ($45 + $$sum1$i3 << 2) >> 2] = HEAP32[$33 >> 2];
     $j$1$i = $45;
     $m$1$i = HEAP32[$39 >> 2] | 0;
    }
    $i$010$i = $i$010$i + 1 | 0;
    if (($i$010$i | 0) == ($24 | 0)) {
     $j$1$i$lcssa = $j$1$i;
     $m$1$i$lcssa = $m$1$i;
     break;
    } else {
     $j$011$i = $j$1$i;
     $k$012$i = $k$012$i + $26 | 0;
     $m$013$i = $m$1$i;
    }
   }
   HEAP32[$21 + ($j$1$i$lcssa + $$sum2$i << 2) >> 2] = $m$1$i$lcssa;
   $54 = _take(_sc((($j$1$i$lcssa | 0) / ($26 | 0) | 0) + 1 | 0) | 0, $21) | 0;
   if (!$54) {
    $$0$i1 = 0;
    break;
   }
   $$0$i68 = $54;
   $58 = HEAP32[$54 + 16 >> 2] | 0;
  }
  $57 = HEAP32[$$0$i68 + 12 >> 2] | 0;
  if (($58 | 0) > 0) {
   $i$03$i = 0;
   $qv$02$i = $$0$i68 + ($57 + 4 + ($57 & 1) << 2) | 0;
   while (1) {
    if (!(_unsr(_rd($8, HEAP32[$qv$02$i >> 2] | 0, HEAP32[$qv$02$i + 4 >> 2] | 0) | 0) | 0)) {
     $$0$i1 = 0;
     break L11;
    }
    _tpop($20) | 0;
    $i$03$i = $i$03$i + 1 | 0;
    if (($i$03$i | 0) >= ($58 | 0)) break; else $qv$02$i = $qv$02$i + 12 | 0;
   }
  }
  $$0$i1 = HEAP32[646] | 0;
 } while (0);
 _fclose($8 | 0) | 0;
 HEAP8[411] = HEAP8[8344] | 0;
 HEAP8[412] = HEAP8[8345] | 0;
 HEAP8[413] = HEAP8[8346] | 0;
 $$0$i = _gc($$0$i1, $2) | 0;
 STACKTOP = sp;
 return $$0$i | 0;
}

function _tfork($a, $fs, $w) {
 $a = $a | 0;
 $fs = $fs | 0;
 $w = $w | 0;
 var $$0 = 0, $$pre = 0, $$sum11 = 0, $$sum4 = 0, $$sum9 = 0, $10 = 0, $104 = 0, $108 = 0, $109 = 0, $111 = 0, $116 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $16 = 0, $21 = 0, $24 = 0, $33 = 0, $36 = 0, $40 = 0, $51 = 0, $52 = 0, $56 = 0, $6 = 0, $60 = 0, $67 = 0, $68 = 0, $78 = 0, $8 = 0, $82 = 0, $89 = 0, $91 = 0, $94 = 0, $98 = 0;
 if (!(($a | 0) != 0 & ($fs | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (HEAP8[3248] | 0) {
  $6 = HEAP32[$a + 12 >> 2] | 0;
  $$sum9 = $6 + 4 + ($6 & 1) | 0;
  $8 = $a + ($$sum9 << 2) | 0;
  $10 = HEAP32[$w + 12 >> 2] | 0;
  $$sum11 = $10 + 4 + ($10 & 1) | 0;
  $12 = $w + ($$sum11 << 2) | 0;
  $13 = HEAP32[822] | 0;
  $14 = ($13 | 0) != 0;
  if ($14) {
   $16 = HEAP32[$13 + 12 >> 2] | 0;
   if (!(_memcmp($8, $13 + ($16 + 4 + ($16 & 1) << 2) | 0, 32) | 0)) {
    $21 = HEAP32[818] | 0;
    if ($21) {
     $24 = HEAP32[$21 + 12 >> 2] | 0;
     if (!(_memcmp($12, $21 + ($24 + 4 + ($24 & 1) << 2) | 0, 32) | 0)) {
      $$0 = $fs;
      return $$0 | 0;
     }
    }
   }
  }
  if ((HEAP8[$8 + 31 >> 0] | 0) == -19) {
   $33 = HEAP32[$a + ($$sum9 + 2 << 2) >> 2] | 0;
   if (($33 | 0) != 0 & $14) {
    $36 = HEAP32[$33 + 12 >> 2] | 0;
    $40 = HEAP32[$13 + 12 >> 2] | 0;
    if (!(_memcmp($33 + ($36 + 4 + ($36 & 1) << 2) | 0, $13 + ($40 + 4 + ($40 & 1) << 2) | 0, 32) | 0)) $67 = HEAP32[$a + ($$sum9 + 3 << 2) >> 2] | 0; else $67 = $a;
   } else $67 = $a;
  } else $67 = $a;
  if ((HEAP8[$12 + 31 >> 0] | 0) == -19) {
   $51 = HEAP32[$w + ($$sum11 + 2 << 2) >> 2] | 0;
   $52 = HEAP32[818] | 0;
   if (($51 | 0) != 0 & ($52 | 0) != 0) {
    $56 = HEAP32[$51 + 12 >> 2] | 0;
    $60 = HEAP32[$52 + 12 >> 2] | 0;
    if (!(_memcmp($51 + ($56 + 4 + ($56 & 1) << 2) | 0, $52 + ($60 + 4 + ($60 & 1) << 2) | 0, 32) | 0)) $68 = HEAP32[$w + ($$sum11 + 3 << 2) >> 2] | 0; else $68 = $w;
   } else $68 = $w;
  } else $68 = $w;
  $$0 = _forko($67, $fs, $68) | 0;
  return $$0 | 0;
 }
 if (HEAP32[$fs >> 2] & 512) {
  $$pre = HEAP32[820] | 0;
  if (!(HEAP32[$a >> 2] & 256)) $89 = $$pre; else if (!$$pre) $89 = 0; else {
   $78 = HEAP32[$w + 12 >> 2] | 0;
   $82 = HEAP32[$$pre + 12 >> 2] | 0;
   if (!(_memcmp($w + ($78 + 4 + ($78 & 1) << 2) | 0, $$pre + ($82 + 4 + ($82 & 1) << 2) | 0, 32) | 0)) {
    $$0 = _thook($a, $fs) | 0;
    return $$0 | 0;
   } else $89 = $$pre;
  }
  $$0 = _hooko($89, _forko($a, $fs, $w) | 0) | 0;
  return $$0 | 0;
 }
 $91 = HEAP32[820] | 0;
 if (!$91) $104 = HEAP32[$a + 12 >> 2] | 0; else {
  $94 = HEAP32[$a + 12 >> 2] | 0;
  $98 = HEAP32[$91 + 12 >> 2] | 0;
  if (!(_memcmp($a + ($94 + 4 + ($94 & 1) << 2) | 0, $91 + ($98 + 4 + ($98 & 1) << 2) | 0, 32) | 0)) {
   $$0 = _thook($fs, $w) | 0;
   return $$0 | 0;
  } else $104 = $94;
 }
 $$sum4 = $104 + 4 + ($104 & 1) | 0;
 $108 = HEAP8[$a + ($$sum4 << 2) + 31 >> 0] | 0;
 $109 = $108 << 24 >> 24 == -19;
 if (($108 + 19 & 255) < 2) {
  $111 = HEAP32[$a + ($$sum4 + 3 << 2) >> 2] | 0;
  if (HEAP32[$111 >> 2] & 256) {
   $116 = HEAP32[$a + ($$sum4 + 2 << 2) >> 2] | 0;
   if ($109) {
    $120 = $111;
    $121 = _tfork($120, $fs, $w) | 0;
    $122 = _thook($116, $121) | 0;
    return $122 | 0;
   }
   $120 = _thook($111, HEAP32[$a + ($$sum4 + 4 << 2) >> 2] | 0) | 0;
   $121 = _tfork($120, $fs, $w) | 0;
   $122 = _thook($116, $121) | 0;
   return $122 | 0;
  }
 }
 $$0 = _forko($a, $fs, $w) | 0;
 return $$0 | 0;
}

function _xd($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$0$i = 0, $$lcssa43 = 0, $$lcssa44 = 0, $$sum12 = 0, $$sum14 = 0, $$sum6 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $26 = 0, $29 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $57 = 0, $6 = 0, $60 = 0, $7 = 0, $72 = 0, $75 = 0, $87 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $97 = 0, $i$0 = 0, $seq$0 = 0, $z$0 = 0, label = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $$sum6 = $4 + 4 + ($4 & 1) | 0;
 $6 = HEAP32[894] | 0;
 $7 = ($a | 0) != 0;
 if ($7 & ($w | 0) != 0) $16 = (HEAP32[$self >> 2] | 0) >>> 6 & 2 | 4; else $16 = 4;
 $12 = HEAP32[$self + ($$sum6 + 4 << 2) >> 2] | 0;
 $14 = HEAP32[$12 + 12 >> 2] | 0;
 $$sum12 = $16 + $14 + ($14 & 1) | 0;
 $18 = HEAP32[$12 + ($$sum12 << 2) >> 2] | 0;
 $20 = HEAP32[$18 + 12 >> 2] | 0;
 $$sum14 = $20 + 4 + ($20 & 1) | 0;
 $23 = HEAP32[$18 + 8 >> 2] | 0;
 HEAP32[106] = $23;
 if (!$23) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $26 = _ga(32768, HEAP32[882] | 0, 1, 0) | 0;
 HEAP32[894] = $26;
 if (!$26) {
  $$0 = 0;
  return $$0 | 0;
 }
 $29 = HEAP32[$12 + ($$sum12 + 1 << 2) >> 2] | 0;
 if (HEAP32[$29 + 8 >> 2] | 0) if (!(_rank1ex($29, 0, 1, 345) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $35 = _scnm(-47) | 0;
 _symbis($35, $a, HEAP32[894] | 0) | 0;
 $37 = _scnm(-46) | 0;
 _symbis($37, $w, HEAP32[894] | 0) | 0;
 $39 = _scnm(-110) | 0;
 $40 = _ii($18) | 0;
 $41 = _debadd(2) | 0;
 if (!$41) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$41 + 36 >> 2] = HEAP32[$self + ($$sum6 + 5 << 2) >> 2];
 HEAP8[464] = 0;
 $48 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 _ra($self) | 0;
 $49 = $41 + 28 | 0;
 $50 = $7 ? 2 : 1;
 $51 = $41 + 32 | 0;
 $i$0 = 0;
 $seq$0 = $40;
 while (1) {
  _tpop($48) | 0;
  $52 = _behead($seq$0) | 0;
  _symbis($39, $52, HEAP32[894] | 0) | 0;
  HEAP32[$49 >> 2] = $i$0;
  HEAP32[$51 >> 2] = $50;
  $57 = _parse(_ca(HEAP32[$18 + ($$sum14 + $i$0 << 2) >> 2] | 0) | 0) | 0;
  $60 = ($57 | 0) != 0;
  if (!($60 | (HEAP8[440] | 0) != 0)) {
   $87 = 0;
   $97 = 0;
   break;
  }
  $seq$0 = _srd($39, HEAP32[894] | 0) | 0;
  if (!$seq$0) {
   $87 = $60;
   $97 = $57;
   break;
  }
  if ((HEAP32[$seq$0 + 8 >> 2] | 0) == 0 | (HEAP32[620] | 0) == ($seq$0 | 0)) {
   $87 = $60;
   $97 = $57;
   break;
  }
  if (!(HEAP32[$seq$0 >> 2] & 4)) {
   $72 = _cvt(4, $seq$0) | 0;
   if (!$72) {
    $87 = $60;
    $97 = $57;
    break;
   } else $$0$i = $72;
  } else $$0$i = $seq$0;
  $75 = HEAP32[$$0$i + 12 >> 2] | 0;
  if (($75 | 0) >= 2) {
   $$lcssa43 = $57;
   $$lcssa44 = $60;
   label = 17;
   break;
  }
  if (!(HEAP32[$$0$i >> 2] & 4)) {
   $$lcssa43 = $57;
   $$lcssa44 = $60;
   label = 17;
   break;
  }
  $i$0 = HEAP32[$$0$i + ($75 + 4 + ($75 & 1) << 2) >> 2] | 0;
  if (!(($i$0 | 0) > -1 & ($i$0 | 0) < ($23 | 0))) {
   $87 = $60;
   $97 = $57;
   break;
  }
 }
 if ((label | 0) == 17) {
  _jsignal(2);
  $87 = $$lcssa44;
  $97 = $$lcssa43;
 }
 if ($87 | (HEAP8[440] | 0) == 0) $z$0 = $97; else {
  $89 = _tpush(HEAP32[114] | 0) | 0;
  HEAP32[114] = 0;
  $z$0 = $89;
 }
 $90 = _car($z$0) | 0;
 $91 = HEAP32[894] | 0;
 $92 = $91 + 4 | 0;
 HEAP32[$92 >> 2] = (HEAP32[$92 >> 2] | 0) + 1;
 _fa($91) | 0;
 HEAP32[894] = $6;
 HEAP8[2512] = 0;
 _fa($self) | 0;
 _debz();
 if (!$90) _jsignal(15);
 $$0 = _gc($90, $2) | 0;
 return $$0 | 0;
}

function _repeat($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$sum4 = 0, $13 = 0, $16 = 0, $18 = 0, $20 = 0, $21 = 0, $24 = 0, $30 = 0, $32 = 0, $35 = 0, $37 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $56 = 0, $60 = 0, $67 = 0, $74 = 0, $i$023 = 0, $i1$018 = 0, $i3$020 = 0, $p$0$lcssa = 0, $p$022 = 0, $u$016 = 0, $x$017 = 0, $x$1 = 0, $x$219 = 0, label = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$a + 12 >> 2] | 0) <= 1) {
  $5 = $w + 12 | 0;
  if ((HEAP32[$5 >> 2] | 0) <= 127) {
   if (HEAP32[$a >> 2] & 16) {
    $$0 = _repeatf($a, $w) | 0;
    return $$0 | 0;
   }
   $13 = _vi($a) | 0;
   if (!$13) {
    $$0 = 0;
    return $$0 | 0;
   }
   $16 = HEAP32[$13 + 8 >> 2] | 0;
   $18 = HEAP32[$13 + 12 >> 2] | 0;
   $$sum4 = $18 + 4 + ($18 & 1) | 0;
   $20 = $13 + ($$sum4 << 2) | 0;
   $21 = HEAP32[$5 >> 2] | 0;
   if (!$21) {
    $35 = 1;
    $46 = 0;
    $74 = 0;
   } else {
    $24 = HEAP32[$w + 16 >> 2] | 0;
    if (($16 | 0) == ($24 | 0) | ($18 | 0) == 0) {
     $35 = $24;
     $46 = $21;
     $74 = 1;
    } else {
     _jsignal(9);
     $$0 = 0;
     return $$0 | 0;
    }
   }
   L19 : do if (($16 | 0) > 0) {
    $i$023 = 0;
    $p$022 = 0;
    while (1) {
     $30 = HEAP32[$13 + ($i$023 + $$sum4 << 2) >> 2] | 0;
     if (($30 | 0) <= -1) {
      label = 14;
      break;
     }
     $32 = $30 + $p$022 | 0;
     $i$023 = $i$023 + 1 | 0;
     if (($32 | 0) <= -1) {
      label = 16;
      break;
     }
     if (($i$023 | 0) >= ($16 | 0)) {
      $p$0$lcssa = $32;
      break L19;
     } else $p$022 = $32;
    }
    if ((label | 0) == 14) {
     _jsignal(3);
     $$0 = 0;
     return $$0 | 0;
    } else if ((label | 0) == 16) {
     _jsignal(10);
     $$0 = 0;
     return $$0 | 0;
    }
   } else $p$0$lcssa = 0; while (0);
   $37 = Math_imul($p$0$lcssa, ($16 | 0) == 1 ? $35 : 1) | 0;
   if (!$74) {
    $$0 = _reshape(_sc($37) | 0, $w) | 0;
    return $$0 | 0;
   }
   $40 = HEAP32[$w >> 2] | 0;
   $41 = _aii($w) | 0;
   $43 = Math_imul(_bp($40) | 0, $41) | 0;
   $47 = _ga($40, Math_imul($41, $37) | 0, $46, $w + 16 | 0) | 0;
   if (!$47) {
    $$0 = 0;
    return $$0 | 0;
   }
   HEAP32[$47 + 16 >> 2] = $37;
   $51 = HEAP32[$47 + 12 >> 2] | 0;
   $53 = $47 + ($51 + 4 + ($51 & 1) << 2) | 0;
   $54 = HEAP32[$5 >> 2] | 0;
   $56 = $w + ($54 + 4 + ($54 & 1) << 2) | 0;
   if (($16 | 0) > 1) {
    $i1$018 = 0;
    $u$016 = $20;
    $x$017 = $53;
    while (1) {
     $60 = Math_imul(HEAP32[$u$016 >> 2] | 0, $43) | 0;
     if (!$60) $x$1 = $x$017; else {
      _mvc($60, $x$017, $43, $56 + (Math_imul($i1$018, $43) | 0) | 0);
      $x$1 = $x$017 + $60 | 0;
     }
     $i1$018 = $i1$018 + 1 | 0;
     if (($i1$018 | 0) == ($16 | 0)) {
      $$0 = $47;
      break;
     } else {
      $u$016 = $u$016 + 4 | 0;
      $x$017 = $x$1;
     }
    }
    return $$0 | 0;
   } else {
    $67 = Math_imul(HEAP32[$20 >> 2] | 0, $43) | 0;
    if (($67 | 0) != 0 & ($35 | 0) > 0) {
     $i3$020 = 0;
     $x$219 = $53;
    } else {
     $$0 = $47;
     return $$0 | 0;
    }
    while (1) {
     _mvc($67, $x$219, $43, $56 + (Math_imul($i3$020, $43) | 0) | 0);
     $i3$020 = $i3$020 + 1 | 0;
     if (($i3$020 | 0) == ($35 | 0)) {
      $$0 = $47;
      break;
     } else $x$219 = $x$219 + $67 | 0;
    }
    return $$0 | 0;
   }
  }
 }
 $$0 = _rank2ex($a, $w, 0, 1, 127, 33) | 0;
 return $$0 | 0;
}

function _less($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$ = 0, $$0 = 0, $$04 = 0, $$1 = 0, $$sum5 = 0, $12 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $26 = 0, $27 = 0, $3 = 0, $33 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $5 = 0, $51 = 0, $56 = 0, $58 = 0, $6 = 0, $64 = 0, $65 = 0, $68 = 0, $79 = 0, $b = 0, $i$022 = 0, $i1$017 = 0, $i3$014 = 0, $n$0$ = 0, $n$0$$lcssa = 0, $n$0$lcssa = 0, $n$018 = 0, $u$0$lcssa = 0, $u$019 = 0, $u$116 = 0, $v$023 = 0, $zv$015 = 0, $zv$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $b = sp;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$1 = 0;
  STACKTOP = sp;
  return $$1 | 0;
 }
 $2 = HEAP32[$a >> 2] | 0;
 $3 = $a + 12 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $w + 12 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (($4 | 0) < 2 ? ($2 | 0) == (HEAP32[$w >> 2] | 0) : 0) if ((_bp($2) | 0) == 1) {
  _memset($b | 0, 1, 256) | 0;
  $12 = HEAP32[$3 >> 2] | 0;
  $14 = $a + ($12 + 4 + ($12 & 1) << 2) | 0;
  $15 = HEAP32[$5 >> 2] | 0;
  $17 = HEAP32[$w + 8 >> 2] | 0;
  if (($17 | 0) > 0) {
   $i$022 = 0;
   $v$023 = $w + ($15 + 4 + ($15 & 1) << 2) | 0;
   while (1) {
    HEAP8[$b + (HEAP8[$v$023 >> 0] | 0) >> 0] = 0;
    $i$022 = $i$022 + 1 | 0;
    if (($i$022 | 0) == ($17 | 0)) break; else $v$023 = $v$023 + 1 | 0;
   }
  }
  $26 = $a + 8 | 0;
  $27 = HEAP32[$26 >> 2] | 0;
  if (($27 | 0) > 0) {
   $33 = $27 + ($12 + ($12 & 1) << 2) + 16 | 0;
   $i1$017 = 0;
   $n$018 = 0;
   $u$019 = $14;
   while (1) {
    $n$0$ = ((HEAP8[$b + (HEAP8[$u$019 >> 0] | 0) >> 0] | 0) != 0 & 1) + $n$018 | 0;
    $i1$017 = $i1$017 + 1 | 0;
    if (($i1$017 | 0) == ($27 | 0)) {
     $n$0$$lcssa = $n$0$;
     break;
    } else {
     $n$018 = $n$0$;
     $u$019 = $u$019 + 1 | 0;
    }
   }
   $n$0$lcssa = $n$0$$lcssa;
   $u$0$lcssa = $a + $33 | 0;
  } else {
   $n$0$lcssa = 0;
   $u$0$lcssa = $14;
  }
  $41 = _ga($2, $n$0$lcssa, 1, 0) | 0;
  if (!$41) $$0 = 0; else {
   $44 = HEAP32[$41 + 12 >> 2] | 0;
   $45 = HEAP32[$26 >> 2] | 0;
   if (($45 | 0) > 0) {
    $i3$014 = 0;
    $u$116 = $u$0$lcssa;
    $zv$015 = $41 + ($44 + 4 + ($44 & 1) << 2) + $n$0$lcssa | 0;
    while (1) {
     $u$116 = $u$116 + -1 | 0;
     $51 = HEAP8[$u$116 >> 0] | 0;
     if (!(HEAP8[$b + ($51 << 24 >> 24) >> 0] | 0)) $zv$1 = $zv$015; else {
      $56 = $zv$015 + -1 | 0;
      HEAP8[$56 >> 0] = $51;
      $zv$1 = $56;
     }
     $i3$014 = $i3$014 + 1 | 0;
     if (($i3$014 | 0) == ($45 | 0)) {
      $$0 = $41;
      break;
     } else $zv$015 = $zv$1;
    }
   } else $$0 = $41;
  }
  $$1 = $$0;
  STACKTOP = sp;
  return $$1 | 0;
 }
 $58 = $6 + 1 | 0;
 if (($4 | 0) > ($58 | 0)) {
  $$1 = _ca($a) | 0;
  STACKTOP = sp;
  return $$1 | 0;
 }
 if (($6 | 0) == 0 | ($4 | 0) == ($6 | 0)) $$04 = $w; else {
  $64 = ($4 | 0) < 1 ? 1 : $4;
  $65 = _ga(4, $64, 1, 0) | 0;
  if (!$65) {
   $$1 = 0;
   STACKTOP = sp;
   return $$1 | 0;
  }
  $68 = HEAP32[$65 + 12 >> 2] | 0;
  $$sum5 = $68 + 4 + ($68 & 1) | 0;
  $$ = ($4 | 0) > ($6 | 0) ? 0 : $58 - $64 | 0;
  HEAP32[$65 + ($$sum5 << 2) >> 2] = _prod($$, $w + 16 | 0) | 0;
  _memcpy($65 + ($$sum5 + 1 << 2) | 0, $w + 16 + ($$ << 2) | 0, ($64 << 2) + -4 | 0) | 0;
  $79 = _reshape($65, $w) | 0;
  if (!$79) {
   $$1 = 0;
   STACKTOP = sp;
   return $$1 | 0;
  } else $$04 = $79;
 }
 $$1 = _repeat(_not(_eps($a, $$04) | 0) | 0, $a) | 0;
 STACKTOP = sp;
 return $$1 | 0;
}

function _srep($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$02 = 0, $$sum3 = 0, $10 = 0, $11 = 0, $14 = 0, $2 = 0, $31 = 0, $32 = 0, $35 = 0, $43 = 0, $46 = 0, $49 = 0, $5 = 0, $51 = 0, $57 = 0, $60 = 0, $63 = 0, $71 = 0, $77 = 0, $8 = 0, $80 = 0, $82 = 0, $88 = 0, $89 = 0, $i$017 = 0, $m$0$lcssa = 0, $m$016 = 0, $s = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $s = sp + 12 | 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $5 = _ga(32, 7, 1, 0) | 0;
 if (!$5) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $8 = HEAP32[$5 + 12 >> 2] | 0;
 $$sum3 = $8 + 4 + ($8 & 1) | 0;
 $10 = $5 + ($$sum3 << 2) | 0;
 $11 = HEAP32[$w >> 2] | 0;
 if (!($11 & 896)) $$02 = $w; else {
  $14 = _aro($w) | 0;
  if (!$14) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else $$02 = $14;
 }
 if (!($11 & 1026)) if (!($11 & 29)) if (!($11 & 32)) if (!($11 & 64)) if (!($11 & 128)) if (!($11 & 256)) $31 = ($11 & 512 | 0) != 0 ? 3344 : 3352; else $31 = 3400; else $31 = 3392; else $31 = 3384; else $31 = 3376; else $31 = 3368; else $31 = 3360;
 $32 = _cstr($31) | 0;
 HEAP32[$5 + ($$sum3 + 1 << 2) >> 2] = $32;
 if (!$32) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $35 = HEAP32[$$02 >> 2] | 0;
 if (!(HEAP32[$a >> 2] & 1024)) HEAP32[$5 + ($$sum3 + 2 << 2) >> 2] = $a; else {
  $43 = HEAP32[$a + 12 >> 2] | 0;
  $46 = _str(HEAP32[$a + 8 >> 2] | 0, $a + ($43 + 4 + ($43 & 1) << 2) | 0) | 0;
  HEAP32[$5 + ($$sum3 + 2 << 2) >> 2] = $46;
  if (!$46) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $49 = $$02 + 12 | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$49 >> 2];
 _sprintf($s, 3408, $vararg_buffer) | 0;
 $51 = _cstr($s) | 0;
 HEAP32[$5 + ($$sum3 + 3 << 2) >> 2] = $51;
 if (!$51) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(HEAP32[$49 >> 2] | 0)) {
  $63 = HEAP32[616] | 0;
  HEAP32[$5 + ($$sum3 + 5 << 2) >> 2] = $63;
  HEAP32[$5 + ($$sum3 + 4 << 2) >> 2] = $63;
 } else {
  $57 = _thorn1(_shape($$02) | 0) | 0;
  HEAP32[$5 + ($$sum3 + 4 << 2) >> 2] = $57;
  if (!$57) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $60 = _scc(32) | 0;
  HEAP32[$5 + ($$sum3 + 5 << 2) >> 2] = $60;
  if (!$60) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 if (!($35 & 96)) $77 = _thorn1(_ravel($$02) | 0) | 0; else {
  if (!($35 & 32)) $71 = _kbox($$02) | 0; else $71 = $$02;
  $77 = _raze(_every($71, 354) | 0) | 0;
 }
 HEAP32[$5 + ($$sum3 + 6 << 2) >> 2] = $77;
 if (!$77) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $80 = HEAP32[$5 + 8 >> 2] | 0;
 if (($80 | 0) > 1) {
  $82 = $80 + -1 | 0;
  $i$017 = 0;
  $m$016 = 0;
  while (1) {
   $i$017 = $i$017 + 1 | 0;
   $88 = (HEAP32[(HEAP32[$5 + ($i$017 + $$sum3 << 2) >> 2] | 0) + 8 >> 2] | 0) + $m$016 | 0;
   if (($i$017 | 0) == ($82 | 0)) {
    $m$0$lcssa = $88;
    break;
   } else $m$016 = $88;
  }
 } else $m$0$lcssa = 0;
 HEAP32[$vararg_buffer1 >> 2] = $m$0$lcssa;
 _sprintf($s, 3416, $vararg_buffer1) | 0;
 $89 = _cstr($s) | 0;
 HEAP32[$10 >> 2] = $89;
 if (!$89) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$0 = _gc(_raze($5) | 0, $2) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _jpr1($w) {
 $w = $w | 0;
 var $$0 = 0, $$lcssa = 0, $$lcssa36 = 0, $$ph = 0, $$ph28 = 0, $$sum2 = 0, $12 = 0, $15 = 0, $17 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $28 = 0, $30 = 0, $34 = 0, $36 = 0, $37 = 0, $4 = 0, $45 = 0, $47 = 0, $49 = 0, $bl = 0, $i$015 = 0, $i1$010 = 0, $i1$010$us = 0, $i3$06 = 0, $i3$06$us = 0, $i5$08$us = 0, $k$05 = 0, $k$05$us = 0, $m$0$lcssa29 = 0, $m$016 = 0, $v$011$us = 0, $v$17$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $bl = sp;
 if (!$w) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 12 >> 2] | 0;
 $4 = $w + ($2 + 4 + ($2 & 1) << 2) | 0;
 if (($2 | 0) > 1) {
  $12 = HEAP32[$w + 16 + ($2 + -2 << 2) >> 2] | 0;
  $15 = HEAP32[$w + 16 + ($2 + -1 << 2) >> 2] | 0;
  if (($2 | 0) > 2) {
   $17 = $2 + -2 | 0;
   $i$015 = 0;
   $m$016 = 1;
   while (1) {
    $20 = Math_imul(HEAP32[$w + 16 + ($i$015 << 2) >> 2] | 0, $m$016) | 0;
    $i$015 = $i$015 + 1 | 0;
    if (($i$015 | 0) == ($17 | 0)) {
     $$lcssa = $20;
     break;
    } else $m$016 = $20;
   }
   HEAP8[$bl >> 0] = 10;
   HEAP8[$bl + 1 >> 0] = 0;
   if (($$lcssa | 0) > 0) {
    $26 = $12;
    $36 = $15;
    $45 = $bl;
    $m$0$lcssa29 = $$lcssa;
    label = 10;
   }
  } else {
   $$ph = $15;
   $$ph28 = $12;
   label = 8;
  }
 } else if (!$2) {
  $$ph = 1;
  $$ph28 = 1;
  label = 8;
 } else {
  $$ph = HEAP32[$w + 16 + ($2 + -1 << 2) >> 2] | 0;
  $$ph28 = 1;
  label = 8;
 }
 if ((label | 0) == 8) {
  HEAP8[$bl >> 0] = 10;
  HEAP8[$bl + 1 >> 0] = 0;
  $26 = $$ph28;
  $36 = $$ph;
  $45 = $bl;
  $m$0$lcssa29 = 1;
  label = 10;
 }
 L14 : do if ((label | 0) == 10) {
  $$sum2 = $2 + -2 | 0;
  $25 = $2 + -1 | 0;
  if (($26 | 0) > 0) {
   $i1$010$us = 0;
   $v$011$us = $4;
  } else {
   $i1$010 = 0;
   while (1) {
    $47 = Math_imul($i1$010, $26) | 0;
    $49 = ($47 | 0) != 0 ? $25 : 0;
    if (($49 | 0) > 0) {
     $i3$06 = 0;
     $k$05 = 1;
     do {
      $k$05 = Math_imul(HEAP32[$w + 16 + ($$sum2 - $i3$06 << 2) >> 2] | 0, $k$05) | 0;
      if (!(($47 | 0) % ($k$05 | 0) | 0)) _jouts($45);
      $i3$06 = $i3$06 + 1 | 0;
     } while (($i3$06 | 0) != ($49 | 0));
    }
    $i1$010 = $i1$010 + 1 | 0;
    if (($i1$010 | 0) >= ($m$0$lcssa29 | 0)) break L14;
   }
  }
  L26 : while (1) {
   $28 = Math_imul($i1$010$us, $26) | 0;
   $30 = ($28 | 0) != 0 ? $25 : 0;
   if (($30 | 0) > 0) {
    $i3$06$us = 0;
    $k$05$us = 1;
    do {
     $k$05$us = Math_imul(HEAP32[$w + 16 + ($$sum2 - $i3$06$us << 2) >> 2] | 0, $k$05$us) | 0;
     if (!(($28 | 0) % ($k$05$us | 0) | 0)) _jouts($45);
     $i3$06$us = $i3$06$us + 1 | 0;
    } while (($i3$06$us | 0) != ($30 | 0));
    $i5$08$us = 0;
    $v$17$us = $v$011$us;
   } else {
    $i5$08$us = 0;
    $v$17$us = $v$011$us;
   }
   while (1) {
    $37 = _wr($36, $v$17$us) | 0;
    $i5$08$us = $i5$08$us + 1 | 0;
    if (!((_breaker() | 0) << 24 >> 24)) {
     $$0 = 0;
     break L26;
    }
    if (($i5$08$us | 0) >= ($26 | 0)) {
     $$lcssa36 = $37;
     break;
    } else $v$17$us = $37;
   }
   $34 = $i1$010$us + 1 | 0;
   if (($34 | 0) < ($m$0$lcssa29 | 0)) {
    $i1$010$us = $34;
    $v$011$us = $$lcssa36;
   } else break L14;
  }
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 $$0 = HEAP32[616] | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _scanexp($f, $pok) {
 $f = $f | 0;
 $pok = $pok | 0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $2 = 0, $20 = 0, $35 = 0, $36 = 0, $48 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $59 = 0, $61 = 0, $62 = 0, $63 = 0, $78 = 0, $9 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $x$013 = 0;
 $0 = $f + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $f + 100 | 0;
 if ($1 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
  HEAP32[$0 >> 2] = $1 + 1;
  $9 = HEAPU8[$1 >> 0] | 0;
 } else $9 = ___shgetc($f) | 0;
 if (($9 | 0) == 43 | ($9 | 0) == 45) {
  $11 = ($9 | 0) == 45 & 1;
  $12 = HEAP32[$0 >> 2] | 0;
  if ($12 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $12 + 1;
   $20 = HEAPU8[$12 >> 0] | 0;
  } else $20 = ___shgetc($f) | 0;
  if (($pok | 0) != 0 & ($20 + -48 | 0) >>> 0 > 9) if (!(HEAP32[$2 >> 2] | 0)) {
   $c$0 = $20;
   $neg$0 = $11;
  } else {
   HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
   $c$0 = $20;
   $neg$0 = $11;
  } else {
   $c$0 = $20;
   $neg$0 = $11;
  }
 } else {
  $c$0 = $9;
  $neg$0 = 0;
 }
 if (($c$0 + -48 | 0) >>> 0 > 9) {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $98 = -2147483648;
   $99 = 0;
   tempRet0 = $98;
   return $99 | 0;
  }
  HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
  $98 = -2147483648;
  $99 = 0;
  tempRet0 = $98;
  return $99 | 0;
 } else {
  $c$112 = $c$0;
  $x$013 = 0;
 }
 while (1) {
  $35 = $c$112 + -48 + ($x$013 * 10 | 0) | 0;
  $36 = HEAP32[$0 >> 2] | 0;
  if ($36 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $36 + 1;
   $c$1$be = HEAPU8[$36 >> 0] | 0;
  } else $c$1$be = ___shgetc($f) | 0;
  if (($c$1$be + -48 | 0) >>> 0 < 10 & ($35 | 0) < 214748364) {
   $c$112 = $c$1$be;
   $x$013 = $35;
  } else {
   $$lcssa22 = $35;
   $c$1$be$lcssa = $c$1$be;
   break;
  }
 }
 $48 = (($$lcssa22 | 0) < 0) << 31 >> 31;
 if (($c$1$be$lcssa + -48 | 0) >>> 0 < 10) {
  $53 = $$lcssa22;
  $54 = $48;
  $c$27 = $c$1$be$lcssa;
  while (1) {
   $55 = ___muldi3($53 | 0, $54 | 0, 10, 0) | 0;
   $56 = tempRet0;
   $59 = _i64Add($c$27 | 0, (($c$27 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
   $61 = _i64Add($59 | 0, tempRet0 | 0, $55 | 0, $56 | 0) | 0;
   $62 = tempRet0;
   $63 = HEAP32[$0 >> 2] | 0;
   if ($63 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $63 + 1;
    $c$2$be = HEAPU8[$63 >> 0] | 0;
   } else $c$2$be = ___shgetc($f) | 0;
   if (($c$2$be + -48 | 0) >>> 0 < 10 & (($62 | 0) < 21474836 | ($62 | 0) == 21474836 & $61 >>> 0 < 2061584302)) {
    $53 = $61;
    $54 = $62;
    $c$27 = $c$2$be;
   } else {
    $92 = $61;
    $93 = $62;
    $c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $92 = $$lcssa22;
  $93 = $48;
  $c$2$lcssa = $c$1$be$lcssa;
 }
 if (($c$2$lcssa + -48 | 0) >>> 0 < 10) do {
  $78 = HEAP32[$0 >> 2] | 0;
  if ($78 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $78 + 1;
   $c$3$be = HEAPU8[$78 >> 0] | 0;
  } else $c$3$be = ___shgetc($f) | 0;
 } while (($c$3$be + -48 | 0) >>> 0 < 10);
 if (HEAP32[$2 >> 2] | 0) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
 $91 = ($neg$0 | 0) != 0;
 $94 = _i64Subtract(0, 0, $92 | 0, $93 | 0) | 0;
 $98 = $91 ? tempRet0 : $93;
 $99 = $91 ? $94 : $92;
 tempRet0 = $98;
 return $99 | 0;
}

function _lchar($w) {
 $w = $w | 0;
 var $$0 = 0, $$j$0 = 0, $$j$01924 = 0, $$j$022 = 0, $$pn = 0, $$pre = 0, $1 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $27 = 0, $3 = 0, $30 = 0, $32 = 0, $34 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $47 = 0, $51 = 0, $56 = 0, $6 = 0, $63 = 0, $7 = 0, $b$0$lcssa = 0, $b$013$ph = 0, $i1$09 = 0, $j$0$lcssa = 0, $j$2 = 0, $n$0 = 0, $phitmp$i = 0, $u$07 = 0, $v$18 = 0, $v$2 = 0, label = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $1 = $w + 8 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $w + 12 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $6 = $w + ($4 + 4 + ($4 & 1) << 2) | 0;
 $7 = HEAP8[$6 >> 0] | 0;
 do if (($2 | 0) > 7) {
  $b$013$ph = 1;
  label = 6;
 } else if (($2 | 0) > 1) {
  $b$013$ph = ($4 | 0) > 1 & 1;
  label = 6;
  break;
 } else if (($2 | 0) > 0) {
  $b$013$ph = 0;
  label = 6;
  break;
 } else {
  $b$0$lcssa = 0;
  $j$0$lcssa = 2;
  break;
 } while (0);
 if ((label | 0) == 6) {
  $$j$01924 = $7 << 24 >> 24 == 39 | 2;
  if (($2 | 0) == 1) {
   $b$0$lcssa = $b$013$ph;
   $j$0$lcssa = $$j$01924;
  } else {
   $$j$022 = $$j$01924;
   $$pn = $6;
   $18 = $b$013$ph;
   $22 = 1;
   while (1) {
    $$pn = $$pn + 1 | 0;
    $$pre = HEAP8[$$pn >> 0] | 0;
    $$j$0 = ($$pre << 24 >> 24 == 39 & 1) + $$j$022 | 0;
    $20 = ($18 << 24 >> 24 != 0 ? $$pre << 24 >> 24 == $7 << 24 >> 24 : 0) & 1;
    $22 = $22 + 1 | 0;
    if (($22 | 0) == ($2 | 0)) {
     $b$0$lcssa = $20;
     $j$0$lcssa = $$j$0;
     break;
    } else {
     $$j$022 = $$j$0;
     $18 = $20;
    }
   }
  }
 }
 $23 = $b$0$lcssa << 24 >> 24 == 0;
 $j$2 = $23 ? $j$0$lcssa : ($j$0$lcssa | 0) > 3 ? 3 : $j$0$lcssa;
 $n$0 = $23 ? $2 : 1;
 $27 = _ga(2, $n$0 + $j$2 | 0, 1, 0) | 0;
 if (!$27) {
  $$0 = 0;
  return $$0 | 0;
 }
 $30 = HEAP32[$27 + 12 >> 2] | 0;
 $32 = $27 + ($30 + 4 + ($30 & 1) << 2) | 0;
 HEAP8[$32 + ($j$2 + -1 + $n$0) >> 0] = 39;
 HEAP8[$32 >> 0] = 39;
 $34 = $32 + 1 | 0;
 if (($j$2 | 0) == 2) _memcpy($34 | 0, $6 | 0, $n$0 | 0) | 0; else if (($n$0 | 0) > 0) {
  $i1$09 = 0;
  $u$07 = $6;
  $v$18 = $34;
  while (1) {
   $38 = HEAP8[$u$07 >> 0] | 0;
   $39 = $v$18 + 1 | 0;
   HEAP8[$v$18 >> 0] = $38;
   if ($38 << 24 >> 24 == 39) {
    HEAP8[$39 >> 0] = 39;
    $v$2 = $v$18 + 2 | 0;
   } else $v$2 = $39;
   $i1$09 = $i1$09 + 1 | 0;
   if (($i1$09 | 0) == ($n$0 | 0)) break; else {
    $u$07 = $u$07 + 1 | 0;
    $v$18 = $v$2;
   }
  }
 }
 L26 : do if ($23) {
  $47 = HEAP32[$3 >> 2] | 0;
  do if (!$47) {
   $63 = HEAP32[616] | 0;
   break L26;
  } else if (($47 | 0) == 2) {
   $phitmp$i = (HEAP32[$w + 20 >> 2] | 0) == 1;
   if ((HEAP32[$w + 16 >> 2] | 0) == 1) $51 = $phitmp$i ? -100 : -99; else if ($phitmp$i) $51 = -100; else break;
   $63 = _spellout($51) | 0;
   break L26;
  } else if (($47 | 0) <= 1) if ((HEAP32[$1 >> 2] | 0) > 1) {
   $63 = HEAP32[616] | 0;
   break L26;
  } else {
   $63 = _spellout(44) | 0;
   break L26;
  } while (0);
  $56 = _thorn1(_shape($w) | 0) | 0;
  $63 = _over($56, _spellout(36) | 0) | 0;
 } else {
  $44 = _thorn1(_shape($w) | 0) | 0;
  $63 = _over($44, _spellout(36) | 0) | 0;
 } while (0);
 $$0 = _over($63, $27) | 0;
 return $$0 | 0;
}

function _jgets($s) {
 $s = $s | 0;
 var $$0 = 0, $$lcssa = 0, $$lcssa39 = 0, $$lcssa42 = 0, $$lcssa43 = 0, $$pre$i1$cast$i = 0, $$pre6$i2$i = 0, $0 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $44 = 0, $5 = 0, $50 = 0, $55 = 0, $60 = 0, $7 = 0, $9 = 0, label = 0;
 $0 = HEAP32[2112] | 0;
 if (!$0) {
  if (HEAP8[8472] | 0) _fputs($s | 0, HEAP32[_stdout >> 2] | 0) | 0;
  $60 = HEAP32[2120] | 0;
  if ($60) _fputs($s | 0, $60 | 0) | 0;
  if (!(_fgets(1408, 843, HEAP32[_stdin >> 2] | 0) | 0)) {
   $$0 = 0;
   return $$0 | 0;
  }
 } else {
  $2 = HEAP32[2116] | 0;
  L11 : do if ($0 >>> 0 < $2 >>> 0) {
   $5 = $0;
   while (1) {
    if (!(HEAP8[$5 >> 0] | 0)) $7 = $5; else {
     $17 = $5;
     break L11;
    }
    while (1) {
     if ($7 >>> 0 >= $2 >>> 0) {
      $$lcssa42 = $7;
      label = 9;
      break;
     }
     $9 = HEAP8[$7 >> 0] | 0;
     if ($9 << 24 >> 24 == 10) {
      $$lcssa43 = $7;
      label = 7;
      break;
     }
     $12 = $7 + 1 | 0;
     HEAP32[2112] = $12;
     if ($9 << 24 >> 24 == 26) {
      $14 = $12;
      break;
     } else $7 = $12;
    }
    if ((label | 0) == 7) {
     label = 0;
     $13 = $$lcssa43 + 1 | 0;
     HEAP32[2112] = $13;
     $14 = $13;
    } else if ((label | 0) == 9) {
     label = 0;
     $16 = $$lcssa42 + 1 | 0;
     HEAP32[2112] = $16;
     $14 = $16;
    }
    if ($14 >>> 0 < $2 >>> 0) $5 = $14; else {
     $17 = $14;
     break;
    }
   }
  } else $17 = $0; while (0);
  if ($17 >>> 0 >= $2 >>> 0) {
   $$0 = 0;
   return $$0 | 0;
  }
  if ((HEAP8[$17 >> 0] | 0) == 26) {
   $$0 = 0;
   return $$0 | 0;
  }
  if (HEAP8[8472] | 0) _fputs($s | 0, HEAP32[_stdout >> 2] | 0) | 0;
  $24 = HEAP32[2120] | 0;
  if ($24) _fputs($s | 0, $24 | 0) | 0;
  $26 = HEAP32[2112] | 0;
  HEAP32[2114] = $26;
  $$pre$i1$cast$i = $26;
  $$pre6$i2$i = HEAP32[2116] | 0;
  $27 = $$pre$i1$cast$i;
  while (1) {
   if ($27 >>> 0 >= $$pre6$i2$i >>> 0) {
    $$lcssa = $27;
    label = 21;
    break;
   }
   $29 = HEAP8[$27 >> 0] | 0;
   if ($29 << 24 >> 24 == 10) {
    $$lcssa39 = $27;
    label = 20;
    break;
   }
   $32 = $27 + 1 | 0;
   HEAP32[2112] = $32;
   if ($29 << 24 >> 24 == 26) {
    $35 = $32;
    break;
   } else $27 = $32;
  }
  if ((label | 0) == 20) {
   $33 = $$lcssa39 + 1 | 0;
   HEAP32[2112] = $33;
   $35 = $33;
  } else if ((label | 0) == 21) {
   $34 = $$lcssa + 1 | 0;
   HEAP32[2112] = $34;
   $35 = $34;
  }
  $37 = $35 - $26 | 0;
  $38 = $37 + -1 | 0;
  _strncpy(1408, $$pre$i1$cast$i | 0, (($38 | 0) < 843 ? $38 : 843) | 0) | 0;
  HEAP8[1408 + $38 >> 0] = 0;
  if (($37 | 0) > 1) {
   $44 = 1408 + ($37 + -2) | 0;
   if ((HEAP8[$44 >> 0] | 0) < 32) HEAP8[$44 >> 0] = 0;
  }
  if (HEAP8[8472] | 0) _fputs(1408, HEAP32[_stdout >> 2] | 0) | 0;
  $50 = HEAP32[2120] | 0;
  if ($50) _fputs(1408, $50 | 0) | 0;
  if (HEAP8[8472] | 0) _fputc(10, HEAP32[_stdout >> 2] | 0) | 0;
  $55 = HEAP32[2120] | 0;
  if ($55) _fputc(10, $55 | 0) | 0;
 }
 $$0 = _inpl(0, _strlen(1408) | 0, 1408) | 0;
 return $$0 | 0;
}

function _zm4($agg$result, $v$0, $v$1) {
 $agg$result = $agg$result | 0;
 $v$0 = +$v$0;
 $v$1 = +$v$1;
 var $0 = 0.0, $1 = 0.0, $12 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $2 = 0.0, $20 = 0.0, $3 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $39 = 0.0, $4 = 0.0, $43 = 0.0, $45 = 0, $47 = 0.0, $5 = 0.0, $50 = 0.0, $53 = 0.0, $54 = 0, $57 = 0.0, $58 = 0.0, $67 = 0.0, $69 = 0.0, $85 = 0, $a$0$i = 0.0, $b$0$i = 0.0, $c$0$i = 0.0, $d$0$i = 0.0, $or$cond$i8 = 0, $p$0$i = 0.0, $zi$0$i = 0.0, $zi$0$i2 = 0.0, $zi$0$i9 = 0.0, $zr$0$i = 0.0, $zr$0$i10 = 0.0, $zr$0$i3 = 0.0;
 $0 = +HEAPF64[972];
 $1 = +HEAPF64[973];
 $2 = $0 + $v$0;
 $3 = $1 + $v$1;
 $4 = $v$0 - $0;
 $5 = $v$1 - $1;
 $or$cond$i8 = $2 != 0.0 | $3 != 0.0;
 do if ($or$cond$i8) {
  $12 = -$3;
  if (($2 >= 0.0 ? $2 : -$2) < ($3 >= 0.0 ? $3 : $12)) {
   $a$0$i = -$5;
   $b$0$i = $4;
   $c$0$i = $12;
   $d$0$i = $2;
  } else {
   $a$0$i = $4;
   $b$0$i = $5;
   $c$0$i = $2;
   $d$0$i = $3;
  }
  $16 = $a$0$i / $c$0$i;
  $17 = $b$0$i / $c$0$i;
  $18 = $d$0$i / $c$0$i;
  $20 = $18 * $18 + 1.0;
  $zi$0$i9 = ($17 - $16 * $18) / $20;
  $zr$0$i10 = ($16 + $17 * $18) / $20;
 } else if ($4 != 0.0 | $5 != 0.0) {
  $34 = ($4 < 0.0 & 1) << 1 | $5 < 0.0;
  if (!$34) {
   $35 = $4 > $5;
   $36 = +HEAPF64[317];
   $zi$0$i9 = $35 ? 0.0 : $36;
   $zr$0$i10 = $35 ? $36 : 0.0;
   break;
  } else if (($34 | 0) == 3) {
   $45 = $4 < $5;
   $47 = -+HEAPF64[317];
   $zi$0$i9 = $45 ? 0.0 : $47;
   $zr$0$i10 = $45 ? $47 : 0.0;
   break;
  } else if (($34 | 0) == 1) {
   $39 = +HEAPF64[317];
   if ($4 > -$5) {
    $zi$0$i9 = 0.0;
    $zr$0$i10 = $39;
    break;
   }
   $zi$0$i9 = -$39;
   $zr$0$i10 = 0.0;
   break;
  } else if (($34 | 0) == 2) {
   $43 = +HEAPF64[317];
   if (!($4 < -$5)) {
    $zi$0$i9 = $43;
    $zr$0$i10 = 0.0;
    break;
   }
   $zi$0$i9 = 0.0;
   $zr$0$i10 = -$43;
   break;
  } else {
   $zi$0$i9 = 0.0;
   $zr$0$i10 = 0.0;
   break;
  }
 } else {
  $zi$0$i9 = 0.0;
  $zr$0$i10 = 0.0;
 } while (0);
 $50 = $zr$0$i10 >= 0.0 ? $zr$0$i10 : -$zr$0$i10;
 $53 = $zi$0$i9 >= 0.0 ? $zi$0$i9 : -$zi$0$i9;
 $54 = $50 < $53;
 $p$0$i = $54 ? $53 : $50;
 if ($p$0$i != 0.0) {
  $57 = ($54 ? $50 : $53) * .5 / $p$0$i;
  $58 = $zr$0$i10 * .5;
  $67 = +Math_sqrt(+(($58 >= 0.0 ? $58 : -$58) + $p$0$i * +Math_sqrt(+($57 * $57 + .25))));
  $69 = $zi$0$i9 / ($67 + $67);
  if ($zr$0$i10 < 0.0) {
   $zi$0$i2 = $zi$0$i9 < 0.0 ? -$67 : $67;
   $zr$0$i3 = $69 >= 0.0 ? $69 : -$69;
  } else {
   $zi$0$i2 = $69;
   $zr$0$i3 = $67;
  }
 } else {
  $zi$0$i2 = 0.0;
  $zr$0$i3 = 0.0;
 }
 if (!$or$cond$i8) {
  $zi$0$i = 0.0;
  $zr$0$i = 0.0;
  HEAPF64[$agg$result >> 3] = $zr$0$i;
  $85 = $agg$result + 8 | 0;
  HEAPF64[$85 >> 3] = $zi$0$i;
  return;
 }
 if (!($zi$0$i2 != 0.0 | $zr$0$i3 != 0.0)) {
  $zi$0$i = 0.0;
  $zr$0$i = 0.0;
  HEAPF64[$agg$result >> 3] = $zr$0$i;
  $85 = $agg$result + 8 | 0;
  HEAPF64[$85 >> 3] = $zi$0$i;
  return;
 }
 $zi$0$i = $2 * $zi$0$i2 + $3 * $zr$0$i3;
 $zr$0$i = $2 * $zr$0$i3 - $3 * $zi$0$i2;
 HEAPF64[$agg$result >> 3] = $zr$0$i;
 $85 = $agg$result + 8 | 0;
 HEAPF64[$85 >> 3] = $zi$0$i;
 return;
}

function _wt($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$in = 0, $$sum6 = 0, $11 = 0, $12 = 0, $19 = 0, $2 = 0, $20 = 0, $26 = 0, $29 = 0, $32 = 0, $33 = 0, $35 = 0, $39 = 0, $4 = 0, $41 = 0.0, $5 = 0, $50 = 0, $56 = 0.0, $64 = 0, $8 = 0, $i$010 = 0, $i1$014 = 0, $i3$021 = 0, $i5$027 = 0, $u$013 = 0, $v$026 = 0, $x$011 = 0.0, $x$115 = 0.0, $x$220 = 0.0, $x$325 = 0.0, $zv$09 = 0, $zv$112 = 0, $zv$219 = 0, $zv$324 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = $w + 12 | 0;
 $4 = (HEAP32[$2 >> 2] | 0) > 0;
 $5 = $4 & 1;
 if ($4) $$in = $w + 8 | 0; else {
  $8 = HEAP32[$a + 12 >> 2] | 0;
  $$in = $a + ($8 + 4 + ($8 & 1) << 2) | 0;
 }
 $11 = HEAP32[$$in >> 2] | 0;
 $12 = HEAP32[$w >> 2] | 0;
 if (!($12 & 29)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 if (!($12 & 12)) {
  if ($4) $19 = $w; else $19 = _reshape($a, $w) | 0;
  $20 = _over($19, HEAP32[646] | 0) | 0;
  $$0 = _behead(_df1($20, _bsdot(_slash(_ds(42) | 0) | 0) | 0) | 0) | 0;
  return $$0 | 0;
 }
 $26 = _ga(8, $11, 1, 0) | 0;
 if (!$26) {
  $$0 = 0;
  return $$0 | 0;
 }
 $29 = HEAP32[$26 + 12 >> 2] | 0;
 $32 = $26 + ($29 + 4 + ($29 & 1) << 2) + ($11 << 3) | 0;
 $33 = HEAP32[$2 >> 2] | 0;
 $$sum6 = $33 + 4 + ($33 & 1) | 0;
 $35 = $w + ($$sum6 << 2) | 0;
 $39 = (($12 | 0) == 8 & 1) << 1 | $5;
 if (($39 | 0) == 1) {
  if (($11 | 0) > 0) {
   $i1$014 = 0;
   $u$013 = $w + ($$sum6 + $11 << 2) | 0;
   $x$115 = 1.0;
   $zv$112 = $32;
   while (1) {
    $zv$112 = $zv$112 + -8 | 0;
    HEAPF64[$zv$112 >> 3] = $x$115;
    $50 = $u$013 + -4 | 0;
    $i1$014 = $i1$014 + 1 | 0;
    if (($i1$014 | 0) == ($11 | 0)) break; else {
     $u$013 = $50;
     $x$115 = $x$115 * +(HEAP32[$50 >> 2] | 0);
    }
   }
  }
  $$0 = _icvt($26) | 0;
  return $$0 | 0;
 } else if (!$39) {
  $41 = +(HEAP32[$35 >> 2] | 0);
  if (($11 | 0) > 0) {
   $i$010 = 0;
   $x$011 = 1.0;
   $zv$09 = $32;
   while (1) {
    $zv$09 = $zv$09 + -8 | 0;
    HEAPF64[$zv$09 >> 3] = $x$011;
    $i$010 = $i$010 + 1 | 0;
    if (($i$010 | 0) == ($11 | 0)) break; else $x$011 = $41 * $x$011;
   }
  }
  $$0 = _icvt($26) | 0;
  return $$0 | 0;
 } else if (($39 | 0) == 2) {
  $56 = +HEAPF64[$35 >> 3];
  if (($11 | 0) > 0) {
   $i3$021 = 0;
   $x$220 = 1.0;
   $zv$219 = $32;
  } else {
   $$0 = $26;
   return $$0 | 0;
  }
  while (1) {
   $zv$219 = $zv$219 + -8 | 0;
   HEAPF64[$zv$219 >> 3] = $x$220;
   $i3$021 = $i3$021 + 1 | 0;
   if (($i3$021 | 0) == ($11 | 0)) {
    $$0 = $26;
    break;
   } else $x$220 = $56 * $x$220;
  }
  return $$0 | 0;
 } else if (($39 | 0) == 3) {
  if (($11 | 0) <= 0) {
   $$0 = $26;
   return $$0 | 0;
  }
  $i5$027 = 0;
  $v$026 = $35 + ($11 << 3) | 0;
  $x$325 = 1.0;
  $zv$324 = $32;
  while (1) {
   $zv$324 = $zv$324 + -8 | 0;
   HEAPF64[$zv$324 >> 3] = $x$325;
   $64 = $v$026 + -8 | 0;
   $i5$027 = $i5$027 + 1 | 0;
   if (($i5$027 | 0) == ($11 | 0)) {
    $$0 = $26;
    break;
   } else {
    $v$026 = $64;
    $x$325 = $x$325 * +HEAPF64[$64 >> 3];
   }
  }
  return $$0 | 0;
 } else {
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function _afrom($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$$i = 0, $$0 = 0, $$0$i2 = 0, $$0$i4 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $26 = 0, $27 = 0, $29 = 0, $32 = 0, $38 = 0, $40 = 0, $44 = 0, $55 = 0, $58 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $70 = 0, $72 = 0, $75 = 0, $8 = 0, $80 = 0, $i$09$i = 0, $u$08$i = 0, $x$07$i = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$a + 12 >> 2] | 0) <= 0) {
  $8 = $w + 12 | 0;
  if ((HEAP32[$8 >> 2] | 0) <= 127) {
   $12 = _ope($a) | 0;
   if (!$12) {
    $$0 = 0;
    return $$0 | 0;
   }
   $14 = $12 + 12 | 0;
   $15 = HEAP32[$14 >> 2] | 0;
   $16 = ($15 | 0) == 0;
   if ($16) $20 = 1; else $20 = HEAP32[$12 + 16 >> 2] | 0;
   $19 = HEAP32[$8 >> 2] | 0;
   if (($20 | 0) > ($19 | 0)) {
    _jsignal(9);
    $$0 = 0;
    return $$0 | 0;
   }
   if (($15 | 0) >= 2) {
    _jsignal(14);
    $$0 = 0;
    return $$0 | 0;
   }
   if (!$19) {
    $$0 = $w;
    return $$0 | 0;
   }
   if ($16) $26 = 1; else $26 = HEAP32[$12 + 16 >> 2] | 0;
   $27 = _sc($26) | 0;
   $29 = _ga(4, HEAP32[$8 >> 2] | 0, 1, 0) | 0;
   if (!$29) $$0$i2 = 0; else {
    $32 = HEAP32[$29 + 12 >> 2] | 0;
    _memcpy($29 + ($32 + 4 + ($32 & 1) << 2) | 0, $w + 16 | 0, HEAP32[$8 >> 2] << 2 | 0) | 0;
    $$0$i2 = $29;
   }
   $38 = _take($27, $$0$i2) | 0;
   if (!$38) {
    $$0 = 0;
    return $$0 | 0;
   }
   $40 = _ac2(400) | 0;
   $44 = _catalog(_df2($38, $12, _under($40, _ds(62) | 0) | 0) | 0) | 0;
   if (!$44) {
    $$0 = 0;
    return $$0 | 0;
   }
   if (!(HEAP32[$44 + 8 >> 2] | 0)) $55 = $44; else $55 = _base2($38, _ope($44) | 0) | 0;
   if (!(HEAP32[$14 >> 2] | 0)) $67 = 1; else $67 = HEAP32[$12 + 16 >> 2] | 0;
   if (!$55) $$0$i4 = 0; else {
    $58 = HEAP32[$55 + 12 >> 2] | 0;
    $61 = HEAP32[$55 + 8 >> 2] | 0;
    $62 = HEAP32[$8 >> 2] | 0;
    $64 = $w + ($62 + 4 + ($62 & 1) << 2) | 0;
    $65 = HEAP32[$w >> 2] | 0;
    $66 = $62 - $67 | 0;
    $$$i = ($66 | 0) < 0 ? 0 : $66;
    $69 = $w + 16 + ($67 << 2) | 0;
    $70 = _prod($$$i, $69) | 0;
    $72 = Math_imul(_bp($65) | 0, $70) | 0;
    $75 = _ga($65, Math_imul($70, $61) | 0, $$$i + $58 | 0, $55 + 16 | 0) | 0;
    if (!$75) $$0$i4 = 0; else {
     _memcpy($75 + 16 + ($58 << 2) | 0, $69 | 0, $$$i << 2 | 0) | 0;
     $80 = HEAP32[$75 + 12 >> 2] | 0;
     if (($61 | 0) > 0) {
      $i$09$i = 0;
      $u$08$i = $55 + ($58 + 4 + ($58 & 1) << 2) | 0;
      $x$07$i = $75 + ($80 + 4 + ($80 & 1) << 2) + (0 - $72) | 0;
      while (1) {
       $x$07$i = $x$07$i + $72 | 0;
       _memcpy($x$07$i | 0, $64 + (Math_imul(HEAP32[$u$08$i >> 2] | 0, $72) | 0) | 0, $72 | 0) | 0;
       $i$09$i = $i$09$i + 1 | 0;
       if (($i$09$i | 0) == ($61 | 0)) {
        $$0$i4 = $75;
        break;
       } else $u$08$i = $u$08$i + 4 | 0;
      }
     } else $$0$i4 = $75;
    }
   }
   $$0 = _gc($$0$i4, $2) | 0;
   return $$0 | 0;
  }
 }
 $$0 = _rank2ex($a, $w, 0, 0, 127, 399) | 0;
 return $$0 | 0;
}

function _matth1($w) {
 $w = $w | 0;
 var $$0$i = 0, $$sum4$i = 0, $0 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $39 = 0, $41 = 0, $45 = 0, $46 = 0, $48 = 0, $5 = 0, $56 = 0, $58 = 0, $62 = 0, $i$013$i = 0, $i1$09$i = 0, $i5$08$i = 0, $k$0$lcssa$i = 0, $k$015$i = 0, $k3$06$i = 0, $m$0$lcssa$i = 0, $m$014$i = 0, $v$011$i = 0, $x$010$i = 0, $x$1$lcssa$i = 0, $x$17$i = 0, label = 0;
 $0 = _thorn1($w) | 0;
 if (!$0) {
  $$0$i = 0;
  return $$0$i | 0;
 }
 $3 = HEAP32[$0 + 12 >> 2] | 0;
 $5 = $0 + ($3 + 4 + ($3 & 1) << 2) | 0;
 if (($3 | 0) > 1) {
  $15 = HEAP32[$0 + 16 + ($3 + -2 << 2) >> 2] | 0;
  label = 5;
 } else if (!$3) {
  $26 = 1;
  $33 = 1;
  $58 = 1;
  $62 = 0;
  $k$0$lcssa$i = 0;
  $m$0$lcssa$i = 1;
 } else {
  $15 = 1;
  label = 5;
 }
 if ((label | 0) == 5) {
  $13 = HEAP32[$0 + 16 + ($3 + -1 << 2) >> 2] | 0;
  $14 = Math_imul($13, $15) | 0;
  $16 = ($3 | 0) > 2;
  $18 = $16 ? 2 - $3 | 0 : 0;
  if ($16) {
   $19 = $3 + -2 | 0;
   $i$013$i = 0;
   $k$015$i = $18;
   $m$014$i = 1;
   while (1) {
    $22 = Math_imul(HEAP32[$0 + 16 + ($i$013$i << 2) >> 2] | 0, $m$014$i) | 0;
    $23 = $22 + $k$015$i | 0;
    $i$013$i = $i$013$i + 1 | 0;
    if (($i$013$i | 0) == ($19 | 0)) {
     $26 = $15;
     $33 = $13;
     $58 = $14;
     $62 = 1;
     $k$0$lcssa$i = $23;
     $m$0$lcssa$i = $22;
     break;
    } else {
     $k$015$i = $23;
     $m$014$i = $22;
    }
   }
  } else {
   $26 = $15;
   $33 = $13;
   $58 = $14;
   $62 = 0;
   $k$0$lcssa$i = $18;
   $m$0$lcssa$i = 1;
  }
 }
 $25 = Math_imul($m$0$lcssa$i, $26) | 0;
 $31 = (($26 | 0) != 0 & ($m$0$lcssa$i | 0) != 0 ? $k$0$lcssa$i : 0) + $25 | 0;
 $34 = _ga(2, Math_imul($31, $33) | 0, 2, 0) | 0;
 if (!$34) {
  $$0$i = 0;
  return $$0$i | 0;
 }
 HEAP32[$34 + 16 >> 2] = $31;
 HEAP32[$34 + 20 >> 2] = $33;
 $39 = HEAP32[$34 + 12 >> 2] | 0;
 $41 = $34 + ($39 + 4 + ($39 & 1) << 2) | 0;
 if ($62) _fillv(2, HEAP32[$34 + 8 >> 2] | 0, $41);
 if (($m$0$lcssa$i | 0) <= 0) {
  $$0$i = $34;
  return $$0$i | 0;
 }
 $$sum4$i = $3 + -2 | 0;
 $45 = $3 + -1 | 0;
 $i1$09$i = 0;
 $v$011$i = $5;
 $x$010$i = $41;
 while (1) {
  $46 = Math_imul($i1$09$i, $26) | 0;
  $48 = ($46 | 0) != 0 ? $45 : 0;
  if (($48 | 0) > 0) {
   $i5$08$i = 0;
   $k3$06$i = 1;
   $x$17$i = $x$010$i;
   while (1) {
    $k3$06$i = Math_imul(HEAP32[$0 + 16 + ($$sum4$i - $i5$08$i << 2) >> 2] | 0, $k3$06$i) | 0;
    $56 = $x$17$i + ((($46 | 0) % ($k3$06$i | 0) | 0 | 0) == 0 ? $33 : 0) | 0;
    $i5$08$i = $i5$08$i + 1 | 0;
    if (($i5$08$i | 0) == ($48 | 0)) {
     $x$1$lcssa$i = $56;
     break;
    } else $x$17$i = $56;
   }
  } else $x$1$lcssa$i = $x$010$i;
  _memcpy($x$1$lcssa$i | 0, $v$011$i | 0, $58 | 0) | 0;
  $i1$09$i = $i1$09$i + 1 | 0;
  if (($i1$09$i | 0) == ($m$0$lcssa$i | 0)) {
   $$0$i = $34;
   break;
  } else {
   $v$011$i = $v$011$i + $58 | 0;
   $x$010$i = $x$1$lcssa$i + $58 | 0;
  }
 }
 return $$0$i | 0;
}

function _fit($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$sum4 = 0, $11 = 0, $14 = 0, $17 = 0, $20 = 0, $24 = 0, $30 = 0.0, $34 = 0, $40 = 0.0, $57 = 0, $60 = 0, $9 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (HEAP32[$a >> 2] & 128) if (HEAP32[$w >> 2] & 127) {
  $9 = HEAP32[$a + 12 >> 2] | 0;
  $$sum4 = $9 + 4 + ($9 & 1) | 0;
  $11 = $a + ($$sum4 << 2) | 0;
  $14 = HEAPU8[$a + ($$sum4 + 7 << 2) >> 0] | 0;
  $17 = HEAPU8[$11 + 29 >> 0] | 0;
  $20 = HEAPU8[$11 + 30 >> 0] | 0;
  switch (HEAP8[$11 + 31 >> 0] | 0) {
  case -95:
  case -118:
  case -120:
  case 124:
  case -124:
  case -126:
  case 42:
  case -108:
  case -55:
  case -58:
  case -115:
  case 61:
  case -107:
  case -123:
  case -125:
   {
    $24 = _cvt(8, $w) | 0;
    if (!$24) {
     $$0 = 0;
     return $$0 | 0;
    }
    if (HEAP32[$24 + 12 >> 2] | 0) {
     _jsignal(14);
     $$0 = 0;
     return $$0 | 0;
    }
    $30 = +HEAPF64[$24 + 16 >> 3];
    if ($30 >= 0.0 & $30 <= 5.820766091e-11) {
     $$0 = _fdef(-74, 128, 287, 288, $a, $24, 0, 0, $14, $17, $20) | 0;
     return $$0 | 0;
    } else {
     _jsignal(3);
     $$0 = 0;
     return $$0 | 0;
    }
    break;
   }
  case 60:
   {
    $$0 = _fdef(-74, 128, 291, 290, $a, $w, 0, 0, $14, $17, $20) | 0;
    return $$0 | 0;
   }
  case -106:
   {
    $$0 = _fdef(-74, 128, 292, 293, $a, $w, 0, 0, $14, $17, $20) | 0;
    return $$0 | 0;
   }
  case 94:
   {
    $$0 = _fdef(-74, 128, 294, 295, $a, $w, 0, 0, $14, $17, $20) | 0;
    return $$0 | 0;
   }
  case -77:
   {
    if (HEAP32[$w + 12 >> 2] | 0) {
     _jsignal(14);
     $$0 = 0;
     return $$0 | 0;
    }
    $57 = _vi($w) | 0;
    if (!$57) {
     $$0 = 0;
     return $$0 | 0;
    }
    $60 = HEAP32[$57 + 12 >> 2] | 0;
    if (((HEAP32[$57 + ($60 + 4 + ($60 & 1) << 2) >> 2] | 0) + -1 | 0) >>> 0 < 20) {
     $$0 = _fdef(-74, 128, 297, HEAP32[$a + ($$sum4 + 1 << 2) >> 2] | 0, $a, $57, 0, 0, $14, $17, $20) | 0;
     return $$0 | 0;
    } else {
     _jsignal(3);
     $$0 = 0;
     return $$0 | 0;
    }
    break;
   }
  case 62:
   {
    $34 = _cvt(8, $w) | 0;
    if (!$34) {
     $$0 = 0;
     return $$0 | 0;
    }
    if (HEAP32[$34 + 12 >> 2] | 0) {
     _jsignal(14);
     $$0 = 0;
     return $$0 | 0;
    }
    $40 = +HEAPF64[$34 + 16 >> 3];
    if (!($40 == +HEAPF64[317])) if (!($40 >= 0.0 & $40 <= 5.820766091e-11)) {
     _jsignal(3);
     $$0 = 0;
     return $$0 | 0;
    }
    $$0 = _fdef(-74, 128, 289, 290, $a, $34, 0, 0, $14, $17, $20) | 0;
    return $$0 | 0;
   }
  case -84:
  case 35:
  case 36:
   {
    if (!(HEAP32[$w + 12 >> 2] | 0)) {
     $$0 = _fdef(-74, 128, HEAP32[$11 >> 2] | 0, 296, $a, $w, 0, 0, $14, $17, $20) | 0;
     return $$0 | 0;
    } else {
     _jsignal(14);
     $$0 = 0;
     return $$0 | 0;
    }
    break;
   }
  default:
   {
    _jsignal(3);
    $$0 = 0;
    return $$0 | 0;
   }
  }
 }
 _jsignal(3);
 $$0 = 0;
 return $$0 | 0;
}

function _bpv($m, $v, $x, $0) {
 $m = $m | 0;
 $v = $v | 0;
 $x = $x | 0;
 $0 = $0 | 0;
 var $$04 = 0, $$17 = 0, $10 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $24 = 0, $26 = 0, $29 = 0, $30 = 0, $34 = 0, $35 = 0, $36 = 0, $41 = 0, $46 = 0, $51 = 0, $56 = 0, $62 = 0, $68 = 0, $7 = 0, $77 = 0, $85 = 0, $b$03 = 0, $b$15 = 0, $i$02 = 0, $i1$06 = 0;
 do switch ($0 << 24 >> 24 | 0) {
 case 2:
  {
   $41 = _memchr($v, 0, $m) | 0;
   $46 = ($41 | 0) == 0 ? $m : $41 - $v | 0;
   _mvc($46, $x, 2, 137);
   _memset($x + $46 | 0, $46 & 1 | 0, $m - $46 | 0) | 0;
   return;
  }
 case 6:
  {
   _memcpy($x | 0, $v | 0, $m | 0) | 0;
   if (($m | 0) > 0) {
    $$04 = $x;
    $b$03 = 0;
    $i$02 = 0;
   } else return;
   while (1) {
    $77 = ($b$03 | 0) != (HEAP8[$$04 >> 0] | 0);
    HEAP8[$$04 >> 0] = $77 & 1;
    $i$02 = $i$02 + 1 | 0;
    if (($i$02 | 0) == ($m | 0)) break; else {
     $$04 = $$04 + 1 | 0;
     $b$03 = $77 & 1;
    }
   }
   return;
  }
 case 7:
  {
   $10 = _memchr($v, 1, $m) | 0;
   $15 = ($10 | 0) == 0 ? $m : $10 - $v | 0;
   _memset($x | 0, 0, $15 | 0) | 0;
   _memset($x + $15 | 0, 1, $m - $15 | 0) | 0;
   return;
  }
 case 1:
  {
   $2 = _memchr($v, 0, $m) | 0;
   $7 = ($2 | 0) == 0 ? $m : $2 - $v | 0;
   _memset($x | 0, 1, $7 | 0) | 0;
   _memset($x + $7 | 0, 0, $m - $7 | 0) | 0;
   return;
  }
 case 4:
  {
   _memset($x | 0, 0, $m | 0) | 0;
   $62 = _memchr($v, 1, $m) | 0;
   if (!$62) return;
   HEAP8[$x + ($62 - $v) >> 0] = 1;
   return;
  }
 case 14:
  {
   $18 = _memchr($v, 0, $m) | 0;
   $19 = ($18 | 0) != 0;
   $23 = $19 ? $18 - $v | 0 : $m;
   _mvc($23, $x, 2, 137);
   $24 = $x + $23 | 0;
   $26 = $23 & 1;
   _memset($24 | 0, $26 ^ 1 | 0, $m - $23 | 0) | 0;
   if (!$19) return;
   HEAP8[$24 >> 0] = $26;
   return;
  }
 case 9:
  {
   _memcpy($x | 0, $v | 0, $m | 0) | 0;
   if (($m | 0) > 0) {
    $$17 = $x;
    $b$15 = 1;
    $i1$06 = 0;
   } else return;
   while (1) {
    $85 = ($b$15 | 0) == (HEAP8[$$17 >> 0] | 0);
    HEAP8[$$17 >> 0] = $85 & 1;
    $i1$06 = $i1$06 + 1 | 0;
    if (($i1$06 | 0) == ($m | 0)) break; else {
     $$17 = $$17 + 1 | 0;
     $b$15 = $85 & 1;
    }
   }
   return;
  }
 case 11:
  {
   $51 = _memchr($v, 1, $m) | 0;
   $56 = ($51 | 0) == 0 ? $m : $51 - $v | 0;
   _mvc($56, $x, 2, 136);
   _memset($x + $56 | 0, ($56 & 1 ^ 1) & 255 | 0, $m - $56 | 0) | 0;
   return;
  }
 case 13:
  {
   _memset($x | 0, 1, $m | 0) | 0;
   $68 = _memchr($v, 0, $m) | 0;
   if (!$68) return;
   HEAP8[$x + ($68 - $v) >> 0] = 0;
   return;
  }
 case 8:
  {
   $29 = _memchr($v, 1, $m) | 0;
   $30 = ($29 | 0) != 0;
   $34 = $30 ? $29 - $v | 0 : $m;
   _mvc($34, $x, 2, 136);
   $35 = $x + $34 | 0;
   $36 = $34 & 1;
   _memset($35 | 0, $36 & 255 | 0, $m - $34 | 0) | 0;
   if (!$30) return;
   HEAP8[$35 >> 0] = $36 ^ 1;
   return;
  }
 default:
  return;
 } while (0);
}

function _cut02($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$pre$phiZ2D = 0, $$sum10 = 0, $$sum6 = 0, $$sum8 = 0, $1 = 0, $11 = 0, $12 = 0, $18 = 0, $22 = 0, $28 = 0, $33 = 0, $34 = 0, $37 = 0, $4 = 0, $40 = 0, $42 = 0, $45 = 0, $47 = 0, $58 = 0, $62 = 0, $66 = 0, $7 = 0, $71 = 0, $72 = 0, $77 = 0, $i$023 = 0, $i1$022 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $4 = HEAP32[$self + ($1 + 6 + ($1 & 1) << 2) >> 2] | 0;
 if (!$4) $77 = 0; else {
  $7 = HEAP32[$4 + 12 >> 2] | 0;
  $77 = HEAP32[$4 + ($7 + 4 + ($7 & 1) << 2) >> 2] | 0;
 }
 $11 = _lr($self) | 0;
 $12 = _rr($self) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($11 | 0) >= (HEAP32[$a + 12 >> 2] | 0)) {
  $18 = $w + 12 | 0;
  if (($12 | 0) >= (HEAP32[$18 >> 2] | 0)) {
   $22 = _vi($a) | 0;
   if (!$22) {
    $$0 = 0;
    return $$0 | 0;
   }
   if ((HEAP32[$22 + 12 >> 2] | 0) != 2) {
    _jsignal(14);
    $$0 = 0;
    return $$0 | 0;
   }
   $28 = HEAP32[$22 + 20 >> 2] | 0;
   $$sum6 = $28 + 6 | 0;
   if ((HEAP32[$22 + 16 >> 2] | 0) == 2) if (($28 | 0) <= (HEAP32[$18 >> 2] | 0)) {
    $33 = _shape($w) | 0;
    $34 = _rank($w) | 0;
    $37 = _rank2ex($33, _take($34, _head($22) | 0) | 0, 0, 0, 0, 282) | 0;
    if (!$37) {
     $$0 = 0;
     return $$0 | 0;
    }
    $40 = HEAP32[$37 + 12 >> 2] | 0;
    $$sum8 = $40 + 4 + ($40 & 1) | 0;
    $42 = _shape($w) | 0;
    if (!$42) {
     $$0 = 0;
     return $$0 | 0;
    }
    $45 = HEAP32[$42 + 12 >> 2] | 0;
    $$sum10 = $45 + 4 + ($45 & 1) | 0;
    $47 = ($28 | 0) > 0;
    L26 : do if ($47) {
     $i$023 = 0;
     do {
      HEAP32[$42 + ($i$023 + $$sum10 << 2) >> 2] = HEAP32[$22 + ($$sum6 + $i$023 << 2) >> 2];
      $i$023 = $i$023 + 1 | 0;
     } while (($i$023 | 0) != ($28 | 0));
     if ($47) {
      $i1$022 = 0;
      while (1) {
       if ((HEAP32[$22 + ($i1$022 + 6 << 2) >> 2] | 0) < 0) {
        $58 = HEAP32[$42 + ($i1$022 + $$sum10 << 2) >> 2] | 0;
        $62 = $37 + ($i1$022 + $$sum8 << 2) | 0;
        HEAP32[$62 >> 2] = (HEAP32[$62 >> 2] | 0) + 1 - (($58 | 0) > -1 ? $58 : 0 - $58 | 0);
        $$pre$phiZ2D = $62;
       } else $$pre$phiZ2D = $37 + ($i1$022 + $$sum8 << 2) | 0;
       $66 = HEAP32[$$pre$phiZ2D >> 2] | 0;
       if (($66 | 0) <= -1) break;
       if (($66 | 0) >= (HEAP32[$w + 16 + ($i1$022 << 2) >> 2] | 0)) break;
       $i1$022 = $i1$022 + 1 | 0;
       if (($i1$022 | 0) >= ($28 | 0)) break L26;
      }
      _jsignal(9);
      $$0 = 0;
      return $$0 | 0;
     }
    } while (0);
    $71 = _iota($42) | 0;
    $72 = _mag($42) | 0;
    $$0 = ftCall_iii($77 | 0, _from($71, _ravel(_take($72, _drop($37, $w) | 0) | 0) | 0) | 0, $4 | 0) | 0;
    return $$0 | 0;
   }
   _jsignal(9);
   $$0 = 0;
   return $$0 | 0;
  }
 }
 $$0 = _rank2ex($a, $w, $self, $11, $12, 278) | 0;
 return $$0 | 0;
}

function _zeq($u, $v) {
 $u = $u | 0;
 $v = $v | 0;
 var $$0 = 0, $$old = 0.0, $0 = 0.0, $100 = 0.0, $103 = 0.0, $105 = 0.0, $12 = 0.0, $2 = 0.0, $22 = 0.0, $3 = 0.0, $5 = 0.0, $59 = 0.0, $62 = 0.0, $63 = 0, $65 = 0.0, $72 = 0.0, $75 = 0.0, $76 = 0, $78 = 0.0, $83 = 0.0, $84 = 0.0, $87 = 0.0, $90 = 0.0, $91 = 0, $93 = 0.0, $99 = 0.0, $a$0 = 0.0, $a$1 = 0.0, $b$0 = 0.0, $b$1 = 0.0, $c$0 = 0.0, $c$1 = 0.0, $d$0 = 0.0, $d$1 = 0.0, $p$0$i = 0.0, $p$0$i12 = 0.0, $p$0$i7 = 0.0, label = 0;
 $0 = +HEAPF64[$u >> 3];
 $2 = +HEAPF64[$u + 8 >> 3];
 $3 = +HEAPF64[$v >> 3];
 $5 = +HEAPF64[$v + 8 >> 3];
 if ($0 == $3 & $2 == $5) {
  $$0 = 1;
  return $$0 | 0;
 }
 if (!($0 != 0.0 | $2 != 0.0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ($3 != 0.0) {
  $$old = +HEAPF64[52];
  if ($$old != 0.0) $103 = $$old; else {
   $$0 = 0;
   return $$0 | 0;
  }
 } else {
  $12 = +HEAPF64[52];
  if ($5 != 0.0 & $12 != 0.0) $103 = $12; else {
   $$0 = 0;
   return $$0 | 0;
  }
 }
 if ($0 < 0.0 ^ $3 < 0.0) if ($2 < 0.0 ^ $5 < 0.0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $22 = $0 >= 0.0 ? $0 : -$0;
 if ($22 > 8988465674311577542806216.0e283) label = 12; else if (($2 >= 0.0 ? $2 : -$2) > 8988465674311577542806216.0e283) label = 12; else if (($3 >= 0.0 ? $3 : -$3) > 8988465674311577542806216.0e283) label = 12; else if (($5 >= 0.0 ? $5 : -$5) > 8988465674311577542806216.0e283) label = 12; else {
  $a$0 = $0;
  $b$0 = $2;
  $c$0 = $3;
  $d$0 = $5;
 }
 if ((label | 0) == 12) {
  $a$0 = $0 * .5;
  $b$0 = $2 * .5;
  $c$0 = $3 * .5;
  $d$0 = $5 * .5;
 }
 if ($22 < 4.450147717014403e-308) label = 17; else if (($2 >= 0.0 ? $2 : -$2) < 4.450147717014403e-308) label = 17; else if (($3 >= 0.0 ? $3 : -$3) < 4.450147717014403e-308) label = 17; else if (($5 >= 0.0 ? $5 : -$5) < 4.450147717014403e-308) label = 17; else {
  $a$1 = $a$0;
  $b$1 = $b$0;
  $c$1 = $c$0;
  $d$1 = $d$0;
 }
 if ((label | 0) == 17) {
  $a$1 = $a$0 * 2.0;
  $b$1 = $b$0 * 2.0;
  $c$1 = $c$0 * 2.0;
  $d$1 = $d$0 * 2.0;
 }
 $59 = $a$1 >= 0.0 ? $a$1 : -$a$1;
 $62 = $b$1 >= 0.0 ? $b$1 : -$b$1;
 $63 = $59 < $62;
 $p$0$i = $63 ? $62 : $59;
 if ($p$0$i != 0.0) {
  $65 = ($63 ? $59 : $62) / $p$0$i;
  $100 = $p$0$i * +Math_sqrt(+($65 * $65 + 1.0));
 } else $100 = 0.0;
 $72 = $c$1 >= 0.0 ? $c$1 : -$c$1;
 $75 = $d$1 >= 0.0 ? $d$1 : -$d$1;
 $76 = $72 < $75;
 $p$0$i7 = $76 ? $75 : $72;
 if ($p$0$i7 != 0.0) {
  $78 = ($76 ? $72 : $75) / $p$0$i7;
  $99 = $p$0$i7 * +Math_sqrt(+($78 * $78 + 1.0));
 } else $99 = 0.0;
 $83 = $0 - $3;
 $84 = $2 - $5;
 $87 = $83 >= 0.0 ? $83 : -$83;
 $90 = $84 >= 0.0 ? $84 : -$84;
 $91 = $87 < $90;
 $p$0$i12 = $91 ? $90 : $87;
 if ($p$0$i12 != 0.0) {
  $93 = ($91 ? $87 : $90) / $p$0$i12;
  $105 = $p$0$i12 * +Math_sqrt(+($93 * $93 + 1.0));
 } else $105 = 0.0;
 $$0 = $105 <= ($100 > $99 ? $100 : $99) * $103 & 1;
 return $$0 | 0;
}

function _save1f($f) {
 $f = $f | 0;
 var $0 = 0, $10 = 0, $2 = 0, $22 = 0, $25 = 0, $27 = 0, $32 = 0, $35 = 0, $4 = 0, $40 = 0, $43 = 0, $45 = 0, $47 = 0, $52 = 0, $57 = 0, $6 = 0, $64 = 0, $68 = 0, $71 = 0, $d$0$lcssa = 0, $d$015 = 0, $d$1 = 0, $e$016 = 0, $e$112 = 0, $i$010 = 0, $i1$017 = 0, $k$09 = 0, $k$1 = 0, $n$0$lcssa = 0, $n$014 = 0, $n$1 = 0, $pv$013 = 0, $pv$1 = 0, $qv$011 = 0, $qv$1 = 0;
 $0 = HEAP32[892] | 0;
 $2 = HEAP32[$0 + 8 >> 2] | 0;
 $4 = HEAP32[$0 + 12 >> 2] | 0;
 $6 = $0 + ($4 + 4 + ($4 & 1) << 2) | 0;
 if (!(_wa($f, -1, _str(70, 8368) | 0) | 0)) return 0;
 $10 = ($2 | 0) > 0;
 if ($10) {
  $d$015 = 0;
  $e$016 = $6;
  $i1$017 = 0;
  $n$014 = 0;
  while (1) {
   if (!(HEAP32[$e$016 + 4 >> 2] | 0)) {
    $d$1 = $d$015;
    $n$1 = $n$014;
   } else {
    $d$1 = (HEAP32[(HEAP32[$e$016 >> 2] | 0) + 8 >> 2] | 0) + $d$015 | 0;
    $n$1 = $n$014 + 1 | 0;
   }
   $i1$017 = $i1$017 + 1 | 0;
   if (($i1$017 | 0) == ($2 | 0)) {
    $d$0$lcssa = $d$1;
    $n$0$lcssa = $n$1;
    break;
   } else {
    $d$015 = $d$1;
    $e$016 = $e$016 + 8 | 0;
    $n$014 = $n$1;
   }
  }
 } else {
  $d$0$lcssa = 0;
  $n$0$lcssa = 0;
 }
 $22 = _ga(2, $d$0$lcssa + $n$0$lcssa | 0, 1, 0) | 0;
 if (!$22) return 0;
 $25 = HEAP32[$22 + 12 >> 2] | 0;
 $27 = _ga(4, $n$0$lcssa * 3 | 0, 2, 0) | 0;
 HEAP32[2084] = $27;
 if (!$27) return 0;
 HEAP32[$27 + 16 >> 2] = $n$0$lcssa;
 HEAP32[$27 + 20 >> 2] = 3;
 $32 = HEAP32[$27 + 12 >> 2] | 0;
 $35 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 L17 : do if ($10) {
  $e$112 = $6;
  $i$010 = 0;
  $k$09 = 70;
  $pv$013 = $22 + ($25 + 4 + ($25 & 1) << 2) | 0;
  $qv$011 = $27 + ($32 + 4 + ($32 & 1) << 2) | 0;
  while (1) {
   $40 = $e$112 + 4 | 0;
   if (!(HEAP32[$40 >> 2] | 0)) {
    $k$1 = $k$09;
    $pv$1 = $pv$013;
    $qv$1 = $qv$011;
   } else {
    $43 = HEAP32[$e$112 >> 2] | 0;
    $45 = HEAP32[$43 + 8 >> 2] | 0;
    $47 = HEAP32[$43 + 12 >> 2] | 0;
    _memcpy($pv$013 | 0, $43 + ($47 + 4 + ($47 & 1) << 2) | 0, $45 | 0) | 0;
    HEAP8[$pv$013 + $45 >> 0] = 32;
    $52 = _srep($43, HEAP32[$40 >> 2] | 0) | 0;
    if (!(_wa($f, -1, $52) | 0)) break;
    HEAP32[$qv$011 >> 2] = $k$09;
    $57 = $52 + 8 | 0;
    HEAP32[$qv$011 + 4 >> 2] = HEAP32[$57 >> 2];
    HEAP32[$qv$011 + 8 >> 2] = HEAP32[HEAP32[$40 >> 2] >> 2];
    $64 = (HEAP32[$57 >> 2] | 0) + $k$09 | 0;
    _tpop($35) | 0;
    $k$1 = $64;
    $pv$1 = $pv$013 + ($45 + 1) | 0;
    $qv$1 = $qv$011 + 12 | 0;
   }
   $i$010 = $i$010 + 1 | 0;
   if (($i$010 | 0) >= ($2 | 0)) break L17; else {
    $e$112 = $e$112 + 8 | 0;
    $k$09 = $k$1;
    $pv$013 = $pv$1;
    $qv$011 = $qv$1;
   }
  }
  return 0;
 } while (0);
 $68 = _words($22) | 0;
 HEAP32[2088] = $68;
 if (!$68) return 0; else {
  $71 = (_wrdir($f) | 0) == 0;
  return ($71 ? 0 : HEAP32[646] | 0) | 0;
 }
 return 0;
}

function _copy2f($f, $w) {
 $f = $f | 0;
 $w = $w | 0;
 var $$0 = 0, $$0$i57 = 0, $$sum1$i2 = 0, $$sum2$i = 0, $11 = 0, $12 = 0, $15 = 0, $17 = 0, $20 = 0, $24 = 0, $3 = 0, $30 = 0, $32 = 0, $36 = 0, $45 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $8 = 0, $i$010$i = 0, $i$03$i = 0, $j$011$i = 0, $j$1$i = 0, $j$1$i$lcssa = 0, $k$012$i = 0, $m$013$i = 0, $m$1$i = 0, $m$1$i$lcssa = 0, $qv$02$i = 0, label = 0;
 if (!(_ung() | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $3 = _ii(HEAP32[2084] | 0) | 0;
 $5 = _indexof(HEAP32[2088] | 0, $w) | 0;
 $6 = _eps($3, $5) | 0;
 $8 = _repeat($6, HEAP32[2084] | 0) | 0;
 $11 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $12 = _grade2($8, $8) | 0;
 if (!$12) {
  $$0 = 0;
  return $$0 | 0;
 }
 $15 = HEAP32[$12 + 16 >> 2] | 0;
 $17 = HEAP32[$12 + 20 >> 2] | 0;
 do if (($15 | 0) < 2) {
  $$0$i57 = $12;
  $49 = $15;
 } else {
  $20 = HEAP32[$12 + 12 >> 2] | 0;
  $$sum1$i2 = $20 + 4 + ($20 & 1) | 0;
  $$sum2$i = $$sum1$i2 + 1 | 0;
  $i$010$i = 1;
  $j$011$i = 0;
  $k$012$i = $17;
  $m$013$i = HEAP32[$12 + ($$sum2$i << 2) >> 2] | 0;
  while (1) {
   $24 = $12 + ($k$012$i + $$sum1$i2 << 2) | 0;
   $30 = $12 + ($k$012$i + $$sum2$i << 2) | 0;
   if ((HEAP32[$24 >> 2] | 0) == ((HEAP32[$12 + ($j$011$i + $$sum1$i2 << 2) >> 2] | 0) + $m$013$i | 0)) {
    $32 = (HEAP32[$30 >> 2] | 0) + $m$013$i | 0;
    if (($32 | 0) > 32e3) label = 7; else {
     $j$1$i = $j$011$i;
     $m$1$i = $32;
    }
   } else label = 7;
   if ((label | 0) == 7) {
    label = 0;
    HEAP32[$12 + ($j$011$i + $$sum2$i << 2) >> 2] = $m$013$i;
    $36 = $j$011$i + $17 | 0;
    HEAP32[$12 + ($36 + $$sum1$i2 << 2) >> 2] = HEAP32[$24 >> 2];
    $j$1$i = $36;
    $m$1$i = HEAP32[$30 >> 2] | 0;
   }
   $i$010$i = $i$010$i + 1 | 0;
   if (($i$010$i | 0) == ($15 | 0)) {
    $j$1$i$lcssa = $j$1$i;
    $m$1$i$lcssa = $m$1$i;
    break;
   } else {
    $j$011$i = $j$1$i;
    $k$012$i = $k$012$i + $17 | 0;
    $m$013$i = $m$1$i;
   }
  }
  HEAP32[$12 + ($j$1$i$lcssa + $$sum2$i << 2) >> 2] = $m$1$i$lcssa;
  $45 = _take(_sc((($j$1$i$lcssa | 0) / ($17 | 0) | 0) + 1 | 0) | 0, $12) | 0;
  if (!$45) {
   $$0 = 0;
   return $$0 | 0;
  } else {
   $$0$i57 = $45;
   $49 = HEAP32[$45 + 16 >> 2] | 0;
   break;
  }
 } while (0);
 $48 = HEAP32[$$0$i57 + 12 >> 2] | 0;
 L21 : do if (($49 | 0) > 0) {
  $i$03$i = 0;
  $qv$02$i = $$0$i57 + ($48 + 4 + ($48 & 1) << 2) | 0;
  while (1) {
   if (!(_unsr(_rd($f, HEAP32[$qv$02$i >> 2] | 0, HEAP32[$qv$02$i + 4 >> 2] | 0) | 0) | 0)) {
    $$0 = 0;
    break;
   }
   _tpop($11) | 0;
   $i$03$i = $i$03$i + 1 | 0;
   if (($i$03$i | 0) >= ($49 | 0)) break L21; else $qv$02$i = $qv$02$i + 12 | 0;
  }
  return $$0 | 0;
 } while (0);
 if (!(HEAP32[646] | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = _lt($5, _tally(HEAP32[2088] | 0) | 0) | 0;
 return $$0 | 0;
}

function _troot($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$0$i = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $29 = 0, $3 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $45 = 0, $5 = 0, $52 = 0, $56 = 0, $59 = 0, $61 = 0, $66 = 0, $68 = 0, $7 = 0, $75 = 0, $76 = 0, $i$0$lcssa = 0, $i$0$lcssa27 = 0, $i$016 = 0, $i1$0$lcssa = 0, $i1$013 = 0, $u$017 = 0, $u$112 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $3 = HEAP32[$a + 8 >> 2] | 0;
 $5 = HEAP32[$a + 12 >> 2] | 0;
 $7 = $a + ($5 + 4 + ($5 & 1) << 2) | 0;
 if (!$3) $12 = 1; else $12 = ((HEAP8[$7 >> 0] | 0) + -48 & 255) < 10;
 $14 = _ga(2, $12 ? 1 : $3 + 4 | 0, 1, 0) | 0;
 if (!$14) {
  $$0 = 0;
  return $$0 | 0;
 }
 $16 = $14 + 12 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 $19 = $14 + ($17 + 4 + ($17 & 1) << 2) | 0;
 HEAP8[$19 >> 0] = HEAP8[3520] | 0;
 if (!$12) {
  HEAP8[$19 + ($3 + 3) >> 0] = HEAP8[3520] | 0;
  HEAP8[$19 + ($3 + 2) >> 0] = 32;
  HEAP8[$19 + 1 >> 0] = 32;
  _memcpy($19 + 2 | 0, $7 | 0, $3 | 0) | 0;
 }
 $29 = HEAP32[$w + 12 >> 2] | 0;
 $32 = HEAP32[$w + ($29 + 4 + ($29 & 1) << 2) >> 2] | 0;
 $34 = HEAP32[$32 + 16 >> 2] | 0;
 $36 = HEAP32[$32 + 20 >> 2] | 0;
 $38 = HEAP32[$32 + 12 >> 2] | 0;
 $39 = ($34 | 0) > 0;
 L13 : do if ($39) {
  $i$016 = 0;
  $u$017 = $32 + ($38 + 4 + ($38 & 1) << 2) | 0;
  while (1) {
   if ((HEAP8[$u$017 >> 0] | 0) != 32) {
    $i$0$lcssa = $i$016;
    break;
   }
   $45 = $i$016 + 1 | 0;
   if (($45 | 0) < ($34 | 0)) {
    $i$016 = $45;
    $u$017 = $u$017 + $36 | 0;
   } else {
    $i$0$lcssa = $45;
    break;
   }
  }
  if ($39) {
   $52 = 0 - $36 | 0;
   $i1$013 = 0;
   $u$112 = $32 + ($38 + 4 + ($38 & 1) << 2) + (Math_imul($34 + -1 | 0, $36) | 0) | 0;
   while (1) {
    if ((HEAP8[$u$112 >> 0] | 0) != 32) {
     $i$0$lcssa27 = $i$0$lcssa;
     $i1$0$lcssa = $i1$013;
     break L13;
    }
    $56 = $i1$013 + 1 | 0;
    if (($56 | 0) < ($34 | 0)) {
     $i1$013 = $56;
     $u$112 = $u$112 + $52 | 0;
    } else {
     $i$0$lcssa27 = $i$0$lcssa;
     $i1$0$lcssa = $56;
     break;
    }
   }
  } else {
   $i$0$lcssa27 = $i$0$lcssa;
   $i1$0$lcssa = 0;
  }
 } else {
  $i$0$lcssa27 = 0;
  $i1$0$lcssa = 0;
 } while (0);
 $59 = HEAP32[$14 + 8 >> 2] | 0;
 $61 = _ga(2, Math_imul($59, $34) | 0, 2, 0) | 0;
 if (!$61) $$0$i = 0; else {
  HEAP32[$61 + 16 >> 2] = $34;
  HEAP32[$61 + 20 >> 2] = $59;
  $66 = HEAP32[$61 + 12 >> 2] | 0;
  $68 = $61 + ($66 + 4 + ($66 & 1) << 2) | 0;
  _memset($68 | 0, 32, HEAP32[$61 + 8 >> 2] | 0) | 0;
  $75 = $68 + (Math_imul((($34 - $i$0$lcssa27 - $i1$0$lcssa | 0) / 2 | 0) + $i$0$lcssa27 | 0, $59) | 0) | 0;
  $76 = HEAP32[$16 >> 2] | 0;
  _memcpy($75 | 0, $14 + ($76 + 4 + ($76 & 1) << 2) | 0, $59 | 0) | 0;
  $$0$i = $61;
 }
 $$0 = _link($$0$i, $w) | 0;
 return $$0 | 0;
}

function _zatanh($agg$result, $v$0, $v$1) {
 $agg$result = $agg$result | 0;
 $v$0 = +$v$0;
 $v$1 = +$v$1;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $14 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $22 = 0.0, $3 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $4 = 0.0, $41 = 0.0, $45 = 0.0, $47 = 0, $49 = 0.0, $5 = 0.0, $51 = 0.0, $53 = 0.0, $6 = 0.0, $62 = 0, $7 = 0.0, $a$0$i = 0.0, $b$0$i = 0.0, $c$0$i = 0.0, $d$0$i = 0.0, $zi$0$i = 0.0, $zi$0$i6 = 0.0, $zr$0$i = 0.0, $zr$0$i7 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp;
 $2 = +HEAPF64[972];
 $3 = +HEAPF64[973];
 $4 = $2 + $v$0;
 $5 = $3 + $v$1;
 $6 = $2 - $v$0;
 $7 = $3 - $v$1;
 do if ($6 != 0.0 | $7 != 0.0) {
  $14 = -$7;
  if (($6 >= 0.0 ? $6 : -$6) < ($7 >= 0.0 ? $7 : $14)) {
   $a$0$i = -$5;
   $b$0$i = $4;
   $c$0$i = $14;
   $d$0$i = $6;
  } else {
   $a$0$i = $4;
   $b$0$i = $5;
   $c$0$i = $6;
   $d$0$i = $7;
  }
  $18 = $a$0$i / $c$0$i;
  $19 = $b$0$i / $c$0$i;
  $20 = $d$0$i / $c$0$i;
  $22 = $20 * $20 + 1.0;
  $zi$0$i6 = ($19 - $18 * $20) / $22;
  $zr$0$i7 = ($18 + $19 * $20) / $22;
 } else if ($4 != 0.0 | $5 != 0.0) {
  $36 = ($4 < 0.0 & 1) << 1 | $5 < 0.0;
  if (!$36) {
   $37 = $4 > $5;
   $38 = +HEAPF64[317];
   $zi$0$i6 = $37 ? 0.0 : $38;
   $zr$0$i7 = $37 ? $38 : 0.0;
   break;
  } else if (($36 | 0) == 3) {
   $47 = $4 < $5;
   $49 = -+HEAPF64[317];
   $zi$0$i6 = $47 ? 0.0 : $49;
   $zr$0$i7 = $47 ? $49 : 0.0;
   break;
  } else if (($36 | 0) == 1) {
   $41 = +HEAPF64[317];
   if ($4 > -$5) {
    $zi$0$i6 = 0.0;
    $zr$0$i7 = $41;
    break;
   }
   $zi$0$i6 = -$41;
   $zr$0$i7 = 0.0;
   break;
  } else if (($36 | 0) == 2) {
   $45 = +HEAPF64[317];
   if (!($4 < -$5)) {
    $zi$0$i6 = $45;
    $zr$0$i7 = 0.0;
    break;
   }
   $zi$0$i6 = 0.0;
   $zr$0$i7 = -$45;
   break;
  } else {
   $zi$0$i6 = 0.0;
   $zr$0$i7 = 0.0;
   break;
  }
 } else {
  $zi$0$i6 = 0.0;
  $zr$0$i7 = 0.0;
 } while (0);
 HEAPF64[$1 >> 3] = $zr$0$i7;
 HEAPF64[$1 + 8 >> 3] = $zi$0$i6;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$1 + 12 >> 2];
 _zlog($0, $$byval_copy);
 $51 = +HEAPF64[$0 >> 3];
 $53 = +HEAPF64[$0 + 8 >> 3];
 if (!($51 != 0.0 | $53 != 0.0)) {
  $zi$0$i = 0.0;
  $zr$0$i = 0.0;
  HEAPF64[$agg$result >> 3] = $zr$0$i;
  $62 = $agg$result + 8 | 0;
  HEAPF64[$62 >> 3] = $zi$0$i;
  STACKTOP = sp;
  return;
 }
 $zi$0$i = $51 * 0.0 + $53 * .5;
 $zr$0$i = $51 * .5 - $53 * 0.0;
 HEAPF64[$agg$result >> 3] = $zr$0$i;
 $62 = $agg$result + 8 | 0;
 HEAPF64[$62 >> 3] = $zi$0$i;
 STACKTOP = sp;
 return;
}

function _lp($w) {
 $w = $w | 0;
 var $$0 = 0, $$lcssa = 0, $$lcssa45 = 0, $$sum2 = 0, $2 = 0, $27 = 0, $29 = 0, $31 = 0, $35 = 0, $4 = 0, $43 = 0, $46 = 0, $6 = 0, $7 = 0, $9 = 0, $i$08 = 0, $i1$015 = 0, $i3$022 = 0, $j$021 = 0, $j$1 = 0, $p$014 = 0, $switch$cast = 0, $v$07 = 0, $v$113 = 0, $v$220 = 0, label = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 8 >> 2] | 0;
 $4 = HEAP32[$w + 12 >> 2] | 0;
 $6 = $w + ($4 + 4 + ($4 & 1) << 2) | 0;
 $7 = HEAP8[$6 >> 0] | 0;
 $$sum2 = $2 + -1 | 0;
 $9 = HEAP8[$6 + $$sum2 >> 0] | 0;
 if (($2 | 0) == 1) {
  $$0 = 0;
  return $$0 | 0;
 } else if (($2 | 0) == 2) label = 4; else if (($2 | 0) < 4 & $7 << 24 >> 24 == 32) label = 4;
 if ((label | 0) == 4) if ($9 << 24 >> 24 == 58 | $9 << 24 >> 24 == 46) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((_vnm($2, $6) | 0) << 24 >> 24) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP8[5792 + ($7 << 24 >> 24) >> 0] | 0) == 5) {
  if (($2 | 0) > 0) {
   $i$08 = 0;
   $v$07 = $6;
  } else {
   $$0 = 1;
   return $$0 | 0;
  }
  while (1) {
   $switch$cast = (HEAP8[5792 + (HEAP8[$v$07 >> 0] | 0) >> 0] | 0) + -1 << 24 >> 24;
   if (($switch$cast & 255) >= 6) {
    $$0 = 1;
    label = 22;
    break;
   }
   $27 = 51 >>> ($switch$cast & 63) & 1;
   $29 = $27 & 63 ^ 1;
   $i$08 = $i$08 + 1 | 0;
   if (!($27 & 63)) {
    $$0 = $29;
    label = 22;
    break;
   }
   if (($i$08 | 0) >= ($2 | 0)) {
    $$0 = $29;
    label = 22;
    break;
   } else $v$07 = $v$07 + 1 | 0;
  }
  if ((label | 0) == 22) return $$0 | 0;
 }
 if ($7 << 24 >> 24 == 40) {
  if (($2 | 0) > 1) {
   $i3$022 = 0;
   $j$021 = 0;
   $v$220 = $6;
  } else {
   $$0 = 1;
   return $$0 | 0;
  }
  while (1) {
   $43 = HEAP8[$v$220 >> 0] | 0;
   $v$220 = $v$220 + 1 | 0;
   if ($43 << 24 >> 24 == 40) $j$1 = $j$021 + 1 | 0; else if ($43 << 24 >> 24 == 41) $j$1 = $j$021 + -1 | 0; else $j$1 = $j$021;
   $46 = ($j$1 | 0) == 0;
   $i3$022 = $i3$022 + 1 | 0;
   if (!(($i3$022 | 0) < ($$sum2 | 0) & ($46 ^ 1))) {
    $$lcssa45 = $46;
    break;
   } else $j$021 = $j$1;
  }
  $$0 = $$lcssa45 & 1;
  return $$0 | 0;
 } else if ($7 << 24 >> 24 == 39) {
  if (($2 | 0) > 1) {
   $i1$015 = 0;
   $p$014 = 0;
   $v$113 = $6;
  } else {
   $$0 = 1;
   return $$0 | 0;
  }
  while (1) {
   $31 = HEAP8[$v$113 >> 0] | 0;
   $p$014 = $31 << 24 >> 24 == 39 ? $p$014 << 24 >> 24 == 0 & 1 : $p$014;
   $35 = $31 << 24 >> 24 != 39;
   if (!($p$014 << 24 >> 24 != 0 | $35 ^ 1)) {
    $$lcssa = $35;
    break;
   }
   $i1$015 = $i1$015 + 1 | 0;
   if (($i1$015 | 0) >= ($$sum2 | 0)) {
    $$0 = 0;
    label = 22;
    break;
   } else $v$113 = $v$113 + 1 | 0;
  }
  if ((label | 0) == 22) return $$0 | 0;
  $$0 = $$lcssa & 1;
  return $$0 | 0;
 } else {
  $$0 = 1;
  return $$0 | 0;
 }
 return 0;
}

function _debug() {
 var $0 = 0, $1 = 0, $11 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $24 = 0, $25 = 0, $27 = 0, $3 = 0, $31 = 0, $35 = 0, $36 = 0, $40 = 0, $42 = 0, $47 = 0, $51 = 0, $52 = 0, $56 = 0, $58 = 0, $60 = 0, $63 = 0, $8 = 0, $si$07 = 0;
 $0 = HEAP32[2112] | 0;
 $1 = HEAP32[2116] | 0;
 $2 = HEAP32[2114] | 0;
 $3 = HEAP32[108] | 0;
 if (!(($3 | 0) != 0 & (HEAP8[440] | 0) != 0)) return;
 $8 = HEAP32[$3 + 24 >> 2] | 0;
 do if (($8 | 0) == 1) {
  $11 = HEAP32[$3 + 20 >> 2] | 0;
  if (!$11) return; else {
   $15 = HEAP32[$11 + 24 >> 2] | 0;
   $si$07 = $11;
   break;
  }
 } else {
  $15 = $8;
  $si$07 = $3;
 } while (0);
 if (($15 & -2 | 0) != 2) return;
 $16 = HEAP8[2472] | 0;
 HEAP8[2472] = 0;
 $17 = _ga(4, 6, 1, 0) | 0;
 if (!$17) {
  HEAP8[440] = 0;
  _jsignal(19);
  return;
 }
 HEAP32[$17 + 24 >> 2] = 4;
 HEAP32[$17 + 20 >> 2] = HEAP32[108];
 HEAP32[108] = $17;
 HEAP32[$17 + 28 >> 2] = $16 << 24 >> 24;
 $24 = HEAP32[$si$07 + 24 >> 2] | 0;
 do if (($24 | 0) == 2) {
  $25 = _scnm(-110) | 0;
  $27 = _srd($25, HEAP32[894] | 0) | 0;
  $31 = _over(_sc(HEAP32[$si$07 + 28 >> 2] | 0) | 0, $27) | 0;
  _symbis($25, $31, HEAP32[894] | 0) | 0;
  $35 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
  $36 = HEAP8[440] | 0;
  HEAP8[480] = $36;
  HEAP32[2112] = 0;
  if (!($36 << 24 >> 24)) $40 = 0; else {
   do {
    _immex(_jgets(488) | 0) | 0;
    HEAP8[2472] = 0;
    _tpop($35) | 0;
   } while ((HEAP8[480] | 0) != 0);
   $40 = HEAP8[440] | 0;
  }
  HEAP8[480] = $40;
  HEAP32[2112] = $0;
  HEAP32[2116] = $1;
  HEAP32[2114] = $2;
  $42 = HEAP8[496] | 0;
  if (($42 | 0) == 5) {
   $47 = _behead($31) | 0;
   _symbis($25, $47, HEAP32[894] | 0) | 0;
   break;
  } else if (($42 | 0) == 3) {
   _symbis($25, HEAP32[616] | 0, HEAP32[894] | 0) | 0;
   break;
  } else if (($42 | 0) == 2) {
   _symbis($25, HEAP32[616] | 0, HEAP32[894] | 0) | 0;
   break;
  } else break;
 } else if (($24 | 0) == 3) {
  $51 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
  $52 = HEAP8[440] | 0;
  HEAP8[480] = $52;
  HEAP32[2112] = 0;
  if (!($52 << 24 >> 24)) $56 = 0; else {
   do {
    _immex(_jgets(488) | 0) | 0;
    HEAP8[2472] = 0;
    _tpop($51) | 0;
   } while ((HEAP8[480] | 0) != 0);
   $56 = HEAP8[440] | 0;
  }
  HEAP8[480] = $56;
  HEAP32[2112] = $0;
  HEAP32[2116] = $1;
  HEAP32[2114] = $2;
  $58 = HEAP8[496] | 0;
  if (($58 | 0) == 1) {
   HEAP32[2112] = $2;
   break;
  } else if (($58 | 0) == 2) {
   _fa(HEAP32[114] | 0) | 0;
   HEAP32[114] = 0;
  } else if (($58 | 0) != 3) break;
  HEAP32[2112] = 0;
 } while (0);
 HEAP8[496] = 0;
 $60 = HEAP32[108] | 0;
 if ($60) {
  $63 = HEAP32[$60 + 20 >> 2] | 0;
  HEAP32[108] = $63;
  if ($63) return;
 }
 HEAP8[440] = HEAP8[472] | 0;
 HEAP8[448] = 0;
 return;
}

function _qq($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$04 = 0, $$off = 0, $$sum16 = 0, $$sum5 = 0, $$sum7 = 0, $11 = 0, $14 = 0, $17 = 0, $2 = 0, $25 = 0.0, $26 = 0, $36 = 0.0, $37 = 0, $47 = 0.0, $49 = 0, $5 = 0, $55 = 0, $58 = 0, $63 = 0, $68 = 0, $7 = 0, $73 = 0, $78 = 0, $81 = 0, $91 = 0, $r$sroa$0$0 = 0, $r$sroa$3$0 = 0, $r$sroa$6$0 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = _apv(3, 0, 0) | 0;
 if (!$2) {
  $$0 = 0;
  return $$0 | 0;
 }
 $5 = HEAP32[$2 + 12 >> 2] | 0;
 $$sum5 = $5 + 4 + ($5 & 1) | 0;
 $7 = $2 + ($$sum5 << 2) | 0;
 do if (!(HEAP32[$w >> 2] & 128)) {
  $49 = HEAP32[$w + 8 >> 2] | 0;
  if ((HEAP32[$w + 12 >> 2] | 0) >= 2) {
   _jsignal(14);
   $$0 = 0;
   return $$0 | 0;
  }
  $$off = $49 + -1 | 0;
  if ($$off >>> 0 >= 3) {
   _jsignal(9);
   $$0 = 0;
   return $$0 | 0;
  }
  $55 = _vib(_sc(127) | 0, $w) | 0;
  if (!$55) {
   $$0 = 0;
   return $$0 | 0;
  } else {
   $58 = HEAP32[$55 + 12 >> 2] | 0;
   $$sum7 = $58 + 4 + ($58 & 1) | 0;
   $63 = HEAP32[$55 + ($$sum7 + (($49 | 0) == 2 & 1) << 2) >> 2] | 0;
   HEAP32[$7 >> 2] = $63;
   $68 = HEAP32[$55 + ($$sum7 + (($49 | 0) == 3 & 1) << 2) >> 2] | 0;
   HEAP32[$2 + ($$sum5 + 1 << 2) >> 2] = $68;
   $73 = HEAP32[$55 + ($$off + $$sum7 << 2) >> 2] | 0;
   HEAP32[$2 + ($$sum5 + 2 << 2) >> 2] = $73;
   $$04 = $w;
   $r$sroa$0$0 = ($63 | 0) < 0 ? 127 : $63;
   $r$sroa$3$0 = ($68 | 0) < 0 ? 127 : $68;
   $r$sroa$6$0 = ($73 | 0) < 0 ? 127 : $73;
   break;
  }
 } else {
  $11 = _ga(8, 3, 1, 0) | 0;
  if (!$11) {
   $$0 = 0;
   return $$0 | 0;
  }
  $14 = HEAP32[$11 + 12 >> 2] | 0;
  $$sum16 = $14 + 4 + ($14 & 1) | 0;
  $17 = _mr($w) | 0;
  HEAP32[$7 >> 2] = $17;
  if (($17 | 0) < -126) $25 = -+HEAPF64[317]; else $25 = ($17 | 0) > 126 ? +HEAPF64[317] : +($17 | 0);
  HEAPF64[$11 + ($$sum16 << 2) >> 3] = $25;
  $26 = _lr($w) | 0;
  HEAP32[$2 + ($$sum5 + 1 << 2) >> 2] = $26;
  if (($26 | 0) < -126) $36 = -+HEAPF64[317]; else $36 = ($26 | 0) > 126 ? +HEAPF64[317] : +($26 | 0);
  HEAPF64[$11 + ($$sum16 + 2 << 2) >> 3] = $36;
  $37 = _rr($w) | 0;
  HEAP32[$2 + ($$sum5 + 2 << 2) >> 2] = $37;
  if (($37 | 0) < -126) $47 = -+HEAPF64[317]; else $47 = ($37 | 0) > 126 ? +HEAPF64[317] : +($37 | 0);
  HEAPF64[$11 + ($$sum16 + 4 << 2) >> 3] = $47;
  $$04 = $11;
  $r$sroa$0$0 = $17;
  $r$sroa$3$0 = $26;
  $r$sroa$6$0 = $37;
 } while (0);
 $78 = (HEAP32[$a >> 2] & 127 | 0) != 0;
 if ($78) $91 = 320; else {
  $81 = HEAP32[$a + 12 >> 2] | 0;
  $91 = (HEAP8[6304 + (HEAPU8[$a + ($81 + 4 + ($81 & 1) << 2) + 31 >> 0] | 0) >> 0] | 0) != 0 ? 319 : 318;
 }
 $$0 = _fdef(34, 128, $78 ? 317 : 316, $91, $a, $$04, $2, 0, $r$sroa$0$0, $r$sroa$3$0, $r$sroa$6$0) | 0;
 return $$0 | 0;
}

function _connum($n, $s) {
 $n = $n | 0;
 $s = $s | 0;
 var $$0 = 0, $$sum3 = 0, $10 = 0, $13 = 0, $16 = 0, $2 = 0, $22 = 0, $3 = 0, $34 = 0, $45 = 0, $46 = 0, $47 = 0, $50 = 0, $54 = 0, $57 = 0, $6 = 0, $62 = 0, $63 = 0, $65 = 0, $8 = 0, $d$015 = 0, $d$1 = 0, $d$1$lcssa = 0, $d$2 = 0, $i$017 = 0, $i1$013 = 0, $p$016 = 0, $phitmp5$ = 0, $v$014 = 0, $v$112 = 0, $p$016$looptemp = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $3 = _str($n, $s) | 0;
 if (!$3) {
  $$0 = 0;
  return $$0 | 0;
 }
 $6 = HEAP32[$3 + 12 >> 2] | 0;
 $8 = $3 + ($6 + 4 + ($6 & 1) << 2) | 0;
 $10 = _ga(4, $n + 1 | 0, 1, 0) | 0;
 if (!$10) {
  $$0 = 0;
  return $$0 | 0;
 }
 $13 = HEAP32[$10 + 12 >> 2] | 0;
 $$sum3 = $13 + 4 + ($13 & 1) | 0;
 if (($n | 0) > 0) {
  $d$015 = 0;
  $i$017 = 0;
  $p$016 = 1;
  $v$014 = $8;
  while (1) {
   $16 = HEAP8[$v$014 >> 0] | 0;
   if ($16 << 24 >> 24 == 95) $22 = 45; else $22 = $16 << 24 >> 24 == 9 ? 32 : $16 << 24 >> 24;
   HEAP8[$v$014 >> 0] = $22;
   $p$016$looptemp = $p$016;
   $p$016 = ($22 | 0) == 32 & 1;
   if (($p$016$looptemp | 0) == ($p$016 | 0)) $d$1 = $d$015; else {
    HEAP32[$10 + ($d$015 + $$sum3 << 2) >> 2] = $i$017;
    $d$1 = $d$015 + 1 | 0;
   }
   $i$017 = $i$017 + 1 | 0;
   if (($i$017 | 0) == ($n | 0)) {
    $d$1$lcssa = $d$1;
    break;
   } else {
    $d$015 = $d$1;
    $v$014 = $v$014 + 1 | 0;
   }
  }
  if (!($d$1$lcssa & 1)) $d$2 = $d$1$lcssa; else {
   HEAP32[$10 + ($d$1$lcssa + $$sum3 << 2) >> 2] = $n;
   $d$2 = $d$1$lcssa + 1 | 0;
  }
 } else $d$2 = 0;
 $34 = ($d$2 | 0) / 2 | 0;
 if (!(_memchr($8, 98, $n) | 0)) if (!(_memchr($8, 112, $n) | 0)) $45 = (_memchr($8, 120, $n) | 0) != 0 & 1; else $45 = 1; else $45 = 1;
 if (!(_memchr($8, 106, $n) | 0)) $47 = (_memchr($8, 97, $n) | 0) != 0 & 1; else $47 = 1;
 $46 = ($45 | 0) != 0;
 $phitmp5$ = $47 << 24 >> 24 == 0 ? ($46 ? 16 : 8) : 16;
 $50 = _bp($phitmp5$) | 0;
 $54 = _ga($phitmp5$, $34, ($d$2 & -2 | 0) != 2 & 1, 0) | 0;
 if (!$54) {
  $$0 = 0;
  return $$0 | 0;
 }
 $57 = HEAP32[$54 + 12 >> 2] | 0;
 L29 : do if (($d$2 | 0) > 1) {
  $62 = $46 ? 403 : $47 << 24 >> 24 != 0 ? 402 : 401;
  $i1$013 = 0;
  $v$112 = $54 + ($57 + 4 + ($57 & 1) << 2) | 0;
  while (1) {
   $63 = $i1$013 << 1;
   $65 = HEAP32[$10 + ($63 + $$sum3 << 2) >> 2] | 0;
   if (!((ftCall_iiii($62 | 0, (HEAP32[$10 + (($63 | 1) + $$sum3 << 2) >> 2] | 0) - $65 | 0, $8 + $65 | 0, $v$112 | 0) | 0) << 24 >> 24)) {
    $$0 = 0;
    break;
   }
   $i1$013 = $i1$013 + 1 | 0;
   if (($i1$013 | 0) >= ($34 | 0)) break L29; else $v$112 = $v$112 + $50 | 0;
  }
  return $$0 | 0;
 } while (0);
 $$0 = _gc(_xcvt($54) | 0, $2) | 0;
 return $$0 | 0;
}

function _ebar($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $32 = 0, $35 = 0, $37 = 0, $39 = 0, $41 = 0, $59 = 0, $7 = 0, $i$0$lcssa$us = 0, $i$07$us = 0, $i1$013 = 0, $i2$011 = 0, $k$010 = 0, $k$010$us = 0, $td1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $td1 = sp;
 $1 = HEAP32[$a + 8 >> 2] | 0;
 $2 = ($1 | 0) == 0;
 if ($2) label = 3; else if (HEAP32[$a >> 2] & 2) label = 3;
 do if ((label | 0) == 3) {
  $7 = HEAP32[$w + 8 >> 2] | 0;
  if ($7) if (!(HEAP32[$w >> 2] & 2)) break;
  $13 = HEAP32[$a + 12 >> 2] | 0;
  if (($13 | 0) < 2) {
   $16 = HEAP32[$w + 12 >> 2] | 0;
   if (($16 | 0) < 2) {
    $19 = $a + ($13 + 4 + ($13 & 1) << 2) | 0;
    $21 = $w + ($16 + 4 + ($16 & 1) << 2) | 0;
    $22 = $1 + 1 | 0;
    $i1$013 = 0;
    do {
     HEAP32[$td1 + ($i1$013 << 2) >> 2] = $22;
     $i1$013 = $i1$013 + 1 | 0;
    } while (($i1$013 | 0) != 256);
    $23 = ($1 | 0) > 0;
    if ($23) {
     $i2$011 = 0;
     do {
      HEAP32[$td1 + (HEAPU8[$19 + $i2$011 >> 0] << 2) >> 2] = $1 - $i2$011;
      $i2$011 = $i2$011 + 1 | 0;
     } while (($i2$011 | 0) != ($1 | 0));
    }
    $32 = _ga(1, $7, $16, 0) | 0;
    if (!$32) {
     $$0 = 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $35 = HEAP32[$32 + 12 >> 2] | 0;
    $37 = $32 + ($35 + 4 + ($35 & 1) << 2) | 0;
    _memset($37 | 0, 0, $7 | 0) | 0;
    $39 = 1 - $1 + $7 | 0;
    if (($39 | 0) <= 0) {
     $$0 = $32;
     STACKTOP = sp;
     return $$0 | 0;
    }
    if ($23) $k$010$us = 0; else {
     $41 = $2 & 1;
     $k$010 = 0;
     do {
      HEAP8[$37 + $k$010 >> 0] = $41;
      $k$010 = (HEAP32[$td1 + (HEAPU8[$21 + ($k$010 + $1) >> 0] << 2) >> 2] | 0) + $k$010 | 0;
     } while (($k$010 | 0) < ($39 | 0));
     $$0 = $32;
     STACKTOP = sp;
     return $$0 | 0;
    }
    do {
     $i$07$us = 0;
     while (1) {
      if ((HEAP8[$19 + $i$07$us >> 0] | 0) != (HEAP8[$21 + ($i$07$us + $k$010$us) >> 0] | 0)) {
       $i$0$lcssa$us = $i$07$us;
       break;
      }
      $59 = $i$07$us + 1 | 0;
      if (($59 | 0) < ($1 | 0)) $i$07$us = $59; else {
       $i$0$lcssa$us = $59;
       break;
      }
     }
     HEAP8[$37 + $k$010$us >> 0] = ($i$0$lcssa$us | 0) == ($1 | 0) & 1;
     $k$010$us = (HEAP32[$td1 + (HEAPU8[$21 + ($k$010$us + $1) >> 0] << 2) >> 2] | 0) + $k$010$us | 0;
    } while (($k$010$us | 0) < ($39 | 0));
    $$0 = $32;
    STACKTOP = sp;
    return $$0 | 0;
   }
  }
 } while (0);
 _jsignal(11);
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _memchr($src, $c, $n) {
 $src = $src | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $13 = 0, $15 = 0, $17 = 0, $20 = 0, $26 = 0, $27 = 0, $32 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0;
 $0 = $c & 255;
 $4 = ($n | 0) != 0;
 L1 : do if ($4 & ($src & 3 | 0) != 0) {
  $5 = $c & 255;
  $$019 = $n;
  $s$020 = $src;
  while (1) {
   if ((HEAP8[$s$020 >> 0] | 0) == $5 << 24 >> 24) {
    $$0$lcssa44 = $$019;
    $s$0$lcssa43 = $s$020;
    label = 6;
    break L1;
   }
   $8 = $s$020 + 1 | 0;
   $9 = $$019 + -1 | 0;
   $13 = ($9 | 0) != 0;
   if ($13 & ($8 & 3 | 0) != 0) {
    $$019 = $9;
    $s$020 = $8;
   } else {
    $$0$lcssa = $9;
    $$lcssa = $13;
    $s$0$lcssa = $8;
    label = 5;
    break;
   }
  }
 } else {
  $$0$lcssa = $n;
  $$lcssa = $4;
  $s$0$lcssa = $src;
  label = 5;
 } while (0);
 if ((label | 0) == 5) if ($$lcssa) {
  $$0$lcssa44 = $$0$lcssa;
  $s$0$lcssa43 = $s$0$lcssa;
  label = 6;
 } else {
  $$3 = 0;
  $s$2 = $s$0$lcssa;
 }
 L8 : do if ((label | 0) == 6) {
  $15 = $c & 255;
  if ((HEAP8[$s$0$lcssa43 >> 0] | 0) == $15 << 24 >> 24) {
   $$3 = $$0$lcssa44;
   $s$2 = $s$0$lcssa43;
  } else {
   $17 = Math_imul($0, 16843009) | 0;
   L11 : do if ($$0$lcssa44 >>> 0 > 3) {
    $$110 = $$0$lcssa44;
    $w$011 = $s$0$lcssa43;
    while (1) {
     $20 = HEAP32[$w$011 >> 2] ^ $17;
     if (($20 & -2139062144 ^ -2139062144) & $20 + -16843009) {
      $$110$lcssa = $$110;
      $w$011$lcssa = $w$011;
      break;
     }
     $26 = $w$011 + 4 | 0;
     $27 = $$110 + -4 | 0;
     if ($27 >>> 0 > 3) {
      $$110 = $27;
      $w$011 = $26;
     } else {
      $$1$lcssa = $27;
      $w$0$lcssa = $26;
      label = 11;
      break L11;
     }
    }
    $$24 = $$110$lcssa;
    $s$15 = $w$011$lcssa;
   } else {
    $$1$lcssa = $$0$lcssa44;
    $w$0$lcssa = $s$0$lcssa43;
    label = 11;
   } while (0);
   if ((label | 0) == 11) if (!$$1$lcssa) {
    $$3 = 0;
    $s$2 = $w$0$lcssa;
    break;
   } else {
    $$24 = $$1$lcssa;
    $s$15 = $w$0$lcssa;
   }
   while (1) {
    if ((HEAP8[$s$15 >> 0] | 0) == $15 << 24 >> 24) {
     $$3 = $$24;
     $s$2 = $s$15;
     break L8;
    }
    $32 = $s$15 + 1 | 0;
    $$24 = $$24 + -1 | 0;
    if (!$$24) {
     $$3 = 0;
     $s$2 = $32;
     break;
    } else $s$15 = $32;
   }
  }
 } while (0);
 return (($$3 | 0) != 0 ? $s$2 : 0) | 0;
}

function _base1($w) {
 $w = $w | 0;
 var $$0 = 0, $$pre$phiZ2D = 0, $$sum = 0, $12 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $d$08$us = 0, $i$013 = 0, $i$013$us = 0, $i1$010$us = 0, $p$0$$us = 0, $p$0$$us$lcssa = 0, $p$07$us = 0, $v$014$us = 0, $v$19$us = 0, $x$012 = 0, $x$012$us = 0, label = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 8 >> 2] | 0;
 $3 = $w + 12 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $w + 16 | 0;
 $6 = ($4 | 0) != 0;
 if ($6) {
  $8 = HEAP32[$w + 16 + ($4 + -1 << 2) >> 2] | 0;
  if (($8 | 0) > 31) $12 = $8; else {
   $17 = $8;
   label = 4;
  }
 } else {
  $17 = 1;
  label = 4;
 }
 if ((label | 0) == 4) if ((HEAP32[$w >> 2] | 0) == 1) {
  $18 = ($17 | 0) != 0;
  if ($18) {
   $$pre$phiZ2D = $4 + -1 | 0;
   $23 = ($2 | 0) / ($17 | 0) | 0;
  } else {
   $20 = $4 + -1 | 0;
   $$pre$phiZ2D = $20;
   $23 = _prod($20, $5) | 0;
  }
  $24 = _ga(4, $23, $6 ? $$pre$phiZ2D : 0, $5) | 0;
  if (!$24) {
   $$0 = 0;
   return $$0 | 0;
  }
  $27 = HEAP32[$24 + 12 >> 2] | 0;
  $$sum = $27 + 4 | 0;
  $28 = $27 & 1;
  $29 = HEAP32[$3 >> 2] | 0;
  if (!$18) {
   _memset($24 + ($$sum + $28 << 2) | 0, 0, $23 << 2 | 0) | 0;
   $$0 = $24;
   return $$0 | 0;
  }
  $30 = $24 + ($28 + $23 + $$sum << 2) | 0;
  $33 = $w + ($29 + 4 + ($29 & 1) << 2) + $2 | 0;
  if (($23 | 0) <= 0) {
   $$0 = $24;
   return $$0 | 0;
  }
  if (($17 | 0) <= 0) {
   $i$013 = 0;
   $x$012 = $30;
   do {
    $x$012 = $x$012 + -4 | 0;
    HEAP32[$x$012 >> 2] = 0;
    $i$013 = $i$013 + 1 | 0;
   } while (($i$013 | 0) != ($23 | 0));
   $$0 = $24;
   return $$0 | 0;
  }
  $36 = 0 - $17 | 0;
  $i$013$us = 0;
  $v$014$us = $33;
  $x$012$us = $30;
  while (1) {
   $d$08$us = 1;
   $i1$010$us = 0;
   $p$07$us = 0;
   $v$19$us = $v$014$us;
   while (1) {
    $v$19$us = $v$19$us + -1 | 0;
    $p$0$$us = ((HEAP8[$v$19$us >> 0] | 0) == 0 ? 0 : $d$08$us) + $p$07$us | 0;
    $i1$010$us = $i1$010$us + 1 | 0;
    if (($i1$010$us | 0) == ($17 | 0)) {
     $p$0$$us$lcssa = $p$0$$us;
     break;
    } else {
     $d$08$us = $d$08$us << 1;
     $p$07$us = $p$0$$us;
    }
   }
   $x$012$us = $x$012$us + -4 | 0;
   HEAP32[$x$012$us >> 2] = $p$0$$us$lcssa;
   $i$013$us = $i$013$us + 1 | 0;
   if (($i$013$us | 0) == ($23 | 0)) {
    $$0 = $24;
    break;
   } else $v$014$us = $v$014$us + $36 | 0;
  }
  return $$0 | 0;
 } else $12 = $17;
 $13 = _sc($12) | 0;
 $$0 = _pdt($w, _wt($13, HEAP32[658] | 0) | 0) | 0;
 return $$0 | 0;
}

function _ncx($w) {
 $w = $w | 0;
 var $$0 = 0, $10 = 0, $2 = 0, $21 = 0, $24 = 0, $26 = 0, $28 = 0, $29 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $40 = 0, $43 = 0, $49 = 0, $50 = 0, $52 = 0, $60 = 0, $62 = 0, $i$05$i = 0, label = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 12 >> 2] | 0;
 if (($2 | 0) > 0) {
  $$0 = _rank1ex($w, 0, 0, 357) | 0;
  return $$0 | 0;
 }
 L8 : do if (!(HEAP32[$w >> 2] & 32)) $60 = -1; else {
  $10 = HEAP32[$w + ($2 + 4 + ($2 & 1) << 2) >> 2] | 0;
  if (!$10) $60 = -1; else if (!(HEAP32[$10 + 8 >> 2] | 0)) $60 = -1; else if ((HEAP32[$10 + 12 >> 2] | 0) < 2) if (!(HEAP32[$10 >> 2] & 1026)) $60 = -1; else {
   $21 = _stdnm($10) | 0;
   if (!$21) $60 = -1; else {
    $24 = HEAP32[$21 + 8 >> 2] | 0;
    $26 = HEAP32[$21 + 12 >> 2] | 0;
    $28 = $21 + ($26 + 4 + ($26 & 1) << 2) | 0;
    if (!$24) {
     $60 = -1;
     break;
    } else if (($24 | 0) == 1) {
     $29 = HEAP8[$28 >> 0] | 0;
     if (!($29 << 24 >> 24 == -110 | $29 << 24 >> 24 == -46 | $29 << 24 >> 24 == -47)) {
      $31 = $29;
      label = 13;
     }
    } else {
     $31 = HEAP8[$28 >> 0] | 0;
     label = 13;
    }
    do if ((label | 0) == 13) {
     if ((HEAP8[5792 + ($31 << 24 >> 24) >> 0] | 0) != 2) {
      $60 = -1;
      break L8;
     }
     $35 = $24 + -1 | 0;
     $36 = ($24 | 0) > 1;
     L21 : do if ($36) {
      $62 = 2;
      $i$05$i = 0;
      while (1) {
       if (!($62 << 24 >> 24 == 5 | $62 << 24 >> 24 == 2)) {
        $60 = -1;
        break L8;
       }
       $37 = $i$05$i + 1 | 0;
       if (($37 | 0) >= ($35 | 0)) break L21;
       $62 = HEAP8[5792 + (HEAP8[$28 + $37 >> 0] | 0) >> 0] | 0;
       $i$05$i = $37;
      }
     } while (0);
     $40 = HEAP8[$28 + $35 >> 0] | 0;
     if ($40 << 24 >> 24 != 95) {
      $49 = HEAP8[5792 + ($40 << 24 >> 24) >> 0] | 0;
      if ($49 << 24 >> 24 == 7 | $49 << 24 >> 24 == 5 | $49 << 24 >> 24 == 2) break; else {
       $60 = -1;
       break L8;
      }
     }
     if (!$36) {
      $60 = -1;
      break L8;
     }
     if ($31 << 24 >> 24 != 95) {
      $43 = 1;
      while (1) {
       if (($43 | 0) >= ($35 | 0)) {
        $60 = -1;
        break L8;
       }
       if ((HEAP8[$28 + $43 >> 0] | 0) == 95) break; else $43 = $43 + 1 | 0;
      }
     }
    } while (0);
    $50 = _srdlg($21) | 0;
    if (!$50) $60 = 0; else {
     $52 = HEAP32[$50 >> 2] | 0;
     if (!($52 & 127)) if (!($52 & 128)) $60 = $52 >>> 8 & 1 ^ 5; else $60 = 3; else $60 = 2;
    }
   }
  } else $60 = -1;
 } while (0);
 $$0 = _sc($60) | 0;
 return $$0 | 0;
}

function _reshape($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$ = 0, $$0 = 0, $$06 = 0, $$sum7 = 0, $0 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $21 = 0, $27 = 0, $29 = 0, $3 = 0, $32 = 0, $36 = 0, $38 = 0, $40 = 0, $41 = 0, $42 = 0, $46 = 0, $50 = 0, $51 = 0, $56 = 0, $59 = 0, $6 = 0, $61 = 0, $63 = 0, $66 = 0, $68 = 0, $8 = 0, $i$022 = 0, $q$0 = 0;
 $0 = HEAP32[100] | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $3 = _vi($a) | 0;
 if (!$3) {
  $$0 = 0;
  return $$0 | 0;
 }
 $6 = HEAP32[$3 + 8 >> 2] | 0;
 $8 = HEAP32[$3 + 12 >> 2] | 0;
 $$sum7 = $8 + 4 + ($8 & 1) | 0;
 $10 = $3 + ($$sum7 << 2) | 0;
 $12 = HEAP32[$w + 8 >> 2] | 0;
 $13 = HEAP32[$w >> 2] | 0;
 $14 = _bp($13) | 0;
 L7 : do if (($6 | 0) > 0) {
  $i$022 = 0;
  while (1) {
   if ((HEAP32[$3 + ($i$022 + $$sum7 << 2) >> 2] | 0) <= -1) break;
   $i$022 = $i$022 + 1 | 0;
   if (($i$022 | 0) >= ($6 | 0)) break L7;
  }
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 } while (0);
 $21 = _prod($6, $10) | 0;
 if (($12 | 0) == 0 & ($21 | 0) != 0) {
  _jsignal(9);
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(($0 | 0) != 0 & ($12 | 0) != 0 & ($21 | 0) > ($12 | 0))) {
  $59 = _ga($13, $21, $6, $10) | 0;
  if (!$59) {
   $$0 = 0;
   return $$0 | 0;
  }
  $61 = Math_imul($21, $14) | 0;
  $63 = HEAP32[$59 + 12 >> 2] | 0;
  $66 = Math_imul($14, $12) | 0;
  $68 = HEAP32[$w + 12 >> 2] | 0;
  _mvc($61, $59 + ($63 + 4 + ($63 & 1) << 2) | 0, $66, $w + ($68 + 4 + ($68 & 1) << 2) | 0);
  $$0 = $59;
  return $$0 | 0;
 }
 $27 = HEAP32[$0 >> 2] | 0;
 $$ = ($13 | 0) > ($27 | 0) ? $13 : $27;
 $29 = _bp($$) | 0;
 if (($$ | 0) == (HEAP32[$w >> 2] | 0)) $$06 = $w; else {
  $32 = _cvt($$, $w) | 0;
  if (!$32) {
   $$0 = 0;
   return $$0 | 0;
  } else $$06 = $32;
 }
 if (($$ | 0) == (HEAP32[$0 >> 2] | 0)) $q$0 = $0; else {
  $36 = _cvt($$, $0) | 0;
  if (!$36) {
   $$0 = 0;
   return $$0 | 0;
  } else $q$0 = $36;
 }
 $38 = _ga($$, $21, $6, $10) | 0;
 if (!$38) {
  $$0 = 0;
  return $$0 | 0;
 }
 $40 = Math_imul($29, $12) | 0;
 $41 = $38 + 12 | 0;
 $42 = HEAP32[$41 >> 2] | 0;
 $46 = HEAP32[$$06 + 12 >> 2] | 0;
 _mvc($40, $38 + ($42 + 4 + ($42 & 1) << 2) | 0, $40, $$06 + ($46 + 4 + ($46 & 1) << 2) | 0);
 $50 = (Math_imul($29, $21) | 0) - $40 | 0;
 $51 = HEAP32[$41 >> 2] | 0;
 $56 = HEAP32[$q$0 + 12 >> 2] | 0;
 _mvc($50, $38 + ($51 + 4 + ($51 & 1) << 2) + $40 | 0, $29, $q$0 + ($56 + 4 + ($56 & 1) << 2) | 0);
 $$0 = $38;
 return $$0 | 0;
}

function _line($a, $w, $0) {
 $a = $a | 0;
 $w = $w | 0;
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $12 = 0, $16 = 0, $17 = 0, $27 = 0, $32 = 0, $35 = 0, $37 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $54 = 0, $6 = 0, $64 = 0, $69 = 0, $7 = 0, $72 = 0, $75 = 0, $8 = 0, $tso = 0;
 $tso = $0 & 255;
 $1 = HEAP8[8472] | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 2)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $6 = HEAP32[2112] | 0;
 $7 = HEAP32[2116] | 0;
 $8 = HEAP32[2114] | 0;
 $10 = HEAP32[$w + 12 >> 2] | 0;
 $12 = $w + ($10 + 4 + ($10 & 1) << 2) | 0;
 HEAP32[2112] = $12;
 HEAP32[2116] = $12 + (HEAP32[$w + 8 >> 2] | 0);
 HEAP32[2114] = $12;
 $16 = HEAP32[2122] | 0;
 $17 = HEAP32[2120] | 0;
 if ($17) _fclose($17 | 0) | 0;
 HEAP32[2120] = 0;
 HEAP32[2122] = $a;
 do if ($a) {
  if (!(HEAP32[$a >> 2] & 32)) {
   _jsignal(3);
   break;
  }
  if (HEAP32[$a + 12 >> 2] | 0) {
   _jsignal(14);
   break;
  }
  $27 = HEAP32[$a + 16 >> 2] | 0;
  if (!(HEAP32[$27 >> 2] & 2)) {
   _jsignal(3);
   break;
  }
  $32 = HEAP32[$27 + 12 >> 2] | 0;
  $35 = _fopen($27 + ($32 + 4 + ($32 & 1) << 2) | 0, 8496) | 0;
  HEAP32[2120] = $35;
  if (!$35) _jsignal(7);
 } while (0);
 $37 = _debadd(3) | 0;
 if (!$37) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP8[8472] = $tso;
 $41 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $42 = $37 + 28 | 0;
 HEAP32[$42 >> 2] = 0;
 HEAP8[2472] = 0;
 $43 = _jgets(8504) | 0;
 $45 = (HEAP8[2472] | 0) != 0;
 if (($43 | 0) != 0 | $45) {
  $47 = $43;
  $49 = 1;
  $75 = $45;
  while (1) {
   if (!$75) _immex($47) | 0;
   _tpop($41) | 0;
   HEAP32[$42 >> 2] = $49;
   HEAP8[2472] = 0;
   $47 = _jgets(8504) | 0;
   $75 = (HEAP8[2472] | 0) != 0;
   if (!(($47 | 0) != 0 | $75)) break; else $49 = $49 + 1 | 0;
  }
 }
 HEAP32[2112] = $6;
 HEAP32[2114] = $8;
 HEAP32[2116] = $7;
 HEAP8[8472] = $1;
 $54 = HEAP32[2120] | 0;
 if ($54) _fclose($54 | 0) | 0;
 HEAP32[2120] = 0;
 HEAP32[2122] = $16;
 do if ($16) {
  if (!(HEAP32[$16 >> 2] & 32)) {
   _jsignal(3);
   break;
  }
  if (HEAP32[$16 + 12 >> 2] | 0) {
   _jsignal(14);
   break;
  }
  $64 = HEAP32[$16 + 16 >> 2] | 0;
  if (!(HEAP32[$64 >> 2] & 2)) {
   _jsignal(3);
   break;
  }
  $69 = HEAP32[$64 + 12 >> 2] | 0;
  $72 = _fopen($64 + ($69 + 4 + ($69 & 1) << 2) | 0, 8496) | 0;
  HEAP32[2120] = $72;
  if (!$72) _jsignal(7);
 } while (0);
 _debz();
 $$0 = HEAP32[616] | 0;
 return $$0 | 0;
}

function _aro($w) {
 $w = $w | 0;
 var $$0 = 0, $$sum1 = 0, $$sum3 = 0, $$sum9 = 0, $11 = 0, $13 = 0, $14 = 0, $19 = 0, $22 = 0, $25 = 0, $27 = 0, $33 = 0, $36 = 0, $38 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $58 = 0, $62 = 0, $7 = 0, $9 = 0, $fs$0 = 0, $gs$0 = 0, $id$0 = 0, $m$0 = 0, $v$0 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 896)) {
  $fs$0 = 0;
  $gs$0 = 0;
  $id$0 = 0;
  $m$0 = 0;
  $v$0 = 0;
 } else {
  $5 = HEAP32[$w + 12 >> 2] | 0;
  $$sum9 = $5 + 4 + ($5 & 1) | 0;
  $7 = $w + ($$sum9 << 2) | 0;
  $9 = HEAP8[$7 + 31 >> 0] | 0;
  $11 = HEAP32[$w + ($$sum9 + 2 << 2) >> 2] | 0;
  $13 = HEAP32[$w + ($$sum9 + 3 << 2) >> 2] | 0;
  $14 = $9 << 24 >> 24;
  if ($9 << 24 >> 24 == -18 | $9 << 24 >> 24 == -21) {
   $fs$0 = $11;
   $gs$0 = $13;
   $id$0 = $9;
   $m$0 = 3;
   $v$0 = $7;
  } else {
   $19 = (($13 | 0) != 0 & 1) + (($11 | 0) != 0 & 1) | 0;
   if (!$19) {
    $$0 = _spellout($14) | 0;
    return $$0 | 0;
   } else {
    $fs$0 = $11;
    $gs$0 = $13;
    $id$0 = $9;
    $m$0 = $19;
    $v$0 = $7;
   }
  }
 }
 $22 = _ga(32, 2, 1, 0) | 0;
 if (!$22) {
  $$0 = 0;
  return $$0 | 0;
 }
 $25 = HEAP32[$22 + 12 >> 2] | 0;
 $$sum1 = $25 + 4 + ($25 & 1) | 0;
 $27 = $22 + ($$sum1 << 2) | 0;
 if (HEAP32[$w >> 2] & 127) {
  HEAP32[$27 >> 2] = _str(1, 3336) | 0;
  HEAP32[$22 + ($$sum1 + 1 << 2) >> 2] = $w;
  $$0 = $22;
  return $$0 | 0;
 }
 $33 = _ga(32, $m$0, 1, 0) | 0;
 if (!$33) {
  $$0 = 0;
  return $$0 | 0;
 }
 $36 = HEAP32[$33 + 12 >> 2] | 0;
 $$sum3 = $36 + 4 + ($36 & 1) | 0;
 $38 = $33 + ($$sum3 << 2) | 0;
 if (($m$0 | 0) > 0) {
  if (!((_evoke($w) | 0) << 24 >> 24)) $48 = $fs$0; else {
   $43 = (_cf($fs$0) | 0) << 24 >> 24;
   if ((HEAP8[5792 + $43 >> 0] | 0) == 2) $48 = $fs$0; else $48 = _spellout($43) | 0;
  }
  $49 = _aro($48) | 0;
  HEAP32[$38 >> 2] = $49;
  if (!$49) {
   $$0 = 0;
   return $$0 | 0;
  }
  if (($m$0 | 0) > 1) {
   $52 = _aro($gs$0) | 0;
   HEAP32[$33 + ($$sum3 + 1 << 2) >> 2] = $52;
   if (!$52) {
    $$0 = 0;
    return $$0 | 0;
   }
   if (($m$0 | 0) > 2) {
    $58 = _aro(HEAP32[$v$0 + 16 >> 2] | 0) | 0;
    HEAP32[$33 + ($$sum3 + 2 << 2) >> 2] = $58;
    if (!$58) {
     $$0 = 0;
     return $$0 | 0;
    }
   }
  }
 }
 $62 = _spellout($id$0 << 24 >> 24) | 0;
 HEAP32[$27 >> 2] = $62;
 if (!$62) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$22 + ($$sum1 + 1 << 2) >> 2] = $33;
 $$0 = $22;
 return $$0 | 0;
}

function _tpush($w) {
 $w = $w | 0;
 var $$0 = 0, $$sum1$i = 0, $2 = 0, $27 = 0, $29 = 0, $35 = 0, $36 = 0, $4 = 0, $41 = 0, $44 = 0, $51 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $i$07$i = 0, $i3$010$i = 0, $n$0$i = 0, $v$08$i = 0, $v2$09$i = 0, label = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 8 >> 2] | 0;
 $4 = HEAP32[$w + 12 >> 2] | 0;
 $$sum1$i = $4 + 4 + ($4 & 1) | 0;
 $6 = $w + ($$sum1$i << 2) | 0;
 $7 = HEAP32[$w >> 2] | 0;
 if (($7 | 0) == 32) {
  $n$0$i = $2;
  label = 4;
 } else if (($7 | 0) == 32768) {
  if (($2 | 0) > 0) {
   $i3$010$i = 0;
   $v2$09$i = $6;
   while (1) {
    _tpush(HEAP32[$v2$09$i >> 2] | 0) | 0;
    _tpush(HEAP32[$v2$09$i + 4 >> 2] | 0) | 0;
    $i3$010$i = $i3$010$i + 1 | 0;
    if (($i3$010$i | 0) == ($2 | 0)) break; else $v2$09$i = $v2$09$i + 8 | 0;
   }
  }
 } else if (($7 | 0) == 512 | ($7 | 0) == 256 | ($7 | 0) == 128) {
  _tpush(HEAP32[$w + ($$sum1$i + 2 << 2) >> 2] | 0) | 0;
  _tpush(HEAP32[$w + ($$sum1$i + 3 << 2) >> 2] | 0) | 0;
  _tpush(HEAP32[$w + ($$sum1$i + 4 << 2) >> 2] | 0) | 0;
  _tpush(HEAP32[$w + ($$sum1$i + 5 << 2) >> 2] | 0) | 0;
 } else if (($7 | 0) == 64) {
  $n$0$i = $2 << 1;
  label = 4;
 }
 if ((label | 0) == 4) if (($n$0$i | 0) > 0) {
  $i$07$i = 0;
  $v$08$i = $6;
  while (1) {
   _tpush(HEAP32[$v$08$i >> 2] | 0) | 0;
   $i$07$i = $i$07$i + 1 | 0;
   if (($i$07$i | 0) == ($n$0$i | 0)) break; else $v$08$i = $v$08$i + 4 | 0;
  }
 }
 $27 = HEAP32[664] | 0;
 do if (($27 | 0) > 1999) {
  $29 = HEAP32[674] | 0;
  $35 = ((((_bp(32) | 0) * 2e3 | 3 | 0) / 4 | 0) << 2) + 24 | 0;
  $36 = _malloc($35) | 0;
  if (!((_breaker() | 0) << 24 >> 24)) {
   $$0 = 0;
   return $$0 | 0;
  }
  if ($36) {
   $41 = (HEAP32[666] | 0) + $35 | 0;
   HEAP32[666] = $41;
   HEAP32[670] = (HEAP32[670] | 0) + $35;
   $44 = HEAP32[668] | 0;
   HEAP32[668] = ($41 | 0) > ($44 | 0) ? $41 : $44;
   HEAP32[$36 >> 2] = 32;
   HEAP32[$36 + 12 >> 2] = 1;
   HEAP32[$36 + 4 >> 2] = 1;
   HEAP32[$36 + 16 >> 2] = 2e3;
   HEAP32[$36 + 8 >> 2] = 2e3;
   HEAP32[674] = $36;
   $51 = $36 + 24 | 0;
   HEAP32[672] = $51;
   HEAP32[662] = (HEAP32[662] | 0) + 2e3;
   HEAP32[664] = 1;
   HEAP32[$51 >> 2] = $29;
   $55 = $51;
   $56 = 1;
   break;
  }
  _jsignal(21);
  $$0 = 0;
  return $$0 | 0;
 } else {
  $55 = HEAP32[672] | 0;
  $56 = $27;
 } while (0);
 HEAP32[$55 + ($56 << 2) >> 2] = $w;
 HEAP32[664] = $56 + 1;
 $$0 = $w;
 return $$0 | 0;
}

function _rank1ex($w, $fs, $mr, $f1) {
 $w = $w | 0;
 $fs = $fs | 0;
 $mr = $mr | 0;
 $f1 = $f1 | 0;
 var $$0 = 0, $$pre$phiZ2D = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $29 = 0, $30 = 0, $33 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $44 = 0, $5 = 0, $50 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $7 = 0, $9 = 0, $i$08 = 0, $v$06 = 0, $x$07 = 0, $z$0 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $4 = $w + 12 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $w + 16 | 0;
 $7 = HEAP32[$w >> 2] | 0;
 if (($mr | 0) < 0) {
  $9 = $5 + $mr | 0;
  $14 = ($9 | 0) < 0 ? 0 : $9;
 } else $14 = ($5 | 0) > ($mr | 0) ? $mr : $5;
 $13 = $5 - $14 | 0;
 $15 = _prod($13, $6) | 0;
 $16 = ($15 | 0) != 0;
 if ($16) {
  $$pre$phiZ2D = $w + 16 + ($13 << 2) | 0;
  $24 = (HEAP32[$w + 8 >> 2] | 0) / ($15 | 0) | 0;
 } else {
  $20 = $w + 16 + ($13 << 2) | 0;
  $$pre$phiZ2D = $20;
  $24 = _prod($14, $20) | 0;
 }
 $23 = Math_imul(_bp($7) | 0, $24) | 0;
 $25 = HEAP32[$4 >> 2] | 0;
 $29 = $w + ($25 + 4 + ($25 & 1) << 2) + (0 - $23) | 0;
 $30 = _ga($7, $24, $14, $$pre$phiZ2D) | 0;
 if (!$30) {
  $$0 = 0;
  return $$0 | 0;
 }
 $33 = HEAP32[$30 + 12 >> 2] | 0;
 $35 = $30 + ($33 + 4 + ($33 & 1) << 2) | 0;
 $36 = _ga(32, $15, $13, $6) | 0;
 if (!$36) {
  $$0 = 0;
  return $$0 | 0;
 }
 $39 = HEAP32[$36 + 12 >> 2] | 0;
 do if ($16) {
  L20 : do if (($15 | 0) > 0) {
   $i$08 = 0;
   $v$06 = $29;
   $x$07 = $36 + ($39 + 4 + ($39 & 1) << 2) | 0;
   while (1) {
    $v$06 = $v$06 + $23 | 0;
    _memcpy($35 | 0, $v$06 | 0, $23 | 0) | 0;
    $44 = ftCall_iii($f1 | 0, $30 | 0, $fs | 0) | 0;
    HEAP32[$x$07 >> 2] = $44;
    if (!$44) {
     $$0 = 0;
     break;
    }
    $i$08 = $i$08 + 1 | 0;
    if (($i$08 | 0) >= ($15 | 0)) break L20; else $x$07 = $x$07 + 4 | 0;
   }
   return $$0 | 0;
  } while (0);
  $z$0 = _ope($36) | 0;
 } else {
  $50 = _shape($30) | 0;
  $53 = ftCall_iii($f1 | 0, _reshape($50, HEAP32[660] | 0) | 0, $fs | 0) | 0;
  if (!$53) {
   $$0 = 0;
   return $$0 | 0;
  }
  $56 = $53 + 12 | 0;
  $59 = _ga(HEAP32[$53 >> 2] | 0, 0, (HEAP32[$56 >> 2] | 0) + $13 | 0, $6) | 0;
  if (!$59) {
   $$0 = 0;
   return $$0 | 0;
  } else {
   _memcpy($59 + 16 + ($13 << 2) | 0, $53 + 16 | 0, HEAP32[$56 >> 2] << 2 | 0) | 0;
   $z$0 = $59;
   break;
  }
 } while (0);
 $$0 = _gc($z$0, $2) | 0;
 return $$0 | 0;
}
function _save2f($f, $w) {
 $f = $f | 0;
 $w = $w | 0;
 var $$0 = 0, $$0$i = 0, $$sum2$i = 0, $$sum4 = 0, $0 = 0, $10 = 0, $13 = 0, $16 = 0, $19 = 0, $2 = 0, $28 = 0, $3 = 0, $32 = 0, $33 = 0, $35 = 0, $38 = 0, $39 = 0, $42 = 0, $44 = 0, $46 = 0, $50 = 0, $55 = 0, $57 = 0, $58 = 0, $6 = 0, $62 = 0, $72 = 0, $i$06 = 0, $k$07 = 0, $qv$08 = 0;
 $0 = HEAP32[894] | 0;
 HEAP32[894] = 0;
 $2 = _nl1(_apv(4, 2, 1) | 0) | 0;
 HEAP32[894] = $0;
 $3 = _eps($w, $2) | 0;
 if (!$3) {
  $$0 = 0;
  return $$0 | 0;
 }
 $6 = _nub(_repeat($3, $w) | 0) | 0;
 if (!$6) {
  $$0 = 0;
  return $$0 | 0;
 }
 $10 = _not(_eps(HEAP32[2088] | 0, $6) | 0) | 0;
 if (!$10) {
  $$0 = 0;
  return $$0 | 0;
 }
 $13 = _repeat($10, HEAP32[2084] | 0) | 0;
 HEAP32[2084] = $13;
 if (!$13) {
  $$0 = 0;
  return $$0 | 0;
 }
 $16 = HEAP32[$13 + 8 >> 2] | 0;
 if (!$16) $$0$i = 70; else {
  $19 = HEAP32[$13 + 12 >> 2] | 0;
  $$sum2$i = $16 + 4 + $19 + ($19 & 1) | 0;
  $$0$i = (HEAP32[$13 + ($$sum2$i + -2 << 2) >> 2] | 0) + (HEAP32[$13 + ($$sum2$i + -3 << 2) >> 2] | 0) | 0;
 }
 _fseek($f | 0, $$0$i | 0, 0) | 0;
 $28 = _over(_repeat($10, HEAP32[2088] | 0) | 0, $6) | 0;
 HEAP32[2088] = $28;
 if (!$28) {
  $$0 = 0;
  return $$0 | 0;
 }
 $32 = HEAP32[(HEAP32[2084] | 0) + 8 >> 2] | 0;
 $33 = _tally($28) | 0;
 $35 = HEAP32[2084] | 0;
 if (!$32) $38 = _over($35, HEAP32[658] | 0) | 0; else $38 = $35;
 $39 = _take($33, $38) | 0;
 HEAP32[2084] = $39;
 if (!$39) {
  $$0 = 0;
  return $$0 | 0;
 }
 $42 = HEAP32[$39 + 12 >> 2] | 0;
 $44 = HEAP32[$6 + 8 >> 2] | 0;
 $46 = HEAP32[$6 + 12 >> 2] | 0;
 $$sum4 = $46 + 4 + ($46 & 1) | 0;
 $50 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 L25 : do if (($44 | 0) > 0) {
  $i$06 = 0;
  $k$07 = $$0$i;
  $qv$08 = $39 + ($32 + 4 + $42 + ($42 & 1) << 2) | 0;
  while (1) {
   $55 = HEAP32[$6 + ($$sum4 + $i$06 << 2) >> 2] | 0;
   $57 = _srd($55, HEAP32[892] | 0) | 0;
   $58 = _srep($55, $57) | 0;
   if (!(_wa($f, -1, $58) | 0)) {
    $$0 = 0;
    break;
   }
   HEAP32[$qv$08 >> 2] = $k$07;
   $62 = $58 + 8 | 0;
   HEAP32[$qv$08 + 4 >> 2] = HEAP32[$62 >> 2];
   HEAP32[$qv$08 + 8 >> 2] = HEAP32[$57 >> 2];
   $k$07 = (HEAP32[$62 >> 2] | 0) + $k$07 | 0;
   _tpop($50) | 0;
   $i$06 = $i$06 + 1 | 0;
   if (($i$06 | 0) >= ($44 | 0)) break L25; else $qv$08 = $qv$08 + 12 | 0;
  }
  return $$0 | 0;
 } while (0);
 $72 = (_wrdir($f) | 0) == 0;
 $$0 = $72 ? 0 : $3;
 return $$0 | 0;
}

function _minv($w) {
 $w = $w | 0;
 var $$0 = 0, $$sum1 = 0, $12 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $43 = 0.0, $50 = 0.0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $69 = 0, $8 = 0, $9 = 0, $d$0$lcssa$i = 0.0, $d$010$i = 0.0, $i$09$i = 0, $i1$07$i = 0, $phitmp = 0, $v$08$i = 0, label = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $4 = $w + 12 | 0;
 if ((HEAP32[$4 >> 2] | 0) > 2) {
  $$0 = _rank1ex($w, 0, 2, 97) | 0;
  return $$0 | 0;
 }
 $8 = HEAP32[$w >> 2] | 0;
 $9 = _qr($w) | 0;
 if (!$9) {
  $$0 = 0;
  return $$0 | 0;
 }
 $12 = HEAP32[$9 + 12 >> 2] | 0;
 $$sum1 = $12 + 4 + ($12 & 1) | 0;
 $16 = HEAP32[$9 + ($$sum1 << 2) >> 2] | 0;
 $17 = HEAP32[$9 + ($$sum1 + 1 << 2) >> 2] | 0;
 $18 = _rinv($17) | 0;
 $21 = _cant1($16) | 0;
 if (!($8 & 16)) $23 = $21; else $23 = _conjug($21) | 0;
 $24 = _pdt($18, $23) | 0;
 $phitmp = (HEAP32[$4 >> 2] | 0) == 2;
 if (!($8 & 5)) if ($phitmp) $69 = $24; else label = 18; else if ($phitmp) if ((HEAP32[$w + 16 >> 2] | 0) == (HEAP32[$w + 20 >> 2] | 0)) if (($17 | 0) != 0 & ($24 | 0) != 0) {
  $35 = HEAP32[$17 + 16 >> 2] | 0;
  $36 = $35 + 1 | 0;
  $38 = HEAP32[$17 + 12 >> 2] | 0;
  if (($35 | 0) > 0) {
   $d$010$i = 1.0;
   $i$09$i = 0;
   $v$08$i = $17 + ($38 + 4 + ($38 & 1) << 2) | 0;
   while (1) {
    $43 = $d$010$i * +HEAPF64[$v$08$i >> 3];
    $i$09$i = $i$09$i + 1 | 0;
    if (($i$09$i | 0) == ($35 | 0)) {
     $d$0$lcssa$i = $43;
     break;
    } else {
     $d$010$i = $43;
     $v$08$i = $v$08$i + ($36 << 3) | 0;
    }
   }
  } else $d$0$lcssa$i = 1.0;
  $50 = +Math_floor(+(($d$0$lcssa$i >= 0.0 ? $d$0$lcssa$i : -$d$0$lcssa$i) + .5));
  if ($50 == 0.0 | $50 > 1.0e20) $69 = $24; else {
   $54 = HEAP32[$24 + 12 >> 2] | 0;
   $56 = $24 + ($54 + 4 + ($54 & 1) << 2) | 0;
   $58 = HEAP32[$24 + 8 >> 2] | 0;
   if (($58 | 0) > 0) {
    $i1$07$i = 0;
    do {
     $60 = $56 + ($i1$07$i << 3) | 0;
     HEAPF64[$60 >> 3] = +Math_floor(+($50 * +HEAPF64[$60 >> 3] + .5)) / $50;
     $i1$07$i = $i1$07$i + 1 | 0;
    } while (($i1$07$i | 0) != ($58 | 0));
    $69 = $24;
   } else $69 = $24;
  }
 } else $69 = 0; else $69 = $24; else label = 18;
 if ((label | 0) == 18) $69 = _reshape(_shape($w) | 0, $24) | 0;
 $$0 = _gc($69, $2) | 0;
 return $$0 | 0;
}

function _jsignalx($e, $w, $n) {
 $e = $e | 0;
 $w = $w | 0;
 $n = $n | 0;
 var $$01$i$i = 0, $$01$i1$i = 0, $11 = 0, $15 = 0, $21 = 0, $23 = 0, $26 = 0, $28 = 0, $31 = 0, $37 = 0, $39 = 0, $41 = 0, $48 = 0, $56 = 0, $57 = 0, $58 = 0, $69 = 0, $i$02$i = 0, $i$07 = 0, label = 0;
 if (HEAP8[2472] | 0) return;
 HEAP8[2472] = $e;
 if (!((HEAP8[448] | 0) == 0 & (HEAP8[2368] | 0) != 0)) return;
 HEAP8[8472] = 1;
 HEAP8[480] = 1;
 if (HEAP8[440] | 0) if (!((_spc() | 0) << 24 >> 24)) {
  $11 = HEAP32[2120] | 0;
  if ($11) _fputc(0, $11 | 0) | 0;
  _jputc(HEAP8[2457] | 0);
  _jputs(520);
  _jputc(10);
  HEAP8[440] = 0;
 }
 $15 = HEAP32[2120] | 0;
 if ($15) _fputc(0, $15 | 0) | 0;
 _jputc(HEAP8[2457] | 0);
 $21 = HEAP32[650] | 0;
 $23 = HEAP32[$21 + 12 >> 2] | 0;
 $26 = HEAP32[$21 + ((HEAP8[2472] | 0) + 4 + $23 + ($23 & 1) << 2) >> 2] | 0;
 $28 = HEAP32[$26 + 12 >> 2] | 0;
 _jputs($26 + ($28 + 4 + ($28 & 1) << 2) | 0);
 _jputc(10);
 $31 = HEAP32[2120] | 0;
 if ($31) _fputc(0, $31 | 0) | 0;
 _jputc(HEAP8[2457] | 0);
 _jputs(8504);
 if ($w) {
  $37 = HEAP32[$w + 12 >> 2] | 0;
  $39 = $w + ($37 + 4 + ($37 & 1) << 2) | 0;
  $41 = HEAP32[$w + 8 >> 2] | 0;
  if (($41 | 0) > 0) {
   $i$02$i = 0;
   do {
    _jputc(HEAP8[$39 + $i$02$i >> 0] | 0);
    $i$02$i = $i$02$i + 1 | 0;
   } while (($i$02$i | 0) != ($41 | 0));
  }
 }
 _jputc(10);
 if (($n | 0) != -1) {
  $48 = HEAP32[2120] | 0;
  if ($48) _fputc(0, $48 | 0) | 0;
  _jputc(HEAP8[2457] | 0);
  _jputs(8504);
  if (($n | 0) > 0) {
   $i$07 = 0;
   do {
    _jputc(32);
    $i$07 = $i$07 + 1 | 0;
   } while (($i$07 | 0) != ($n | 0));
  }
  _jputc(94);
  _jputc(10);
 }
 $56 = HEAP32[108] | 0;
 $57 = ($56 | 0) == 0;
 if (!(HEAP8[440] | 0)) {
  if ($57) $69 = 0; else {
   $$01$i1$i = $56;
   do {
    _debdisp($$01$i1$i);
    $$01$i1$i = HEAP32[$$01$i1$i + 20 >> 2] | 0;
   } while (($$01$i1$i | 0) != 0);
   $69 = (HEAP32[108] | 0) != 0 & 1;
  }
  HEAP8[448] = $69;
  return;
 }
 if ($57) return; else $$01$i$i = $56;
 while (1) {
  $58 = $$01$i$i + 24 | 0;
  if ((HEAP32[$58 >> 2] | 0) == 4) {
   label = 30;
   break;
  }
  _debdisp($$01$i$i);
  if ((HEAP32[$58 >> 2] & -2 | 0) == 2) {
   label = 30;
   break;
  }
  $$01$i$i = HEAP32[$$01$i$i + 20 >> 2] | 0;
  if (!$$01$i$i) {
   label = 30;
   break;
  }
 }
 if ((label | 0) == 30) return;
}

function _fixa($w) {
 $w = $w | 0;
 var $$0 = 0, $$pre$phi11Z2D = 0, $$sum1 = 0, $0 = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $21 = 0, $23 = 0, $24 = 0, $28 = 0, $33 = 0, $35 = 0, $39 = 0, $40 = 0, $41 = 0, $45 = 0, $47 = 0, $49 = 0, $50 = 0, $52 = 0, $54 = 0, $55 = 0, $57 = 0, $6 = 0;
 $0 = _ca($w) | 0;
 if (!$0) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (HEAP32[$0 >> 2] & 127) {
  $$0 = $0;
  return $$0 | 0;
 }
 $6 = HEAP32[$0 + 12 >> 2] | 0;
 $$sum1 = $6 + 4 + ($6 & 1) | 0;
 $11 = HEAP8[$0 + ($$sum1 << 2) + 31 >> 0] | 0;
 if (($11 | 0) == 126) {
  $23 = $0 + ($$sum1 + 2 << 2) | 0;
  $24 = HEAP32[$23 >> 2] | 0;
  if (!(HEAP32[$24 >> 2] & 2)) $$pre$phi11Z2D = $23; else {
   $28 = _box($24) | 0;
   if (!((_all1(_eps($28, HEAP32[20] | 0) | 0) | 0) << 24 >> 24)) {
    $33 = HEAP32[18] | 0;
    if ($33) {
     $35 = $33 + -1 | 0;
     HEAP32[18] = $35;
     HEAP32[(HEAP32[22] | 0) + ($35 << 2) >> 2] = $24;
     $39 = _fixa(_symbrd($24) | 0) | 0;
     $40 = HEAP32[616] | 0;
     $41 = HEAP32[18] | 0;
     HEAP32[18] = $41 + 1;
     HEAP32[(HEAP32[22] | 0) + ($41 << 2) >> 2] = $40;
     return $39 | 0;
    }
    _jsignal(10);
    $$0 = 0;
    return $$0 | 0;
   } else $$pre$phi11Z2D = $23;
  }
 } else if (($11 | 0) == -79 | ($11 | 0) == -94) {
  $12 = $0 + ($$sum1 + 4 << 2) | 0;
  $14 = _every(HEAP32[$12 >> 2] | 0, 248) | 0;
  HEAP32[$12 >> 2] = $14;
  if (!$14) {
   $$0 = 0;
   return $$0 | 0;
  }
  $16 = _every($14, 249) | 0;
  HEAP32[$0 + ($$sum1 + 2 << 2) >> 2] = $16;
  if (!$16) {
   $$0 = 0;
   return $$0 | 0;
  } else {
   $19 = $0 + ($$sum1 + 3 << 2) | 0;
   $21 = _fixa(HEAP32[$19 >> 2] | 0) | 0;
   HEAP32[$19 >> 2] = $21;
   return (($21 | 0) == 0 ? 0 : $0) | 0;
  }
 } else $$pre$phi11Z2D = $0 + ($$sum1 + 2 << 2) | 0;
 $45 = HEAP32[$$pre$phi11Z2D >> 2] | 0;
 if ($45) {
  $47 = _fixa($45) | 0;
  HEAP32[$$pre$phi11Z2D >> 2] = $47;
  if (!$47) {
   $$0 = 0;
   return $$0 | 0;
  }
 }
 $49 = $0 + ($$sum1 + 3 << 2) | 0;
 $50 = HEAP32[$49 >> 2] | 0;
 if ($50) {
  $52 = _fixa($50) | 0;
  HEAP32[$49 >> 2] = $52;
  if (!$52) {
   $$0 = 0;
   return $$0 | 0;
  }
 }
 $54 = $0 + ($$sum1 + 4 << 2) | 0;
 $55 = HEAP32[$54 >> 2] | 0;
 if ($55) {
  $57 = _fixa($55) | 0;
  HEAP32[$54 >> 2] = $57;
  if (!$57) {
   $$0 = 0;
   return $$0 | 0;
  }
 }
 $$0 = $0;
 return $$0 | 0;
}

function _zpow($agg$result, $u, $v) {
 $agg$result = $agg$result | 0;
 $u = $u | 0;
 $v = $v | 0;
 var $0 = 0, $1 = 0.0, $21 = 0, $22 = 0, $33 = 0.0, $35 = 0.0, $4 = 0.0, $45 = 0.0, $47 = 0.0, $49 = 0.0, $6 = 0.0, $7 = 0.0, $9 = 0, $n$0$ph = 0, $n$021 = 0, $or$cond = 0, $r$0$ = 0.0, $r$0$lcssa = 0.0, $r$019 = 0.0, $t$020 = 0.0, $u$byval_copy = 0, $zi$0$i = 0.0, $zr$0$i = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $u$byval_copy = sp + 16 | 0;
 $0 = sp;
 $1 = +HEAPF64[$u >> 3];
 $4 = +HEAPF64[$v >> 3];
 $6 = +HEAPF64[$v + 8 >> 3];
 $7 = +Math_floor(+$4);
 $9 = $6 != 0.0;
 $or$cond = +HEAPF64[$u + 8 >> 3] != 0.0 | $9;
 if (!$or$cond) {
  if (!($1 != 0.0)) {
   HEAPF64[$agg$result >> 3] = $4 < 0.0 ? +HEAPF64[317] : +($4 == 0.0 | 0);
   HEAPF64[$agg$result + 8 >> 3] = 0.0;
   STACKTOP = sp;
   return;
  }
  if ($7 <= 2147483647.0 & ($4 == $7 & $7 > -2147483648.0)) {
   $21 = ~~$7;
   $22 = ($21 | 0) < 0;
   $n$0$ph = $22 ? 0 - $21 | 0 : $21;
   if (!$n$0$ph) $r$0$lcssa = 1.0; else {
    $n$021 = $n$0$ph;
    $r$019 = 1.0;
    $t$020 = $22 ? 1.0 / $1 : $1;
    while (1) {
     $r$0$ = ($n$021 & 1 | 0) == 0 ? $r$019 : $r$019 * $t$020;
     if (($n$021 + 1 | 0) >>> 0 < 3) {
      $r$0$lcssa = $r$0$;
      break;
     } else {
      $n$021 = ($n$021 | 0) / 2 | 0;
      $r$019 = $r$0$;
      $t$020 = $t$020 * $t$020;
     }
    }
   }
   HEAPF64[$agg$result >> 3] = $r$0$lcssa;
   HEAPF64[$agg$result + 8 >> 3] = 0.0;
   STACKTOP = sp;
   return;
  }
 };
 HEAP32[$u$byval_copy >> 2] = HEAP32[$u >> 2];
 HEAP32[$u$byval_copy + 4 >> 2] = HEAP32[$u + 4 >> 2];
 HEAP32[$u$byval_copy + 8 >> 2] = HEAP32[$u + 8 >> 2];
 HEAP32[$u$byval_copy + 12 >> 2] = HEAP32[$u + 12 >> 2];
 _zlog($0, $u$byval_copy);
 $33 = +HEAPF64[$0 >> 3];
 $35 = +HEAPF64[$0 + 8 >> 3];
 if ($4 != 0.0 | $9) if ($33 != 0.0 | $35 != 0.0) {
  $zi$0$i = $35 * $4 + $33 * $6;
  $zr$0$i = $33 * $4 - $35 * $6;
 } else {
  $zi$0$i = 0.0;
  $zr$0$i = 0.0;
 } else {
  $zi$0$i = 0.0;
  $zr$0$i = 0.0;
 }
 $45 = +_xexp($zr$0$i);
 $47 = $45 * +_xcos($zi$0$i);
 $49 = $45 * +_xsin($zi$0$i);
 HEAPF64[$agg$result >> 3] = $4 == $7 + .5 & ($4 > $7 & ($1 < 0.0 & ($or$cond ^ 1))) ? 0.0 : $47;
 HEAPF64[$agg$result + 8 >> 3] = $49;
 STACKTOP = sp;
 return;
}

function _tleaf($w) {
 $w = $w | 0;
 var $$0 = 0, $$0$i = 0, $1 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $21 = 0, $23 = 0, $27 = 0, $30 = 0, $34 = 0, $4 = 0, $42 = 0, $44 = 0, $45 = 0, $50 = 0, $52 = 0, $57 = 0, $59 = 0, $6 = 0, $62 = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $d = sp;
 if (!$w) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $1 = _ga(32, 1, 1, 0) | 0;
 if (!$1) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $4 = HEAP32[$1 + 12 >> 2] | 0;
 $6 = $1 + ($4 + 4 + ($4 & 1) << 2) | 0;
 do if (!(HEAP32[$w >> 2] & 2)) label = 7; else {
  $10 = $w + 12 | 0;
  if ((HEAP32[$10 >> 2] | 0) < 2) {
   $14 = HEAP32[$w + 8 >> 2] | 0;
   $15 = $14 + 2 | 0;
   $16 = _ga(2, $15, 2, 0) | 0;
   if (!$16) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    HEAP32[$16 + 16 >> 2] = 1;
    HEAP32[$16 + 20 >> 2] = $15;
    $21 = HEAP32[$16 + 12 >> 2] | 0;
    $23 = $16 + ($21 + 4 + ($21 & 1) << 2) | 0;
    HEAP8[$23 >> 0] = HEAP8[3520] | 0;
    HEAP8[$23 + 1 >> 0] = 32;
    $27 = HEAP32[$10 >> 2] | 0;
    _memcpy($23 + 2 | 0, $w + ($27 + 4 + ($27 & 1) << 2) | 0, $14 | 0) | 0;
    HEAP32[$6 >> 2] = $16;
    break;
   }
  } else label = 7;
 } while (0);
 if ((label | 0) == 7) {
  $30 = _matth1($w) | 0;
  if (!$30) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  HEAP8[$d >> 0] = HEAP8[3520] | 0;
  HEAP8[$d + 1 >> 0] = 32;
  $34 = _str(2, $d) | 0;
  if (!(HEAP32[$30 + 12 >> 2] | 0)) $44 = 1; else $44 = HEAP32[$30 + 16 >> 2] | 0;
  if (!$34) $$0$i = 0; else {
   $42 = HEAP32[$34 + 8 >> 2] | 0;
   $45 = _ga(2, Math_imul($42, $44) | 0, 2, 0) | 0;
   if (!$45) $$0$i = 0; else {
    HEAP32[$45 + 16 >> 2] = $44;
    HEAP32[$45 + 20 >> 2] = $42;
    $50 = HEAP32[$45 + 12 >> 2] | 0;
    $52 = $45 + ($50 + 4 + ($50 & 1) << 2) | 0;
    _memset($52 | 0, 32, HEAP32[$45 + 8 >> 2] | 0) | 0;
    $57 = $52 + (Math_imul(($44 | 0) / 2 | 0, $42) | 0) | 0;
    $59 = HEAP32[$34 + 12 >> 2] | 0;
    _memcpy($57 | 0, $34 + ($59 + 4 + ($59 & 1) << 2) | 0, $42 | 0) | 0;
    $$0$i = $45;
   }
  }
  $62 = _overr($$0$i, $30) | 0;
  HEAP32[$6 >> 2] = $62;
  if (!$62) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $$0 = $1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _cformo($agg$result, $b, $e, $stack) {
 $agg$result = $agg$result | 0;
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 var $1 = 0, $13 = 0, $15 = 0, $18 = 0, $19 = 0, $24 = 0, $26 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $p = 0, $q = 0, $r = 0, $tmpcast$byval_copy1 = 0, $tmpcast1$byval_copy2 = 0, $tmpcast2$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $tmpcast2$byval_copy = sp + 40 | 0;
 $tmpcast1$byval_copy2 = sp + 32 | 0;
 $tmpcast$byval_copy1 = sp + 24 | 0;
 $p = sp + 16 | 0;
 $q = sp + 8 | 0;
 $r = sp;
 $1 = $stack + ($b << 3) | 0;
 $3 = HEAP32[$1 >> 2] | 0;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $p;
 HEAP32[$7 >> 2] = $3;
 HEAP32[$7 + 4 >> 2] = $6;
 $13 = $stack + ($b + 1 << 3) | 0;
 $15 = HEAP32[$13 >> 2] | 0;
 $18 = HEAP32[$13 + 4 >> 2] | 0;
 $19 = $q;
 HEAP32[$19 >> 2] = $15;
 HEAP32[$19 + 4 >> 2] = $18;
 $24 = $stack + ($e << 3) | 0;
 $26 = HEAP32[$24 >> 2] | 0;
 $29 = HEAP32[$24 + 4 >> 2] | 0;
 $30 = $r;
 HEAP32[$30 >> 2] = $26;
 HEAP32[$30 + 4 >> 2] = $29;
 $35 = $6 | $18;
 HEAP8[3296] = $35 >>> 0 < 1 | ($35 | 0) == 1 & ($3 | $15) >>> 0 < 0 ? ($29 >>> 0 > 0 | ($29 | 0) == 0 & $26 >>> 0 > 4294967295) & 1 : 1;
 if (($e + -1 | 0) == ($b | 0)) {
  HEAP32[$tmpcast1$byval_copy2 >> 2] = HEAP32[$p >> 2];
  HEAP32[$tmpcast1$byval_copy2 + 4 >> 2] = HEAP32[$p + 4 >> 2];
  HEAP32[$tmpcast2$byval_copy >> 2] = HEAP32[$q >> 2];
  HEAP32[$tmpcast2$byval_copy + 4 >> 2] = HEAP32[$q + 4 >> 2];
  $51 = _hooko($tmpcast1$byval_copy2, $tmpcast2$byval_copy) | 0;
  HEAP32[$agg$result >> 2] = $51;
  $52 = $agg$result + 4 | 0;
  HEAP32[$52 >> 2] = 0;
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$tmpcast$byval_copy1 >> 2] = HEAP32[$p >> 2];
  HEAP32[$tmpcast$byval_copy1 + 4 >> 2] = HEAP32[$p + 4 >> 2];
  HEAP32[$tmpcast1$byval_copy2 >> 2] = HEAP32[$q >> 2];
  HEAP32[$tmpcast1$byval_copy2 + 4 >> 2] = HEAP32[$q + 4 >> 2];
  HEAP32[$tmpcast2$byval_copy >> 2] = HEAP32[$r >> 2];
  HEAP32[$tmpcast2$byval_copy + 4 >> 2] = HEAP32[$r + 4 >> 2];
  $51 = _forko($tmpcast$byval_copy1, $tmpcast1$byval_copy2, $tmpcast2$byval_copy) | 0;
  HEAP32[$agg$result >> 2] = $51;
  $52 = $agg$result + 4 | 0;
  HEAP32[$52 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
}

function _tpop($old) {
 $old = $old | 0;
 var $$be = 0, $$pr = 0, $$pr2 = 0, $0 = 0, $11 = 0, $13 = 0, $15 = 0, $19 = 0, $21 = 0, $24 = 0, $3 = 0, $36 = 0, $38 = 0, $40 = 0, $43 = 0, $44 = 0, $46 = 0, $48 = 0, $5 = 0, $52 = 0, $54 = 0, $57 = 0, $69 = 0, $8 = 0, label = 0;
 $$pr2 = HEAP32[664] | 0;
 $0 = HEAP32[662] | 0;
 if (($0 + $$pr2 | 0) > ($old | 0)) {
  $3 = $$pr2;
  $44 = $0;
 } else return $old | 0;
 while (1) {
  if (($3 | 0) > 1) {
   $5 = $3 + -1 | 0;
   HEAP32[664] = $5;
   $8 = HEAP32[(HEAP32[672] | 0) + ($5 << 2) >> 2] | 0;
   if (!$8) {
    $$be = $5;
    $11 = $44;
    label = 4;
   } else {
    $13 = $8 + 4 | 0;
    $15 = (HEAP32[$13 >> 2] | 0) + -1 | 0;
    HEAP32[$13 >> 2] = $15;
    if (!$15) {
     $19 = (HEAP32[$8 + 12 >> 2] | 0) + 5 | 0;
     $21 = HEAP32[$8 + 8 >> 2] | 0;
     $24 = Math_imul(_bp(HEAP32[$8 >> 2] | 0) | 0, $21) | 0;
     HEAP32[666] = (HEAP32[666] | 0) - ($19 + (($24 + 3 + ((HEAP32[$8 >> 2] & 1027 | 0) != 0 & 1) | 0) / 4 | 0) << 2);
     _free($8);
     label = 10;
    } else label = 10;
   }
  } else {
   $36 = HEAP32[674] | 0;
   $38 = HEAP32[HEAP32[672] >> 2] | 0;
   HEAP32[674] = $38;
   $40 = HEAP32[$38 + 12 >> 2] | 0;
   HEAP32[672] = $38 + ($40 + 4 + ($40 & 1) << 2);
   $43 = $44 + -2e3 | 0;
   HEAP32[662] = $43;
   HEAP32[664] = 2e3;
   if (!$36) {
    $$be = 2e3;
    $11 = $43;
    label = 4;
   } else {
    $46 = $36 + 4 | 0;
    $48 = (HEAP32[$46 >> 2] | 0) + -1 | 0;
    HEAP32[$46 >> 2] = $48;
    if (!$48) {
     $52 = (HEAP32[$36 + 12 >> 2] | 0) + 5 | 0;
     $54 = HEAP32[$36 + 8 >> 2] | 0;
     $57 = Math_imul(_bp(HEAP32[$36 >> 2] | 0) | 0, $54) | 0;
     HEAP32[666] = (HEAP32[666] | 0) - ($52 + (($57 + 3 + ((HEAP32[$36 >> 2] & 1027 | 0) != 0 & 1) | 0) / 4 | 0) << 2);
     _free($36);
     label = 10;
    } else label = 10;
   }
  }
  if ((label | 0) == 4) {
   label = 0;
   if (($11 + $$be | 0) > ($old | 0)) {
    $3 = $$be;
    $44 = $11;
    continue;
   } else {
    label = 11;
    break;
   }
  } else if ((label | 0) == 10) {
   label = 0;
   $$pr = HEAP32[664] | 0;
   $69 = HEAP32[662] | 0;
   if (($69 + $$pr | 0) > ($old | 0)) {
    $3 = $$pr;
    $44 = $69;
    continue;
   } else {
    label = 11;
    break;
   }
  }
 }
 if ((label | 0) == 11) return $old | 0;
 return 0;
}

function _spellin($n, $s) {
 $n = $n | 0;
 $s = $s | 0;
 var $$0 = 0, $$ph = 0, $10 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $6 = 0, $i$03$lcssa = 0;
 L1 : do if (($n | 0) == 4 | ($n | 0) == 3) if ((HEAP8[$s + ($n + -1) >> 0] | 0) == 46) {
  $19 = HEAP8[$s >> 0] | 0;
  $21 = HEAP8[$s + 1 >> 0] | 0;
  $23 = HEAP8[$s + 2 >> 0] | 0;
  if ($23 << 24 >> 24 == 46) $$ph = 2; else if ($23 << 24 >> 24 == 49) $$ph = 3; else if ($23 << 24 >> 24 == 50) $$ph = 4; else {
   $$0 = 0;
   break;
  }
  switch ($19 << 24 >> 24) {
  case 65:
   {
    if ($21 << 24 >> 24 == 84) $i$03$lcssa = 0; else {
     $$0 = 0;
     break L1;
    }
    break;
   }
  case 82:
   {
    if ($21 << 24 >> 24 == 66) $i$03$lcssa = 7; else if ($21 << 24 >> 24 == 67) $i$03$lcssa = 8; else {
     $$0 = 0;
     break L1;
    }
    break;
   }
  case 83:
   {
    if ($21 << 24 >> 24 == 72) $i$03$lcssa = 9; else if ($21 << 24 >> 24 == 84) $i$03$lcssa = 10; else {
     $$0 = 0;
     break L1;
    }
    break;
   }
  case 76:
   {
    if ($21 << 24 >> 24 == 66) $i$03$lcssa = 4; else if ($21 << 24 >> 24 == 67) $i$03$lcssa = 5; else {
     $$0 = 0;
     break L1;
    }
    break;
   }
  case 71:
   {
    if ($21 << 24 >> 24 == 82) $i$03$lcssa = 3; else {
     $$0 = 0;
     break L1;
    }
    break;
   }
  case 78:
   {
    if ($21 << 24 >> 24 == 79) $i$03$lcssa = 6; else {
     $$0 = 0;
     break L1;
    }
    break;
   }
  case 67:
   {
    if ($21 << 24 >> 24 == 65) $i$03$lcssa = 2; else {
     $$0 = 0;
     break L1;
    }
    break;
   }
  case 66:
   {
    if ($21 << 24 >> 24 == 83) $i$03$lcssa = 1; else {
     $$0 = 0;
     break L1;
    }
    break;
   }
  case 84:
   {
    if ($21 << 24 >> 24 == 73) $i$03$lcssa = 11; else {
     $$0 = 0;
     break L1;
    }
    break;
   }
  default:
   {
    $$0 = 0;
    break L1;
   }
  }
  $$0 = HEAP8[8008 + ($i$03$lcssa * 5 | 0) + $$ph >> 0] | 0;
 } else $$0 = 0; else if (($n | 0) == 1) $$0 = HEAP8[$s >> 0] | 0; else if (($n | 0) == 2) {
  $2 = HEAP8[$s + 1 >> 0] | 0;
  $6 = $2 << 24 >> 24 == 46 ? 1 : $2 << 24 >> 24 == 58 ? 2 : 0;
  if (!$6) $$0 = 0; else {
   $10 = _strchr(7824, HEAP8[$s >> 0] | 0) | 0;
   if (!$10) $$0 = 0; else $$0 = HEAP8[$10 - 7824 + (7824 + ($6 * 59 | 0)) >> 0] | 0;
  }
 } else $$0 = 0; while (0);
 return $$0 | 0;
}

function _drr($w) {
 $w = $w | 0;
 var $$0 = 0, $$sum2 = 0, $$sum8 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $30 = 0, $35 = 0, $48 = 0, $51 = 0, $54 = 0, $58 = 0, $61 = 0, $68 = 0, $8 = 0, $df$0 = 0, $dg$0 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (HEAP32[$w >> 2] & 1151) {
  $$0 = $w;
  return $$0 | 0;
 }
 $8 = HEAP32[$w + 12 >> 2] | 0;
 $$sum2 = $8 + 4 + ($8 & 1) | 0;
 $12 = HEAP8[$w + ($$sum2 << 2) + 31 >> 0] | 0;
 $14 = HEAP32[$w + ($$sum2 + 6 << 2) >> 2] | 0;
 $16 = HEAP32[$w + ($$sum2 + 2 << 2) >> 2] | 0;
 $18 = HEAP32[$w + ($$sum2 + 3 << 2) >> 2] | 0;
 $19 = ($16 | 0) != 0;
 $21 = ($18 | 0) != 0;
 $23 = ($21 & 1) + ($19 & 1) | 0;
 if (!$23) {
  $$0 = _spellout($12 << 24 >> 24) | 0;
  return $$0 | 0;
 }
 if ((_evoke($w) | 0) << 24 >> 24) {
  $30 = (_cf($16) | 0) << 24 >> 24;
  if ((HEAP8[5792 + $30 >> 0] | 0) == 2) {
   $$0 = $16;
   return $$0 | 0;
  }
  $$0 = _spellout($30) | 0;
  return $$0 | 0;
 }
 $35 = $12 << 24 >> 24;
 if ($12 << 24 >> 24 == -19 | $12 << 24 >> 24 == -22) $48 = 1; else $48 = $12 << 24 >> 24 == -20 & 1;
 do if ($19) if (!($14 & 1)) {
  $df$0 = _drr($16) | 0;
  break;
 } else {
  $df$0 = _every(_every($16, 299) | 0, 355) | 0;
  break;
 } else $df$0 = 0; while (0);
 do if ($21) if (!($14 & 2)) {
  $dg$0 = _drr($18) | 0;
  break;
 } else {
  $dg$0 = _every(_every($18, 299) | 0, 355) | 0;
  break;
 } else $dg$0 = 0; while (0);
 $51 = _ga(32, (($48 ^ 1) & 255) + $23 | 0, 1, 0) | 0;
 if (!$51) {
  $$0 = 0;
  return $$0 | 0;
 }
 $54 = HEAP32[$51 + 12 >> 2] | 0;
 $$sum8 = $54 + 4 + ($54 & 1) | 0;
 HEAP32[$51 + ($$sum8 << 2) >> 2] = $df$0;
 if (!$df$0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $58 = $48 << 24 >> 24 == 0;
 if ($58) if ($12 << 24 >> 24 == -21 | $12 << 24 >> 24 == -18) $61 = $dg$0; else $61 = _spellout($35) | 0; else $61 = $dg$0;
 HEAP32[$51 + ($$sum8 + 1 << 2) >> 2] = $61;
 if (!$61) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($23 | 0) > 1 & $58) {
  if ($12 << 24 >> 24 == -21 | $12 << 24 >> 24 == -18) $68 = _drr(HEAP32[$w + ($$sum2 + 4 << 2) >> 2] | 0) | 0; else $68 = $dg$0;
  HEAP32[$51 + ($$sum8 + 2 << 2) >> 2] = $68;
  if (!$68) {
   $$0 = 0;
   return $$0 | 0;
  }
 }
 $$0 = _gc($51, $2) | 0;
 return $$0 | 0;
}

function _evger($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$sum2 = 0, $13 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $36 = 0, $39 = 0, $4 = 0, $50 = 0, $51 = 0, $52 = 0, $8 = 0, $i$09 = 0, $l$0$lcssa = 0, $l$010 = 0, $m$0$lcssa = 0, $m$011 = 0, $r$0$lcssa = 0, $r$012 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = _vi($w) | 0;
 if (!$2) {
  $$0 = 0;
  return $$0 | 0;
 }
 $4 = $2 + 12 | 0;
 if (HEAP32[$4 >> 2] | 0) {
  _jsignal(14);
  $$0 = 0;
  return $$0 | 0;
 }
 $8 = HEAP32[$a + 8 >> 2] | 0;
 if (!$8) {
  _jsignal(9);
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$a >> 2] & 32)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $13 = _every($a, 299) | 0;
 if (!$13) {
  $$0 = 0;
  return $$0 | 0;
 }
 $16 = HEAP32[$13 + 12 >> 2] | 0;
 $$sum2 = $16 + 4 + ($16 & 1) | 0;
 $18 = $13 + ($$sum2 << 2) | 0;
 L22 : do if (($8 | 0) > 0) {
  $i$09 = 0;
  $l$010 = 0;
  $m$011 = 0;
  $r$012 = 0;
  while (1) {
   $21 = HEAP32[$13 + ($i$09 + $$sum2 << 2) >> 2] | 0;
   if (!(HEAP32[$21 >> 2] & 128)) break;
   if (($m$011 | 0) > (_mr($21) | 0)) $50 = $m$011; else $50 = _mr($21) | 0;
   if (($l$010 | 0) > (_lr($21) | 0)) $51 = $l$010; else $51 = _lr($21) | 0;
   if (($r$012 | 0) > (_rr($21) | 0)) $52 = $r$012; else $52 = _rr($21) | 0;
   $i$09 = $i$09 + 1 | 0;
   if (($i$09 | 0) >= ($8 | 0)) {
    $l$0$lcssa = $51;
    $m$0$lcssa = $50;
    $r$0$lcssa = $52;
    break L22;
   } else {
    $l$010 = $51;
    $m$011 = $50;
    $r$012 = $52;
   }
  }
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 } else {
  $l$0$lcssa = 0;
  $m$0$lcssa = 0;
  $r$0$lcssa = 0;
 } while (0);
 $36 = HEAP32[$4 >> 2] | 0;
 $39 = HEAP32[$2 + ($36 + 4 + ($36 & 1) << 2) >> 2] | 0;
 if (($39 | 0) == 6) {
  $$0 = _gtrain($a) | 0;
  return $$0 | 0;
 } else if (($39 | 0) == 3) if ((HEAP32[$a + 12 >> 2] | 0) < 2) {
  $$0 = _fdef(-79, 128, 302, 0, $a, $2, $13, 1, 127, 0, 0) | 0;
  return $$0 | 0;
 } else {
  _jsignal(14);
  $$0 = 0;
  return $$0 | 0;
 } else if (!$39) if (!(HEAP32[$a + 12 >> 2] | 0)) {
  $$0 = HEAP32[$18 >> 2] | 0;
  return $$0 | 0;
 } else {
  $$0 = _fdef(-79, 128, 300, 301, $a, $2, $13, 1, $m$0$lcssa, $l$0$lcssa, $r$0$lcssa) | 0;
  return $$0 | 0;
 } else {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function _infix($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$0$i = 0, $15 = 0, $19 = 0, $2 = 0, $22 = 0, $27 = 0, $30 = 0, $33 = 0, $36 = 0, $37 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $60 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $i$06$i = 0, $j$0$lcssa$i = 0, $j$04$i = 0, $uglygep$i = 0, $x$0$lcssa$i = 0, $x$05$i = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $7 = HEAP32[$self + ($4 + 6 + ($4 & 1) << 2) >> 2] | 0;
 $8 = _lr($self) | 0;
 $9 = _rr($self) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($8 | 0) >= (HEAP32[$a + 12 >> 2] | 0)) {
  $15 = $w + 12 | 0;
  if (($9 | 0) >= (HEAP32[$15 >> 2] | 0)) {
   $19 = _i0($a) | 0;
   $22 = ($19 | 0) > -1 ? $19 : 0 - $19 | 0;
   if (!(HEAP32[$15 >> 2] | 0)) $30 = 1; else $30 = HEAP32[$w + 16 >> 2] | 0;
   $27 = ($19 | 0) < 0;
   if ($27) $36 = ($22 + -1 + $30 | 0) / ($22 | 0) | 0; else {
    $33 = $30 + (1 - $19) | 0;
    $36 = ($33 | 0) < 0 ? 0 : $33;
   }
   $37 = _ga(4, $36 << 1, 2, 0) | 0;
   if (!$37) $$0$i = 0; else {
    HEAP32[$37 + 16 >> 2] = $36;
    HEAP32[$37 + 20 >> 2] = 2;
    $42 = HEAP32[$37 + 12 >> 2] | 0;
    $43 = $42 & 1;
    $44 = $37 + ($42 + 4 + $43 << 2) | 0;
    $45 = $27 ? $22 : 1;
    $46 = 0 - $45 | 0;
    if (($36 | 0) > 0) {
     $uglygep$i = $37 + (($36 << 3) + 16 + ($43 + $42 << 2)) | 0;
     $i$06$i = 0;
     $j$04$i = $46;
     $x$05$i = $44;
     while (1) {
      $j$04$i = $j$04$i + $45 | 0;
      HEAP32[$x$05$i >> 2] = $j$04$i;
      HEAP32[$x$05$i + 4 >> 2] = $22;
      $i$06$i = $i$06$i + 1 | 0;
      if (($i$06$i | 0) == ($36 | 0)) break; else $x$05$i = $x$05$i + 8 | 0;
     }
     $j$0$lcssa$i = Math_imul($36 + -1 | 0, $45) | 0;
     $x$0$lcssa$i = $uglygep$i;
    } else {
     $j$0$lcssa$i = $46;
     $x$0$lcssa$i = $44;
    }
    if (!$36) $$0$i = $37; else {
     $60 = $30 - $j$0$lcssa$i | 0;
     HEAP32[$x$0$lcssa$i + -4 >> 2] = ($22 | 0) < ($60 | 0) ? $22 : $60;
     $$0$i = $37;
    }
   }
   $63 = _ac2(261) | 0;
   $$0 = _gc(_df2($$0$i, $w, _atop($7, _qq($63, _v2(1, 127) | 0) | 0) | 0) | 0, $2) | 0;
   return $$0 | 0;
  }
 }
 $$0 = _rank2ex($a, $w, $self, $8, $9, 256) | 0;
 return $$0 | 0;
}

function _dlcm($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $$0$i = 0.0, $$0$i5$i = 0.0, $$01$i = 0.0, $$01$i$phi = 0.0, $$02$i = 0.0, $$02$i$phi = 0.0, $0 = 0.0, $10 = 0.0, $16 = 0.0, $18 = 0.0, $19 = 0.0, $24 = 0.0, $3 = 0.0, $31 = 0.0, $32 = 0.0, $37 = 0.0, $4 = 0.0, $43 = 0.0, $7 = 0.0, $a$tr$i = 0.0, $a$tr$i$lcssa16 = 0.0, $a$tr$i$phi = 0.0, $b$tr$i = 0.0, $b$tr$i$lcssa17 = 0.0, label = 0;
 $0 = +HEAPF64[$u >> 3];
 $3 = $0 >= 0.0 ? $0 : -$0;
 $4 = +HEAPF64[$v >> 3];
 $7 = $4 >= 0.0 ? $4 : -$4;
 if (!($3 != 0.0 & $7 != 0.0)) {
  $43 = 0.0;
  HEAPF64[$x >> 3] = $43;
  return;
 }
 $10 = $0 * $4;
 $a$tr$i = $3;
 $b$tr$i = $7;
 while (1) {
  if (!($a$tr$i != 0.0)) {
   $$0$i = $b$tr$i;
   break;
  }
  if ($a$tr$i > $b$tr$i) {
   $a$tr$i$phi = $b$tr$i;
   $b$tr$i = $a$tr$i;
   $a$tr$i = $a$tr$i$phi;
  } else {
   $a$tr$i$lcssa16 = $a$tr$i;
   $b$tr$i$lcssa17 = $b$tr$i;
   label = 5;
   break;
  }
 }
 L7 : do if ((label | 0) == 5) {
  $$01$i = $a$tr$i$lcssa16;
  $$02$i = $b$tr$i$lcssa17;
  while (1) {
   $16 = $a$tr$i$lcssa16 / +Math_floor(+($a$tr$i$lcssa16 / $$01$i + .5));
   if ($16 != 0.0) {
    $18 = $b$tr$i$lcssa17 / $16;
    $19 = +_tfloor($18);
    if ((_teq($19, +_tceil($18)) | 0) << 24 >> 24) {
     $$0$i = $$01$i;
     break L7;
    }
    $24 = $b$tr$i$lcssa17 - $16 * $19;
    if ($16 > 0.0 & $24 > 0.0) $$0$i5$i = $24; else if ($16 < 0.0 & $24 < 0.0) $$0$i5$i = $24; else {
     $$0$i = $$01$i;
     break L7;
    }
   } else $$0$i5$i = $b$tr$i$lcssa17;
   if (!($$0$i5$i != 0.0)) {
    $$0$i = $$01$i;
    break L7;
   }
   if (!($$01$i != 0.0)) {
    $$02$i$phi = $$01$i;
    $$01$i$phi = $$02$i;
    $$02$i = $$02$i$phi;
    $$01$i = $$01$i$phi;
    continue;
   }
   $31 = $$02$i / $$01$i;
   $32 = +_tfloor($31);
   if ((_teq($32, +_tceil($31)) | 0) << 24 >> 24) {
    $$02$i$phi = $$01$i;
    $$01$i = 0.0;
    $$02$i = $$02$i$phi;
    continue;
   }
   $37 = $$02$i - $$01$i * $32;
   if (!($$01$i > 0.0 & $37 > 0.0)) if (!($$01$i < 0.0 & $37 < 0.0)) {
    $$02$i$phi = $$01$i;
    $$01$i = 0.0;
    $$02$i = $$02$i$phi;
    continue;
   }
   $$02$i$phi = $$01$i;
   $$01$i = $37;
   $$02$i = $$02$i$phi;
  }
 } while (0);
 $43 = $10 / $$0$i;
 HEAPF64[$x >> 3] = $43;
 return;
}

function _vtrans($w) {
 $w = $w | 0;
 var $$0 = 0, $$0$i = 0, $12 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $27 = 0, $29 = 0, $3 = 0, $32 = 0, $35 = 0, $37 = 0, $40 = 0, $43 = 0, $45 = 0, $46 = 0, $56 = 0, $63 = 0, $i$06$i = 0, $x$05$i = 0, $y$04$i = 0, $z$0 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $3 = HEAP32[894] | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 2)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$w + 12 >> 2] | 0) >= 2) {
  _jsignal(14);
  $$0 = 0;
  return $$0 | 0;
 }
 $12 = _box(_cstr(3328) | 0) | 0;
 HEAP32[830] = ((_all1(_eps($12, _words($w) | 0) | 0) | 0) << 24 >> 24) + 1;
 $18 = _ds(-47) | 0;
 $20 = _link($18, _ds(-46) | 0) | 0;
 HEAP32[826] = $20;
 if (!$20) {
  $$0 = 0;
  return $$0 | 0;
 }
 $22 = _ds(91) | 0;
 $24 = _link($22, _ds(93) | 0) | 0;
 HEAP32[828] = $24;
 if (!$24) {
  $$0 = 0;
  return $$0 | 0;
 }
 $27 = _ga(32768, HEAP32[882] | 0, 1, 0) | 0;
 HEAP32[894] = $27;
 if (!$27) {
  $$0 = 0;
  return $$0 | 0;
 }
 $29 = _scnm(-47) | 0;
 _symbis($29, HEAP32[646] | 0, HEAP32[894] | 0) | 0;
 $32 = _scnm(-46) | 0;
 _symbis($32, HEAP32[646] | 0, HEAP32[894] | 0) | 0;
 $35 = _tokens($w) | 0;
 if (!$35) $$0$i = 0; else {
  $37 = $35 + 8 | 0;
  $40 = _ga(32, HEAP32[$37 >> 2] << 1, 1, 0) | 0;
  if (!$40) $$0$i = 0; else {
   $43 = HEAP32[$40 + 12 >> 2] | 0;
   $45 = HEAP32[$35 + 12 >> 2] | 0;
   $46 = HEAP32[$37 >> 2] | 0;
   if (($46 | 0) > 0) {
    $i$06$i = 0;
    $x$05$i = $40 + ($43 + 4 + ($43 & 1) << 2) | 0;
    $y$04$i = $35 + ($45 + 4 + ($45 & 1) << 2) | 0;
    while (1) {
     HEAP32[$x$05$i >> 2] = HEAP32[$y$04$i >> 2];
     $i$06$i = $i$06$i + 1 | 0;
     if (($i$06$i | 0) == ($46 | 0)) {
      $$0$i = $40;
      break;
     } else {
      $x$05$i = $x$05$i + 8 | 0;
      $y$04$i = $y$04$i + 4 | 0;
     }
    }
   } else $$0$i = $40;
  }
 }
 $56 = _tparse(1, $$0$i) | 0;
 do if (!$56) $z$0 = 0; else if (!(HEAP32[$56 >> 2] & 16384)) $z$0 = $56; else {
  $63 = HEAP32[616] | 0;
  if ((HEAP32[830] | 0) == 1) {
   $z$0 = _colon($63, $w) | 0;
   break;
  } else {
   $z$0 = _colon($w, $63) | 0;
   break;
  }
 } while (0);
 HEAP32[894] = $3;
 $$0 = _gc($z$0, $2) | 0;
 return $$0 | 0;
}

function _vfin($w, $f, $i, $n, $0) {
 $w = $w | 0;
 $f = $f | 0;
 $i = $i | 0;
 $n = $n | 0;
 $0 = $0 | 0;
 var $$0 = 0, $$sum7 = 0, $12 = 0, $14 = 0, $16 = 0, $22 = 0, $24 = 0, $27 = 0, $31 = 0, $35 = 0, $41 = 0, $44 = 0, $46 = 0, $52 = 0, $57 = 0, $60 = 0, $7 = 0, $8 = 0, $rd = 0;
 $rd = $0 & 255;
 HEAP32[$f >> 2] = 0;
 if (!(HEAP32[$w >> 2] & 32)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$w + 8 >> 2] | 0) != 2) {
  _jsignal(9);
  $$0 = 0;
  return $$0 | 0;
 }
 $7 = $w + 12 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $12 = _vi(HEAP32[$w + ($8 + 5 + ($8 & 1) << 2) >> 2] | 0) | 0;
 $14 = HEAP32[$12 + 8 >> 2] | 0;
 $16 = HEAP32[$12 + 12 >> 2] | 0;
 if (($16 | 0) >= 2) {
  _jsignal(14);
  $$0 = 0;
  return $$0 | 0;
 }
 if (($14 + -1 | 0) >>> 0 >= 2) {
  _jsignal(9);
  $$0 = 0;
  return $$0 | 0;
 }
 $$sum7 = $16 + 4 + ($16 & 1) | 0;
 $22 = HEAP32[$12 + ($$sum7 << 2) >> 2] | 0;
 if (($14 | 0) == 1) $57 = -1; else {
  $24 = HEAP32[$12 + ($$sum7 + 1 << 2) >> 2] | 0;
  if (($24 | 0) > -1) $57 = $24; else {
   _jsignal(9);
   $$0 = 0;
   return $$0 | 0;
  }
 }
 $27 = ($0 & 255 | 0) != 0 ? 8440 : 8432;
 do if (!(HEAP32[$w >> 2] & 32)) _jsignal(3); else {
  $31 = HEAP32[$7 >> 2] | 0;
  $35 = _vs(HEAP32[$w + ($31 + 4 + ($31 & 1) << 2) >> 2] | 0) | 0;
  if ($35) {
   if (!(HEAP32[$35 + 8 >> 2] | 0)) {
    _jsignal(9);
    break;
   }
   $41 = HEAP32[$35 + 12 >> 2] | 0;
   $44 = _fopen($35 + ($41 + 4 + ($41 & 1) << 2) | 0, $27 | 0) | 0;
   if (!$44) {
    _jsignal(7);
    break;
   }
   HEAP32[$f >> 2] = $44;
   _fseek($44 | 0, 0, 2) | 0;
   $46 = _ftell($44 | 0) | 0;
   _rewind($44 | 0);
   if (!(($22 | 0) >= (0 - $46 | 0) & ($22 | 0) < ($46 | 0))) {
    _jsignal(6);
    $$0 = 0;
    return $$0 | 0;
   }
   $52 = (($22 | 0) < 0 ? $46 : 0) + $22 | 0;
   HEAP32[$i >> 2] = $52;
   if (!($rd << 24 >> 24)) if (((HEAP32[$n >> 2] | 0) + $52 | 0) > ($46 | 0)) {
    _jsignal(6);
    $$0 = 0;
    return $$0 | 0;
   }
   $60 = ($57 | 0) < 0 ? $46 - $52 | 0 : $57;
   HEAP32[$n >> 2] = $60;
   if (($60 + $52 | 0) <= ($46 | 0)) {
    $$0 = 1;
    return $$0 | 0;
   }
   _jsignal(6);
   $$0 = 0;
   return $$0 | 0;
  }
 } while (0);
 HEAP32[$f >> 2] = 0;
 $$0 = 0;
 return $$0 | 0;
}

function _evms($w) {
 $w = $w | 0;
 var $$0 = 0, $18 = 0, $33 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$w + 12 >> 2] | 0) != 1) {
  _jsignal(14);
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$w + 8 >> 2] | 0) != 21) {
  _jsignal(9);
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 32)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(_vs(HEAP32[$w + 24 >> 2] | 0) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(_vs(HEAP32[$w + 28 >> 2] | 0) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(_vs(HEAP32[$w + 32 >> 2] | 0) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(_vs(HEAP32[$w + 36 >> 2] | 0) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(_vs(HEAP32[$w + 40 >> 2] | 0) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $33 = $w + 44 | 0;
 if (!(_vs(HEAP32[$33 >> 2] | 0) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(_vs(HEAP32[$33 + 4 >> 2] | 0) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(_vs(HEAP32[$33 + 8 >> 2] | 0) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(_vs(HEAP32[$33 + 12 >> 2] | 0) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(_vs(HEAP32[$33 + 16 >> 2] | 0) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(_vs(HEAP32[$33 + 20 >> 2] | 0) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(_vs(HEAP32[$33 + 24 >> 2] | 0) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(_vs(HEAP32[$33 + 28 >> 2] | 0) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(_vs(HEAP32[$33 + 32 >> 2] | 0) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(_vs(HEAP32[$33 + 36 >> 2] | 0) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(_vs(HEAP32[$33 + 40 >> 2] | 0) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(_vs(HEAP32[$33 + 44 >> 2] | 0) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(_vs(HEAP32[$33 + 48 >> 2] | 0) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(_vs(HEAP32[$33 + 52 >> 2] | 0) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(_vs(HEAP32[$33 + 56 >> 2] | 0) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(_vs(HEAP32[$33 + 60 >> 2] | 0) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $18 = _link(HEAP32[616] | 0, $w) | 0;
 if (!$18) {
  $$0 = 0;
  return $$0 | 0;
 }
 _ra($18) | 0;
 _fa(HEAP32[650] | 0) | 0;
 HEAP32[650] = $18;
 $$0 = HEAP32[616] | 0;
 return $$0 | 0;
}

function _trr($w) {
 $w = $w | 0;
 var $$0 = 0, $$sum1 = 0, $$sum7 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $26 = 0, $31 = 0, $38 = 0, $43 = 0, $45 = 0, $48 = 0, $50 = 0, $54 = 0, $55 = 0, $61 = 0, $66 = 0, $67 = 0, $74 = 0, $77 = 0, $80 = 0, $9 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (HEAP32[$w >> 2] & 1151) {
  $$0 = _tleaf($w) | 0;
  return $$0 | 0;
 }
 $9 = HEAP32[$w + 12 >> 2] | 0;
 $$sum1 = $9 + 4 + ($9 & 1) | 0;
 $13 = HEAP8[$w + ($$sum1 << 2) + 31 >> 0] | 0;
 $15 = HEAP32[$w + ($$sum1 + 6 << 2) >> 2] | 0;
 $17 = HEAP32[$w + ($$sum1 + 2 << 2) >> 2] | 0;
 $19 = HEAP32[$w + ($$sum1 + 3 << 2) >> 2] | 0;
 $21 = HEAP32[$w + ($$sum1 + 4 << 2) >> 2] | 0;
 $26 = $13 << 24 >> 24;
 $31 = (($17 | 0) != 0 & 1) + (($13 << 24 >> 24 == -21 | $13 << 24 >> 24 == -18) & 1) + (($19 | 0) != 0 & 1) | 0;
 if (!$31) {
  $$0 = _tleaf(_spellout($26) | 0) | 0;
  return $$0 | 0;
 }
 if ((_evoke($w) | 0) << 24 >> 24) {
  $38 = (_cf($17) | 0) << 24 >> 24;
  if ((HEAP8[5792 + $38 >> 0] | 0) == 2) $43 = $17; else $43 = _spellout($38) | 0;
  $$0 = _tleaf($43) | 0;
  return $$0 | 0;
 }
 $45 = _ga(32, $31, 1, 0) | 0;
 if (!$45) {
  $$0 = 0;
  return $$0 | 0;
 }
 $48 = HEAP32[$45 + 12 >> 2] | 0;
 $$sum7 = $48 + 4 + ($48 & 1) | 0;
 $50 = $45 + ($$sum7 << 2) | 0;
 if (($31 | 0) > 0) {
  if (!($15 & 1)) $61 = _trr($17) | 0; else {
   $54 = _every($17, 299) | 0;
   $55 = _scc(48) | 0;
   $61 = _troot($55, _graft(_ope(_every($54, 356) | 0) | 0) | 0) | 0;
  }
  HEAP32[$50 >> 2] = $61;
  if (!$61) {
   $$0 = 0;
   return $$0 | 0;
  }
  if (($31 | 0) > 1) {
   if (!($15 & 2)) $74 = _trr($19) | 0; else {
    $66 = _every($19, 299) | 0;
    $67 = _scc(48) | 0;
    $74 = _troot($67, _graft(_ope(_every($66, 356) | 0) | 0) | 0) | 0;
   }
   HEAP32[$45 + ($$sum7 + 1 << 2) >> 2] = $74;
   if (!$74) {
    $$0 = 0;
    return $$0 | 0;
   }
   if (($31 | 0) > 2) {
    $77 = _trr($21) | 0;
    HEAP32[$45 + ($$sum7 + 2 << 2) >> 2] = $77;
    if (!$77) {
     $$0 = 0;
     return $$0 | 0;
    }
   }
  }
 }
 $80 = _spellout($26) | 0;
 $$0 = _gc(_troot($80, _graft(_ope($45) | 0) | 0) | 0, $2) | 0;
 return $$0 | 0;
}

function _taylor($w) {
 $w = $w | 0;
 var $$0 = 0, $$sum1 = 0, $12 = 0, $14 = 0, $20 = 0, $26 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $40 = 0, $41 = 0, $44 = 0, $45 = 0, $55 = 0, $56 = 0, $59 = 0, $60 = 0, $64 = 0, $65 = 0, $68 = 0, $8 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 128)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 if (!((_nameless($w) | 0) << 24 >> 24)) {
  $$0 = _fdef(-49, 128, 285, 0, $w, 0, 0, 0, 127, 127, 127) | 0;
  return $$0 | 0;
 }
 $8 = HEAP32[$w + 12 >> 2] | 0;
 $$sum1 = $8 + 4 + ($8 & 1) | 0;
 $12 = HEAP8[$w + ($$sum1 << 2) + 31 >> 0] | 0;
 $14 = HEAP32[$w + ($$sum1 + 2 << 2) >> 2] | 0;
 if (!$14) $26 = 0; else $26 = (HEAP32[$14 >> 2] & 127 | 0) != 0 & 1;
 $20 = HEAP32[$w + ($$sum1 + 3 << 2) >> 2] | 0;
 if (!$20) $28 = 0; else $28 = (HEAP32[$20 >> 2] & 127 | 0) != 0 & 1;
 if ($12 << 24 >> 24 != 38 ? 1 : $26 << 24 >> 24 == $28 << 24 >> 24) {
  $64 = $12 << 24 >> 24;
  if (($64 | 0) == -21) {
   $68 = _taylor($14) | 0;
   return _folk($68, $20, _taylor(HEAP32[$w + ($$sum1 + 4 << 2) >> 2] | 0) | 0) | 0;
  } else if (($64 | 0) == 94) {
   $65 = _ds(37) | 0;
   $$0 = _atop($65, _ds(33) | 0) | 0;
   return $$0 | 0;
  } else {
   _jsignal(3);
   $$0 = 0;
   return $$0 | 0;
  }
 }
 $31 = (HEAP32[$14 >> 2] & 127 | 0) != 0;
 $32 = $31 ? $20 : $14;
 $33 = $31 ? $14 : $20;
 $35 = HEAP32[$32 + 12 >> 2] | 0;
 $40 = HEAP8[$32 + ($35 + 4 + ($35 & 1) << 2) + 31 >> 0] | 0;
 if (($40 | 0) == 33) {
  if ($31) if ((_all1(_eq($33, HEAP32[658] | 0) | 0) | 0) << 24 >> 24) {
   $55 = _parse(_tokens(_cstr(160) | 0) | 0) | 0;
   $56 = _ds(123) | 0;
   $59 = _amp($56, _over($55, HEAP32[660] | 0) | 0) | 0;
   $60 = _tally($55) | 0;
   $$0 = _atop($59, _amp($60, _ds(-126) | 0) | 0) | 0;
   return $$0 | 0;
  }
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 } else if (($40 | 0) == -52) if ($31) {
  $41 = _ds(123) | 0;
  $44 = _amp($41, _over($33, HEAP32[660] | 0) | 0) | 0;
  $45 = _tally($33) | 0;
  $$0 = _atop($44, _amp($45, _ds(-126) | 0) | 0) | 0;
  return $$0 | 0;
 } else {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 } else {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function _merge2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$ = 0, $$0 = 0, $10 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $28 = 0, $29 = 0, $31 = 0, $34 = 0, $36 = 0, $4 = 0, $44 = 0, $45 = 0, $47 = 0, $49 = 0, $52 = 0, $54 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $7 = 0, $i$017 = 0, $iv$016 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $7 = HEAP32[$self + ($4 + 6 + ($4 & 1) << 2) >> 2] | 0;
 if (!$7) $29 = 0; else {
  $10 = HEAP32[$7 + 12 >> 2] | 0;
  $29 = HEAP32[$7 + ($10 + 5 + ($10 & 1) << 2) >> 2] | 0;
 }
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $17 = HEAP32[$a + 8 >> 2] | 0;
 $19 = HEAP32[$a + 12 >> 2] | 0;
 $20 = $a + 16 | 0;
 if ($17) if (!((_homo(HEAP32[$a >> 2] | 0, HEAP32[$w >> 2] | 0) | 0) << 24 >> 24)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $28 = _sc(HEAP32[$w + 8 >> 2] | 0) | 0;
 $31 = _pind($28, ftCall_iiii($29 | 0, $a | 0, $w | 0, $7 | 0) | 0) | 0;
 if (!$31) {
  $$0 = 0;
  return $$0 | 0;
 }
 $34 = HEAP32[$31 + 8 >> 2] | 0;
 $36 = HEAP32[$31 + 12 >> 2] | 0;
 if (($36 | 0) < ($19 | 0)) {
  _jsignal(14);
  $$0 = 0;
  return $$0 | 0;
 }
 if (_memcmp($20, $31 + 16 + ($36 - $19 << 2) | 0, $19 << 2) | 0) {
  _jsignal(9);
  $$0 = 0;
  return $$0 | 0;
 }
 $44 = HEAP32[$a >> 2] | 0;
 $45 = HEAP32[$w >> 2] | 0;
 $$ = ($44 | 0) > ($45 | 0) ? $44 : $45;
 $47 = _cvt($$, $a) | 0;
 if (!$47) {
  $$0 = 0;
  return $$0 | 0;
 }
 $49 = _cvt($$, $w) | 0;
 if (!$49) {
  $$0 = 0;
  return $$0 | 0;
 }
 $52 = HEAP32[$49 + 12 >> 2] | 0;
 $54 = $49 + ($52 + 4 + ($52 & 1) << 2) | 0;
 $55 = _bp($$) | 0;
 $57 = HEAP32[$47 + 12 >> 2] | 0;
 $59 = $47 + ($57 + 4 + ($57 & 1) << 2) | 0;
 $61 = ($19 | 0) != 0 ? $55 : 0;
 if (($34 | 0) > 0) {
  $i$017 = 0;
  $iv$016 = $31 + ($36 + 4 + ($36 & 1) << 2) | 0;
  while (1) {
   _memcpy($54 + (Math_imul(HEAP32[$iv$016 >> 2] | 0, $55) | 0) | 0, $59 + (Math_imul(($i$017 | 0) % ($17 | 0) | 0, $61) | 0) | 0, $55 | 0) | 0;
   $i$017 = $i$017 + 1 | 0;
   if (($i$017 | 0) == ($34 | 0)) break; else $iv$016 = $iv$016 + 4 | 0;
  }
 }
 $$0 = _gc($49, $2) | 0;
 return $$0 | 0;
}

function _repeatf($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$0$i9 = 0, $$lcssa = 0, $$lcssa42 = 0, $$lcssa44 = 0, $0 = 0, $1 = 0, $11 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $26 = 0, $29 = 0, $33 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $45 = 0, $48 = 0, $52 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $a$tr = 0, $a$tr$lcssa40 = 0, $a$tr$lcssa41 = 0, $a$tr$ph = 0, $w$tr$ph = 0, $w$tr$ph$lcssa45 = 0, label = 0;
 $a$tr$ph = $a;
 $w$tr$ph = $w;
 L1 : while (1) {
  $0 = ($w$tr$ph | 0) != 0;
  $1 = $w$tr$ph + 12 | 0;
  $2 = $w$tr$ph + 16 | 0;
  $a$tr = $a$tr$ph;
  while (1) {
   if (!(($a$tr | 0) != 0 & $0)) {
    $$0 = 0;
    label = 19;
    break L1;
   }
   $4 = $a$tr + 12 | 0;
   $6 = HEAP32[$1 >> 2] | 0;
   $7 = (HEAP32[$4 >> 2] | 0) == 0;
   $8 = ($6 | 0) != 0;
   if ($7 ^ $8) {
    $$lcssa = $6;
    $a$tr$lcssa40 = $a$tr;
    $w$tr$ph$lcssa45 = $w$tr$ph;
    break L1;
   }
   if ($7) {
    if (!$6) $11 = 1; else $11 = HEAP32[$2 >> 2] | 0;
    $55 = _reshape(_sc($11) | 0, $a$tr) | 0;
   } else $55 = $a$tr;
   if ($8) $a$tr = $55; else {
    $$lcssa42 = $4;
    $$lcssa44 = $55;
    $a$tr$lcssa41 = $a$tr;
    break;
   }
  }
  if (!(HEAP32[$$lcssa42 >> 2] | 0)) $18 = 1; else $18 = HEAP32[$a$tr$lcssa41 + 16 >> 2] | 0;
  $a$tr$ph = $$lcssa44;
  $w$tr$ph = _reshape(_sc($18) | 0, $w$tr$ph) | 0;
 }
 if ((label | 0) == 19) return $$0 | 0;
 $21 = _rect($a$tr$lcssa40) | 0;
 if (!$21) $$0$i9 = 0; else {
  $24 = $21 + 8 | 0;
  $26 = _ga(HEAP32[$21 >> 2] | 0, HEAP32[$24 >> 2] | 0, 1, 0) | 0;
  if (!$26) $$0$i9 = 0; else {
   $29 = HEAP32[$26 + 12 >> 2] | 0;
   $33 = HEAP32[$21 + 12 >> 2] | 0;
   $36 = HEAP32[$24 >> 2] | 0;
   _memcpy($26 + ($29 + 4 + ($29 & 1) << 2) | 0, $21 + ($33 + 4 + ($33 & 1) << 2) | 0, Math_imul(_bp(HEAP32[$21 >> 2] | 0) | 0, $36) | 0) | 0;
   $$0$i9 = $26;
  }
 }
 $40 = _vi($$0$i9) | 0;
 $41 = HEAP32[100] | 0;
 if (!$41) $52 = _filler($w$tr$ph$lcssa45) | 0; else $52 = $41;
 $45 = _slash(_ds(44) | 0) | 0;
 $48 = _ds(($$lcssa | 0) > 1 ? -99 : 44) | 0;
 $$0 = _repeat($40, _df2($w$tr$ph$lcssa45, $52, _atop($45, _qq($48, _v2(-1, 127) | 0) | 0) | 0) | 0) | 0;
 return $$0 | 0;
}

function _zasinh($agg$result, $v$02, $v$14) {
 $agg$result = $agg$result | 0;
 $v$02 = +$v$02;
 $v$14 = +$v$14;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $30 = 0.0, $33 = 0.0, $34 = 0, $37 = 0.0, $38 = 0.0, $47 = 0.0, $49 = 0.0, $p$0$i$i = 0.0, $zi$0$i$i = 0.0, $zi$0$i5$i = 0.0, $zr$0$i$i = 0.0, $zr$0$i4$i = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp;
 if ($v$02 < 0.0) {
  _zasinh($0, +HEAPF64[304] - $v$02, +HEAPF64[305] - $v$14);
  $10 = +HEAPF64[305] - +HEAPF64[$0 + 8 >> 3];
  HEAPF64[$agg$result >> 3] = +HEAPF64[304] - +HEAPF64[$0 >> 3];
  HEAPF64[$agg$result + 8 >> 3] = $10;
  STACKTOP = sp;
  return;
 }
 $12 = +HEAPF64[974];
 $13 = +HEAPF64[975];
 $14 = $12 + $v$02;
 $15 = $13 + $v$14;
 $16 = $v$02 - $12;
 $17 = $v$14 - $13;
 if ($14 != 0.0 | $15 != 0.0) if ($16 != 0.0 | $17 != 0.0) {
  $zi$0$i5$i = $16 * $15 + $14 * $17;
  $zr$0$i4$i = $14 * $16 - $15 * $17;
 } else {
  $zi$0$i5$i = 0.0;
  $zr$0$i4$i = 0.0;
 } else {
  $zi$0$i5$i = 0.0;
  $zr$0$i4$i = 0.0;
 }
 $30 = $zr$0$i4$i >= 0.0 ? $zr$0$i4$i : -$zr$0$i4$i;
 $33 = $zi$0$i5$i >= 0.0 ? $zi$0$i5$i : -$zi$0$i5$i;
 $34 = $30 < $33;
 $p$0$i$i = $34 ? $33 : $30;
 if ($p$0$i$i != 0.0) {
  $37 = ($34 ? $30 : $33) * .5 / $p$0$i$i;
  $38 = $zr$0$i4$i * .5;
  $47 = +Math_sqrt(+(($38 >= 0.0 ? $38 : -$38) + $p$0$i$i * +Math_sqrt(+($37 * $37 + .25))));
  $49 = $zi$0$i5$i / ($47 + $47);
  if ($zr$0$i4$i < 0.0) {
   $zi$0$i$i = $zi$0$i5$i < 0.0 ? -$47 : $47;
   $zr$0$i$i = $49 >= 0.0 ? $49 : -$49;
  } else {
   $zi$0$i$i = $49;
   $zr$0$i$i = $47;
  }
 } else {
  $zi$0$i$i = 0.0;
  $zr$0$i$i = 0.0;
 }
 HEAPF64[$1 >> 3] = $zr$0$i$i + $v$02;
 HEAPF64[$1 + 8 >> 3] = $zi$0$i$i + $v$14;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$1 + 12 >> 2];
 _zlog($agg$result, $$byval_copy);
 STACKTOP = sp;
 return;
}

function _car($w) {
 $w = $w | 0;
 var $$0 = 0, $$sum1 = 0, $10 = 0, $13 = 0, $16 = 0, $2 = 0, $21 = 0, $24 = 0, $29 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $44 = 0, $46 = 0, $47 = 0, $49 = 0, $7 = 0, $9 = 0, $i$09 = 0, $n$0 = 0, $v$08 = 0, label = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = $w + 8 | 0;
 $4 = $w + 12 | 0;
 $7 = _ga(HEAP32[$w >> 2] | 0, HEAP32[$2 >> 2] | 0, HEAP32[$4 >> 2] | 0, $w + 16 | 0) | 0;
 if (!$7) {
  $$0 = 0;
  return $$0 | 0;
 }
 $9 = $7 + 12 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 $13 = HEAP32[$4 >> 2] | 0;
 $16 = HEAP32[$2 >> 2] | 0;
 _memcpy($7 + ($10 + 4 + ($10 & 1) << 2) | 0, $w + ($13 + 4 + ($13 & 1) << 2) | 0, Math_imul(_bp(HEAP32[$w >> 2] | 0) | 0, $16) | 0) | 0;
 $21 = HEAP32[$7 + 8 >> 2] | 0;
 switch (HEAP32[$7 >> 2] | 0) {
 case 512:
 case 256:
 case 128:
  {
   $34 = HEAP32[$9 >> 2] | 0;
   $$sum1 = $34 + 4 + ($34 & 1) | 0;
   $36 = $7 + ($$sum1 + 2 << 2) | 0;
   $37 = HEAP32[$36 >> 2] | 0;
   if ($37) {
    $39 = _car($37) | 0;
    HEAP32[$36 >> 2] = $39;
    if (!$39) {
     $$0 = 0;
     return $$0 | 0;
    }
   }
   $41 = $7 + ($$sum1 + 3 << 2) | 0;
   $42 = HEAP32[$41 >> 2] | 0;
   if ($42) {
    $44 = _car($42) | 0;
    HEAP32[$41 >> 2] = $44;
    if (!$44) {
     $$0 = 0;
     return $$0 | 0;
    }
   }
   $46 = $7 + ($$sum1 + 4 << 2) | 0;
   $47 = HEAP32[$46 >> 2] | 0;
   if ($47) {
    $49 = _car($47) | 0;
    HEAP32[$46 >> 2] = $49;
    if (!$49) {
     $$0 = 0;
     return $$0 | 0;
    }
   }
   break;
  }
 case 32:
  {
   $n$0 = $21;
   label = 5;
   break;
  }
 case 64:
  {
   $n$0 = $21 << 1;
   label = 5;
   break;
  }
 default:
  {}
 }
 L20 : do if ((label | 0) == 5) {
  $24 = HEAP32[$9 >> 2] | 0;
  if (($n$0 | 0) > 0) {
   $i$09 = 0;
   $v$08 = $7 + ($24 + 4 + ($24 & 1) << 2) | 0;
   while (1) {
    $29 = _car(HEAP32[$v$08 >> 2] | 0) | 0;
    HEAP32[$v$08 >> 2] = $29;
    if (!$29) {
     $$0 = 0;
     break;
    }
    $i$09 = $i$09 + 1 | 0;
    if (($i$09 | 0) >= ($n$0 | 0)) break L20; else $v$08 = $v$08 + 4 | 0;
   }
   return $$0 | 0;
  }
 } while (0);
 $$0 = $7;
 return $$0 | 0;
}

function _dgcd($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $$0$i = 0.0, $$0$i5$i = 0.0, $$01$i = 0.0, $$01$i$phi = 0.0, $$02$i = 0.0, $$02$i$phi = 0.0, $0 = 0.0, $13 = 0.0, $15 = 0.0, $16 = 0.0, $21 = 0.0, $28 = 0.0, $29 = 0.0, $34 = 0.0, $4 = 0.0, $a$tr$i = 0.0, $a$tr$i$lcssa15 = 0.0, $a$tr$i$phi = 0.0, $b$tr$i = 0.0, $b$tr$i$lcssa16 = 0.0, label = 0;
 $0 = +HEAPF64[$u >> 3];
 $4 = +HEAPF64[$v >> 3];
 $a$tr$i = $0 >= 0.0 ? $0 : -$0;
 $b$tr$i = $4 >= 0.0 ? $4 : -$4;
 while (1) {
  if (!($a$tr$i != 0.0)) {
   $$0$i = $b$tr$i;
   label = 15;
   break;
  }
  if ($a$tr$i > $b$tr$i) {
   $a$tr$i$phi = $b$tr$i;
   $b$tr$i = $a$tr$i;
   $a$tr$i = $a$tr$i$phi;
  } else {
   $a$tr$i$lcssa15 = $a$tr$i;
   $b$tr$i$lcssa16 = $b$tr$i;
   break;
  }
 }
 if ((label | 0) == 15) {
  HEAPF64[$x >> 3] = $$0$i;
  return;
 }
 $$01$i = $a$tr$i$lcssa15;
 $$02$i = $b$tr$i$lcssa16;
 while (1) {
  $13 = $a$tr$i$lcssa15 / +Math_floor(+($a$tr$i$lcssa15 / $$01$i + .5));
  if ($13 != 0.0) {
   $15 = $b$tr$i$lcssa16 / $13;
   $16 = +_tfloor($15);
   if ((_teq($16, +_tceil($15)) | 0) << 24 >> 24) {
    $$0$i = $$01$i;
    label = 15;
    break;
   }
   $21 = $b$tr$i$lcssa16 - $13 * $16;
   if ($13 > 0.0 & $21 > 0.0) $$0$i5$i = $21; else if ($13 < 0.0 & $21 < 0.0) $$0$i5$i = $21; else {
    $$0$i = $$01$i;
    label = 15;
    break;
   }
  } else $$0$i5$i = $b$tr$i$lcssa16;
  if (!($$0$i5$i != 0.0)) {
   $$0$i = $$01$i;
   label = 15;
   break;
  }
  if (!($$01$i != 0.0)) {
   $$02$i$phi = $$01$i;
   $$01$i$phi = $$02$i;
   $$02$i = $$02$i$phi;
   $$01$i = $$01$i$phi;
   continue;
  }
  $28 = $$02$i / $$01$i;
  $29 = +_tfloor($28);
  if ((_teq($29, +_tceil($28)) | 0) << 24 >> 24) {
   $$02$i$phi = $$01$i;
   $$01$i = 0.0;
   $$02$i = $$02$i$phi;
   continue;
  }
  $34 = $$02$i - $$01$i * $29;
  if (!($$01$i > 0.0 & $34 > 0.0)) if (!($$01$i < 0.0 & $34 < 0.0)) {
   $$02$i$phi = $$01$i;
   $$01$i = 0.0;
   $$02$i = $$02$i$phi;
   continue;
  }
  $$02$i$phi = $$01$i;
  $$01$i = $34;
  $$02$i = $$02$i$phi;
 }
 if ((label | 0) == 15) {
  HEAPF64[$x >> 3] = $$0$i;
  return;
 }
}

function _adot1($w) {
 $w = $w | 0;
 var $$0 = 0, $$0$i = 0, $$0$i1 = 0, $$sum1$i = 0, $$sum3$i = 0, $$sum5$i = 0, $19 = 0, $21 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $34 = 0, $37 = 0, $40 = 0, $44 = 0, $49 = 0, $i1$08$i = 0, $indvars$iv$i = 0, $j$010$i = 0, $k$0$lcssa$i = 0, $k$07$i = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$w + 12 >> 2] | 0) > 1) {
  $$0 = _rank1ex($w, 0, 1, 152) | 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 32)) {
  if (!(HEAP32[$w + 8 >> 2] | 0)) $$0$i = _sc(0) | 0; else $$0$i = _cvt(4, _increm(_df1($w, _slash(_ds(-124) | 0) | 0) | 0) | 0) | 0;
  $19 = _pfill($$0$i, $w) | 0;
 } else $19 = _cdot1($w) | 0;
 if (!$19) {
  $$0 = 0;
  return $$0 | 0;
 }
 $21 = $19 + 12 | 0;
 if (!(HEAP32[$21 >> 2] | 0)) $26 = 1; else $26 = HEAP32[$19 + 16 >> 2] | 0;
 $27 = _apv($26, $26, -1) | 0;
 $28 = HEAP32[$21 >> 2] | 0;
 if (($28 | 0) > 1) $$0$i1 = _rank1ex($19, 0, 1, 397) | 0; else {
  $32 = HEAP32[$19 + 8 >> 2] | 0;
  $$sum1$i = $28 + 4 + ($28 & 1) | 0;
  $34 = _ca($19) | 0;
  if (!$34) $$0$i1 = 0; else {
   $37 = HEAP32[$34 + 12 >> 2] | 0;
   $$sum3$i = $37 + 4 + ($37 & 1) | 0;
   if (($32 | 0) > 1) {
    $40 = $32 + -1 | 0;
    $indvars$iv$i = $40;
    $j$010$i = 0;
    while (1) {
     $j$010$i = $j$010$i + 1 | 0;
     if (($32 | 0) > ($j$010$i | 0)) {
      $$sum5$i = $$sum1$i + $j$010$i | 0;
      $44 = HEAP32[$19 + ($$sum5$i << 2) >> 2] | 0;
      $i1$08$i = 0;
      $k$07$i = 0;
      while (1) {
       $49 = (($44 | 0) > (HEAP32[$19 + ($i1$08$i + $$sum5$i << 2) >> 2] | 0) & 1) + $k$07$i | 0;
       $i1$08$i = $i1$08$i + 1 | 0;
       if (($i1$08$i | 0) == ($indvars$iv$i | 0)) {
        $k$0$lcssa$i = $49;
        break;
       } else $k$07$i = $49;
      }
     } else $k$0$lcssa$i = 0;
     HEAP32[$34 + ($$sum3$i + $j$010$i << 2) >> 2] = $k$0$lcssa$i;
     if (($j$010$i | 0) == ($40 | 0)) {
      $$0$i1 = $34;
      break;
     } else $indvars$iv$i = $indvars$iv$i + -1 | 0;
    }
   } else $$0$i1 = $34;
  }
 }
 $$0 = _base2($27, $$0$i1) | 0;
 return $$0 | 0;
}

function _ltie($w) {
 $w = $w | 0;
 var $$0 = 0, $$lcssa19 = 0, $11 = 0, $17 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $28 = 0, $29 = 0, $3 = 0, $35 = 0, $37 = 0, $40 = 0, $42 = 0, $46 = 0, $6 = 0, $9 = 0, $i$010 = 0, $storemerge = 0, $switch = 0, $u$09 = 0, $v$08 = 0, label = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 8 >> 2] | 0;
 $3 = _spellout(96) | 0;
 if (!$3) {
  $$0 = 0;
  return $$0 | 0;
 }
 $6 = _ga(32, $2 << 1, 1, 0) | 0;
 if (!$6) {
  $$0 = 0;
  return $$0 | 0;
 }
 $9 = HEAP32[$6 + 12 >> 2] | 0;
 $11 = HEAP32[$w + 12 >> 2] | 0;
 L10 : do if (($2 | 0) > 0) {
  $i$010 = 0;
  $u$09 = $w + ($11 + 4 + ($11 & 1) << 2) | 0;
  $v$08 = $6 + ($9 + 4 + ($9 & 1) << 2) | 0;
  while (1) {
   $17 = ($i$010 | 0) != 0;
   $20 = $v$08 + 4 | 0;
   HEAP32[$v$08 >> 2] = $17 ? $3 : HEAP32[616] | 0;
   $22 = HEAP32[$u$09 >> 2] | 0;
   $u$09 = $u$09 + 4 | 0;
   $24 = HEAP32[$22 + 12 >> 2] | 0;
   $28 = HEAP8[$22 + ($24 + 4 + ($24 & 1) << 2) + 31 >> 0] | 0;
   $29 = _lrep($22) | 0;
   if (!$29) {
    $$0 = 0;
    label = 15;
    break;
   }
   $switch = ($28 & -2) << 24 >> 24 == -22;
   if ($switch | $17 ^ 1) if ($switch) label = 10; else $storemerge = $29; else if (!((_lp($29) | 0) << 24 >> 24)) $storemerge = $29; else label = 10;
   if ((label | 0) == 10) {
    label = 0;
    $35 = HEAP32[$29 + 8 >> 2] | 0;
    $37 = _ga(2, $35 + 2 | 0, 1, 0) | 0;
    if (!$37) {
     $$lcssa19 = $20;
     break;
    }
    $40 = HEAP32[$37 + 12 >> 2] | 0;
    $42 = $37 + ($40 + 4 + ($40 & 1) << 2) | 0;
    HEAP8[$42 >> 0] = 40;
    HEAP8[$42 + ($35 + 1) >> 0] = 41;
    $46 = HEAP32[$29 + 12 >> 2] | 0;
    _memcpy($42 + 1 | 0, $29 + ($46 + 4 + ($46 & 1) << 2) | 0, $35 | 0) | 0;
    $storemerge = $37;
   }
   HEAP32[$20 >> 2] = $storemerge;
   $i$010 = $i$010 + 1 | 0;
   if (($i$010 | 0) >= ($2 | 0)) break L10; else $v$08 = $v$08 + 8 | 0;
  }
  if ((label | 0) == 15) return $$0 | 0;
  HEAP32[$$lcssa19 >> 2] = 0;
  $$0 = 0;
  return $$0 | 0;
 } while (0);
 $$0 = _raze($6) | 0;
 return $$0 | 0;
}

function _oblique($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$0$i = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $30 = 0, $32 = 0, $33 = 0, $36 = 0, $4 = 0, $41 = 0, $44 = 0, $51 = 0, $57 = 0, $58 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $i$04$i = 0, $x$03$i = 0, label = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $7 = HEAP32[$self + ($4 + 6 + ($4 & 1) << 2) >> 2] | 0;
 $8 = _mr($self) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $11 = HEAP32[$w + 12 >> 2] | 0;
 if (($8 | 0) < ($11 | 0)) {
  $$0 = _rank1ex($w, $self, $8, 252) | 0;
  return $$0 | 0;
 }
 $14 = ($11 | 0) > 1;
 if ($14) {
  $16 = HEAP32[$w + 16 >> 2] | 0;
  $17 = ($16 | 0) != 0;
  $64 = $16 - ($17 & 1) | 0;
  $65 = $17;
  $66 = $16;
  label = 7;
 } else if (!$11) {
  $24 = 1;
  $28 = 1;
  $30 = 1;
  $41 = 0;
 } else {
  $64 = 0;
  $65 = 1;
  $66 = 1;
  label = 7;
 }
 if ((label | 0) == 7) {
  $24 = HEAP32[$w + 16 + (($14 & 1) << 2) >> 2] | 0;
  $28 = $65;
  $30 = $66;
  $41 = $64;
 }
 $25 = ($24 | 0) != 0;
 $27 = $24 - ($25 & 1) | 0;
 $32 = $28 & $25 ? $30 + -1 + $24 | 0 : 0;
 $33 = _ga(32, $32, 1, 0) | 0;
 L14 : do if (!$33) $$0$i = 0; else {
  $36 = HEAP32[$33 + 12 >> 2] | 0;
  if (($32 | 0) > 0) {
   $i$04$i = 0;
   $x$03$i = $33 + ($36 + 4 + ($36 & 1) << 2) | 0;
   while (1) {
    $44 = ($i$04$i | 0) < ($27 | 0) ? $i$04$i : $27;
    $51 = _apv(1 - $i$04$i + (($i$04$i | 0) < ($41 | 0) ? $i$04$i : $41) + $44 | 0, (Math_imul($i$04$i - $44 | 0, $24) | 0) + $44 | 0, $27) | 0;
    HEAP32[$x$03$i >> 2] = $51;
    if (!$51) {
     $$0$i = 0;
     break L14;
    }
    $i$04$i = $i$04$i + 1 | 0;
    if (($i$04$i | 0) >= ($32 | 0)) {
     $$0$i = $33;
     break;
    } else $x$03$i = $x$03$i + 4 | 0;
   }
  } else $$0$i = $33;
 } while (0);
 $57 = _ravel(_rank1ex($w, 0, -2, 52) | 0) | 0;
 $58 = _ac2(260) | 0;
 $$0 = _gc(_df2($$0$i, $57, _atop($7, _qq($58, _v2(0, 1) | 0) | 0) | 0) | 0, $2) | 0;
 return $$0 | 0;
}

function _preparse($w) {
 $w = $w | 0;
 var $$0 = 0, $$sum1 = 0, $$sum3 = 0, $$sum6 = 0, $11 = 0, $14 = 0, $16 = 0, $19 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $29 = 0, $36 = 0, $42 = 0, $48 = 0, $5 = 0, $6 = 0, $9 = 0, $i$012 = 0, $j$0$lcssa = 0, $j$013 = 0, $j$1 = 0, label = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 32)) $5 = _rank1ex($w, 0, 1, 52) | 0; else $5 = $w;
 $6 = _every($5, 344) | 0;
 if (!$6) {
  $$0 = 0;
  return $$0 | 0;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0;
 $11 = HEAP32[$6 + 12 >> 2] | 0;
 $$sum1 = $11 + 4 + ($11 & 1) | 0;
 $14 = _sc($9 << 1) | 0;
 $16 = _reshape($14, HEAP32[636] | 0) | 0;
 if (!$16) {
  $$0 = 0;
  return $$0 | 0;
 }
 $19 = HEAP32[$16 + 12 >> 2] | 0;
 $$sum3 = $19 + 4 + ($19 & 1) | 0;
 L13 : do if (($9 | 0) > 0) {
  $22 = $$sum3 + 1 | 0;
  $i$012 = 0;
  $j$013 = 0;
  while (1) {
   $23 = $6 + ($$sum1 + $i$012 << 2) | 0;
   $24 = HEAP32[$23 >> 2] | 0;
   $26 = HEAP32[$24 + 12 >> 2] | 0;
   $$sum6 = $26 + 4 + ($26 & 1) | 0;
   $29 = HEAP32[$24 + ($$sum6 + 1 << 2) >> 2] | 0;
   if ((HEAP32[$24 + 8 >> 2] | 0) > 6) if (!(HEAP32[$29 >> 2] & 1024)) $j$1 = $j$013; else {
    $36 = $24 + ($$sum6 + 2 << 2) | 0;
    if (!(HEAP32[HEAP32[$36 >> 2] >> 2] & 4096)) $j$1 = $j$013; else {
     HEAP32[$16 + ($j$013 + $$sum3 << 2) >> 2] = $29;
     $42 = _sc($i$012) | 0;
     HEAP32[$16 + ($22 + $j$013 << 2) >> 2] = $42;
     if (!$42) {
      $$0 = 0;
      label = 15;
      break;
     }
     HEAP32[$36 >> 2] = HEAP32[620];
     $48 = _drop(HEAP32[658] | 0, $24) | 0;
     HEAP32[$23 >> 2] = $48;
     if (!$48) {
      $$0 = 0;
      label = 15;
      break;
     } else $j$1 = $j$013 + 2 | 0;
    }
   } else $j$1 = $j$013;
   $i$012 = $i$012 + 1 | 0;
   if (($i$012 | 0) >= ($9 | 0)) {
    $j$0$lcssa = $j$1;
    break L13;
   } else $j$013 = $j$1;
  }
  if ((label | 0) == 15) return $$0 | 0;
 } else $j$0$lcssa = 0; while (0);
 $$0 = _link($6, _box(_reshape(_v2(($j$0$lcssa | 0) / 2 | 0, 2) | 0, $16) | 0) | 0) | 0;
 return $$0 | 0;
}

function _dbcheck() {
 var $$0 = 0, $0 = 0, $12 = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $23 = 0, $25 = 0, $29 = 0, $31 = 0, $36 = 0, $4 = 0, $41 = 0, $42 = 0, $nw = 0, $s$1 = 0, $s$2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $nw = sp + 4 | 0;
 $0 = HEAP32[126] | 0;
 if (!$0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $4 = HEAP32[(HEAP32[108] | 0) + 20 >> 2] | 0;
 if (!$4) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ((HEAP32[$4 + 24 >> 2] | 0) != 2) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (HEAP8[464] | 0) {
  HEAP8[464] = 0;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $12 = HEAP32[$4 + 36 >> 2] | 0;
 if (!$12) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $15 = HEAP32[$12 + 8 >> 2] | 0;
 $17 = HEAP32[$12 + 12 >> 2] | 0;
 $19 = $12 + ($17 + 4 + ($17 & 1) << 2) | 0;
 $21 = HEAP32[$0 + 12 >> 2] | 0;
 $23 = $0 + ($21 + 4 + ($21 & 1) << 2) | 0;
 $25 = HEAP32[$4 + 32 >> 2] | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$4 + 28 >> 2];
 _sprintf($nw, 512, $vararg_buffer) | 0;
 if (!$23) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $s$1 = $23;
 while (1) {
  $29 = HEAP8[$s$1 >> 0] | 0;
  if ($29 << 24 >> 24 == 32) {
   $s$1 = $s$1 + 1 | 0;
   continue;
  } else if ($29 << 24 >> 24 == 42) {
   $31 = $s$1 + 1 | 0;
   if (!((_stopsub($31, $nw, $25) | 0) << 24 >> 24)) $s$2 = $31; else {
    $$0 = 1;
    label = 16;
    break;
   }
  } else if (!(_strncmp($s$1, $19, $15) | 0)) {
   $36 = $s$1 + $15 | 0;
   if ((HEAP8[$36 >> 0] | 0) == 32) if (!((_stopsub($36, $nw, $25) | 0) << 24 >> 24)) $s$2 = $36; else {
    $$0 = 1;
    label = 16;
    break;
   } else $s$2 = $36;
  } else $s$2 = $s$1;
  $41 = _strchr($s$2, 59) | 0;
  $42 = ($41 | 0) == 0;
  if ($42) {
   $$0 = 0;
   label = 16;
   break;
  } else $s$1 = $42 ? 0 : $41 + 1 | 0;
 }
 if ((label | 0) == 16) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _roll($w) {
 $w = $w | 0;
 var $$0 = 0, $1 = 0.0, $10 = 0, $12 = 0, $15 = 0, $17 = 0, $2 = 0, $22 = 0, $26 = 0.0, $37 = 0, $40 = 0, $45 = 0.0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $i$014 = 0, $i2$010 = 0, $rl$011 = 0.0, $rl$18 = 0.0, $rl$2 = 0.0, $v$012 = 0, $x$013 = 0, $x1$09 = 0, $z$0 = 0;
 $1 = +(HEAP32[606] | 0);
 $2 = _vi($w) | 0;
 if (!$2) {
  $$0 = 0;
  return $$0 | 0;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0;
 $6 = $2 + 12 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $9 = $2 + ($7 + 4 + ($7 & 1) << 2) | 0;
 $10 = _shape($2) | 0;
 $12 = _reshape($10, HEAP32[658] | 0) | 0;
 if (!$12) {
  $$0 = 0;
  return $$0 | 0;
 }
 $15 = HEAP32[$12 + 12 >> 2] | 0;
 $17 = $12 + ($15 + 4 + ($15 & 1) << 2) | 0;
 L7 : do if (!(_memcmp($9, $17, $5 << 2) | 0)) {
  $37 = _ga(1, $5, HEAP32[$6 >> 2] | 0, $2 + 16 | 0) | 0;
  if (!$37) {
   $$0 = 0;
   return $$0 | 0;
  }
  $40 = HEAP32[$37 + 12 >> 2] | 0;
  if (($5 | 0) > 0) {
   $i2$010 = 0;
   $rl$18 = $1;
   $x1$09 = $37 + ($40 + 4 + ($40 & 1) << 2) | 0;
   while (1) {
    $45 = +_fmod($rl$18 * 16807.0, 2147483647.0);
    HEAP8[$x1$09 >> 0] = $45 > 1073741823.5 & 1;
    $i2$010 = $i2$010 + 1 | 0;
    if (($i2$010 | 0) == ($5 | 0)) {
     $rl$2 = $45;
     $z$0 = $37;
     break;
    } else {
     $rl$18 = $45;
     $x1$09 = $x1$09 + 1 | 0;
    }
   }
  } else {
   $rl$2 = $1;
   $z$0 = $37;
  }
 } else if (($5 | 0) > 0) {
  $i$014 = 0;
  $rl$011 = $1;
  $v$012 = $9;
  $x$013 = $17;
  while (1) {
   $22 = HEAP32[$v$012 >> 2] | 0;
   if (($22 | 0) <= 0) break;
   $26 = +_fmod($rl$011 * 16807.0, 2147483647.0);
   HEAP32[$x$013 >> 2] = ~~+Math_floor(+(+($22 | 0) * $26 / 2147483647.0));
   $i$014 = $i$014 + 1 | 0;
   if (($i$014 | 0) >= ($5 | 0)) {
    $rl$2 = $26;
    $z$0 = $12;
    break L7;
   } else {
    $rl$011 = $26;
    $v$012 = $v$012 + 4 | 0;
    $x$013 = $x$013 + 4 | 0;
   }
  }
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 } else {
  $rl$2 = $1;
  $z$0 = $12;
 } while (0);
 HEAP32[606] = ~~$rl$2;
 $$0 = $z$0;
 return $$0 | 0;
}

function _qr($w) {
 $w = $w | 0;
 var $$0 = 0, $$sum1 = 0, $$sum4 = 0, $11 = 0, $12 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $28 = 0, $31 = 0, $35 = 0, $36 = 0, $38 = 0, $42 = 0, $46 = 0, $49 = 0, $5 = 0, $54 = 0, $55 = 0, $57 = 0, $6 = 0, $62 = 0, $9 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $5 = HEAP32[$w + 12 >> 2] | 0;
 $6 = ($5 | 0) < 2;
 if ($6) $22 = 1; else {
  $9 = HEAP32[$w + 20 >> 2] | 0;
  $11 = ($9 + 1 | 0) / 2 | 0;
  $12 = HEAP32[$w + 16 >> 2] | 0;
  if (($5 | 0) >= 3) {
   _jsignal(14);
   $$0 = 0;
   return $$0 | 0;
  }
  if (($12 | 0) < ($9 | 0) & ($6 ^ 1)) {
   _jsignal(9);
   $$0 = 0;
   return $$0 | 0;
  }
  if (($9 | 0) < 2) $22 = $9; else {
   $28 = _qr(_take(_v2($12, $11) | 0, $w) | 0) | 0;
   if (!$28) {
    $$0 = 0;
    return $$0 | 0;
   }
   $31 = HEAP32[$28 + 12 >> 2] | 0;
   $$sum1 = $31 + 4 + ($31 & 1) | 0;
   $35 = HEAP32[$28 + ($$sum1 << 2) >> 2] | 0;
   $36 = HEAP32[$28 + ($$sum1 + 1 << 2) >> 2] | 0;
   $38 = _drop(_v2(0, $11) | 0, $w) | 0;
   if (!$38) {
    $$0 = 0;
    return $$0 | 0;
   }
   $42 = _pdt(_conjug(_cant1($35) | 0) | 0, $38) | 0;
   if (!$42) {
    $$0 = 0;
    return $$0 | 0;
   }
   $46 = _qr(_minus($38, _pdt($35, $42) | 0) | 0) | 0;
   if (!$46) {
    $$0 = 0;
    return $$0 | 0;
   }
   $49 = HEAP32[$46 + 12 >> 2] | 0;
   $$sum4 = $49 + 4 + ($49 & 1) | 0;
   $54 = HEAP32[$46 + ($$sum4 + 1 << 2) >> 2] | 0;
   $55 = _overr($35, HEAP32[$46 + ($$sum4 << 2) >> 2] | 0) | 0;
   if (!$55) {
    $$0 = 0;
    return $$0 | 0;
   }
   $57 = _overr($36, $42) | 0;
   $62 = _over($57, _take(_v2($9 - $11 | 0, 0 - $9 | 0) | 0, $54) | 0) | 0;
   if (!$62) {
    $$0 = 0;
    return $$0 | 0;
   }
   $$0 = _gc(_link($55, $62) | 0, $2) | 0;
   return $$0 | 0;
  }
 }
 $16 = _ravel($w) | 0;
 $19 = _sqroot(_pdt($16, _conjug($16) | 0) | 0) | 0;
 $21 = _table(_divide($w, $19) | 0) | 0;
 $$0 = _link($21, _reshape(_v2($22, $22) | 0, $19) | 0) | 0;
 return $$0 | 0;
}

function _xtrans($0, $w) {
 $0 = $0 | 0;
 $w = $w | 0;
 var $$0 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $3 = 0, $32 = 0, $33 = 0, $36 = 0, $4 = 0, $43 = 0, $45 = 0, $46 = 0, $50 = 0, $51 = 0, $54 = 0, $z$0 = 0;
 $3 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[894] | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP8[3248] = $0;
 if (!(HEAP32[$w >> 2] & 2)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$w + 12 >> 2] | 0) >= 2) {
  _jsignal(14);
  $$0 = 0;
  return $$0 | 0;
 }
 $12 = _ds(-88) | 0;
 $14 = _advform($12, _ds(43) | 0) | 0;
 HEAP32[820] = $14;
 if (!$14) {
  $$0 = 0;
  return $$0 | 0;
 }
 $16 = _ds(-86) | 0;
 HEAP32[818] = $16;
 if (!$16) {
  $$0 = 0;
  return $$0 | 0;
 }
 $18 = _ds(-88) | 0;
 HEAP32[822] = $18;
 if (!$18) {
  $$0 = 0;
  return $$0 | 0;
 }
 $20 = _ds(96) | 0;
 HEAP32[814] = $20;
 if (!$20) {
  $$0 = 0;
  return $$0 | 0;
 }
 $22 = _ds(92) | 0;
 HEAP32[816] = $22;
 if (!$22) {
  $$0 = 0;
  return $$0 | 0;
 }
 $25 = _ga(32768, HEAP32[882] | 0, 1, 0) | 0;
 HEAP32[894] = $25;
 if (!$25) {
  $$0 = 0;
  return $$0 | 0;
 }
 $27 = _ds(-47) | 0;
 if (!(HEAP8[3248] | 0)) $32 = HEAP32[616] | 0; else $32 = _ds(-46) | 0;
 $33 = _link($27, $32) | 0;
 HEAP32[826] = $33;
 if (!$33) {
  $$0 = 0;
  return $$0 | 0;
 }
 $36 = (HEAP8[3248] | 0) != 0;
 $43 = _link($36 ? HEAP32[822] | 0 : HEAP32[820] | 0, $36 ? HEAP32[818] | 0 : HEAP32[616] | 0) | 0;
 HEAP32[828] = $43;
 if (!$43) {
  $$0 = 0;
  return $$0 | 0;
 }
 $45 = _scnm(-47) | 0;
 $46 = _ds(91) | 0;
 _symbis($45, $46, HEAP32[894] | 0) | 0;
 if (HEAP8[3248] | 0) {
  $50 = _scnm(-46) | 0;
  $51 = _ds(91) | 0;
  _symbis($50, $51, HEAP32[894] | 0) | 0;
 }
 $54 = _tparse(0, _ttokens($w) | 0) | 0;
 if (!$54) $z$0 = 0; else if (!(HEAP32[$54 >> 2] & 16384)) $z$0 = $54; else $z$0 = _colon($w, (HEAP8[3248] | 0) != 0 ? HEAP32[658] | 0 : HEAP32[646] | 0) | 0;
 HEAP32[894] = $4;
 $$0 = _gc($z$0, $3) | 0;
 return $$0 | 0;
}

function _apv($n, $b, $m) {
 $n = $n | 0;
 $b = $b | 0;
 $m = $m | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $15 = 0, $16 = 0, $18 = 0, $4 = 0, $5 = 0, $8 = 0, $j$09 = 0, $j$112 = 0, $j$27 = 0, $p$01$i = 0, $x$010 = 0, $x$113 = 0, $x$28 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $b;
 $1 = $b - $m | 0;
 $4 = (Math_imul($n + -1 | 0, $m) | 0) + $b | 0;
 $5 = _ga(4, $n, 1, 0) | 0;
 do if (!$5) $$0 = 0; else {
  $8 = HEAP32[$5 + 12 >> 2] | 0;
  $10 = $5 + ($8 + 4 + ($8 & 1) << 2) | 0;
  if (!$n) $$0 = $5; else if (($m | 0) == -1) {
   if (($1 | 0) == ($4 | 0)) {
    $$0 = $5;
    break;
   } else {
    $j$09 = $1;
    $x$010 = $10;
   }
   while (1) {
    $j$09 = $j$09 + -1 | 0;
    HEAP32[$x$010 >> 2] = $j$09;
    if (($j$09 | 0) == ($4 | 0)) {
     $$0 = $5;
     break;
    } else $x$010 = $x$010 + 4 | 0;
   }
  } else if (($m | 0) == 1) {
   if (($1 | 0) == ($4 | 0)) {
    $$0 = $5;
    break;
   } else {
    $j$112 = $1;
    $x$113 = $10;
   }
   while (1) {
    $j$112 = $j$112 + 1 | 0;
    HEAP32[$x$113 >> 2] = $j$112;
    if (($j$112 | 0) == ($4 | 0)) {
     $$0 = $5;
     break;
    } else $x$113 = $x$113 + 4 | 0;
   }
  } else if (!$m) {
   $15 = $n << 2;
   $16 = ($15 | 0) > 4;
   _memcpy($10 | 0, $0 | 0, ($16 ? 4 : $15) | 0) | 0;
   if ($16) $p$01$i = 4; else {
    $$0 = $5;
    break;
   }
   do {
    $18 = $15 - $p$01$i | 0;
    _memcpy($10 + $p$01$i | 0, $10 | 0, (($p$01$i | 0) < ($18 | 0) ? $p$01$i : $18) | 0) | 0;
    $p$01$i = $p$01$i << 1;
   } while (($p$01$i | 0) < ($15 | 0));
   $$0 = $5;
  } else {
   if (($1 | 0) == ($4 | 0)) {
    $$0 = $5;
    break;
   } else {
    $j$27 = $1;
    $x$28 = $10;
   }
   while (1) {
    $j$27 = $j$27 + $m | 0;
    HEAP32[$x$28 >> 2] = $j$27;
    if (($j$27 | 0) == ($4 | 0)) {
     $$0 = $5;
     break;
    } else $x$28 = $x$28 + 4 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _numj($n, $s, $v) {
 $n = $n | 0;
 $s = $s | 0;
 $v = $v | 0;
 var $$0 = 0, $0 = 0, $12 = 0, $2 = 0, $20 = 0.0, $23 = 0, $25 = 0.0, $27 = 0.0, $3 = 0, $32 = 0.0, $34 = 0.0, $35 = 0.0, $37 = 0.0, $41 = 0.0, $46 = 0.0, $t$0 = 0, $ta$0 = 0, $x = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $x = sp + 8 | 0;
 $y = sp;
 $0 = _memchr($s, 106, $n) | 0;
 if (!$0) {
  $2 = _memchr($s, 97, $n) | 0;
  $t$0 = $2;
  $ta$0 = $2;
 } else {
  $t$0 = $0;
  $ta$0 = 0;
 }
 $3 = ($t$0 | 0) != 0;
 if (!((_numd($3 ? $t$0 - $s | 0 : $n, $s, $x) | 0) << 24 >> 24)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ($3) {
  $12 = $t$0 + (($ta$0 | 0) != 0 ? 2 : 1) | 0;
  if (!((_numd($s + $n - $12 | 0, $12, $y) | 0) << 24 >> 24)) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } else HEAPF64[$y >> 3] = 0.0;
 $20 = +HEAPF64[$x >> 3];
 if (!$ta$0) {
  HEAPF64[$v >> 3] = $20;
  HEAPF64[$v + 8 >> 3] = +HEAPF64[$y >> 3];
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 do if ($20 >= 0.0) {
  $23 = HEAP8[$ta$0 + 1 >> 0] | 0;
  if ($23 << 24 >> 24 == 100) {
   $25 = +HEAPF64[$y >> 3] * .017453292519943295;
   HEAPF64[$y >> 3] = $25;
   $27 = $25;
  } else if ($23 << 24 >> 24 == 114) $27 = +HEAPF64[$y >> 3]; else break;
  if ($27 <= -6.283185307179586 | $27 >= 6.283185307179586) {
   $32 = $27 - +Math_floor(+($27 / 6.283185307179586)) * 6.283185307179586;
   HEAPF64[$y >> 3] = $32;
   $34 = $32;
  } else $34 = $27;
  if ($34 < 0.0) {
   $35 = $34 + 6.283185307179586;
   HEAPF64[$y >> 3] = $35;
   $37 = $35;
  } else $37 = $34;
  if ($37 == 1.5707963267948966 | $37 == 4.71238898038469) $41 = 0.0; else $41 = $20 * +Math_cos(+$37);
  HEAPF64[$v >> 3] = $41;
  if ($37 == 3.141592653589793) $46 = 0.0; else $46 = $20 * +Math_sin(+$37);
  HEAPF64[$v + 8 >> 3] = $46;
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 _jsignal(5);
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _wexf($f, $w) {
 $f = $f | 0;
 $w = $w | 0;
 var $$0 = 0, $$0$i = 0, $$sum1 = 0, $$sum2$i = 0, $$sum3 = 0, $$sum5 = 0, $1 = 0, $12 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $24 = 0, $30 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $48 = 0, $56 = 0, $7 = 0, $9 = 0, $i$011 = 0, $storemerge = 0;
 $1 = _indexof(HEAP32[2088] | 0, $w) | 0;
 if (!$1) {
  $$0 = 0;
  return $$0 | 0;
 }
 $4 = HEAP32[$w + 8 >> 2] | 0;
 $7 = HEAP32[(HEAP32[2088] | 0) + 8 >> 2] | 0;
 $9 = HEAP32[$w + 12 >> 2] | 0;
 $$sum1 = $9 + 4 + ($9 & 1) | 0;
 $12 = HEAP32[$1 + 12 >> 2] | 0;
 $$sum3 = $12 + 4 + ($12 & 1) | 0;
 $14 = _apv($7, 1, 0) | 0;
 if (!$14) {
  $$0 = 0;
  return $$0 | 0;
 }
 $17 = HEAP32[$14 + 12 >> 2] | 0;
 $$sum5 = $17 + 4 + ($17 & 1) | 0;
 L7 : do if (($4 | 0) > 0) {
  $i$011 = 0;
  while (1) {
   $20 = $1 + ($$sum3 + $i$011 << 2) | 0;
   $21 = HEAP32[$20 >> 2] | 0;
   if (($7 | 0) == ($21 | 0)) {
    $24 = HEAP32[$w + ($$sum1 + $i$011 << 2) >> 2] | 0;
    if (!(_vs($24) | 0)) {
     $$0 = 0;
     break;
    }
    $30 = HEAP32[$24 + 12 >> 2] | 0;
    $storemerge = (_vnm(HEAP32[$24 + 8 >> 2] | 0, $24 + ($30 + 4 + ($30 & 1) << 2) | 0) | 0) << 24 >> 24;
   } else {
    HEAP32[$14 + ($$sum5 + $21 << 2) >> 2] = 0;
    $storemerge = 1;
   }
   HEAP32[$20 >> 2] = $storemerge;
   $i$011 = $i$011 + 1 | 0;
   if (($i$011 | 0) >= ($4 | 0)) break L7;
  }
  return $$0 | 0;
 } while (0);
 $39 = _repeat($14, HEAP32[2088] | 0) | 0;
 HEAP32[2088] = $39;
 if (!$39) {
  $$0 = 0;
  return $$0 | 0;
 }
 $42 = _repeat($14, HEAP32[2084] | 0) | 0;
 HEAP32[2084] = $42;
 if (!$42) {
  $$0 = 0;
  return $$0 | 0;
 }
 $45 = HEAP32[$42 + 8 >> 2] | 0;
 if (!$45) $$0$i = 70; else {
  $48 = HEAP32[$42 + 12 >> 2] | 0;
  $$sum2$i = $45 + 4 + $48 + ($48 & 1) | 0;
  $$0$i = (HEAP32[$42 + ($$sum2$i + -2 << 2) >> 2] | 0) + (HEAP32[$42 + ($$sum2$i + -3 << 2) >> 2] | 0) | 0;
 }
 _fseek($f | 0, $$0$i | 0, 0) | 0;
 $56 = (_wrdir($f) | 0) == 0;
 $$0 = $56 ? 0 : $1;
 return $$0 | 0;
}

function _vdyad($agg$result, $b, $e, $stack) {
 $agg$result = $agg$result | 0;
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 var $$0$i = 0, $$0$i7 = 0, $1 = 0, $10 = 0, $11 = 0, $17 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $40 = 0, $46 = 0, $49 = 0, $5 = 0, $7 = 0, $z$sroa$0$0 = 0, $z$sroa$3$0 = 0, label = 0;
 $1 = HEAP32[$stack + ($b << 3) >> 2] | 0;
 $3 = HEAP32[$stack + ($b << 3) + 4 >> 2] | 0;
 $5 = HEAP32[$stack + ($e << 3) >> 2] | 0;
 $7 = HEAP32[$stack + ($e << 3) + 4 >> 2] | 0;
 $10 = HEAP32[$stack + ($e + -1 << 3) >> 2] | 0;
 $11 = HEAP32[646] | 0;
 $17 = ($7 | 0) == 0 | (($3 | 0) == 0 & 1) << 1;
 if (($17 | 0) == 1) {
  if (!(HEAP32[$5 + 12 >> 2] | 0)) {
   $22 = _pcvt(4, $5) | 0;
   if (!$22) $$0$i = 0; else if (!(HEAP32[$22 >> 2] & 4)) label = 8; else {
    $28 = HEAP32[$22 + 12 >> 2] | 0;
    $31 = HEAP32[$22 + ($28 + 4 + ($28 & 1) << 2) >> 2] | 0;
    if ($31 >>> 0 < 10) $$0$i = _ds(($31 << 24) + -536870912 >> 24) | 0; else label = 8;
   }
  } else label = 8;
  if ((label | 0) == 8) $$0$i = _qq($5, HEAP32[624] | 0) | 0;
  $z$sroa$0$0 = $11;
  $z$sroa$3$0 = _folk($3, $10, $$0$i) | 0;
 } else if (($17 | 0) == 3) {
  $z$sroa$0$0 = _df2($1, $5, $10) | 0;
  $z$sroa$3$0 = 0;
 } else if (!$17) {
  $z$sroa$0$0 = $11;
  $z$sroa$3$0 = _folk($3, $10, $7) | 0;
 } else if (($17 | 0) == 2) {
  if (!(HEAP32[$1 + 12 >> 2] | 0)) {
   $40 = _pcvt(4, $1) | 0;
   if (!$40) $$0$i7 = 0; else if (!(HEAP32[$40 >> 2] & 4)) label = 15; else {
    $46 = HEAP32[$40 + 12 >> 2] | 0;
    $49 = HEAP32[$40 + ($46 + 4 + ($46 & 1) << 2) >> 2] | 0;
    if ($49 >>> 0 < 10) $$0$i7 = _ds(($49 << 24) + -536870912 >> 24) | 0; else label = 15;
   }
  } else label = 15;
  if ((label | 0) == 15) $$0$i7 = _qq($1, HEAP32[624] | 0) | 0;
  $z$sroa$0$0 = $11;
  $z$sroa$3$0 = _folk($$0$i7, $10, $7) | 0;
 } else {
  $z$sroa$0$0 = $11;
  $z$sroa$3$0 = 0;
 }
 HEAP32[$agg$result >> 2] = $z$sroa$0$0;
 HEAP32[$agg$result + 4 >> 2] = $z$sroa$3$0;
 return;
}

function _reduce($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $10 = 0, $15 = 0, $19 = 0, $2 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $33 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $45 = 0, $51 = 0, $53 = 0, $54 = 0, $7 = 0, $i$015 = 0, $v$013 = 0, $z$0$lcssa = 0, $z$014 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $7 = HEAP32[$self + ($4 + 6 + ($4 & 1) << 2) >> 2] | 0;
 if (!$7) $53 = 0; else {
  $10 = HEAP32[$7 + 12 >> 2] | 0;
  $53 = HEAP32[$7 + ($10 + 5 + ($10 & 1) << 2) >> 2] | 0;
 }
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $15 = $w + 12 | 0;
 if (!(HEAP32[$15 >> 2] | 0)) $25 = 1; else {
  $19 = HEAP32[$w + 16 >> 2] | 0;
  if (!$19) {
   $$0 = _df1($w, _iden($7) | 0) | 0;
   return $$0 | 0;
  } else $25 = $19;
 }
 $23 = _tail($w) | 0;
 if (!$23) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($25 | 0) == 1) {
  $$0 = $23;
  return $$0 | 0;
 }
 $27 = HEAP32[$w >> 2] | 0;
 $29 = HEAP32[$23 + 8 >> 2] | 0;
 $33 = _ga($27, $29, HEAP32[$23 + 12 >> 2] | 0, $23 + 16 | 0) | 0;
 if (!$33) {
  $$0 = 0;
  return $$0 | 0;
 }
 $36 = HEAP32[$33 + 12 >> 2] | 0;
 $38 = $33 + ($36 + 4 + ($36 & 1) << 2) | 0;
 $40 = Math_imul(_bp($27) | 0, $29) | 0;
 $41 = HEAP32[$15 >> 2] | 0;
 $42 = $25 + -1 | 0;
 $45 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 L21 : do if (($25 | 0) > 1) {
  $51 = 0 - $40 | 0;
  $i$015 = 0;
  $v$013 = $w + ($41 + 4 + ($41 & 1) << 2) + (Math_imul($40, $42) | 0) | 0;
  $z$014 = $23;
  while (1) {
   $v$013 = $v$013 + $51 | 0;
   _memcpy($38 | 0, $v$013 | 0, $40 | 0) | 0;
   $54 = ftCall_iiii($53 | 0, $33 | 0, $z$014 | 0, $7 | 0) | 0;
   if (!$54) {
    $$0 = 0;
    break;
   }
   _gc($54, $45) | 0;
   $i$015 = $i$015 + 1 | 0;
   if (($i$015 | 0) >= ($42 | 0)) {
    $z$0$lcssa = $54;
    break L21;
   } else $z$014 = $54;
  }
  return $$0 | 0;
 } else $z$0$lcssa = $23; while (0);
 $$0 = _gc($z$0$lcssa, $2) | 0;
 return $$0 | 0;
}

function _zgcd($agg$result, $u, $v) {
 $agg$result = $agg$result | 0;
 $u = $u | 0;
 $v = $v | 0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $17 = 0.0, $21 = 0.0, $23 = 0, $3 = 0, $4 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $u$byval_copy = 0, $v$byval_copy = 0, $z$sroa$0$0 = 0.0, $z$sroa$5$0 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $v$byval_copy = sp + 32 | 0;
 $u$byval_copy = sp + 16 | 0;
 $0 = sp;
 $1 = +HEAPF64[$u >> 3];
 $3 = $u + 8 | 0;
 $4 = +HEAPF64[$3 >> 3];
 if ($1 != 0.0 | $4 != 0.0) {
  $7 = $0 + 8 | 0;
  $8 = $v + 8 | 0;
  $11 = $1;
  $12 = $4;
  while (1) {
   HEAP32[$u$byval_copy >> 2] = HEAP32[$u >> 2];
   HEAP32[$u$byval_copy + 4 >> 2] = HEAP32[$u + 4 >> 2];
   HEAP32[$u$byval_copy + 8 >> 2] = HEAP32[$u + 8 >> 2];
   HEAP32[$u$byval_copy + 12 >> 2] = HEAP32[$u + 12 >> 2];
   HEAP32[$v$byval_copy >> 2] = HEAP32[$v >> 2];
   HEAP32[$v$byval_copy + 4 >> 2] = HEAP32[$v + 4 >> 2];
   HEAP32[$v$byval_copy + 8 >> 2] = HEAP32[$v + 8 >> 2];
   HEAP32[$v$byval_copy + 12 >> 2] = HEAP32[$v + 12 >> 2];
   _zrem($0, $u$byval_copy, $v$byval_copy);
   $9 = +HEAPF64[$0 >> 3];
   $10 = +HEAPF64[$7 >> 3];
   HEAPF64[$v >> 3] = $11;
   HEAPF64[$8 >> 3] = $12;
   HEAPF64[$u >> 3] = $9;
   HEAPF64[$3 >> 3] = $10;
   if ($9 != 0.0 | $10 != 0.0) {
    $11 = $9;
    $12 = $10;
   } else {
    $17 = $11;
    $21 = $12;
    break;
   }
  }
 } else {
  $17 = +HEAPF64[$v >> 3];
  $21 = +HEAPF64[$v + 8 >> 3];
 }
 $23 = ($17 < 0.0 & 1) << 1 | $21 < 0.0;
 if (($23 | 0) == 3) {
  $z$sroa$0$0 = -$17;
  $z$sroa$5$0 = -$21;
 } else if (($23 | 0) == 2) {
  $z$sroa$0$0 = $21;
  $z$sroa$5$0 = -$17;
 } else if (($23 | 0) == 1) {
  $z$sroa$0$0 = -$21;
  $z$sroa$5$0 = $17;
 } else {
  $z$sroa$0$0 = $17;
  $z$sroa$5$0 = $21;
 }
 HEAPF64[$agg$result >> 3] = $z$sroa$0$0;
 HEAPF64[$agg$result + 8 >> 3] = $z$sroa$5$0;
 STACKTOP = sp;
 return;
}

function _shift2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $12 = 0, $13 = 0, $14 = 0, $18 = 0, $21 = 0, $23 = 0, $26 = 0, $27 = 0, $32 = 0, $38 = 0, $43 = 0, $46 = 0, $49 = 0, $5 = 0, $54 = 0, $6 = 0, $x$0 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$a + 12 >> 2] | 0) <= 0) {
  $5 = $w + 12 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  if (($6 | 0) <= 127) {
   if (!$6) $14 = 1; else $14 = HEAP32[$w + 16 >> 2] | 0;
   $12 = _i0($a) | 0;
   $13 = 0 - $14 | 0;
   $18 = ($12 | 0) < ($13 | 0) ? $13 : ($14 | 0) < ($12 | 0) ? $14 : $12;
   $21 = ($18 | 0) > -1 ? $18 : 0 - $18 | 0;
   $23 = HEAP32[$self + 12 >> 2] | 0;
   $26 = HEAP32[$self + ($23 + 7 + ($23 & 1) << 2) >> 2] | 0;
   $27 = _shape($w) | 0;
   if (!$27) {
    $$0 = 0;
    return $$0 | 0;
   }
   if (HEAP32[$5 >> 2] | 0) {
    $32 = HEAP32[$27 + 12 >> 2] | 0;
    HEAP32[$27 + ($32 + 4 + ($32 & 1) << 2) >> 2] = $21;
   }
   do if (!(HEAP32[$26 + 12 >> 2] | 0)) {
    $38 = _reshape($27, $26) | 0;
    if (!$38) {
     $$0 = 0;
     return $$0 | 0;
    } else $x$0 = $38;
   } else if (!(HEAP32[$26 + 8 >> 2] | 0)) {
    $49 = _reshape($27, _filler($w) | 0) | 0;
    if (!$49) $$0 = 0; else {
     $x$0 = $49;
     break;
    }
    return $$0 | 0;
   } else {
    $43 = _behead($27) | 0;
    $46 = _rank2ex($43, _reitem(_sc($21) | 0, $26) | 0, 0, 1, -1, 298) | 0;
    if (!$46) $$0 = 0; else {
     $x$0 = $46;
     break;
    }
    return $$0 | 0;
   } while (0);
   if (!(HEAP32[$5 >> 2] | 0)) {
    if ($18) {
     $$0 = $x$0;
     return $$0 | 0;
    }
    $$0 = _ca($w) | 0;
    return $$0 | 0;
   }
   $54 = _drop(_sc($18) | 0, $w) | 0;
   if (($18 | 0) > 0) {
    $$0 = _over($54, $x$0) | 0;
    return $$0 | 0;
   } else {
    $$0 = _over($x$0, $54) | 0;
    return $$0 | 0;
   }
  }
 }
 $$0 = _rank2ex($a, $w, $self, 0, 127, 293) | 0;
 return $$0 | 0;
}

function _fa($w) {
 $w = $w | 0;
 var $$0$i = 0, $$sum1$i = 0, $1 = 0, $2 = 0, $27 = 0, $29 = 0, $3 = 0, $33 = 0, $34 = 0, $37 = 0, $4 = 0, $6 = 0, $7 = 0, $i$07$i = 0, $i3$010$i = 0, $n$0$i = 0, $v$08$i = 0, $v2$09$i = 0, label = 0;
 if (!$w) {
  $$0$i = 0;
  return $$0$i | 0;
 }
 $1 = $w + 8 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $w + 12 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $$sum1$i = $4 + 4 + ($4 & 1) | 0;
 $6 = $w + ($$sum1$i << 2) | 0;
 $7 = HEAP32[$w >> 2] | 0;
 if (($7 | 0) == 32768) {
  if (($2 | 0) > 0) {
   $i3$010$i = 0;
   $v2$09$i = $6;
   while (1) {
    _fa(HEAP32[$v2$09$i >> 2] | 0) | 0;
    _fa(HEAP32[$v2$09$i + 4 >> 2] | 0) | 0;
    $i3$010$i = $i3$010$i + 1 | 0;
    if (($i3$010$i | 0) == ($2 | 0)) break; else $v2$09$i = $v2$09$i + 8 | 0;
   }
  }
 } else if (($7 | 0) == 32) {
  $n$0$i = $2;
  label = 4;
 } else if (($7 | 0) == 512 | ($7 | 0) == 256 | ($7 | 0) == 128) {
  _fa(HEAP32[$w + ($$sum1$i + 2 << 2) >> 2] | 0) | 0;
  _fa(HEAP32[$w + ($$sum1$i + 3 << 2) >> 2] | 0) | 0;
  _fa(HEAP32[$w + ($$sum1$i + 4 << 2) >> 2] | 0) | 0;
  _fa(HEAP32[$w + ($$sum1$i + 5 << 2) >> 2] | 0) | 0;
 } else if (($7 | 0) == 64) {
  $n$0$i = $2 << 1;
  label = 4;
 }
 if ((label | 0) == 4) if (($n$0$i | 0) > 0) {
  $i$07$i = 0;
  $v$08$i = $6;
  while (1) {
   _fa(HEAP32[$v$08$i >> 2] | 0) | 0;
   $i$07$i = $i$07$i + 1 | 0;
   if (($i$07$i | 0) == ($n$0$i | 0)) break; else $v$08$i = $v$08$i + 4 | 0;
  }
 }
 $27 = $w + 4 | 0;
 $29 = (HEAP32[$27 >> 2] | 0) + -1 | 0;
 HEAP32[$27 >> 2] = $29;
 if (!$29) {
  $33 = (HEAP32[$3 >> 2] | 0) + 5 | 0;
  $34 = HEAP32[$1 >> 2] | 0;
  $37 = Math_imul(_bp(HEAP32[$w >> 2] | 0) | 0, $34) | 0;
  HEAP32[666] = (HEAP32[666] | 0) - ($33 + (($37 + 3 + ((HEAP32[$w >> 2] & 1027 | 0) != 0 & 1) | 0) / 4 | 0) << 2);
  _free($w);
  $$0$i = HEAP32[646] | 0;
  return $$0$i | 0;
 } else {
  $$0$i = HEAP32[660] | 0;
  return $$0$i | 0;
 }
 return 0;
}

function _drop($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$02 = 0, $$sum3 = 0, $$sum5 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $33 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $43 = 0, $45 = 0, $5 = 0, $9 = 0, $i$09 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$a + 12 >> 2] | 0) <= 1) {
  $5 = $w + 12 | 0;
  if ((HEAP32[$5 >> 2] | 0) <= 127) {
   $9 = _vi($a) | 0;
   if (!$9) {
    $$0 = 0;
    return $$0 | 0;
   }
   $12 = HEAP32[$9 + 8 >> 2] | 0;
   $14 = HEAP32[$9 + 12 >> 2] | 0;
   $$sum3 = $14 + 4 + ($14 & 1) | 0;
   $16 = HEAP32[$5 >> 2] | 0;
   do if (!$16) {
    $19 = _reshape(_apv($12, 1, 0) | 0, $w) | 0;
    if (!$19) {
     $$0 = 0;
     return $$0 | 0;
    } else {
     $$02 = $19;
     $23 = HEAP32[$19 + 12 >> 2] | 0;
     break;
    }
   } else {
    $$02 = $w;
    $23 = $16;
   } while (0);
   if (($12 | 0) > ($23 | 0)) {
    _jsignal(9);
    $$0 = 0;
    return $$0 | 0;
   }
   $24 = _ga(4, $23, 1, 0) | 0;
   if (!$24) {
    $$0 = 0;
    return $$0 | 0;
   }
   $26 = $24 + 12 | 0;
   $27 = HEAP32[$26 >> 2] | 0;
   _memcpy($24 + ($27 + 4 + ($27 & 1) << 2) | 0, $$02 + 16 | 0, HEAP32[$$02 + 12 >> 2] << 2 | 0) | 0;
   $33 = HEAP32[$26 >> 2] | 0;
   $$sum5 = $33 + 4 + ($33 & 1) | 0;
   if (($12 | 0) > 0) {
    $i$09 = 0;
    do {
     $37 = HEAP32[$9 + ($$sum3 + $i$09 << 2) >> 2] | 0;
     $39 = $24 + ($$sum5 + $i$09 << 2) | 0;
     $40 = HEAP32[$39 >> 2] | 0;
     if (($37 | 0) > 0) {
      $41 = $37 - $40 | 0;
      $45 = ($41 | 0) > 0 ? 0 : $41;
     } else {
      $43 = $40 + $37 | 0;
      $45 = ($43 | 0) < 0 ? 0 : $43;
     }
     HEAP32[$39 >> 2] = $45;
     $i$09 = $i$09 + 1 | 0;
    } while (($i$09 | 0) != ($12 | 0));
   }
   $$0 = _take($24, $$02) | 0;
   return $$0 | 0;
  }
 }
 $$0 = _rank2ex($a, $w, 0, 1, 127, 141) | 0;
 return $$0 | 0;
}

function _fmtD($s, $v) {
 $s = $s | 0;
 $v = $v | 0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $0 = 0.0, $10 = 0, $16 = 0, $18 = 0, $22 = 0, $24 = 0, $28 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $buf = 0, $k$0 = 0, $k$0$lcssa = 0, $t$0$ph = 0, $t$1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 8 | 0;
 $0 = +HEAPF64[$v >> 3];
 HEAPF64[$vararg_buffer >> 3] = $0 == 0.0 & $0 != 1.0 ? 0.0 : $0;
 _sprintf($buf, 408, $vararg_buffer) | 0;
 $4 = HEAP8[$buf >> 0] | 0;
 $5 = $4 << 24 >> 24 == 45;
 if ($5) {
  HEAP8[$s >> 0] = 95;
  $$0 = $s + 1 | 0;
 } else $$0 = $s;
 $8 = $5 ? 1 : $4 << 24 >> 24 == 43 & 1;
 $9 = $buf + $8 | 0;
 $10 = HEAP8[$9 >> 0] | 0;
 if ($10 << 24 >> 24 == 110) {
  if ($5) $$1 = $$0; else {
   HEAP8[$$0 >> 0] = 95;
   $$1 = $$0 + 1 | 0;
  }
  HEAP8[$$1 >> 0] = 46;
  HEAP8[$$1 + 1 >> 0] = 0;
  STACKTOP = sp;
  return;
 } else if ($10 << 24 >> 24 == 46) {
  HEAP8[$$0 >> 0] = 48;
  $$2 = $$0 + 1 | 0;
 } else if ($10 << 24 >> 24 == 105) {
  HEAP8[$$0 >> 0] = 95;
  HEAP8[$$0 + 1 >> 0] = 0;
  STACKTOP = sp;
  return;
 } else $$2 = $$0;
 _memcpy($$2 | 0, $9 | 0, 30 - $8 | 0) | 0;
 $16 = _strchr($$2, 101) | 0;
 if (!$16) {
  STACKTOP = sp;
  return;
 }
 $18 = $16 + 1 | 0;
 if ((HEAP8[$18 >> 0] | 0) == 45) {
  HEAP8[$18 >> 0] = 95;
  $22 = 2;
  $t$0$ph = $16 + 2 | 0;
 } else {
  $22 = 1;
  $t$0$ph = $18;
 }
 $k$0 = 0;
 while (1) {
  $24 = HEAP8[$16 + ($22 + $k$0) >> 0] | 0;
  if (!($24 << 24 >> 24 == 43 | $24 << 24 >> 24 == 48)) {
   $k$0$lcssa = $k$0;
   break;
  }
  $k$0 = $k$0 + 1 | 0;
 }
 if (!$k$0$lcssa) {
  STACKTOP = sp;
  return;
 } else $t$1 = $t$0$ph;
 while (1) {
  $28 = HEAP8[$t$1 + $k$0$lcssa >> 0] | 0;
  HEAP8[$t$1 >> 0] = $28;
  if (!($28 << 24 >> 24)) break; else $t$1 = $t$1 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _unquote($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $12 = 0, $15 = 0, $17 = 0, $23 = 0, $25 = 0, $3 = 0, $31 = 0, $38 = 0, $6 = 0, $8 = 0, $dc$0 = 0, $fs$0 = 0, $g = 0, $m = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $g = sp + 4 | 0;
 $m = sp;
 if (!((_breaker() | 0) << 24 >> 24)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $3 = HEAP32[$self + 12 >> 2] | 0;
 $6 = HEAP32[$self + ($3 + 6 + ($3 & 1) << 2) >> 2] | 0;
 $8 = (_stname($6, $m, $g) | 0) << 24 >> 24 != 0;
 if ($8) {
  if (!(HEAP32[$m >> 2] | 0)) {
   _jsignal(20);
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $12 = _stfind(HEAP32[$g >> 2] | 0) | 0;
  HEAP32[$g >> 2] = $12;
  if (!$12) {
   _jsignal(20);
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $15 = _srd(HEAP32[$m >> 2] | 0, $12) | 0;
  if (!$15) {
   _jsignal(20);
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else $fs$0 = $15;
 } else {
  $17 = _symbrd($6) | 0;
  if (!$17) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else $fs$0 = $17;
 }
 if ((HEAP32[$self >> 2] | 0) != (HEAP32[$fs$0 >> 2] | 0)) {
  _jsignal(3);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $23 = (HEAP32[808] | 0) + 1 | 0;
 HEAP32[808] = $23;
 if (($23 | 0) >= 175) {
  _jsignal(10);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ($8) {
  $25 = _debadd(5) | 0;
  HEAP32[$25 + 40 >> 2] = $6;
  HEAP32[$25 + 36 >> 2] = HEAP32[892];
  HEAP32[892] = HEAP32[$g >> 2];
  $dc$0 = $25;
 } else $dc$0 = 0;
 $31 = HEAP32[810] | 0;
 HEAP32[810] = $fs$0;
 if (!$a) $38 = _df1($w, $fs$0) | 0; else $38 = _df2($a, $w, $fs$0) | 0;
 HEAP32[810] = $31;
 if ($8) {
  HEAP32[892] = HEAP32[$dc$0 + 36 >> 2];
  _debz();
 }
 HEAP32[808] = (HEAP32[808] | 0) + -1;
 $$0 = $38;
 STACKTOP = sp;
 return $$0 | 0;
}

function _host($w) {
 $w = $w | 0;
 var $$0 = 0, $$0$i5 = 0, $1 = 0, $11 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $22 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $33 = 0, $37 = 0, $9 = 0, $p$02$i = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $1 = $w + 12 | 0;
 if ((HEAP32[$1 >> 2] | 0) > 1) {
  $$0 = _rank1ex($w, 0, 1, 404) | 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 2)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $9 = HEAP32[$w + 8 >> 2] | 0;
 $11 = _ga(2, $9 + 25 | 0, 1, 0) | 0;
 if (!$11) {
  $$0 = 0;
  return $$0 | 0;
 }
 $15 = HEAP32[$11 + 12 >> 2] | 0;
 $17 = $11 + ($15 + 4 + ($15 & 1) << 2) | 0;
 $18 = $17 + ($9 + 5) | 0;
 $19 = HEAP32[$1 >> 2] | 0;
 _memcpy($17 | 0, $w + ($19 + 4 + ($19 & 1) << 2) | 0, $9 | 0) | 0;
 $22 = $17 + $9 | 0;
 HEAP8[$22 >> 0] = HEAP8[8312] | 0;
 HEAP8[$22 + 1 >> 0] = HEAP8[8313] | 0;
 HEAP8[$22 + 2 >> 0] = HEAP8[8314] | 0;
 HEAP8[$22 + 3 >> 0] = HEAP8[8315] | 0;
 HEAP8[$22 + 4 >> 0] = HEAP8[8316] | 0;
 _tmpnam($18 | 0) | 0;
 if (!(_system($17 | 0) | 0)) {
  $25 = _fopen($18 | 0, 8440) | 0;
  if (!$25) $$0$i5 = 0; else {
   _fseek($25 | 0, 0, 2) | 0;
   $27 = _ftell($25 | 0) | 0;
   _rewind($25 | 0);
   $28 = _ga(2, $27, 1, 0) | 0;
   if (!$28) $$0$i5 = 0; else {
    $31 = HEAP32[$28 + 12 >> 2] | 0;
    $33 = $28 + ($31 + 4 + ($31 & 1) << 2) | 0;
    if (($27 | 0) > 0) {
     $p$02$i = 0;
     do {
      $37 = _fread($33 + $p$02$i | 0, 1, $27 - $p$02$i | 0, $25 | 0) | 0;
      $p$02$i = $37 + $p$02$i | 0;
     } while (($37 | 0) != 0 & ($p$02$i | 0) < ($27 | 0));
    }
    if (!(_ferror($25 | 0) | 0)) $$0$i5 = $28; else {
     _jsignal(7);
     $$0$i5 = 0;
    }
   }
  }
  _fclose($25 | 0) | 0;
  _unlink($18 | 0) | 0;
  if ($25) {
   $$0 = $$0$i5;
   return $$0 | 0;
  }
 } else _unlink($18 | 0) | 0;
 _jsignal(7);
 $$0 = 0;
 return $$0 | 0;
}

function _adot2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$0$i = 0, $$sum1$i = 0, $$sum3$i = 0, $20 = 0, $23 = 0, $27 = 0, $29 = 0, $32 = 0, $35 = 0, $37 = 0, $39 = 0, $42 = 0, $7 = 0, $9 = 0, $c$07$i = 0, $i$09$i = 0, $i1$08$i = 0, $c$07$i$looptemp = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w + 12 >> 2] | 0)) $7 = 1; else $7 = HEAP32[$w + 16 >> 2] | 0;
 $9 = _fact(_sc($7) | 0) | 0;
 if (!$9) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((_all1(_le(_negate($9) | 0, $a) | 0) | 0) << 24 >> 24) if ((_all1(_lt($a, $9) | 0) | 0) << 24 >> 24) {
  $20 = _vi(_abase2(_apv($7, $7, -1) | 0, $a) | 0) | 0;
  do if (!$20) $$0$i = 0; else {
   $23 = HEAP32[$20 + 12 >> 2] | 0;
   if (($23 | 0) > 1) {
    $$0$i = _rank1ex($20, 0, 1, 398) | 0;
    break;
   }
   $27 = HEAP32[$20 + 8 >> 2] | 0;
   $$sum1$i = $23 + 4 + ($23 & 1) | 0;
   $29 = _ii($20) | 0;
   if (!$29) $$0$i = 0; else {
    $32 = HEAP32[$29 + 12 >> 2] | 0;
    $$sum3$i = $32 + 4 + ($32 & 1) | 0;
    if (($27 | 0) > 1) {
     $35 = $27 + -1 | 0;
     $i$09$i = 0;
     do {
      $37 = HEAP32[$20 + ($$sum1$i + $i$09$i << 2) >> 2] | 0;
      if (($37 | 0) > -1) {
       $39 = $$sum3$i + $i$09$i | 0;
       $c$07$i = HEAP32[$29 + ($39 + $37 << 2) >> 2] | 0;
       $i1$08$i = 0;
       while (1) {
        $42 = $29 + ($i1$08$i + $39 << 2) | 0;
        $c$07$i$looptemp = $c$07$i;
        $c$07$i = HEAP32[$42 >> 2] | 0;
        HEAP32[$42 >> 2] = $c$07$i$looptemp;
        if (($i1$08$i | 0) == ($37 | 0)) break; else $i1$08$i = $i1$08$i + 1 | 0;
       }
      }
      $i$09$i = $i$09$i + 1 | 0;
     } while (($i$09$i | 0) != ($35 | 0));
     $$0$i = $29;
    } else $$0$i = $29;
   }
  } while (0);
  $$0 = _from($$0$i, $w) | 0;
  return $$0 | 0;
 }
 _jsignal(6);
 $$0 = 0;
 return $$0 | 0;
}

function _chookv($agg$result, $b, $e, $stack) {
 $agg$result = $agg$result | 0;
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 var $10 = 0, $13 = 0, $16 = 0, $19 = 0, $21 = 0, $28 = 0, $3 = 0, $32 = 0, $33 = 0, $34 = 0, $38 = 0, $43 = 0, $50 = 0, $54 = 0, $55 = 0, $56 = 0, $7 = 0, $8 = 0, $9 = 0, $z$sroa$2$0 = 0;
 $3 = HEAP32[$stack + ($b << 3) + 4 >> 2] | 0;
 $7 = HEAP32[$stack + ($e << 3) + 4 >> 2] | 0;
 $8 = HEAP32[$stack + ($b << 3) >> 2] | 0;
 $9 = HEAP32[$stack + ($e << 3) >> 2] | 0;
 $10 = _hook($8, $9) | 0;
 $13 = $3;
 $16 = $7;
 $19 = ($7 | 0) != 0 | (($3 | 0) != 0 ? 2 : 0);
 do if (!(HEAP8[3248] | 0)) if (($19 | 0) == 3) {
  if (!$3) $54 = _advform(HEAP32[818] | 0, $8) | 0; else $54 = $13;
  $50 = HEAP32[814] | 0;
  if (!$7) $55 = _advform(HEAP32[818] | 0, $9) | 0; else $55 = $16;
  $56 = _tfork($54, $50, $55) | 0;
  $z$sroa$2$0 = _thook($56, HEAP32[816] | 0) | 0;
  break;
 } else if (($19 | 0) == 2) {
  $43 = _advform(HEAP32[814] | 0, $9) | 0;
  $z$sroa$2$0 = _thook($13, _thook($43, HEAP32[816] | 0) | 0) | 0;
  break;
 } else if (($19 | 0) == 1) {
  $38 = _advform($8, HEAP32[814] | 0) | 0;
  $z$sroa$2$0 = _thook($16, _thook($38, HEAP32[816] | 0) | 0) | 0;
  break;
 } else {
  $z$sroa$2$0 = 0;
  break;
 } else {
  if (!$19) {
   $z$sroa$2$0 = 0;
   break;
  } else if (($19 | 0) == 2) {
   $21 = _advform(HEAP32[814] | 0, $9) | 0;
   $z$sroa$2$0 = _thook($13, _thook($21, HEAP32[816] | 0) | 0) | 0;
   break;
  }
  if (!$3) $32 = _advform(HEAP32[818] | 0, $8) | 0; else $32 = $13;
  $28 = HEAP32[814] | 0;
  if (!$7) $33 = _advform(HEAP32[818] | 0, $9) | 0; else $33 = $16;
  $34 = _tfork($32, $28, $33) | 0;
  $z$sroa$2$0 = _thook($34, HEAP32[816] | 0) | 0;
 } while (0);
 HEAP32[$agg$result >> 2] = $10;
 HEAP32[$agg$result + 4 >> 2] = $z$sroa$2$0;
 return;
}

function _merge1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$ = 0, $$0 = 0, $$sum8 = 0, $10 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $27 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $45 = 0, $48 = 0, $7 = 0, $i$014 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $7 = HEAP32[$self + ($4 + 6 + ($4 & 1) << 2) >> 2] | 0;
 if (!$7) $23 = 0; else {
  $10 = HEAP32[$7 + 12 >> 2] | 0;
  $23 = HEAP32[$7 + ($10 + 4 + ($10 & 1) << 2) >> 2] | 0;
 }
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $15 = $w + 12 | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 $$ = ($16 | 0) < 1 ? 0 : $16 + -1 | 0;
 $19 = $w + 20 | 0;
 $20 = HEAP32[$w >> 2] | 0;
 $21 = _aii($w) | 0;
 $22 = _tally($w) | 0;
 $25 = _pind($22, ftCall_iii($23 | 0, $w | 0, $7 | 0) | 0) | 0;
 if (!$25) {
  $$0 = 0;
  return $$0 | 0;
 }
 $27 = $25 + 12 | 0;
 if (($$ | 0) != (HEAP32[$27 >> 2] | 0)) {
  _jsignal(14);
  $$0 = 0;
  return $$0 | 0;
 }
 if (_memcmp($19, $25 + 16 | 0, $$ << 2) | 0) {
  _jsignal(9);
  $$0 = 0;
  return $$0 | 0;
 }
 $34 = _ga($20, $21, $$, $19) | 0;
 if (!$34) {
  $$0 = 0;
  return $$0 | 0;
 }
 $37 = HEAP32[$34 + 12 >> 2] | 0;
 $39 = $34 + ($37 + 4 + ($37 & 1) << 2) | 0;
 $40 = HEAP32[$15 >> 2] | 0;
 $42 = $w + ($40 + 4 + ($40 & 1) << 2) | 0;
 $43 = HEAP32[$27 >> 2] | 0;
 $$sum8 = $43 + 4 + ($43 & 1) | 0;
 $45 = _bp($20) | 0;
 if (($21 | 0) > 0) {
  $i$014 = 0;
  do {
   $48 = $39 + (Math_imul($i$014, $45) | 0) | 0;
   _memcpy($48 | 0, $42 + (Math_imul((Math_imul(HEAP32[$25 + ($$sum8 + $i$014 << 2) >> 2] | 0, $21) | 0) + $i$014 | 0, $45) | 0) | 0, $45 | 0) | 0;
   $i$014 = $i$014 + 1 | 0;
  } while (($i$014 | 0) != ($21 | 0));
 }
 $$0 = _gc($34, $2) | 0;
 return $$0 | 0;
}

function _insert($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$sum4 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $25 = 0, $27 = 0, $32 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $49 = 0, $51 = 0, $6 = 0, $i$012 = 0, $j$010 = 0, $z$0$lcssa = 0, $z$011 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $6 = (HEAP32[$w + 12 >> 2] | 0) == 0;
 if ($6) $19 = 1; else $19 = HEAP32[$w + 16 >> 2] | 0;
 $10 = HEAP32[$self + 12 >> 2] | 0;
 $13 = HEAP32[$self + ($10 + 8 + ($10 & 1) << 2) >> 2] | 0;
 $15 = HEAP32[$13 + 8 >> 2] | 0;
 $17 = HEAP32[$13 + 12 >> 2] | 0;
 $$sum4 = $17 + 4 + ($17 & 1) | 0;
 if (!$19) {
  $$0 = _df1($w, _iden(HEAP32[$13 + ($$sum4 << 2) >> 2] | 0) | 0) | 0;
  return $$0 | 0;
 }
 $25 = $19 + -1 | 0;
 $27 = ($15 | 0) > ($25 | 0) ? $15 : $25;
 if ($6) $32 = _ca($w) | 0; else $32 = _from(_sc(($27 | 0) % ($19 | 0) | 0) | 0, $w) | 0;
 if (!$32) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($27 | 0) == 1) {
  $$0 = $32;
  return $$0 | 0;
 }
 L21 : do if (($27 | 0) > 0) {
  $i$012 = 0;
  $j$010 = $27;
  $z$011 = $32;
  while (1) {
   $j$010 = $j$010 + -1 | 0;
   $40 = $13 + ((($j$010 | 0) % ($15 | 0) | 0) + $$sum4 << 2) | 0;
   $41 = HEAP32[$40 >> 2] | 0;
   $43 = HEAP32[$41 + 12 >> 2] | 0;
   $46 = HEAP32[$41 + ($43 + 5 + ($43 & 1) << 2) >> 2] | 0;
   $49 = _from(_sc(($j$010 | 0) % ($19 | 0) | 0) | 0, $w) | 0;
   $51 = ftCall_iiii($46 | 0, $49 | 0, $z$011 | 0, HEAP32[$40 >> 2] | 0) | 0;
   $i$012 = $i$012 + 1 | 0;
   if (!$51) {
    $$0 = 0;
    break;
   }
   if (($i$012 | 0) >= ($27 | 0)) {
    $z$0$lcssa = $51;
    break L21;
   } else $z$011 = $51;
  }
  return $$0 | 0;
 } else $z$0$lcssa = $32; while (0);
 $$0 = _gc($z$0$lcssa, $2) | 0;
 return $$0 | 0;
}

function _wopen($w, $0) {
 $w = $w | 0;
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $12 = 0, $18 = 0, $21 = 0, $23 = 0, $28 = 0, $32 = 0, $40 = 0, $49 = 0, $52 = 0, $6 = 0, $9 = 0;
 $1 = $0 << 16 >> 16;
 $6 = _jfopen($w, ($1 | 0) == 1 ? 8440 : ($1 | 0) == 2 ? 8432 : 8360) | 0;
 if (!$6) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[2084] = 0;
 HEAP32[2088] = 0;
 if (($1 | 0) == 3) {
  $$0 = $6;
  return $$0 | 0;
 }
 $9 = _rd($6, -1, 20) | 0;
 if (!$9) {
  $$0 = 0;
  return $$0 | 0;
 }
 $12 = HEAP32[$9 + 12 >> 2] | 0;
 if (_memcmp($9 + ($12 + 4 + ($12 & 1) << 2) | 0, 8368, 20) | 0) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $18 = _unsr(_rd($6, -1, 50) | 0) | 0;
 if (!$18) {
  $$0 = 0;
  return $$0 | 0;
 }
 $21 = HEAP32[$18 + 12 >> 2] | 0;
 $23 = $18 + ($21 + 4 + ($21 & 1) << 2) | 0;
 HEAP32[2098] = HEAP32[$23 >> 2];
 HEAP32[2099] = HEAP32[$23 + 4 >> 2];
 HEAP32[2100] = HEAP32[$23 + 8 >> 2];
 HEAP32[2101] = HEAP32[$23 + 12 >> 2];
 $28 = _words(_unsr(_rd($6, HEAP32[2098] | 0, HEAP32[2099] | 0) | 0) | 0) | 0;
 HEAP32[2088] = $28;
 if (!$28) {
  $$0 = 0;
  return $$0 | 0;
 }
 $32 = _unsr(_rd($6, -1, HEAP32[2101] | 0) | 0) | 0;
 HEAP32[2084] = $32;
 if (!$32) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$32 + 12 >> 2] | 0) != 2) {
  _jsignal(14);
  $$0 = 0;
  return $$0 | 0;
 }
 $40 = $32 + 16 | 0;
 if ((HEAP32[(HEAP32[2088] | 0) + 8 >> 2] | 0) == (HEAP32[$40 >> 2] | 0)) if ((HEAP32[$32 + 20 >> 2] | 0) == 3) {
  if (!(HEAP32[$32 + 8 >> 2] | 0)) {
   $49 = _ga(4, 0, 2, $40) | 0;
   HEAP32[2084] = $49;
   if (!$49) {
    $$0 = 0;
    return $$0 | 0;
   } else $52 = $49;
  } else $52 = $32;
  if (HEAP32[$52 >> 2] & 4) {
   $$0 = $6;
   return $$0 | 0;
  }
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 _jsignal(9);
 $$0 = 0;
 return $$0 | 0;
}

function _fac($v) {
 $v = +$v;
 var $$0 = 0.0, $$047 = 0.0, $$110 = 0.0, $$2 = 0.0, $0 = 0.0, $10 = 0, $12 = 0.0, $16 = 0.0, $17 = 0.0, $19 = 0.0, $20 = 0.0, $22 = 0.0, $25 = 0.0, $28 = 0.0, $31 = 0.0, $34 = 0.0, $37 = 0.0, $4 = 0, $5 = 0, $9 = 0, $t$08 = 0.0, $t$111 = 0.0, $t$2 = 0.0;
 $0 = +Math_floor(+$v);
 $4 = $0 == +Math_floor(+($0 * .5)) * 2.0;
 $5 = $v >= 0.0;
 if (!(($5 ? $v : -$v) > 170.0)) {
  $9 = $0 == $v;
  $10 = $v < 0.0;
  if (!($10 & $9)) {
   if ($5) if ($v > 1.0) {
    $$047 = $v;
    $t$08 = 1.0;
    while (1) {
     $16 = $$047 + -1.0;
     $17 = $$047 * $t$08;
     if ($16 > 1.0) {
      $$047 = $16;
      $t$08 = $17;
     } else {
      $$2 = $16;
      $t$2 = $17;
      break;
     }
    }
   } else {
    $$2 = $v;
    $t$2 = 1.0;
   } else if ($10) {
    $$110 = $v;
    $t$111 = 1.0;
    while (1) {
     $19 = $$110 + 1.0;
     $20 = $t$111 / $19;
     if ($19 < 0.0) {
      $$110 = $19;
      $t$111 = $20;
     } else {
      $$2 = $19;
      $t$2 = $20;
      break;
     }
    }
   } else {
    $$2 = $v;
    $t$2 = 1.0;
   }
   if ($9) {
    $$0 = $t$2;
    return +$$0;
   }
   $22 = $$2 + -1.0;
   $25 = $22 * $22;
   $28 = $22 * $25;
   $31 = $22 * $28;
   $34 = $22 * $31;
   $37 = $22 * $34;
   $$0 = $t$2 * ((-42353.68950974409 - $22 * 20886.86178926989 - $25 * 8762.710297852149 - $28 * 2008.5274013072792 - $31 * 439.3304440600257 - $34 * 50.10869375297096 - $37 * 6.744950724592529) / ($22 * $37 + (-42353.68950974409 - $22 * 2980.385330925665 + $25 * 9940.30741508277 - $28 * 1528.607273779522 - $31 * 499.028526621439 + $34 * 189.498234157028 - $37 * 23.081551524580124)));
   return +$$0;
  }
 }
 $12 = +HEAPF64[317];
 $$0 = $v < 0.0 & $4 ? -$12 : $12;
 return +$$0;
}

function _zdiv($agg$result, $u, $v) {
 $agg$result = $agg$result | 0;
 $u = $u | 0;
 $v = $v | 0;
 var $0 = 0.0, $12 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $2 = 0.0, $20 = 0.0, $3 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $39 = 0.0, $43 = 0.0, $45 = 0, $47 = 0.0, $5 = 0.0, $a$0 = 0.0, $b$0 = 0.0, $c$0 = 0.0, $d$0 = 0.0, $zi$0 = 0.0, $zr$0 = 0.0;
 $0 = +HEAPF64[$u >> 3];
 $2 = +HEAPF64[$u + 8 >> 3];
 $3 = +HEAPF64[$v >> 3];
 $5 = +HEAPF64[$v + 8 >> 3];
 do if ($3 != 0.0 | $5 != 0.0) {
  $12 = -$5;
  if (($3 >= 0.0 ? $3 : -$3) < ($5 >= 0.0 ? $5 : $12)) {
   $a$0 = -$2;
   $b$0 = $0;
   $c$0 = $12;
   $d$0 = $3;
  } else {
   $a$0 = $0;
   $b$0 = $2;
   $c$0 = $3;
   $d$0 = $5;
  }
  $16 = $a$0 / $c$0;
  $17 = $b$0 / $c$0;
  $18 = $d$0 / $c$0;
  $20 = $18 * $18 + 1.0;
  $zi$0 = ($17 - $16 * $18) / $20;
  $zr$0 = ($16 + $17 * $18) / $20;
 } else if ($0 != 0.0 | $2 != 0.0) {
  $34 = ($0 < 0.0 & 1) << 1 | $2 < 0.0;
  if (($34 | 0) == 2) {
   $43 = +HEAPF64[317];
   if (!($0 < -$2)) {
    $zi$0 = $43;
    $zr$0 = 0.0;
    break;
   }
   $zi$0 = 0.0;
   $zr$0 = -$43;
   break;
  } else if (($34 | 0) == 3) {
   $45 = $0 < $2;
   $47 = -+HEAPF64[317];
   $zi$0 = $45 ? 0.0 : $47;
   $zr$0 = $45 ? $47 : 0.0;
   break;
  } else if (!$34) {
   $35 = $0 > $2;
   $36 = +HEAPF64[317];
   $zi$0 = $35 ? 0.0 : $36;
   $zr$0 = $35 ? $36 : 0.0;
   break;
  } else if (($34 | 0) == 1) {
   $39 = +HEAPF64[317];
   if ($0 > -$2) {
    $zi$0 = 0.0;
    $zr$0 = $39;
    break;
   }
   $zi$0 = -$39;
   $zr$0 = 0.0;
   break;
  } else {
   $zi$0 = 0.0;
   $zr$0 = 0.0;
   break;
  }
 } else {
  $zi$0 = 0.0;
  $zr$0 = 0.0;
 } while (0);
 HEAPF64[$agg$result >> 3] = $zr$0;
 HEAPF64[$agg$result + 8 >> 3] = $zi$0;
 return;
}

function _jfwrite($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $14 = 0, $15 = 0, $16 = 0, $21 = 0, $25 = 0, $31 = 0, $34 = 0, $37 = 0, $39 = 0, $41 = 0, $45 = 0, $5 = 0, $p$04$i = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$a + 12 >> 2] | 0) <= 127) {
  $5 = $w + 12 | 0;
  if ((HEAP32[$5 >> 2] | 0) <= 0) {
   if (HEAP32[$w >> 2] & 29) if ((_i0($w) | 0) == 2) {
    $14 = HEAP8[8472] | 0;
    HEAP8[8472] = 1;
    $15 = _jpr($a) | 0;
    HEAP8[8472] = $14;
    $$0 = $15;
    return $$0 | 0;
   } else {
    _jsignal(3);
    $$0 = 0;
    return $$0 | 0;
   }
   $16 = _vs($a) | 0;
   if (!$16) {
    $$0 = 0;
    return $$0 | 0;
   }
   if (!(HEAP32[$w >> 2] & 32)) {
    _jsignal(3);
    $$0 = 0;
    return $$0 | 0;
   }
   $21 = HEAP32[$5 >> 2] | 0;
   $25 = _vs(HEAP32[$w + ($21 + 4 + ($21 & 1) << 2) >> 2] | 0) | 0;
   if (!$25) {
    $$0 = 0;
    return $$0 | 0;
   }
   if (!(HEAP32[$25 + 8 >> 2] | 0)) {
    _jsignal(9);
    $$0 = 0;
    return $$0 | 0;
   }
   $31 = HEAP32[$25 + 12 >> 2] | 0;
   $34 = _fopen($25 + ($31 + 4 + ($31 & 1) << 2) | 0, 8360) | 0;
   if (!$34) {
    _jsignal(7);
    $$0 = 0;
    return $$0 | 0;
   }
   $37 = HEAP32[$16 + 8 >> 2] | 0;
   $39 = HEAP32[$16 + 12 >> 2] | 0;
   $41 = $16 + ($39 + 4 + ($39 & 1) << 2) | 0;
   if (($37 | 0) > 0) {
    $p$04$i = 0;
    do {
     $45 = _fwrite($41 + $p$04$i | 0, 1, $37 - $p$04$i | 0, $34 | 0) | 0;
     $p$04$i = $45 + $p$04$i | 0;
    } while (($45 | 0) != 0 & ($37 | 0) > ($p$04$i | 0));
   }
   if (_ferror($34 | 0) | 0) _jsignal(7);
   _fclose($34 | 0) | 0;
   $$0 = HEAP32[616] | 0;
   return $$0 | 0;
  }
 }
 $$0 = _rank2ex($a, $w, 0, 127, 0, 417) | 0;
 return $$0 | 0;
}

function _rank2a($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$sum2 = 0, $$sum8 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $3 = 0, $32 = 0, $34 = 0, $37 = 0, $38 = 0, $44 = 0, $50 = 0, $51 = 0, $6 = 0, $8 = 0, $cv = 0, $f2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $cv = sp + 4 | 0;
 $f2 = sp;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $3 = HEAP32[$self + 12 >> 2] | 0;
 $$sum2 = $3 + 4 + ($3 & 1) | 0;
 $6 = HEAP32[$self + ($$sum2 + 2 << 2) >> 2] | 0;
 $8 = HEAP32[$6 + 12 >> 2] | 0;
 $12 = HEAP8[$6 + ($8 + 4 + ($8 & 1) << 2) + 31 >> 0] | 0;
 $14 = HEAP32[$self + ($$sum2 + 4 << 2) >> 2] | 0;
 $16 = HEAP32[$14 + 12 >> 2] | 0;
 $$sum8 = $16 + 4 + ($16 & 1) | 0;
 $18 = $12 << 24 >> 24;
 if ($12 << 24 >> 24 == -107 | $12 << 24 >> 24 == 61) {
  $$0 = _neeq($a, $w, HEAP32[$14 + ($$sum8 + 1 << 2) >> 2] | 0, HEAP32[$14 + ($$sum8 + 2 << 2) >> 2] | 0, $18) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(HEAP32[$a + 8 >> 2] | 0)) $32 = 1; else $32 = HEAP32[$a >> 2] | 0;
 if (!(HEAP32[$w + 8 >> 2] | 0)) $34 = 1; else $34 = HEAP32[$w >> 2] | 0;
 _var($18, ($32 | 0) > ($34 | 0) ? $32 : $34, $f2, $cv);
 $37 = _atype(HEAP32[$cv >> 2] | 0) | 0;
 $38 = HEAP32[$cv >> 2] | 0;
 if (($37 | 0) == ($32 | 0)) $50 = $a; else $50 = _cvt($37, $a) | 0;
 if (($37 | 0) == ($34 | 0)) $51 = $w; else $51 = _cvt($37, $w) | 0;
 $44 = _rtype(HEAP32[$cv >> 2] | 0) | 0;
 $$0 = _cvz($38, _r2a($50, $51, $44, HEAP32[$14 + ($$sum8 + 1 << 2) >> 2] | 0, HEAP32[$14 + ($$sum8 + 2 << 2) >> 2] | 0, HEAP32[$f2 >> 2] | 0) | 0) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _key($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $25 = 0, $27 = 0, $30 = 0, $31 = 0, $34 = 0, $36 = 0, $4 = 0, $48 = 0, $7 = 0, $d$013 = 0, $i1$015 = 0, $u$012 = 0, $v$014 = 0, $d$013$looptemp = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $7 = HEAP32[$self + ($4 + 6 + ($4 & 1) << 2) >> 2] | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$a + 12 >> 2] | 0)) $20 = 1; else $20 = HEAP32[$a + 16 >> 2] | 0;
 if (!(HEAP32[$w + 12 >> 2] | 0)) $22 = 1; else $22 = HEAP32[$w + 16 >> 2] | 0;
 if (($20 | 0) != ($22 | 0)) {
  _jsignal(9);
  $$0 = 0;
  return $$0 | 0;
 }
 $23 = _indexof($a, $a) | 0;
 if (!$23) {
  $$0 = 0;
  return $$0 | 0;
 }
 $25 = _grade1($23) | 0;
 if (!$25) {
  $$0 = 0;
  return $$0 | 0;
 }
 $27 = _from($25, $23) | 0;
 if (!$27) {
  $$0 = 0;
  return $$0 | 0;
 }
 $30 = HEAP32[$27 + 8 >> 2] | 0;
 $31 = _ga(1, $30, 1, 0) | 0;
 if (!$31) {
  $$0 = 0;
  return $$0 | 0;
 }
 $34 = HEAP32[$31 + 12 >> 2] | 0;
 $36 = HEAP32[$27 + 12 >> 2] | 0;
 if (($30 | 0) > 0) {
  $d$013 = -1;
  $i1$015 = 0;
  $u$012 = $31 + ($34 + 4 + ($34 & 1) << 2) | 0;
  $v$014 = $27 + ($36 + 4 + ($36 & 1) << 2) | 0;
  while (1) {
   $d$013$looptemp = $d$013;
   $d$013 = HEAP32[$v$014 >> 2] | 0;
   HEAP8[$u$012 >> 0] = ($d$013$looptemp | 0) != ($d$013 | 0) & 1;
   $i1$015 = $i1$015 + 1 | 0;
   if (($i1$015 | 0) == ($30 | 0)) break; else {
    $u$012 = $u$012 + 1 | 0;
    $v$014 = $v$014 + 4 | 0;
   }
  }
 }
 $48 = _from($25, $w) | 0;
 $$0 = _gc(_df2($31, $48, _cut($7, HEAP32[646] | 0) | 0) | 0, $2) | 0;
 return $$0 | 0;
}

function _ds($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$sum1$i = 0, $1 = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $23 = 0, $24 = 0, $27 = 0, $29 = 0, $4 = 0, $6 = 0;
 $1 = $0 & 255;
 $4 = HEAPU8[5536 + $1 >> 0] | 0;
 $6 = HEAP32[3888 + ($4 << 4) >> 2] | 0;
 switch ($6 | 0) {
 case 4096:
 case 2048:
  {
   $$0 = _scalar4($6, 0) | 0;
   return $$0 | 0;
  }
 case 1024:
  {
   $$0 = _scnm($0 << 24 >> 24) | 0;
   return $$0 | 0;
  }
 case 8192:
  {
   $$0 = _scalar4(8192, ($1 | 0) == 128 & 1) | 0;
   return $$0 | 0;
  }
 case 512:
 case 256:
 case 128:
  {
   $15 = HEAP32[3888 + ($4 << 4) + 4 >> 2] | 0;
   $17 = HEAP32[3888 + ($4 << 4) + 8 >> 2] | 0;
   $19 = HEAP8[3888 + ($4 << 4) + 12 >> 0] | 0;
   $21 = HEAP8[3888 + ($4 << 4) + 13 >> 0] | 0;
   $23 = HEAP8[3888 + ($4 << 4) + 14 >> 0] | 0;
   $24 = _ga($6, 1, 0, 0) | 0;
   if (!$24) {
    $$0 = 0;
    return $$0 | 0;
   }
   $27 = HEAP32[$24 + 12 >> 2] | 0;
   $$sum1$i = $27 + 4 + ($27 & 1) | 0;
   $29 = $24 + ($$sum1$i << 2) | 0;
   HEAP32[$29 >> 2] = ($15 | 0) != 0 ? $15 : 262;
   HEAP32[$24 + ($$sum1$i + 1 << 2) >> 2] = ($17 | 0) != 0 ? $17 : 262;
   HEAP32[$24 + ($$sum1$i + 2 << 2) >> 2] = 0;
   HEAP32[$24 + ($$sum1$i + 3 << 2) >> 2] = 0;
   HEAP32[$24 + ($$sum1$i + 4 << 2) >> 2] = 0;
   HEAP32[$24 + ($$sum1$i + 5 << 2) >> 2] = 0;
   HEAP32[$24 + ($$sum1$i + 6 << 2) >> 2] = 0;
   HEAP8[$24 + ($$sum1$i + 7 << 2) >> 0] = $19;
   HEAP8[$29 + 29 >> 0] = $21;
   HEAP8[$29 + 30 >> 0] = $23;
   HEAP8[$29 + 31 >> 0] = $0;
   $$0 = $24;
   return $$0 | 0;
  }
 case 127:
  {
   $$0 = HEAP32[3888 + ($4 << 4) + 4 >> 2] | 0;
   return $$0 | 0;
  }
 default:
  {
   $$0 = HEAP32[620] | 0;
   return $$0 | 0;
  }
 }
 return 0;
}

function _lamin2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i4 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $3 = 0, $35 = 0, $37 = 0, $44 = 0, $48 = 0, $5 = 0, $51 = 0, $54 = 0, $58 = 0, $59 = 0, $6 = 0, $9 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = $a + 12 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (!$3) $58 = $a; else {
  $5 = HEAP32[646] | 0;
  $6 = _ga(4, $3, 1, 0) | 0;
  if (!$6) $$0$i$i = 0; else {
   $9 = HEAP32[$6 + 12 >> 2] | 0;
   _memcpy($6 + ($9 + 4 + ($9 & 1) << 2) | 0, $a + 16 | 0, HEAP32[$2 >> 2] << 2 | 0) | 0;
   $$0$i$i = $6;
  }
  $58 = _reshape(_over($5, $$0$i$i) | 0, $a) | 0;
 }
 $17 = $w + 12 | 0;
 $18 = HEAP32[$17 >> 2] | 0;
 if (!$18) if (!(HEAP32[$2 >> 2] | 0)) {
  $35 = $w + 8 | 0;
  $37 = _ga(HEAP32[$w >> 2] | 0, HEAP32[$35 >> 2] | 0, 2, 0) | 0;
  if (!$37) $59 = 0; else {
   if (!(HEAP32[$17 >> 2] | 0)) $44 = 1; else $44 = HEAP32[$w + 16 >> 2] | 0;
   HEAP32[$37 + 16 >> 2] = $44;
   HEAP32[$37 + 20 >> 2] = _aii($w) | 0;
   $48 = HEAP32[$37 + 12 >> 2] | 0;
   $51 = HEAP32[$17 >> 2] | 0;
   $54 = HEAP32[$35 >> 2] | 0;
   _memcpy($37 + ($48 + 4 + ($48 & 1) << 2) | 0, $w + ($51 + 4 + ($51 & 1) << 2) | 0, Math_imul(_bp(HEAP32[$w >> 2] | 0) | 0, $54) | 0) | 0;
   $59 = $37;
  }
 } else $59 = $w; else {
  $20 = HEAP32[646] | 0;
  $21 = _ga(4, $18, 1, 0) | 0;
  if (!$21) $$0$i$i4 = 0; else {
   $24 = HEAP32[$21 + 12 >> 2] | 0;
   _memcpy($21 + ($24 + 4 + ($24 & 1) << 2) | 0, $w + 16 | 0, HEAP32[$17 >> 2] << 2 | 0) | 0;
   $$0$i$i4 = $21;
  }
  $59 = _reshape(_over($20, $$0$i$i4) | 0, $w) | 0;
 }
 $$0 = _over($58, $59) | 0;
 return $$0 | 0;
}

function _stdnm($w) {
 $w = $w | 0;
 var $$0 = 0, $$02 = 0, $12 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $37 = 0, $39 = 0, $42 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $i$011 = 0, $i$011$lcssa = 0, $i1$07 = 0, $j$26 = 0, $j$3 = 0;
 if (!(_vs($w) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $3 = HEAP32[$w + 8 >> 2] | 0;
 $5 = HEAP32[$w + 12 >> 2] | 0;
 $7 = $w + ($5 + 4 + ($5 & 1) << 2) | 0;
 $8 = ($3 | 0) > 0;
 if ($8) {
  $i$011 = 0;
  while (1) {
   $12 = $i$011 + 1 | 0;
   if (($12 | 0) < ($3 | 0) ? (HEAP8[$7 + $i$011 >> 0] | 0) == 32 : 0) $i$011 = $12; else {
    $i$011$lcssa = $i$011;
    break;
   }
  }
  $17 = ($3 | 0) != 0;
  $18 = $17 ? $i$011$lcssa : 0;
  $19 = $3 + -1 | 0;
  if ($8) {
   $i1$07 = 0;
   $j$26 = $19;
   while (1) {
    $20 = $j$26 + -1 | 0;
    $i1$07 = $i1$07 + 1 | 0;
    if (!(($i1$07 | 0) < ($3 | 0) ? (HEAP8[$7 + $j$26 >> 0] | 0) == 32 : 0)) {
     $28 = $17;
     $31 = $18;
     $j$3 = $20;
     break;
    } else $j$26 = $20;
   }
  } else {
   $28 = $17;
   $31 = $18;
   $j$3 = $19;
  }
 } else {
  $9 = ($3 | 0) != 0;
  $28 = $9;
  $31 = $9 << 31 >> 31;
  $j$3 = $3 + -1 | 0;
 }
 $29 = $28 ? $3 + -2 - $j$3 | 0 : 0;
 do if (!($29 | $31)) {
  $$02 = $w;
  $39 = $5;
 } else {
  $33 = _sc($31) | 0;
  $37 = _drop($33, _drop(_sc(0 - $29 | 0) | 0, $w) | 0) | 0;
  if (!$37) {
   $$0 = 0;
   return $$0 | 0;
  } else {
   $$02 = $37;
   $39 = HEAP32[$37 + 12 >> 2] | 0;
   break;
  }
 } while (0);
 $42 = _spellin($3, $$02 + ($39 + 4 + ($39 & 1) << 2) | 0) | 0;
 if (($42 & 255) < 2) {
  $$0 = $$02;
  return $$0 | 0;
 }
 $$0 = _scc($42 << 24 >> 24) | 0;
 return $$0 | 0;
}

function _va2($a, $w, $0) {
 $a = $a | 0;
 $w = $w | 0;
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $13 = 0, $14 = 0, $18 = 0, $27 = 0, $28 = 0, $30 = 0, $39 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $65 = 0, $69 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$a + 8 >> 2] | 0)) $11 = 1; else $11 = HEAP32[$a >> 2] | 0;
 if (!(HEAP32[$w + 8 >> 2] | 0)) $13 = 1; else $13 = HEAP32[$w >> 2] | 0;
 $14 = ($11 | 0) > ($13 | 0) ? $11 : $13;
 $18 = HEAPU8[6304 + ($0 & 255) >> 0] | 0;
 if (!($14 & 1)) if (!($14 & 4)) $27 = $14 >>> 3 & 1 ^ 3; else $27 = 5; else $27 = 4;
 $28 = HEAP32[6560 + ($18 * 52 | 0) + 4 + ($27 << 3) >> 2] | 0;
 $30 = HEAP32[6560 + ($18 * 52 | 0) + 4 + ($27 << 3) + 4 >> 2] | 0;
 if (!($30 & 1)) if (!($30 & 2)) $39 = ($30 << 1 & 8 ^ 8) + 8 | 0; else $39 = 4; else $39 = 1;
 if (($39 | 0) == ($11 | 0)) $53 = $a; else $53 = _cvt($39, $a) | 0;
 if (($39 | 0) == ($13 | 0)) $54 = $w; else $54 = _cvt($39, $w) | 0;
 if (!($30 & 16)) if (!($30 & 32)) $55 = ($30 >>> 3 & 8 ^ 8) + 8 | 0; else $55 = 4; else $55 = 1;
 $56 = _sex2($53, $54, $55, $28) | 0;
 if (!$56) {
  $$0 = 0;
  return $$0 | 0;
 }
 $58 = HEAP32[$56 >> 2] | 0;
 if (($30 & 256 | 0) != 0 & ($58 | 0) != 8) {
  $$0 = _pcvt(8, $56) | 0;
  return $$0 | 0;
 }
 $65 = ($58 | 0) != 4;
 if (($30 & 512 | 0) != 0 & $65) {
  $$0 = _icvt($56) | 0;
  return $$0 | 0;
 }
 if (!(($30 & 1024 | 0) != 0 & $65)) {
  $$0 = $56;
  return $$0 | 0;
 }
 $69 = _pcvt(8, $56) | 0;
 if (!$69) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (HEAP32[$69 >> 2] & 16) {
  $$0 = $69;
  return $$0 | 0;
 }
 $$0 = _pcvt(4, $69) | 0;
 return $$0 | 0;
}

function _onm($w) {
 $w = $w | 0;
 var $$0 = 0, $1 = 0, $11 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $23 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $i$05$i = 0, label = 0;
 $1 = _stdnm(_ope($w) | 0) | 0;
 if (!$1) {
  $$0 = 0;
  return $$0 | 0;
 }
 $4 = HEAP32[$1 + 8 >> 2] | 0;
 $6 = HEAP32[$1 + 12 >> 2] | 0;
 $8 = $1 + ($6 + 4 + ($6 & 1) << 2) | 0;
 if (($4 | 0) == 1) {
  $9 = HEAP8[$8 >> 0] | 0;
  if ($9 << 24 >> 24 == -110 | $9 << 24 >> 24 == -46 | $9 << 24 >> 24 == -47) {
   $$0 = $1;
   return $$0 | 0;
  } else {
   $11 = $9;
   label = 5;
  }
 } else if ($4) {
  $11 = HEAP8[$8 >> 0] | 0;
  label = 5;
 }
 L8 : do if ((label | 0) == 5) if ((HEAP8[5792 + ($11 << 24 >> 24) >> 0] | 0) == 2) {
  $15 = $4 + -1 | 0;
  $16 = ($4 | 0) > 1;
  L11 : do if ($16) {
   $30 = 2;
   $i$05$i = 0;
   while (1) {
    if (!($30 << 24 >> 24 == 5 | $30 << 24 >> 24 == 2)) break L8;
    $17 = $i$05$i + 1 | 0;
    if (($17 | 0) >= ($15 | 0)) break L11;
    $30 = HEAP8[5792 + (HEAP8[$8 + $17 >> 0] | 0) >> 0] | 0;
    $i$05$i = $17;
   }
  } while (0);
  $20 = HEAP8[$8 + $15 >> 0] | 0;
  if ($20 << 24 >> 24 != 95) {
   $29 = HEAP8[5792 + ($20 << 24 >> 24) >> 0] | 0;
   if ($29 << 24 >> 24 == 7 | $29 << 24 >> 24 == 5 | $29 << 24 >> 24 == 2) $$0 = $1; else break;
   return $$0 | 0;
  }
  if ($16) {
   if ($11 << 24 >> 24 == 95) {
    $$0 = $1;
    return $$0 | 0;
   } else $23 = 1;
   while (1) {
    if (($23 | 0) >= ($15 | 0)) break L8;
    if ((HEAP8[$8 + $23 >> 0] | 0) == 95) {
     $$0 = $1;
     break;
    } else $23 = $23 + 1 | 0;
   }
   return $$0 | 0;
  }
 } while (0);
 _jsignal(4);
 $$0 = 0;
 return $$0 | 0;
}

function _strspn($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $$0 = 0, $$028 = 0, $$03 = 0, $$03$lcssa = 0, $$1$lcssa = 0, $$16 = 0, $0 = 0, $11 = 0, $14 = 0, $18 = 0, $24 = 0, $33 = 0, $byteset = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $byteset = sp;
 HEAP32[$byteset >> 2] = 0;
 HEAP32[$byteset + 4 >> 2] = 0;
 HEAP32[$byteset + 8 >> 2] = 0;
 HEAP32[$byteset + 12 >> 2] = 0;
 HEAP32[$byteset + 16 >> 2] = 0;
 HEAP32[$byteset + 20 >> 2] = 0;
 HEAP32[$byteset + 24 >> 2] = 0;
 HEAP32[$byteset + 28 >> 2] = 0;
 $0 = HEAP8[$c >> 0] | 0;
 if (!($0 << 24 >> 24)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(HEAP8[$c + 1 >> 0] | 0)) {
  $$03 = $s;
  while (1) if ((HEAP8[$$03 >> 0] | 0) == $0 << 24 >> 24) $$03 = $$03 + 1 | 0; else {
   $$03$lcssa = $$03;
   break;
  }
  $$0 = $$03$lcssa - $s | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$028 = $c;
  $14 = $0;
 }
 do {
  $18 = $byteset + ((($14 & 255) >>> 5 & 255) << 2) | 0;
  HEAP32[$18 >> 2] = HEAP32[$18 >> 2] | 1 << ($14 & 31);
  $$028 = $$028 + 1 | 0;
  $14 = HEAP8[$$028 >> 0] | 0;
 } while ($14 << 24 >> 24 != 0);
 $11 = HEAP8[$s >> 0] | 0;
 L12 : do if (!($11 << 24 >> 24)) $$1$lcssa = $s; else {
  $$16 = $s;
  $24 = $11;
  while (1) {
   if (!(HEAP32[$byteset + ((($24 & 255) >>> 5 & 255) << 2) >> 2] & 1 << ($24 & 31))) {
    $$1$lcssa = $$16;
    break L12;
   }
   $33 = $$16 + 1 | 0;
   $24 = HEAP8[$33 >> 0] | 0;
   if (!($24 << 24 >> 24)) {
    $$1$lcssa = $33;
    break;
   } else $$16 = $33;
  }
 } while (0);
 $$0 = $$1$lcssa - $s | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _ri($w) {
 $w = $w | 0;
 var $$0 = 0, $$sum11 = 0, $$sum8 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $25 = 0, $28 = 0, $31 = 0, $39 = 0, $i$013 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 12 >> 2] | 0;
 if (($2 | 0) > 1) {
  $$0 = _rank1ex($w, 0, 1, 436) | 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 2)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $$sum8 = $2 + 4 + ($2 & 1) | 0;
 $11 = HEAP32[$w + ($$sum8 + 2 << 2) >> 2] | 0;
 $13 = HEAP32[$w + ($$sum8 + 3 << 2) >> 2] | 0;
 $$sum11 = $$sum8 + 4 | 0;
 $14 = $w + ($$sum11 << 2) | 0;
 $15 = HEAP32[$w + ($$sum8 << 2) >> 2] | 0;
 switch ($15 | 0) {
 case 1:
 case 2:
 case 4:
 case 8:
 case 16:
  break;
 default:
  {
   _jsignal(3);
   $$0 = 0;
   return $$0 | 0;
  }
 }
 if (($13 | 0) <= -1) {
  _jsignal(14);
  $$0 = 0;
  return $$0 | 0;
 }
 L20 : do if (($13 | 0) > 0) {
  $i$013 = 0;
  while (1) {
   if ((HEAP32[$w + ($i$013 + $$sum11 << 2) >> 2] | 0) <= -1) break;
   $i$013 = $i$013 + 1 | 0;
   if (($i$013 | 0) >= ($13 | 0)) break L20;
  }
  _jsignal(9);
  $$0 = 0;
  return $$0 | 0;
 } while (0);
 if (($11 | 0) != (_prod($13, $14) | 0)) {
  _jsignal(9);
  $$0 = 0;
  return $$0 | 0;
 }
 $25 = $w + 8 | 0;
 $28 = ((HEAP32[$25 >> 2] | 0) + 3 | 0) / 4 | 0;
 $31 = Math_imul(_bp($15) | 0, $11) | 0;
 if (($28 | 0) != ($13 + 5 + (((($15 & 1027 | 0) != 0 ? 4 : 3) + $31 | 0) / 4 | 0) | 0)) {
  _jsignal(9);
  $$0 = 0;
  return $$0 | 0;
 }
 $39 = _ga($15, $11, $13, 0) | 0;
 if (!$39) {
  $$0 = 0;
  return $$0 | 0;
 }
 _memcpy($39 + 16 | 0, $14 | 0, (HEAP32[$25 >> 2] | 0) + -16 | 0) | 0;
 $$0 = $39;
 return $$0 | 0;
}

function _jfappend($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $15 = 0, $20 = 0, $24 = 0, $30 = 0, $33 = 0, $36 = 0, $38 = 0, $40 = 0, $44 = 0, $5 = 0, $p$04$i = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$a + 12 >> 2] | 0) <= 127) {
  $5 = $w + 12 | 0;
  if ((HEAP32[$5 >> 2] | 0) <= 0) {
   if (HEAP32[$w >> 2] & 29) if ((_i0($w) | 0) == 2) {
    $$0 = _jpr($a) | 0;
    return $$0 | 0;
   } else {
    _jsignal(3);
    $$0 = 0;
    return $$0 | 0;
   }
   $15 = _vs($a) | 0;
   if (!$15) {
    $$0 = 0;
    return $$0 | 0;
   }
   if (!(HEAP32[$w >> 2] & 32)) {
    _jsignal(3);
    $$0 = 0;
    return $$0 | 0;
   }
   $20 = HEAP32[$5 >> 2] | 0;
   $24 = _vs(HEAP32[$w + ($20 + 4 + ($20 & 1) << 2) >> 2] | 0) | 0;
   if (!$24) {
    $$0 = 0;
    return $$0 | 0;
   }
   if (!(HEAP32[$24 + 8 >> 2] | 0)) {
    _jsignal(9);
    $$0 = 0;
    return $$0 | 0;
   }
   $30 = HEAP32[$24 + 12 >> 2] | 0;
   $33 = _fopen($24 + ($30 + 4 + ($30 & 1) << 2) | 0, 8320) | 0;
   if (!$33) {
    _jsignal(7);
    $$0 = 0;
    return $$0 | 0;
   }
   $36 = HEAP32[$15 + 8 >> 2] | 0;
   $38 = HEAP32[$15 + 12 >> 2] | 0;
   $40 = $15 + ($38 + 4 + ($38 & 1) << 2) | 0;
   if (($36 | 0) > 0) {
    $p$04$i = 0;
    do {
     $44 = _fwrite($40 + $p$04$i | 0, 1, $36 - $p$04$i | 0, $33 | 0) | 0;
     $p$04$i = $44 + $p$04$i | 0;
    } while (($44 | 0) != 0 & ($36 | 0) > ($p$04$i | 0));
   }
   if (_ferror($33 | 0) | 0) _jsignal(7);
   _fclose($33 | 0) | 0;
   $$0 = HEAP32[616] | 0;
   return $$0 | 0;
  }
 }
 $$0 = _rank2ex($a, $w, 0, 127, 0, 418) | 0;
 return $$0 | 0;
}

function _unsr($w) {
 $w = $w | 0;
 var $$0 = 0, $$lcssa = 0, $$lcssa18 = 0, $$lcssa19 = 0, $$lcssa3 = 0, $0 = 0, $10 = 0, $11 = 0, $18 = 0, $20 = 0, $21 = 0, $23 = 0, $26 = 0, $27 = 0, $35 = 0, $4 = 0, $6 = 0, $9 = 0, $n$0 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $s = sp;
 $0 = HEAP32[616] | 0;
 if (!(_vs($w) | 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $4 = HEAP32[$w + 12 >> 2] | 0;
 $6 = $w + ($4 + 4 + ($4 & 1) << 2) | 0;
 HEAP32[$s >> 2] = $6;
 $9 = $6;
 if ((HEAP8[$6 >> 0] | 0) == 32) {
  $11 = $6;
  while (1) {
   $10 = $11 + 1 | 0;
   if ((HEAP8[$10 >> 0] | 0) == 32) $11 = $10; else {
    $$lcssa19 = $10;
    break;
   }
  }
  HEAP32[$s >> 2] = $$lcssa19;
  $$lcssa3 = $$lcssa19;
  $35 = $$lcssa19;
 } else {
  $$lcssa3 = $6;
  $35 = $6;
 }
 $18 = (HEAP32[$w + 8 >> 2] | 0) + ($9 - $$lcssa3) | 0;
 if (!$18) {
  $$0 = $0;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $20 = $35;
  $n$0 = $18;
 }
 while (1) {
  $21 = _unw($n$0, $20, $s, 1) | 0;
  if (!$21) {
   $$0 = 0;
   label = 11;
   break;
  }
  $23 = HEAP32[$s >> 2] | 0;
  if ((HEAP8[$23 >> 0] | 0) == 32) {
   $27 = $23;
   while (1) {
    $26 = $27 + 1 | 0;
    if ((HEAP8[$26 >> 0] | 0) == 32) $27 = $26; else {
     $$lcssa18 = $26;
     break;
    }
   }
   HEAP32[$s >> 2] = $$lcssa18;
   $$lcssa = $$lcssa18;
  } else $$lcssa = $23;
  $n$0 = $20 - $$lcssa + $n$0 | 0;
  if (!$n$0) {
   $$0 = $21;
   label = 11;
   break;
  } else $20 = $$lcssa;
 }
 if ((label | 0) == 11) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _nls($tm, $w) {
 $tm = $tm | 0;
 $w = $w | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $2 = 0, $22 = 0, $31 = 0, $38 = 0, $4 = 0, $5 = 0, $8 = 0, $e$010 = 0, $i$08 = 0, $k$0$lcssa = 0, $k$09 = 0, $k$1 = 0, $yv$07 = 0, $yv$1 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 8 >> 2] | 0;
 $4 = HEAP32[$w + 12 >> 2] | 0;
 $5 = _ga(32, $2, 1, 0) | 0;
 if (!$5) {
  $$0 = 0;
  return $$0 | 0;
 }
 $8 = HEAP32[$5 + 12 >> 2] | 0;
 if (($2 | 0) > 0) {
  $e$010 = $w + ($4 + 4 + ($4 & 1) << 2) | 0;
  $i$08 = 0;
  $k$09 = 0;
  $yv$07 = $5 + ($8 + 4 + ($8 & 1) << 2) | 0;
  while (1) {
   $14 = HEAP32[$e$010 >> 2] | 0;
   if (!$14) {
    $k$1 = $k$09;
    $yv$1 = $yv$07;
   } else {
    $17 = HEAP32[$e$010 + 4 >> 2] | 0;
    if (!$17) {
     $k$1 = $k$09;
     $yv$1 = $yv$07;
    } else if (!(HEAP32[$17 >> 2] & $tm)) {
     $k$1 = $k$09;
     $yv$1 = $yv$07;
    } else {
     $22 = _cf($14) | 0;
     if (!(HEAP8[3608 + ($22 & 255) >> 0] | 0)) {
      $k$1 = $k$09;
      $yv$1 = $yv$07;
     } else {
      if ($22 << 24 >> 24 > -1) {
       $31 = HEAP32[$14 + 12 >> 2] | 0;
       $38 = _str(HEAP32[$14 + 8 >> 2] | 0, $14 + ($31 + 4 + ($31 & 1) << 2) | 0) | 0;
      } else $38 = _spellout($22 << 24 >> 24) | 0;
      HEAP32[$yv$07 >> 2] = $38;
      $k$1 = $k$09 + 1 | 0;
      $yv$1 = $yv$07 + 4 | 0;
     }
    }
   }
   $i$08 = $i$08 + 1 | 0;
   if (($i$08 | 0) == ($2 | 0)) {
    $k$0$lcssa = $k$1;
    break;
   } else {
    $e$010 = $e$010 + 8 | 0;
    $k$09 = $k$1;
    $yv$07 = $yv$1;
   }
  }
 } else $k$0$lcssa = 0;
 $$0 = _take(_sc($k$0$lcssa) | 0, $5) | 0;
 return $$0 | 0;
}

function _basis1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$sum6 = 0, $$sum8 = 0, $1 = 0, $11 = 0, $14 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $27 = 0, $29 = 0, $36 = 0, $4 = 0, $44 = 0, $5 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $4 = HEAP32[$self + ($1 + 6 + ($1 & 1) << 2) >> 2] | 0;
 $5 = _mr($self) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($5 | 0) < (HEAP32[$w + 12 >> 2] | 0)) {
  $$0 = _rank1ex($w, $self, $5, 235) | 0;
  return $$0 | 0;
 }
 $11 = _vi($w) | 0;
 if (!$11) {
  $$0 = 0;
  return $$0 | 0;
 }
 $14 = HEAP32[$11 + 12 >> 2] | 0;
 $17 = HEAP32[$11 + ($14 + 4 + ($14 & 1) << 2) >> 2] | 0;
 if (!$17) {
  $18 = _ga(8, 3, 1, 0) | 0;
  if (!$18) {
   $$0 = 0;
   return $$0 | 0;
  }
  $21 = HEAP32[$18 + 12 >> 2] | 0;
  $$sum6 = $21 + 4 + ($21 & 1) | 0;
  $25 = HEAP32[$4 + 12 >> 2] | 0;
  $$sum8 = $25 + 4 + ($25 & 1) | 0;
  $27 = $4 + ($$sum8 << 2) | 0;
  $29 = HEAP8[$4 + ($$sum8 + 7 << 2) >> 0] | 0;
  HEAPF64[$18 + ($$sum6 << 2) >> 3] = ($29 & 255) > 126 ? +HEAPF64[317] : +($29 & 255 | 0);
  $36 = HEAP8[$27 + 29 >> 0] | 0;
  HEAPF64[$18 + ($$sum6 + 2 << 2) >> 3] = ($36 & 255) > 126 ? +HEAPF64[317] : +($36 & 255 | 0);
  $44 = HEAP8[$27 + 30 >> 0] | 0;
  HEAPF64[$18 + ($$sum6 + 4 << 2) >> 3] = ($44 & 255) > 126 ? +HEAPF64[317] : +($44 & 255 | 0);
  $$0 = _pcvt(4, $18) | 0;
  return $$0 | 0;
 } else if (($17 | 0) == 1) {
  $$0 = _lrep(_iden($4) | 0) | 0;
  return $$0 | 0;
 } else if (($17 | 0) == -1) {
  $$0 = _lrep(_inv($4) | 0) | 0;
  return $$0 | 0;
 } else {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function _ung() {
 var $$0 = 0, $0 = 0, $11 = 0, $25 = 0, $26 = 0, $28 = 0, $3 = 0, $32 = 0, $35 = 0, $38 = 0, $6 = 0, $7 = 0, $9 = 0, $i$07 = 0, $m$06 = 0, $m$1 = 0, $m$1$lcssa = 0, $u$04 = 0, $u$1 = 0, $v$05 = 0;
 $0 = _str(0, 8424) | 0;
 if (!$0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $3 = _ca(HEAP32[2088] | 0) | 0;
 if (!$3) {
  $$0 = 0;
  return $$0 | 0;
 }
 $6 = HEAP32[$3 + 12 >> 2] | 0;
 $7 = HEAP32[2088] | 0;
 $9 = HEAP32[$7 + 12 >> 2] | 0;
 $11 = HEAP32[$7 + 8 >> 2] | 0;
 if (($11 | 0) > 0) {
  $i$07 = 0;
  $m$06 = 0;
  $u$04 = $3 + ($6 + 4 + ($6 & 1) << 2) | 0;
  $v$05 = $7 + ($9 + 4 + ($9 & 1) << 2) | 0;
  while (1) {
   if ((_cl(HEAP32[$v$05 >> 2] | 0) | 0) << 24 >> 24 == 58) {
    $m$1 = $m$06 + 1 | 0;
    $u$1 = $u$04;
   } else {
    HEAP32[$u$04 >> 2] = $0;
    $m$1 = $m$06;
    $u$1 = $u$04 + 4 | 0;
   }
   $i$07 = $i$07 + 1 | 0;
   if (($i$07 | 0) == ($11 | 0)) {
    $m$1$lcssa = $m$1;
    break;
   } else {
    $m$06 = $m$1;
    $u$04 = $u$1;
    $v$05 = $v$05 + 4 | 0;
   }
  }
  if ($m$1$lcssa) {
   $25 = HEAP32[2088] | 0;
   $26 = HEAP32[894] | 0;
   HEAP32[894] = 0;
   $28 = _nl1(_apv(4, 2, 1) | 0) | 0;
   HEAP32[894] = $26;
   $32 = _not(_eps($25, _repeat(_eps($3, $28) | 0, $3) | 0) | 0) | 0;
   if (!$32) {
    $$0 = 0;
    return $$0 | 0;
   }
   $35 = _repeat($32, HEAP32[2088] | 0) | 0;
   HEAP32[2088] = $35;
   if (!$35) {
    $$0 = 0;
    return $$0 | 0;
   }
   $38 = _repeat($32, HEAP32[2084] | 0) | 0;
   HEAP32[2084] = $38;
   if (!$38) {
    $$0 = 0;
    return $$0 | 0;
   }
  }
 }
 $$0 = HEAP32[620] | 0;
 return $$0 | 0;
}

function _fork2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$sum2 = 0, $1 = 0, $15 = 0, $16 = 0, $22 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $40 = 0, $47 = 0, $49 = 0, $50 = 0, $52 = 0, $6 = 0, $9 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum2 = $1 + 4 + ($1 & 1) | 0;
 $4 = HEAP32[$self + ($$sum2 + 2 << 2) >> 2] | 0;
 $6 = HEAP32[$self + ($$sum2 + 3 << 2) >> 2] | 0;
 if (!$4) $49 = 0; else {
  $9 = HEAP32[$4 + 12 >> 2] | 0;
  $49 = HEAP32[$4 + ($9 + 5 + ($9 & 1) << 2) >> 2] | 0;
 }
 if (!$6) {
  $47 = 0;
  $52 = 0;
 } else {
  $15 = HEAP32[$6 + 12 >> 2] | 0;
  $16 = $15 & 1;
  $47 = HEAP32[$6 + ($15 + 4 + $16 << 2) >> 2] | 0;
  $52 = HEAP32[$6 + ($15 + 5 + $16 << 2) >> 2] | 0;
 }
 $22 = HEAP32[$self + ($$sum2 + 4 << 2) >> 2] | 0;
 $24 = HEAP32[$22 + 12 >> 2] | 0;
 $27 = HEAP32[$22 + ($24 + 5 + ($24 & 1) << 2) >> 2] | 0;
 $28 = _lr($self) | 0;
 $29 = _rr($self) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($28 | 0) >= (HEAP32[$a + 12 >> 2] | 0)) if (($29 | 0) >= (HEAP32[$w + 12 >> 2] | 0)) {
  $40 = HEAP32[$4 + 12 >> 2] | 0;
  if ((HEAP8[$4 + ($40 + 4 + ($40 & 1) << 2) + 31 >> 0] | 0) == -87) {
   $$0 = ftCall_iii($47 | 0, ftCall_iiii($27 | 0, $a | 0, $w | 0, $22 | 0) | 0, $6 | 0) | 0;
   return $$0 | 0;
  } else {
   $50 = ftCall_iiii($49 | 0, $a | 0, $w | 0, $4 | 0) | 0;
   $$0 = ftCall_iiii($52 | 0, $50 | 0, ftCall_iiii($27 | 0, $a | 0, $w | 0, $22 | 0) | 0, $6 | 0) | 0;
   return $$0 | 0;
  }
 }
 $$0 = _rank2ex($a, $w, $self, $28, $29, 324) | 0;
 return $$0 | 0;
}

function _neeq($a, $w, $l, $r, $0) {
 $a = $a | 0;
 $w = $w | 0;
 $l = $l | 0;
 $r = $r | 0;
 $0 = $0 | 0;
 var $$0 = 0, $$04 = 0, $$05 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $22 = 0, $24 = 0, $27 = 0, $5 = 0, $f2$0 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $5 = (HEAP32[$a + 8 >> 2] | 0) != 0;
 if ($5) $12 = HEAP32[$a >> 2] | 0; else $12 = 1;
 if (!(HEAP32[$w + 8 >> 2] | 0)) $18 = ($0 & 255 | 0) == 61; else {
  $11 = HEAP32[$w >> 2] | 0;
  $13 = ($12 | 0) > ($11 | 0);
  $14 = $13 ? $12 : $11;
  $15 = ($0 & 255 | 0) == 61;
  if ($5) if (!((_homo($12, $11) | 0) << 24 >> 24)) $18 = $15; else {
   if (($14 | 0) == ($12 | 0)) $$04 = $a; else {
    $22 = _cvt($14, $a) | 0;
    if (!$22) {
     $$0 = 0;
     return $$0 | 0;
    } else $$04 = $22;
   }
   if ($13) {
    $24 = _cvt($14, $w) | 0;
    if (!$24) {
     $$0 = 0;
     return $$0 | 0;
    } else $$05 = $24;
   } else $$05 = $w;
   $27 = ($14 & 1 | 0) != 0;
   if ($15) if ($27) $f2$0 = 200; else if (!($14 & 4)) if (!($14 & 8)) if (!($14 & 16)) if (!($14 & 1026)) $f2$0 = ($14 & 32 | 0) != 0 ? 361 : 360; else $f2$0 = 364; else $f2$0 = 203; else $f2$0 = 202; else $f2$0 = 201; else if ($27) $f2$0 = 229; else if (!($14 & 4)) if (!($14 & 8)) if (!($14 & 16)) if (!($14 & 1026)) $f2$0 = ($14 & 32 | 0) != 0 ? 363 : 362; else $f2$0 = 365; else $f2$0 = 232; else $f2$0 = 231; else $f2$0 = 230;
   $$0 = _r2a($$04, $$05, 1, $l, $r, $f2$0) | 0;
   return $$0 | 0;
  } else $18 = $15;
 }
 $$0 = _r2a($a, $w, 1, $l, $r, $18 ? 359 : 358) | 0;
 return $$0 | 0;
}

function _jiread($w) {
 $w = $w | 0;
 var $$0 = 0, $$pr$pre = 0, $10 = 0, $13 = 0, $15 = 0, $20 = 0, $6 = 0, $7 = 0, $8 = 0, $f = 0, $i = 0, $n = 0, $p$02$i = 0, $z$0$ph = 0, $z$0$ph4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $f = sp + 8 | 0;
 $i = sp + 4 | 0;
 $n = sp;
 if (!$w) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ((HEAP32[$w + 12 >> 2] | 0) > 1) {
  $$0 = _rank1ex($w, 0, 1, 420) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $6 = (_vfin($w, $f, $i, $n, 1) | 0) << 24 >> 24 == 0;
 $$pr$pre = HEAP32[$f >> 2] | 0;
 if ($6) {
  $z$0$ph = 0;
  label = 13;
 } else {
  $7 = HEAP32[$i >> 2] | 0;
  $8 = HEAP32[$n >> 2] | 0;
  if (!$$pr$pre) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $10 = _ga(2, $8, 1, 0) | 0;
  if (!$10) $z$0$ph4 = 0; else {
   $13 = HEAP32[$10 + 12 >> 2] | 0;
   $15 = $10 + ($13 + 4 + ($13 & 1) << 2) | 0;
   if (($7 | 0) > -1) _fseek($$pr$pre | 0, $7 | 0, 0) | 0;
   if (($8 | 0) > 0) {
    $p$02$i = 0;
    do {
     $20 = _fread($15 + $p$02$i | 0, 1, $8 - $p$02$i | 0, $$pr$pre | 0) | 0;
     $p$02$i = $20 + $p$02$i | 0;
    } while (($20 | 0) != 0 & ($p$02$i | 0) < ($8 | 0));
   }
   if (!(_ferror($$pr$pre | 0) | 0)) {
    $z$0$ph = $10;
    label = 13;
   } else {
    _jsignal(7);
    $z$0$ph = 0;
    label = 13;
   }
  }
 }
 if ((label | 0) == 13) if (!$$pr$pre) {
  $$0 = $z$0$ph;
  STACKTOP = sp;
  return $$0 | 0;
 } else $z$0$ph4 = $z$0$ph;
 _fclose($$pr$pre | 0) | 0;
 $$0 = $z$0$ph4;
 STACKTOP = sp;
 return $$0 | 0;
}

function _jiwrite($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$pr$pre = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $26 = 0, $9 = 0, $f = 0, $i = 0, $n = 0, $p$04$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $f = sp + 8 | 0;
 $i = sp + 4 | 0;
 $n = sp;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ((HEAP32[$a + 12 >> 2] | 0) <= 127) if ((HEAP32[$w + 12 >> 2] | 0) <= 1) {
  $9 = _vs($a) | 0;
  if (!$9) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $11 = $9 + 8 | 0;
  HEAP32[$n >> 2] = HEAP32[$11 >> 2];
  $14 = (_vfin($w, $f, $i, $n, 0) | 0) << 24 >> 24 == 0;
  $$pr$pre = HEAP32[$f >> 2] | 0;
  if ($14) label = 14; else {
   $15 = HEAP32[$i >> 2] | 0;
   if ($$pr$pre) {
    $17 = HEAP32[$11 >> 2] | 0;
    $19 = HEAP32[$9 + 12 >> 2] | 0;
    $21 = $9 + ($19 + 4 + ($19 & 1) << 2) | 0;
    if (($15 | 0) > -1) _fseek($$pr$pre | 0, $15 | 0, 0) | 0;
    if (($17 | 0) > 0) {
     $p$04$i = 0;
     do {
      $26 = _fwrite($21 + $p$04$i | 0, 1, $17 - $p$04$i | 0, $$pr$pre | 0) | 0;
      $p$04$i = $26 + $p$04$i | 0;
     } while (($26 | 0) != 0 & ($17 | 0) > ($p$04$i | 0));
    }
    if (!(_ferror($$pr$pre | 0) | 0)) label = 14; else {
     _jsignal(7);
     label = 14;
    }
   }
  }
  if ((label | 0) == 14) if ($$pr$pre) _fclose($$pr$pre | 0) | 0;
  $$0 = HEAP32[616] | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$0 = _rank2ex($a, $w, 0, 127, 1, 421) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _probe($a, $symb, $0) {
 $a = $a | 0;
 $symb = $symb | 0;
 $0 = $0 | 0;
 var $$neg = 0, $10 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $28 = 0, $36 = 0, $4 = 0, $41 = 0, $42 = 0, $50 = 0, $6 = 0, $8 = 0, $i$010 = 0, $i$111 = 0, $i$2 = 0, label = 0;
 $2 = HEAP32[$a + 12 >> 2] | 0;
 $4 = $a + ($2 + 4 + ($2 & 1) << 2) | 0;
 $6 = HEAP32[$symb + 12 >> 2] | 0;
 $8 = $symb + ($6 + 4 + ($6 & 1) << 2) | 0;
 $10 = HEAP32[$symb + 8 >> 2] | 0;
 $19 = (HEAP8[$4 + ((HEAP32[$a + 8 >> 2] | 0) + -1) >> 0] | 0) + (HEAPU8[$4 >> 0] << 8) | 0;
 $20 = ($19 | 0) % ($10 | 0) | 0;
 $22 = ($19 | 0) % ($10 + -2 | 0) | 0;
 $23 = $22 + 1 | 0;
 $$neg = ~$22;
 if (($0 & 255 | 0) != 0 & (HEAP32[892] | 0) == ($symb | 0)) {
  if (!(HEAP32[$8 + ($20 << 3) + 4 >> 2] | 0)) {
   $i$2 = $20;
   return $i$2 | 0;
  } else $i$010 = $20;
  while (1) {
   $36 = $i$010 + $$neg + (($i$010 | 0) < ($23 | 0) ? $10 : 0) | 0;
   if (!(HEAP32[$8 + ($36 << 3) + 4 >> 2] | 0)) {
    $i$2 = $36;
    break;
   } else $i$010 = $36;
  }
  return $i$2 | 0;
 }
 $28 = HEAP32[$8 + ($20 << 3) >> 2] | 0;
 if (!$28) {
  $i$2 = $20;
  return $i$2 | 0;
 } else {
  $41 = $28;
  $i$111 = $20;
 }
 while (1) {
  $42 = HEAP32[$41 + 12 >> 2] | 0;
  if (!(_strcmp($4, $41 + ($42 + 4 + ($42 & 1) << 2) | 0) | 0)) {
   $i$2 = $i$111;
   label = 7;
   break;
  }
  $50 = $i$111 + $$neg + (($i$111 | 0) < ($23 | 0) ? $10 : 0) | 0;
  $41 = HEAP32[$8 + ($50 << 3) >> 2] | 0;
  if (!$41) {
   $i$2 = $50;
   label = 7;
   break;
  } else $i$111 = $50;
 }
 if ((label | 0) == 7) return $i$2 | 0;
 return 0;
}

function _from($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$$i = 0, $$0 = 0, $11 = 0, $13 = 0, $16 = 0, $19 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $30 = 0, $33 = 0, $38 = 0, $i$09$i = 0, $u$08$i = 0, $x$07$i = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (HEAP32[$a >> 2] & 32) {
  $$0 = _afrom($a, $w) | 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w + 12 >> 2] | 0)) $11 = 1; else $11 = HEAP32[$w + 16 >> 2] | 0;
 $13 = _pind(_sc($11) | 0, $a) | 0;
 if (!$13) {
  $$0 = 0;
  return $$0 | 0;
 }
 $16 = HEAP32[$13 + 12 >> 2] | 0;
 $19 = HEAP32[$13 + 8 >> 2] | 0;
 $21 = HEAP32[$w + 12 >> 2] | 0;
 $23 = $w + ($21 + 4 + ($21 & 1) << 2) | 0;
 $24 = HEAP32[$w >> 2] | 0;
 $25 = $21 + -1 | 0;
 $$$i = ($25 | 0) < 0 ? 0 : $25;
 $27 = $w + 20 | 0;
 $28 = _prod($$$i, $27) | 0;
 $30 = Math_imul(_bp($24) | 0, $28) | 0;
 $33 = _ga($24, Math_imul($28, $19) | 0, $$$i + $16 | 0, $13 + 16 | 0) | 0;
 if (!$33) {
  $$0 = 0;
  return $$0 | 0;
 }
 _memcpy($33 + 16 + ($16 << 2) | 0, $27 | 0, $$$i << 2 | 0) | 0;
 $38 = HEAP32[$33 + 12 >> 2] | 0;
 if (($19 | 0) <= 0) {
  $$0 = $33;
  return $$0 | 0;
 }
 $i$09$i = 0;
 $u$08$i = $13 + ($16 + 4 + ($16 & 1) << 2) | 0;
 $x$07$i = $33 + ($38 + 4 + ($38 & 1) << 2) + (0 - $30) | 0;
 while (1) {
  $x$07$i = $x$07$i + $30 | 0;
  _memcpy($x$07$i | 0, $23 + (Math_imul(HEAP32[$u$08$i >> 2] | 0, $30) | 0) | 0, $30 | 0) | 0;
  $i$09$i = $i$09$i + 1 | 0;
  if (($i$09$i | 0) == ($19 | 0)) {
   $$0 = $33;
   break;
  } else $u$08$i = $u$08$i + 4 | 0;
 }
 return $$0 | 0;
}

function _copy1($w) {
 $w = $w | 0;
 var $$0$i = 0, $$0$i1 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $8 = 0, $i$0$i4 = 0, $qv$0$i3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!$w) {
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 if ((HEAP32[$w + 8 >> 2] | 0) > 1) {
  $$0$i = _rank1ex($w, 0, 0, 429) | 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 $8 = _wopen($w, 1) | 0;
 if (!$8) {
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 HEAP32[$vararg_buffer >> 2] = 20;
 _sprintf(411, 8328, $vararg_buffer) | 0;
 L11 : do if (!(_ung() | 0)) $$0$i1 = 0; else {
  $15 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
  $16 = _xil(HEAP32[2084] | 0) | 0;
  if (!$16) $$0$i1 = 0; else {
   $19 = HEAP32[$16 + 12 >> 2] | 0;
   $21 = HEAP32[$16 + 16 >> 2] | 0;
   if (($21 | 0) > 0) {
    $i$0$i4 = 0;
    $qv$0$i3 = $16 + ($19 + 4 + ($19 & 1) << 2) | 0;
    while (1) {
     if (!(_unsr(_rd($8, HEAP32[$qv$0$i3 >> 2] | 0, HEAP32[$qv$0$i3 + 4 >> 2] | 0) | 0) | 0)) {
      $$0$i1 = 0;
      break L11;
     }
     _tpop($15) | 0;
     $i$0$i4 = $i$0$i4 + 1 | 0;
     if (($i$0$i4 | 0) >= ($21 | 0)) break; else $qv$0$i3 = $qv$0$i3 + 12 | 0;
    }
   }
   $$0$i1 = HEAP32[646] | 0;
  }
 } while (0);
 _fclose($8 | 0) | 0;
 HEAP8[411] = HEAP8[8344] | 0;
 HEAP8[412] = HEAP8[8345] | 0;
 HEAP8[413] = HEAP8[8346] | 0;
 $$0$i = _gc($$0$i1, $2) | 0;
 STACKTOP = sp;
 return $$0$i | 0;
}

function _xil($w) {
 $w = $w | 0;
 var $$0 = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $12 = 0, $18 = 0, $20 = 0, $24 = 0, $3 = 0, $5 = 0, $8 = 0, $i$010 = 0, $j$011 = 0, $j$1 = 0, $j$1$lcssa = 0, $k$012 = 0, $m$013 = 0, $m$1 = 0, $m$1$lcssa = 0, label = 0;
 $0 = _grade2($w, $w) | 0;
 if (!$0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $3 = HEAP32[$0 + 16 >> 2] | 0;
 $5 = HEAP32[$0 + 20 >> 2] | 0;
 if (($3 | 0) < 2) {
  $$0 = $0;
  return $$0 | 0;
 }
 $8 = HEAP32[$0 + 12 >> 2] | 0;
 $$sum1 = $8 + 4 + ($8 & 1) | 0;
 $$sum2 = $$sum1 + 1 | 0;
 $i$010 = 1;
 $j$011 = 0;
 $k$012 = $5;
 $m$013 = HEAP32[$0 + ($$sum2 << 2) >> 2] | 0;
 while (1) {
  $12 = $0 + ($k$012 + $$sum1 << 2) | 0;
  $18 = $0 + ($$sum2 + $k$012 << 2) | 0;
  if ((HEAP32[$12 >> 2] | 0) == ((HEAP32[$0 + ($j$011 + $$sum1 << 2) >> 2] | 0) + $m$013 | 0)) {
   $20 = (HEAP32[$18 >> 2] | 0) + $m$013 | 0;
   if (($20 | 0) > 32e3) label = 6; else {
    $j$1 = $j$011;
    $m$1 = $20;
   }
  } else label = 6;
  if ((label | 0) == 6) {
   label = 0;
   HEAP32[$0 + ($$sum2 + $j$011 << 2) >> 2] = $m$013;
   $24 = $j$011 + $5 | 0;
   HEAP32[$0 + ($24 + $$sum1 << 2) >> 2] = HEAP32[$12 >> 2];
   $j$1 = $24;
   $m$1 = HEAP32[$18 >> 2] | 0;
  }
  $i$010 = $i$010 + 1 | 0;
  if (($i$010 | 0) == ($3 | 0)) {
   $j$1$lcssa = $j$1;
   $m$1$lcssa = $m$1;
   break;
  } else {
   $j$011 = $j$1;
   $k$012 = $k$012 + $5 | 0;
   $m$013 = $m$1;
  }
 }
 HEAP32[$0 + ($$sum2 + $j$1$lcssa << 2) >> 2] = $m$1$lcssa;
 $$0 = _take(_sc((($j$1$lcssa | 0) / ($5 | 0) | 0) + 1 | 0) | 0, $0) | 0;
 return $$0 | 0;
}

function _MUSL_vfprintf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$ = 0, $$0 = 0, $11 = 0, $12 = 0, $2 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $ap2 = sp + 120 | 0;
 $nl_type = sp + 80 | 0;
 $nl_arg = sp;
 $internal_buf = sp + 136 | 0;
 dest = $nl_type;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
 if ((_printf_core(0, $fmt, $ap2, $nl_arg, $nl_type) | 0) < 0) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $2 = $f + 48 | 0;
 if (!(HEAP32[$2 >> 2] | 0)) {
  $6 = $f + 44 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  HEAP32[$6 >> 2] = $internal_buf;
  $8 = $f + 28 | 0;
  HEAP32[$8 >> 2] = $internal_buf;
  $9 = $f + 20 | 0;
  HEAP32[$9 >> 2] = $internal_buf;
  HEAP32[$2 >> 2] = 80;
  $11 = $f + 16 | 0;
  HEAP32[$11 >> 2] = $internal_buf + 80;
  $12 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
  if (!$7) $ret$1 = $12; else {
   ftCall_iiii(HEAP32[$f + 36 >> 2] | 0, $f | 0, 0, 0) | 0;
   $$ = (HEAP32[$9 >> 2] | 0) == 0 ? -1 : $12;
   HEAP32[$6 >> 2] = $7;
   HEAP32[$2 >> 2] = 0;
   HEAP32[$11 >> 2] = 0;
   HEAP32[$8 >> 2] = 0;
   HEAP32[$9 >> 2] = 0;
   $ret$1 = $$;
  }
 } else $ret$1 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
 $$0 = $ret$1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _outfix($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$0$i = 0, $15 = 0, $19 = 0, $2 = 0, $22 = 0, $27 = 0, $30 = 0, $33 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $46 = 0, $48 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $7 = HEAP32[$self + ($4 + 6 + ($4 & 1) << 2) >> 2] | 0;
 $8 = _lr($self) | 0;
 $9 = _rr($self) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($8 | 0) >= (HEAP32[$a + 12 >> 2] | 0)) {
  $15 = $w + 12 | 0;
  if (($9 | 0) >= (HEAP32[$15 >> 2] | 0)) {
   $19 = _i0($a) | 0;
   $22 = ($19 | 0) > -1 ? $19 : 0 - $19 | 0;
   if (!(HEAP32[$15 >> 2] | 0)) $30 = 1; else $30 = HEAP32[$w + 16 >> 2] | 0;
   $27 = ($19 | 0) < 0;
   if ($27) $35 = ($22 + -1 + $30 | 0) / ($22 | 0) | 0; else {
    $33 = $30 + (1 - $19) | 0;
    $35 = ($33 | 0) < 0 ? 0 : $33;
   }
   $36 = _sc($35) | 0;
   if (!$36) $$0$i = 0; else {
    $38 = _tally($w) | 0;
    if (!$38) $$0$i = 0; else {
     $40 = _sc($22) | 0;
     $42 = _reshape($40, HEAP32[660] | 0) | 0;
     if (!$42) $$0$i = 0; else {
      $46 = _reshape($27 ? $38 : $36, HEAP32[646] | 0) | 0;
      if (!$46) $$0$i = 0; else {
       $48 = _over($36, $38) | 0;
       $$0$i = _reshape($48, _over($42, $46) | 0) | 0;
      }
     }
    }
   }
   $$0 = _gc(_df2($$0$i, $w, _atop($7, _ds(35) | 0) | 0) | 0, $2) | 0;
   return $$0 | 0;
  }
 }
 $$0 = _rank2ex($a, $w, $self, $8, $9, 259) | 0;
 return $$0 | 0;
}

function _wncf($f, $w) {
 $f = $f | 0;
 $w = $w | 0;
 var $$0 = 0, $$sum1 = 0, $$sum3 = 0, $1 = 0, $11 = 0, $13 = 0, $15 = 0, $20 = 0, $23 = 0, $25 = 0, $31 = 0, $38 = 0, $4 = 0, $43 = 0, $7 = 0, $9 = 0, $i$010 = 0, $storemerge = 0, $x$011 = 0;
 $1 = _indexof(HEAP32[2088] | 0, $w) | 0;
 if (!$1) {
  $$0 = 0;
  return $$0 | 0;
 }
 $4 = HEAP32[$w + 8 >> 2] | 0;
 $7 = HEAP32[(HEAP32[2088] | 0) + 8 >> 2] | 0;
 $9 = HEAP32[$w + 12 >> 2] | 0;
 $$sum1 = $9 + 4 + ($9 & 1) | 0;
 $11 = HEAP32[2084] | 0;
 $13 = HEAP32[$11 + 12 >> 2] | 0;
 $15 = HEAP32[$1 + 12 >> 2] | 0;
 if (($4 | 0) <= 0) {
  $$0 = $1;
  return $$0 | 0;
 }
 $$sum3 = $13 + 6 + ($13 & 1) | 0;
 $i$010 = 0;
 $x$011 = $1 + ($15 + 4 + ($15 & 1) << 2) | 0;
 while (1) {
  $20 = HEAP32[$x$011 >> 2] | 0;
  if (($7 | 0) == ($20 | 0)) {
   $23 = HEAP32[$w + ($$sum1 + $i$010 << 2) >> 2] | 0;
   $25 = HEAP32[$23 + 8 >> 2] | 0;
   if (!$25) $38 = 0; else if (!(HEAP32[$23 >> 2] & 1026)) $38 = 0; else {
    $31 = HEAP32[$23 + 12 >> 2] | 0;
    if (($31 | 0) < 2) $38 = (_vnm($25, $23 + ($31 + 4 + ($31 & 1) << 2) | 0) | 0) << 24 >> 24 != 0; else $38 = 0;
   }
   $storemerge = 0 - ($38 & 1 ^ 1) | 0;
  } else {
   $43 = HEAP32[$11 + ($$sum3 + ($20 * 3 | 0) << 2) >> 2] | 0;
   if (!($43 & 127)) if (!($43 & 128)) $storemerge = $43 >>> 8 & 1 ^ 5; else $storemerge = 3; else $storemerge = 2;
  }
  HEAP32[$x$011 >> 2] = $storemerge;
  $i$010 = $i$010 + 1 | 0;
  if (($i$010 | 0) == ($4 | 0)) {
   $$0 = $1;
   break;
  } else $x$011 = $x$011 + 4 | 0;
 }
 return $$0 | 0;
}

function _jsignal($e) {
 $e = $e | 0;
 var $$01$i$i = 0, $$01$i1$i = 0, $11 = 0, $15 = 0, $21 = 0, $23 = 0, $26 = 0, $28 = 0, $33 = 0, $34 = 0, $35 = 0, $46 = 0, label = 0;
 if (HEAP8[2472] | 0) return;
 HEAP8[2472] = $e;
 if (!((HEAP8[448] | 0) == 0 & (HEAP8[2368] | 0) != 0)) return;
 HEAP8[8472] = 1;
 HEAP8[480] = 1;
 if (HEAP8[440] | 0) if (!((_spc() | 0) << 24 >> 24)) {
  $11 = HEAP32[2120] | 0;
  if ($11) _fputc(0, $11 | 0) | 0;
  _jputc(HEAP8[2457] | 0);
  _jputs(520);
  _jputc(10);
  HEAP8[440] = 0;
 }
 $15 = HEAP32[2120] | 0;
 if ($15) _fputc(0, $15 | 0) | 0;
 _jputc(HEAP8[2457] | 0);
 $21 = HEAP32[650] | 0;
 $23 = HEAP32[$21 + 12 >> 2] | 0;
 $26 = HEAP32[$21 + ((HEAP8[2472] | 0) + 4 + $23 + ($23 & 1) << 2) >> 2] | 0;
 $28 = HEAP32[$26 + 12 >> 2] | 0;
 _jputs($26 + ($28 + 4 + ($28 & 1) << 2) | 0);
 _jputc(10);
 $33 = HEAP32[108] | 0;
 $34 = ($33 | 0) == 0;
 if (!(HEAP8[440] | 0)) {
  if ($34) $46 = 0; else {
   $$01$i1$i = $33;
   do {
    _debdisp($$01$i1$i);
    $$01$i1$i = HEAP32[$$01$i1$i + 20 >> 2] | 0;
   } while (($$01$i1$i | 0) != 0);
   $46 = (HEAP32[108] | 0) != 0 & 1;
  }
  HEAP8[448] = $46;
  return;
 }
 if ($34) return; else $$01$i$i = $33;
 while (1) {
  $35 = $$01$i$i + 24 | 0;
  if ((HEAP32[$35 >> 2] | 0) == 4) {
   label = 19;
   break;
  }
  _debdisp($$01$i$i);
  if ((HEAP32[$35 >> 2] & -2 | 0) == 2) {
   label = 19;
   break;
  }
  $$01$i$i = HEAP32[$$01$i$i + 20 >> 2] | 0;
  if (!$$01$i$i) {
   label = 19;
   break;
  }
 }
 if ((label | 0) == 19) return;
}

function _inpl($0, $n, $s) {
 $0 = $0 | 0;
 $n = $n | 0;
 $s = $s | 0;
 var $$0 = 0, $$0110 = 0, $$017 = 0, $$sum4 = 0, $10 = 0, $13 = 0, $15 = 0, $20 = 0, $25 = 0, $3 = 0, $30 = 0, $32 = 0, $e = 0;
 $e = $0 & 255;
 HEAP32[350] = 0;
 do if (!$n) $$017 = 0; else {
  $$sum4 = $n + -1 | 0;
  $3 = HEAP8[$s + $$sum4 >> 0] | 0;
  if ($3 << 24 >> 24 == 13 | $3 << 24 >> 24 == 10) if (!$$sum4) {
   $$017 = 0;
   break;
  } else $$0110 = $$sum4; else $$0110 = $n;
  if ((HEAP8[$s + ($$0110 + -1) >> 0] | 0) == 4) _joff(0) | 0;
  if (($$0110 | 0) == 5) if (!(_memcmp($s, 2360, 5) | 0)) {
   _jsignal(8);
   $$0 = 0;
   return $$0 | 0;
  } else $$017 = 5; else $$017 = $$0110;
 } while (0);
 $10 = _str($$017, $s) | 0;
 if (!$10) {
  $$0 = 0;
  return $$0 | 0;
 }
 $13 = HEAP32[$10 + 12 >> 2] | 0;
 $15 = $10 + ($13 + 4 + ($13 & 1) << 2) | 0;
 if (!($e << 24 >> 24)) {
  $32 = HEAP32[2120] | 0;
  if (!$32) {
   $$0 = $10;
   return $$0 | 0;
  }
  _fputs($15 | 0, $32 | 0) | 0;
  _fputc(10, HEAP32[2120] | 0) | 0;
  $$0 = $10;
  return $$0 | 0;
 }
 if (HEAP8[8472] | 0) _fputs(2400, HEAP32[_stdout >> 2] | 0) | 0;
 $20 = HEAP32[2120] | 0;
 if ($20) _fputs(2400, $20 | 0) | 0;
 if (HEAP8[8472] | 0) _fputs($15 | 0, HEAP32[_stdout >> 2] | 0) | 0;
 $25 = HEAP32[2120] | 0;
 if ($25) _fputs($15 | 0, $25 | 0) | 0;
 if (HEAP8[8472] | 0) _fputc(10, HEAP32[_stdout >> 2] | 0) | 0;
 $30 = HEAP32[2120] | 0;
 if (!$30) {
  $$0 = $10;
  return $$0 | 0;
 }
 _fputc(10, $30 | 0) | 0;
 $$0 = $10;
 return $$0 | 0;
}

function _con2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $12 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $24 = 0, $25 = 0, $31 = 0, $33 = 0, $37 = 0, $hv$012 = 0, $i$013 = 0, $x$011 = 0;
 $0 = _lr($self) | 0;
 $1 = _rr($self) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($0 | 0) >= (HEAP32[$a + 12 >> 2] | 0)) if (($1 | 0) >= (HEAP32[$w + 12 >> 2] | 0)) {
  $12 = HEAP32[$self + 12 >> 2] | 0;
  $15 = HEAP32[$self + ($12 + 8 + ($12 & 1) << 2) >> 2] | 0;
  $17 = HEAP32[$15 + 12 >> 2] | 0;
  $18 = $15 + 8 | 0;
  $21 = _ga(32, HEAP32[$18 >> 2] | 0, $17, $15 + 16 | 0) | 0;
  if (!$21) {
   $$0 = 0;
   return $$0 | 0;
  }
  $24 = HEAP32[$21 + 12 >> 2] | 0;
  $25 = HEAP32[$18 >> 2] | 0;
  L10 : do if (($25 | 0) > 0) {
   $hv$012 = $15 + ($17 + 4 + ($17 & 1) << 2) | 0;
   $i$013 = 0;
   $x$011 = $21 + ($24 + 4 + ($24 & 1) << 2) | 0;
   while (1) {
    $31 = HEAP32[$hv$012 >> 2] | 0;
    $33 = HEAP32[$31 + 12 >> 2] | 0;
    $37 = ftCall_iiii(HEAP32[$31 + ($33 + 5 + ($33 & 1) << 2) >> 2] | 0, $a | 0, $w | 0, $31 | 0) | 0;
    HEAP32[$x$011 >> 2] = $37;
    if (!$37) {
     $$0 = 0;
     break;
    }
    $i$013 = $i$013 + 1 | 0;
    if (($i$013 | 0) >= ($25 | 0)) break L10; else {
     $hv$012 = $hv$012 + 4 | 0;
     $x$011 = $x$011 + 4 | 0;
    }
   }
   return $$0 | 0;
  } while (0);
  $$0 = _ope($21) | 0;
  return $$0 | 0;
 }
 $$0 = _rank2ex($a, $w, $self, $0, $1, 301) | 0;
 return $$0 | 0;
}

function _vnm($n, $s) {
 $n = $n | 0;
 $s = $s | 0;
 var $$0 = 0, $0 = 0, $11 = 0, $14 = 0, $2 = 0, $20 = 0, $22 = 0, $6 = 0, $7 = 0, $8 = 0, $i$05 = 0, label = 0;
 if (($n | 0) == 1) {
  $0 = HEAP8[$s >> 0] | 0;
  if ($0 << 24 >> 24 == -110 | $0 << 24 >> 24 == -46 | $0 << 24 >> 24 == -47) {
   $$0 = 1;
   return $$0 | 0;
  } else $2 = $0;
 } else if (!$n) {
  $$0 = 0;
  return $$0 | 0;
 } else $2 = HEAP8[$s >> 0] | 0;
 if ((HEAP8[5792 + ($2 << 24 >> 24) >> 0] | 0) != 2) {
  $$0 = 0;
  return $$0 | 0;
 }
 $6 = $n + -1 | 0;
 $7 = ($n | 0) > 1;
 L10 : do if ($7) {
  $22 = 2;
  $i$05 = 0;
  while (1) {
   if (!($22 << 24 >> 24 == 5 | $22 << 24 >> 24 == 2)) {
    $$0 = 0;
    break;
   }
   $8 = $i$05 + 1 | 0;
   if (($8 | 0) >= ($6 | 0)) break L10;
   $22 = HEAP8[5792 + (HEAP8[$s + $8 >> 0] | 0) >> 0] | 0;
   $i$05 = $8;
  }
  return $$0 | 0;
 } while (0);
 $11 = HEAP8[$s + $6 >> 0] | 0;
 if ($11 << 24 >> 24 != 95) {
  $20 = HEAP8[5792 + ($11 << 24 >> 24) >> 0] | 0;
  if ($20 << 24 >> 24 == 5 | $20 << 24 >> 24 == 2) {
   $$0 = 1;
   return $$0 | 0;
  }
  $$0 = $20 << 24 >> 24 == 7 & 1;
  return $$0 | 0;
 }
 if (!$7) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ($2 << 24 >> 24 == 95) {
  $$0 = 1;
  return $$0 | 0;
 } else $14 = 1;
 while (1) {
  if (($14 | 0) >= ($6 | 0)) {
   $$0 = 0;
   label = 16;
   break;
  }
  if ((HEAP8[$s + $14 >> 0] | 0) == 95) {
   $$0 = 1;
   label = 16;
   break;
  } else $14 = $14 + 1 | 0;
 }
 if ((label | 0) == 16) return $$0 | 0;
 return 0;
}

function _pcopy2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0$i = 0, $$0$i1 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $26 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 if ((HEAP32[$w + 8 >> 2] | 0) > 1) {
  $$0$i = _rank2ex($a, $w, 0, 0, 0, 432) | 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 if (!(HEAP32[$a >> 2] & 32)) {
  _jsignal(3);
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 $12 = _wopen($w, 1) | 0;
 if (!$12) {
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 HEAP32[$vararg_buffer >> 2] = 20;
 _sprintf(411, 8328, $vararg_buffer) | 0;
 $14 = _every($a, 475) | 0;
 $15 = HEAP32[2088] | 0;
 $16 = HEAP32[894] | 0;
 HEAP32[894] = 0;
 $18 = _nl1(_apv(4, 2, 1) | 0) | 0;
 HEAP32[894] = $16;
 $20 = _not(_eps($15, $18) | 0) | 0;
 if (!$20) $$0$i1 = 0; else {
  $23 = _repeat($20, HEAP32[2088] | 0) | 0;
  HEAP32[2088] = $23;
  if (!$23) $$0$i1 = 0; else {
   $26 = _repeat($20, HEAP32[2084] | 0) | 0;
   HEAP32[2084] = $26;
   if (!$26) $$0$i1 = 0; else $$0$i1 = _copy2f($12, $14) | 0;
  }
 }
 _fclose($12 | 0) | 0;
 HEAP8[411] = HEAP8[8344] | 0;
 HEAP8[412] = HEAP8[8345] | 0;
 HEAP8[413] = HEAP8[8346] | 0;
 $$0$i = _gc($$0$i1, $2) | 0;
 STACKTOP = sp;
 return $$0$i | 0;
}

function ___strchrnul($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $11 = 0, $15 = 0, $16 = 0, $22 = 0, $23 = 0, $29 = 0, $36 = 0, $37 = 0, $5 = 0, $8 = 0, $w$0$lcssa = 0, $w$08 = 0;
 $0 = $c & 255;
 if (!$0) {
  $$0 = $s + (_strlen($s | 0) | 0) | 0;
  return $$0 | 0;
 }
 L5 : do if (!($s & 3)) $$02$lcssa = $s; else {
  $5 = $c & 255;
  $$0211 = $s;
  while (1) {
   $8 = HEAP8[$$0211 >> 0] | 0;
   if ($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 == $5 << 24 >> 24) {
    $$0 = $$0211;
    break;
   }
   $11 = $$0211 + 1 | 0;
   if (!($11 & 3)) {
    $$02$lcssa = $11;
    break L5;
   } else $$0211 = $11;
  }
  return $$0 | 0;
 } while (0);
 $15 = Math_imul($0, 16843009) | 0;
 $16 = HEAP32[$$02$lcssa >> 2] | 0;
 L12 : do if (!(($16 & -2139062144 ^ -2139062144) & $16 + -16843009)) {
  $23 = $16;
  $w$08 = $$02$lcssa;
  while (1) {
   $22 = $23 ^ $15;
   if (($22 & -2139062144 ^ -2139062144) & $22 + -16843009) {
    $w$0$lcssa = $w$08;
    break L12;
   }
   $29 = $w$08 + 4 | 0;
   $23 = HEAP32[$29 >> 2] | 0;
   if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009) {
    $w$0$lcssa = $29;
    break;
   } else $w$08 = $29;
  }
 } else $w$0$lcssa = $$02$lcssa; while (0);
 $36 = $c & 255;
 $$1 = $w$0$lcssa;
 while (1) {
  $37 = HEAP8[$$1 >> 0] | 0;
  if ($37 << 24 >> 24 == 0 ? 1 : $37 << 24 >> 24 == $36 << 24 >> 24) {
   $$0 = $$1;
   break;
  } else $$1 = $$1 + 1 | 0;
 }
 return $$0 | 0;
}

function _det($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$0$i = 0, $$sum1 = 0, $1 = 0, $13 = 0, $16 = 0, $21 = 0, $22 = 0, $26 = 0, $28 = 0, $29 = 0, $32 = 0, $35 = 0, $4 = 0, $40 = 0, $41 = 0, $6 = 0, $9 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $4 = HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0;
 $6 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 if (!$4) $26 = 0; else {
  $9 = HEAP32[$4 + 12 >> 2] | 0;
  $26 = HEAP32[$4 + ($9 + 4 + ($9 & 1) << 2) >> 2] | 0;
 }
 $13 = _mr($self) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $16 = HEAP32[$w + 12 >> 2] | 0;
 if (($13 | 0) < ($16 | 0)) {
  $$0 = _rank1ex($w, $self, $13, 276) | 0;
  return $$0 | 0;
 }
 do if (($16 | 0) >= 2) {
  $21 = HEAP32[$w + 20 >> 2] | 0;
  if (($21 | 0) == 1) break; else if (!$21) {
   $22 = HEAP32[616] | 0;
   $$0 = _df1($22, _slash($6) | 0) | 0;
   return $$0 | 0;
  }
  $28 = _rank1ex($w, 0, 1, 137) | 0;
  $29 = _apv(3, -1, 1) | 0;
  if (!$29) {
   $$0$i = 0;
   $40 = _det($$0$i, $self) | 0;
   $41 = _dotprod($28, $40, $self) | 0;
   return $41 | 0;
  }
  $32 = HEAP32[$29 + 12 >> 2] | 0;
  HEAP32[$29 + ($32 + 4 + ($32 & 1) << 2) >> 2] = 0;
  $35 = HEAP32[646] | 0;
  $$0$i = _drop($29, _df2($35, $w, _bsdot(_ds(91) | 0) | 0) | 0) | 0;
  $40 = _det($$0$i, $self) | 0;
  $41 = _dotprod($28, $40, $self) | 0;
  return $41 | 0;
 } while (0);
 $$0 = ftCall_iii($26 | 0, _ravel($w) | 0, $4 | 0) | 0;
 return $$0 | 0;
}

function _ra($w) {
 $w = $w | 0;
 var $$0 = 0, $$sum1$i = 0, $2 = 0, $27 = 0, $4 = 0, $6 = 0, $7 = 0, $i$07$i = 0, $i3$010$i = 0, $n$0$i = 0, $v$08$i = 0, $v2$09$i = 0, label = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 8 >> 2] | 0;
 $4 = HEAP32[$w + 12 >> 2] | 0;
 $$sum1$i = $4 + 4 + ($4 & 1) | 0;
 $6 = $w + ($$sum1$i << 2) | 0;
 $7 = HEAP32[$w >> 2] | 0;
 if (($7 | 0) == 32768) {
  if (($2 | 0) > 0) {
   $i3$010$i = 0;
   $v2$09$i = $6;
   while (1) {
    _ra(HEAP32[$v2$09$i >> 2] | 0) | 0;
    _ra(HEAP32[$v2$09$i + 4 >> 2] | 0) | 0;
    $i3$010$i = $i3$010$i + 1 | 0;
    if (($i3$010$i | 0) == ($2 | 0)) break; else $v2$09$i = $v2$09$i + 8 | 0;
   }
  }
 } else if (($7 | 0) == 512 | ($7 | 0) == 256 | ($7 | 0) == 128) {
  _ra(HEAP32[$w + ($$sum1$i + 2 << 2) >> 2] | 0) | 0;
  _ra(HEAP32[$w + ($$sum1$i + 3 << 2) >> 2] | 0) | 0;
  _ra(HEAP32[$w + ($$sum1$i + 4 << 2) >> 2] | 0) | 0;
  _ra(HEAP32[$w + ($$sum1$i + 5 << 2) >> 2] | 0) | 0;
 } else if (($7 | 0) == 64) {
  $n$0$i = $2 << 1;
  label = 4;
 } else if (($7 | 0) == 32) {
  $n$0$i = $2;
  label = 4;
 }
 if ((label | 0) == 4) if (($n$0$i | 0) > 0) {
  $i$07$i = 0;
  $v$08$i = $6;
  while (1) {
   _ra(HEAP32[$v$08$i >> 2] | 0) | 0;
   $i$07$i = $i$07$i + 1 | 0;
   if (($i$07$i | 0) == ($n$0$i | 0)) break; else $v$08$i = $v$08$i + 4 | 0;
  }
 }
 $27 = $w + 4 | 0;
 HEAP32[$27 >> 2] = (HEAP32[$27 >> 2] | 0) + 1;
 $$0 = $w;
 return $$0 | 0;
}

function _iota($w) {
 $w = $w | 0;
 var $$0 = 0, $$sum1 = 0, $10 = 0, $12 = 0, $14 = 0, $20 = 0, $21 = 0, $26 = 0, $29 = 0, $35 = 0, $5 = 0, $8 = 0, $i$04 = 0, $z$03 = 0, $z$1 = 0, label = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$w + 12 >> 2] | 0) > 1) {
  $$0 = _rank1ex($w, 0, 1, 164) | 0;
  return $$0 | 0;
 }
 $5 = _vi($w) | 0;
 if (!$5) {
  $$0 = 0;
  return $$0 | 0;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0;
 $10 = HEAP32[$5 + 12 >> 2] | 0;
 $$sum1 = $10 + 4 + ($10 & 1) | 0;
 $12 = $5 + ($$sum1 << 2) | 0;
 if (($8 | 0) == 1) {
  $14 = HEAP32[$12 >> 2] | 0;
  if (($14 | 0) < 0) {
   $$0 = _apv(0 - $14 | 0, ~$14, -1) | 0;
   return $$0 | 0;
  } else {
   $$0 = _apv($14, 0, 1) | 0;
   return $$0 | 0;
  }
 }
 $20 = _prod($8, $12) | 0;
 $21 = _mag($5) | 0;
 $26 = _reshape($21, _apv(($20 | 0) > -1 ? $20 : 0 - $20 | 0, 0, 1) | 0) | 0;
 if (!$26) {
  $$0 = 0;
  return $$0 | 0;
 }
 $29 = ($20 | 0) != 0 ? $8 : 0;
 if (($29 | 0) > 0) {
  $i$04 = 0;
  $z$03 = $26;
 } else {
  $$0 = $26;
  return $$0 | 0;
 }
 while (1) {
  if ((HEAP32[$5 + ($i$04 + $$sum1 << 2) >> 2] | 0) < 0) {
   $35 = _rank1ex($z$03, 0, $8 - $i$04 | 0, 109) | 0;
   if (!$35) {
    $$0 = 0;
    label = 14;
    break;
   } else $z$1 = $35;
  } else $z$1 = $z$03;
  $i$04 = $i$04 + 1 | 0;
  if (($i$04 | 0) >= ($29 | 0)) {
   $$0 = $z$1;
   label = 14;
   break;
  } else $z$03 = $z$1;
 }
 if ((label | 0) == 14) return $$0 | 0;
 return 0;
}

function _fork1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$sum1 = 0, $1 = 0, $15 = 0, $16 = 0, $22 = 0, $24 = 0, $27 = 0, $28 = 0, $35 = 0, $4 = 0, $42 = 0, $44 = 0, $45 = 0, $47 = 0, $6 = 0, $9 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $4 = HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0;
 $6 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 if (!$4) $44 = 0; else {
  $9 = HEAP32[$4 + 12 >> 2] | 0;
  $44 = HEAP32[$4 + ($9 + 4 + ($9 & 1) << 2) >> 2] | 0;
 }
 if (!$6) {
  $42 = 0;
  $47 = 0;
 } else {
  $15 = HEAP32[$6 + 12 >> 2] | 0;
  $16 = $15 & 1;
  $42 = HEAP32[$6 + ($15 + 4 + $16 << 2) >> 2] | 0;
  $47 = HEAP32[$6 + ($15 + 5 + $16 << 2) >> 2] | 0;
 }
 $22 = HEAP32[$self + ($$sum1 + 4 << 2) >> 2] | 0;
 $24 = HEAP32[$22 + 12 >> 2] | 0;
 $27 = HEAP32[$22 + ($24 + 4 + ($24 & 1) << 2) >> 2] | 0;
 $28 = _mr($self) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($28 | 0) < (HEAP32[$w + 12 >> 2] | 0)) {
  $$0 = _rank1ex($w, $self, $28, 323) | 0;
  return $$0 | 0;
 }
 $35 = HEAP32[$4 + 12 >> 2] | 0;
 if ((HEAP8[$4 + ($35 + 4 + ($35 & 1) << 2) + 31 >> 0] | 0) == -87) {
  $$0 = ftCall_iii($42 | 0, ftCall_iii($27 | 0, $w | 0, $22 | 0) | 0, $6 | 0) | 0;
  return $$0 | 0;
 } else {
  $45 = ftCall_iii($44 | 0, $w | 0, $4 | 0) | 0;
  $$0 = ftCall_iiii($47 | 0, $45 | 0, ftCall_iii($27 | 0, $w | 0, $22 | 0) | 0, $6 | 0) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _numd($n, $s, $v) {
 $n = $n | 0;
 $s = $s | 0;
 $v = $v | 0;
 var $$0 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $23 = 0.0, $7 = 0, $t = 0, $x$0 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $t = sp;
 if (!$n) {
  _jsignal(5);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 L5 : do if (($n | 0) < 3 & (HEAP8[$s >> 0] | 0) == 45) {
  do if (($n | 0) == 1) $14 = +HEAPF64[317]; else {
   $7 = HEAP8[$s + 1 >> 0] | 0;
   if ($7 << 24 >> 24 == 45) {
    $14 = -+HEAPF64[317];
    break;
   } else if ($7 << 24 >> 24 == 46) {
    $14 = +HEAPF64[321];
    break;
   } else break L5;
  } while (0);
  if ($14 != 0.0) {
   HEAPF64[$v >> 3] = $14;
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 $15 = +_strtod($s, $t);
 $16 = HEAP32[$t >> 2] | 0;
 $17 = $s + $n | 0;
 do if ($16 >>> 0 < ($s + ($n + -1) | 0) >>> 0) if ((HEAP8[$16 >> 0] | 0) == 114) {
  $23 = +_strtod($16 + 1 | 0, $t);
  if ($23 != 0.0) {
   $x$0 = $15 / $23;
   break;
  }
  if ($15 > 0.0) {
   $x$0 = +HEAPF64[317];
   break;
  } else {
   $x$0 = $15 < 0.0 ? -+HEAPF64[317] : 0.0;
   break;
  }
 } else $x$0 = $15; else $x$0 = $15; while (0);
 if ((HEAP32[$t >> 2] | 0) >>> 0 < $17 >>> 0) {
  _jsignal(5);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  HEAPF64[$v >> 3] = $x$0;
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _stname($w, $pn, $pg) {
 $w = $w | 0;
 $pn = $pn | 0;
 $pg = $pg | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $14 = 0, $17 = 0, $22 = 0, $25 = 0, $26 = 0, $29 = 0, $3 = 0, $32 = 0, $5 = 0, $q$0$lcssa = 0, $q$07 = 0;
 $0 = $w + 12 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $3 = $w + ($1 + 4 + ($1 & 1) << 2) | 0;
 $5 = HEAP32[$w + 8 >> 2] | 0;
 if ((HEAP8[$3 + ($5 + -1) >> 0] | 0) != 95) {
  $$0 = 0;
  return $$0 | 0;
 }
 $10 = $3 + ($5 + -2) | 0;
 HEAP32[$pn >> 2] = 0;
 HEAP32[$pg >> 2] = 0;
 L4 : do if ($3 >>> 0 < $10 >>> 0) {
  $q$07 = $10;
  while (1) {
   if ((HEAP8[$q$07 >> 0] | 0) == 95) {
    $q$0$lcssa = $q$07;
    break L4;
   }
   $14 = $q$07 + -1 | 0;
   if ($3 >>> 0 < $14 >>> 0) $q$07 = $14; else {
    $q$0$lcssa = $14;
    break;
   }
  }
 } else $q$0$lcssa = $10; while (0);
 if (($3 | 0) == ($q$0$lcssa | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $17 = $q$0$lcssa;
 do if (($10 | 0) != ($q$0$lcssa | 0)) {
  $22 = _str($10 - $17 | 0, $q$0$lcssa + 1 | 0) | 0;
  if ($22) {
   HEAP32[$pg >> 2] = $22;
   break;
  }
  HEAP32[$pn >> 2] = 0;
  $$0 = 1;
  return $$0 | 0;
 } while (0);
 $25 = $17 - $3 | 0;
 $26 = _ga(1024, $25, 1, 0) | 0;
 if (!$26) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$pn >> 2] = $26;
 $29 = HEAP32[$26 + 12 >> 2] | 0;
 $32 = HEAP32[$0 >> 2] | 0;
 _memcpy($26 + ($29 + 4 + ($29 & 1) << 2) | 0, $w + ($32 + 4 + ($32 & 1) << 2) | 0, $25 | 0) | 0;
 $$0 = 1;
 return $$0 | 0;
}

function _deal($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$sum2 = 0, $$sum3 = 0, $1 = 0.0, $11 = 0, $12 = 0, $16 = 0, $19 = 0, $23 = 0.0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $i$07 = 0, $rl$0$lcssa = 0.0, $rl$06 = 0.0;
 $1 = +(HEAP32[606] | 0);
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$a + 12 >> 2] | 0) <= 0) if ((HEAP32[$w + 12 >> 2] | 0) <= 0) {
  $11 = _i0($a) | 0;
  $12 = _i0($w) | 0;
  if (($11 | 0) < 0 | ($11 | 0) > ($12 | 0)) {
   _jsignal(3);
   $$0 = 0;
   return $$0 | 0;
  }
  $16 = _apv($12, $12 + -1 | 0, -1) | 0;
  if (!$16) {
   $$0 = 0;
   return $$0 | 0;
  }
  $19 = HEAP32[$16 + 12 >> 2] | 0;
  $$sum2 = $19 + 4 + ($19 & 1) | 0;
  if (($11 | 0) > 0) {
   $i$07 = 0;
   $rl$06 = $1;
   while (1) {
    $23 = +_fmod($rl$06 * 16807.0, 2147483647.0);
    $29 = ~~+Math_floor(+(+($12 - $i$07 | 0) * $23 * 4.656612873077393e-10));
    $$sum3 = $i$07 + $$sum2 | 0;
    $30 = $16 + ($$sum3 << 2) | 0;
    $31 = HEAP32[$30 >> 2] | 0;
    $32 = $16 + ($$sum3 + $29 << 2) | 0;
    HEAP32[$30 >> 2] = HEAP32[$32 >> 2];
    HEAP32[$32 >> 2] = $31;
    $i$07 = $i$07 + 1 | 0;
    if (($i$07 | 0) == ($11 | 0)) {
     $rl$0$lcssa = $23;
     break;
    } else $rl$06 = $23;
   }
  } else $rl$0$lcssa = $1;
  HEAP32[606] = ~~$rl$0$lcssa;
  $$0 = _take($a, $16) | 0;
  return $$0 | 0;
 }
 $$0 = _rank2ex($a, $w, 0, 0, 0, 59) | 0;
 return $$0 | 0;
}

function _jfread($w) {
 $w = $w | 0;
 var $$0 = 0, $$0$i4 = 0, $11 = 0, $17 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $26 = 0, $28 = 0, $32 = 0, $p$02$i = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 12 >> 2] | 0;
 if (($2 | 0) > 0) {
  $$0 = _rank1ex($w, 0, 0, 416) | 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 32)) if ((_i0($w) | 0) == 1) {
  $$0 = _jgets(8424) | 0;
  return $$0 | 0;
 } else {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $11 = _vs(HEAP32[$w + ($2 + 4 + ($2 & 1) << 2) >> 2] | 0) | 0;
 if (!$11) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$11 + 8 >> 2] | 0)) {
  _jsignal(9);
  $$0 = 0;
  return $$0 | 0;
 }
 $17 = HEAP32[$11 + 12 >> 2] | 0;
 $20 = _fopen($11 + ($17 + 4 + ($17 & 1) << 2) | 0, 8440) | 0;
 if (!$20) {
  _jsignal(7);
  $$0 = 0;
  return $$0 | 0;
 }
 _fseek($20 | 0, 0, 2) | 0;
 $22 = _ftell($20 | 0) | 0;
 _rewind($20 | 0);
 $23 = _ga(2, $22, 1, 0) | 0;
 if (!$23) $$0$i4 = 0; else {
  $26 = HEAP32[$23 + 12 >> 2] | 0;
  $28 = $23 + ($26 + 4 + ($26 & 1) << 2) | 0;
  if (($22 | 0) > 0) {
   $p$02$i = 0;
   do {
    $32 = _fread($28 + $p$02$i | 0, 1, $22 - $p$02$i | 0, $20 | 0) | 0;
    $p$02$i = $32 + $p$02$i | 0;
   } while (($32 | 0) != 0 & ($p$02$i | 0) < ($22 | 0));
  }
  if (!(_ferror($20 | 0) | 0)) $$0$i4 = $23; else {
   _jsignal(7);
   $$0$i4 = 0;
  }
 }
 _fclose($20 | 0) | 0;
 $$0 = $$0$i4;
 return $$0 | 0;
}

function ___shgetc($f) {
 $f = $f | 0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $12 = 0, $14 = 0, $15 = 0, $21 = 0, $26 = 0, $27 = 0, $31 = 0, $36 = 0, $41 = 0, $6 = 0, $9 = 0, label = 0;
 $0 = $f + 104 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) label = 3; else if ((HEAP32[$f + 108 >> 2] | 0) < ($1 | 0)) label = 3;
 if ((label | 0) == 3) {
  $6 = ___uflow($f) | 0;
  if (($6 | 0) >= 0) {
   $9 = HEAP32[$0 >> 2] | 0;
   $$phi$trans$insert = $f + 8 | 0;
   if (!$9) {
    $$pre = HEAP32[$$phi$trans$insert >> 2] | 0;
    $26 = $$pre;
    $41 = $$pre;
    label = 9;
   } else {
    $12 = HEAP32[$$phi$trans$insert >> 2] | 0;
    $14 = HEAP32[$f + 4 >> 2] | 0;
    $15 = $12;
    $21 = $9 - (HEAP32[$f + 108 >> 2] | 0) + -1 | 0;
    if (($15 - $14 | 0) > ($21 | 0)) {
     HEAP32[$f + 100 >> 2] = $14 + $21;
     $27 = $12;
    } else {
     $26 = $15;
     $41 = $12;
     label = 9;
    }
   }
   if ((label | 0) == 9) {
    HEAP32[$f + 100 >> 2] = $26;
    $27 = $41;
   }
   $$pre4 = HEAP32[$f + 4 >> 2] | 0;
   if ($27) {
    $31 = $f + 108 | 0;
    HEAP32[$31 >> 2] = $27 + 1 - $$pre4 + (HEAP32[$31 >> 2] | 0);
   }
   $36 = $$pre4 + -1 | 0;
   if ((HEAPU8[$36 >> 0] | 0 | 0) == ($6 | 0)) {
    $$0 = $6;
    return $$0 | 0;
   }
   HEAP8[$36 >> 0] = $6;
   $$0 = $6;
   return $$0 | 0;
  }
 }
 HEAP32[$f + 100 >> 2] = 0;
 $$0 = -1;
 return $$0 | 0;
}

function ___fwritex($s, $l, $f) {
 $s = $s | 0;
 $l = $l | 0;
 $f = $f | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $19 = 0, $29 = 0, $5 = 0, $6 = 0, $7 = 0, $i$0 = 0, $i$0$lcssa10 = 0, $i$1 = 0;
 $0 = $f + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 do if (!$1) if (!(___towrite($f) | 0)) {
  $7 = HEAP32[$0 >> 2] | 0;
  break;
 } else {
  $$0 = 0;
  return $$0 | 0;
 } else $7 = $1; while (0);
 $5 = $f + 20 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (($7 - $6 | 0) >>> 0 < $l >>> 0) {
  $$0 = ftCall_iiii(HEAP32[$f + 36 >> 2] | 0, $f | 0, $s | 0, $l | 0) | 0;
  return $$0 | 0;
 }
 L11 : do if ((HEAP8[$f + 75 >> 0] | 0) > -1) {
  $i$0 = $l;
  while (1) {
   if (!$i$0) {
    $$01 = $l;
    $$02 = $s;
    $29 = $6;
    $i$1 = 0;
    break L11;
   }
   $19 = $i$0 + -1 | 0;
   if ((HEAP8[$s + $19 >> 0] | 0) == 10) {
    $i$0$lcssa10 = $i$0;
    break;
   } else $i$0 = $19;
  }
  if ((ftCall_iiii(HEAP32[$f + 36 >> 2] | 0, $f | 0, $s | 0, $i$0$lcssa10 | 0) | 0) >>> 0 < $i$0$lcssa10 >>> 0) {
   $$0 = $i$0$lcssa10;
   return $$0 | 0;
  } else {
   $$01 = $l - $i$0$lcssa10 | 0;
   $$02 = $s + $i$0$lcssa10 | 0;
   $29 = HEAP32[$5 >> 2] | 0;
   $i$1 = $i$0$lcssa10;
   break;
  }
 } else {
  $$01 = $l;
  $$02 = $s;
  $29 = $6;
  $i$1 = 0;
 } while (0);
 _memcpy($29 | 0, $$02 | 0, $$01 | 0) | 0;
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$01;
 $$0 = $i$1 + $$01 | 0;
 return $$0 | 0;
}

function _bool($w) {
 $w = $w | 0;
 var $$0 = 0, $10 = 0, $19 = 0, $24 = 0, $28 = 0, $30 = 0, $5 = 0, $7 = 0, $8 = 0, $i$06 = 0, $v$05 = 0, dest = 0, src = 0, stop = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (HEAP32[$w >> 2] & 128) {
  $$0 = _fdef(-62, 128, 235, 0, $w, 0, 0, 0, 0, 0, 0) | 0;
  return $$0 | 0;
 }
 $5 = _vi($w) | 0;
 if (!$5) {
  $$0 = 0;
  return $$0 | 0;
 }
 $7 = $5 + 12 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $10 = HEAP32[$5 + 8 >> 2] | 0;
 L11 : do if (($10 | 0) > 0) {
  $i$06 = 0;
  $v$05 = $5 + ($8 + 4 + ($8 & 1) << 2) | 0;
  while (1) {
   if (((HEAP32[$v$05 >> 2] | 0) + 16 | 0) >>> 0 >= 32) break;
   $i$06 = $i$06 + 1 | 0;
   if (($i$06 | 0) >= ($10 | 0)) break L11; else $v$05 = $v$05 + 4 | 0;
  }
  _jsignal(6);
  $$0 = 0;
  return $$0 | 0;
 } while (0);
 $19 = _ga(1, 64, 2, 0) | 0;
 if (!$19) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$19 + 16 >> 2] = 16;
 HEAP32[$19 + 20 >> 2] = 4;
 $24 = HEAP32[$19 + 12 >> 2] | 0;
 dest = $19 + ($24 + 4 + ($24 & 1) << 2) | 0;
 src = 8;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $28 = _apv(HEAP32[$7 >> 2] | 0, 0, 1) | 0;
 $30 = _cant2($28, _from($5, $19) | 0) | 0;
 if (!$30) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = _fdef(-62, 128, 236, 237, $5, 0, $30, 0, 127, 0, 0) | 0;
 return $$0 | 0;
}

function _exec2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $15 = 0, $28 = 0, $3 = 0, $6 = 0, label = 0;
 $0 = HEAP8[2368] | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $3 = $a + 12 | 0;
 if ((HEAP32[$3 >> 2] | 0) <= 1) {
  $6 = $w + 12 | 0;
  if ((HEAP32[$6 >> 2] | 0) <= 1) {
   HEAP8[2368] = 0;
   do if ((HEAP32[$6 >> 2] | 0) > 1) {
    $$0$i = _rank1ex($w, 0, 1, 144) | 0;
    label = 12;
   } else {
    $15 = _parse(_tokens(_vs($w) | 0) | 0) | 0;
    HEAP8[2512] = 0;
    if (!$15) {
     HEAP8[2368] = $0;
     HEAP8[2472] = 0;
     break;
    }
    if (!(HEAP32[$15 >> 2] & 16384)) {
     $$0$i = _vn($15) | 0;
     label = 12;
     break;
    } else {
     $$0$i = HEAP32[616] | 0;
     label = 12;
     break;
    }
   } while (0);
   if ((label | 0) == 12) {
    HEAP8[2368] = $0;
    HEAP8[2472] = 0;
    if ($$0$i) {
     $$0 = $$0$i;
     return $$0 | 0;
    }
   }
   if ((HEAP32[$3 >> 2] | 0) > 1) {
    $$0 = _rank1ex($a, 0, 1, 144) | 0;
    return $$0 | 0;
   }
   $28 = _parse(_tokens(_vs($a) | 0) | 0) | 0;
   HEAP8[2512] = 0;
   if (!$28) {
    $$0 = 0;
    return $$0 | 0;
   }
   if (!(HEAP32[$28 >> 2] & 16384)) {
    $$0 = _vn($28) | 0;
    return $$0 | 0;
   } else {
    $$0 = HEAP32[616] | 0;
    return $$0 | 0;
   }
  }
 }
 $$0 = _rank2ex($a, $w, 0, 1, 1, 145) | 0;
 return $$0 | 0;
}

function _zlog($agg$result, $v) {
 $agg$result = $agg$result | 0;
 $v = $v | 0;
 var $0 = 0.0, $10 = 0, $12 = 0.0, $17 = 0.0, $19 = 0.0, $2 = 0.0, $21 = 0.0, $26 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $32 = 0.0, $37 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $6 = 0.0, $9 = 0.0, $p$0$i = 0.0, $p$0$i2 = 0.0;
 $0 = +HEAPF64[$v >> 3];
 $2 = +HEAPF64[$v + 8 >> 3];
 $3 = $2 != 0.0;
 if ($3) {
  $6 = $0 >= 0.0 ? $0 : -$0;
  $9 = $2 >= 0.0 ? $2 : -$2;
  $10 = $6 < $9;
  $p$0$i = $10 ? $9 : $6;
  if ($p$0$i != 0.0) {
   $12 = ($10 ? $6 : $9) / $p$0$i;
   $17 = $p$0$i * +Math_sqrt(+($12 * $12 + 1.0));
  } else $17 = 0.0;
  $41 = +Math_log(+$17);
 } else {
  $19 = +HEAPF64[317];
  if ($0 == $19) $41 = $19; else {
   $21 = -$19;
   if ($0 == $21) $41 = $19; else if ($0 != 0.0) {
    $26 = $0 >= 0.0 ? $0 : -$0;
    $29 = $2 >= 0.0 ? $2 : -$2;
    $30 = $26 < $29;
    $p$0$i2 = $30 ? $29 : $26;
    if ($p$0$i2 != 0.0) {
     $32 = ($30 ? $26 : $29) / $p$0$i2;
     $37 = $p$0$i2 * +Math_sqrt(+($32 * $32 + 1.0));
    } else $37 = 0.0;
    $41 = +Math_log(+$37);
   } else $41 = $21;
  }
 }
 if (!($0 != 0.0 | $3)) {
  $43 = 0.0;
  HEAPF64[$agg$result >> 3] = $41;
  $42 = $agg$result + 8 | 0;
  HEAPF64[$42 >> 3] = $43;
  return;
 }
 $43 = +Math_atan2(+$2, +$0);
 HEAPF64[$agg$result >> 3] = $41;
 $42 = $agg$result + 8 | 0;
 HEAPF64[$42 >> 3] = $43;
 return;
}

function _rinv($w) {
 $w = $w | 0;
 var $$0 = 0, $15 = 0, $19 = 0, $2 = 0, $22 = 0, $26 = 0, $30 = 0, $34 = 0, $36 = 0, $5 = 0, $6 = 0, $9 = 0, label = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $5 = HEAP32[$w + 12 >> 2] | 0;
 $6 = $w + 16 | 0;
 if (($5 | 0) < 2) {
  if ($5) {
   $15 = 1;
   $19 = 1;
   label = 6;
  }
 } else {
  $9 = HEAP32[$w + 20 >> 2] | 0;
  if (($5 | 0) < 3) {
   $15 = $9;
   $19 = ($9 + 1 | 0) / 2 | 0;
   label = 6;
  } else {
   _jsignal(14);
   $$0 = 0;
   return $$0 | 0;
  }
 }
 if ((label | 0) == 6) {
  if (($15 | 0) != (HEAP32[$6 >> 2] | 0)) {
   _jsignal(9);
   $$0 = 0;
   return $$0 | 0;
  }
  if (($15 | 0) >= 2) {
   $22 = _rinv(_take(_v2($19, $19) | 0, $w) | 0) | 0;
   if (!$22) {
    $$0 = 0;
    return $$0 | 0;
   }
   $26 = _rinv(_drop(_v2($19, $19) | 0, $w) | 0) | 0;
   if (!$26) {
    $$0 = 0;
    return $$0 | 0;
   }
   $30 = _take(_v2($19, $19 - $15 | 0) | 0, $w) | 0;
   if (!$30) {
    $$0 = 0;
    return $$0 | 0;
   }
   $34 = _negate(_pdt($22, _pdt($30, $26) | 0) | 0) | 0;
   if (!$34) {
    $$0 = 0;
    return $$0 | 0;
   }
   $36 = _overr($22, $34) | 0;
   $$0 = _gc(_over($36, _take(_v2($15 - $19 | 0, 0 - $15 | 0) | 0, $26) | 0) | 0, $2) | 0;
   return $$0 | 0;
  }
 }
 $$0 = _recip($w) | 0;
 return $$0 | 0;
}

function _pfill($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $10 = 0, $13 = 0, $15 = 0, $19 = 0, $2 = 0, $30 = 0, $35 = 0, $5 = 0, $7 = 0, $8 = 0, $i$03$i = 0, $v$02$i = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $5 = _vi($a) | 0;
 if (!$5) {
  $$0 = 0;
  return $$0 | 0;
 }
 $7 = _i0($5) | 0;
 $8 = 0 - $7 | 0;
 $10 = _ca(_vi($w) | 0) | 0;
 if (!$10) {
  $$0 = 0;
  return $$0 | 0;
 }
 $13 = HEAP32[$10 + 12 >> 2] | 0;
 $15 = HEAP32[$10 + 8 >> 2] | 0;
 L10 : do if (($15 | 0) > 0) {
  $i$03$i = 0;
  $v$02$i = $10 + ($13 + 4 + ($13 & 1) << 2) | 0;
  while (1) {
   $19 = HEAP32[$v$02$i >> 2] | 0;
   if (!(($19 | 0) >= ($8 | 0) & ($19 | 0) < ($7 | 0))) break;
   HEAP32[$v$02$i >> 2] = (($19 | 0) < 0 ? $7 : 0) + $19;
   $i$03$i = $i$03$i + 1 | 0;
   if (($i$03$i | 0) >= ($15 | 0)) break L10; else $v$02$i = $v$02$i + 4 | 0;
  }
  _jsignal(6);
  $$0 = 0;
  return $$0 | 0;
 } while (0);
 $30 = _over(_less(_iota($5) | 0, $10) | 0, $10) | 0;
 if (!$30) {
  $$0 = 0;
  return $$0 | 0;
 }
 $35 = HEAP32[$5 + 12 >> 2] | 0;
 if ((HEAP32[$30 + 8 >> 2] | 0) == (HEAP32[$5 + ($35 + 4 + ($35 & 1) << 2) >> 2] | 0)) {
  $$0 = _gc($30, $2) | 0;
  return $$0 | 0;
 } else {
  _jsignal(6);
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function _con1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $19 = 0, $20 = 0, $26 = 0, $28 = 0, $32 = 0, $7 = 0, $hv$010 = 0, $i$011 = 0, $x$09 = 0;
 $0 = _mr($self) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($0 | 0) < (HEAP32[$w + 12 >> 2] | 0)) {
  $$0 = _rank1ex($w, $self, $0, 300) | 0;
  return $$0 | 0;
 }
 $7 = HEAP32[$self + 12 >> 2] | 0;
 $10 = HEAP32[$self + ($7 + 8 + ($7 & 1) << 2) >> 2] | 0;
 $12 = HEAP32[$10 + 12 >> 2] | 0;
 $13 = $10 + 8 | 0;
 $16 = _ga(32, HEAP32[$13 >> 2] | 0, $12, $10 + 16 | 0) | 0;
 if (!$16) {
  $$0 = 0;
  return $$0 | 0;
 }
 $19 = HEAP32[$16 + 12 >> 2] | 0;
 $20 = HEAP32[$13 >> 2] | 0;
 L11 : do if (($20 | 0) > 0) {
  $hv$010 = $10 + ($12 + 4 + ($12 & 1) << 2) | 0;
  $i$011 = 0;
  $x$09 = $16 + ($19 + 4 + ($19 & 1) << 2) | 0;
  while (1) {
   $26 = HEAP32[$hv$010 >> 2] | 0;
   $28 = HEAP32[$26 + 12 >> 2] | 0;
   $32 = ftCall_iii(HEAP32[$26 + ($28 + 4 + ($28 & 1) << 2) >> 2] | 0, $w | 0, $26 | 0) | 0;
   HEAP32[$x$09 >> 2] = $32;
   if (!$32) {
    $$0 = 0;
    break;
   }
   $i$011 = $i$011 + 1 | 0;
   if (($i$011 | 0) >= ($20 | 0)) break L11; else {
    $hv$010 = $hv$010 + 4 | 0;
    $x$09 = $x$09 + 4 | 0;
   }
  }
  return $$0 | 0;
 } while (0);
 $$0 = _ope($16) | 0;
 return $$0 | 0;
}

function _rank2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$sum2 = 0, $$sum6 = 0, $1 = 0, $12 = 0, $14 = 0, $19 = 0, $21 = 0, $23 = 0, $28 = 0, $30 = 0, $32 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $7 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum2 = $1 + 4 + ($1 & 1) | 0;
 $4 = HEAP32[$self + ($$sum2 + 2 << 2) >> 2] | 0;
 if (!$4) $40 = 0; else {
  $7 = HEAP32[$4 + 12 >> 2] | 0;
  $40 = HEAP32[$4 + ($7 + 5 + ($7 & 1) << 2) >> 2] | 0;
 }
 $12 = HEAP32[$self + ($$sum2 + 4 << 2) >> 2] | 0;
 $14 = HEAP32[$12 + 12 >> 2] | 0;
 $$sum6 = $14 + 4 + ($14 & 1) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $19 = HEAP32[$a + 12 >> 2] | 0;
 $21 = HEAP32[$12 + ($$sum6 + 1 << 2) >> 2] | 0;
 if (($21 | 0) < 0) {
  $23 = $21 + $19 | 0;
  $36 = ($23 | 0) < 0 ? 0 : $23;
 } else $36 = ($21 | 0) < ($19 | 0) ? $21 : $19;
 $28 = HEAP32[$w + 12 >> 2] | 0;
 $30 = HEAP32[$12 + ($$sum6 + 2 << 2) >> 2] | 0;
 if (($30 | 0) < 0) {
  $32 = $30 + $28 | 0;
  $38 = ($32 | 0) < 0 ? 0 : $32;
 } else $38 = ($30 | 0) < ($28 | 0) ? $30 : $28;
 if (($36 | 0) < ($19 | 0) | ($38 | 0) < ($28 | 0)) {
  $$0 = _rank2ex($a, $w, $4, $36, $38, $40) | 0;
  return $$0 | 0;
 } else {
  $$0 = ftCall_iiii($40 | 0, $a | 0, $w | 0, $4 | 0) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _numb($n, $s, $v, $b$0, $b$1) {
 $n = $n | 0;
 $s = $s | 0;
 $v = $v | 0;
 $b$0 = +$b$0;
 $b$1 = +$b$1;
 var $$0 = 0, $1 = 0, $11 = 0, $12 = 0, $15 = 0, $18 = 0, $21 = 0, $3 = 0, $5 = 0, $b = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $b = sp;
 HEAPF64[$b >> 3] = $b$0;
 HEAPF64[$b + 8 >> 3] = $b$1;
 $1 = _strlen(8256) | 0;
 if (!$n) {
  HEAP32[$v >> 2] = HEAP32[608];
  HEAP32[$v + 4 >> 2] = HEAP32[609];
  HEAP32[$v + 8 >> 2] = HEAP32[610];
  HEAP32[$v + 12 >> 2] = HEAP32[611];
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $3 = _str($1, 8256) | 0;
 $5 = _indexof($3, _str($n, $s) | 0) | 0;
 if (!$5) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!((_all0(_eps(_sc($1) | 0, $5) | 0) | 0) << 24 >> 24)) {
  _jsignal(5);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $11 = _bp(16) | 0;
 $12 = _ga(16, 1, 0, 0) | 0;
 if (!$12) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $15 = HEAP32[$12 + 12 >> 2] | 0;
 _memcpy($12 + ($15 + 4 + ($15 & 1) << 2) | 0, $b | 0, $11 | 0) | 0;
 $18 = _base2($12, $5) | 0;
 if (!$18) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $21 = HEAP32[$18 + 12 >> 2] | 0;
 _memcpy($v | 0, $18 + ($21 + 4 + ($21 & 1) << 2) | 0, $11 | 0) | 0;
 $$0 = 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _kast($0, $w) {
 $0 = $0 | 0;
 $w = $w | 0;
 var $$0 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $7 = 0, $9 = 0, $i$06 = 0, $i$06$us = 0, $wv$05 = 0, $wv$05$us = 0, $zv$04 = 0, $zv$04$us = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = $w + 8 | 0;
 $4 = $w + 12 | 0;
 $7 = _ga(32, HEAP32[$2 >> 2] | 0, HEAP32[$4 >> 2] | 0, $w + 16 | 0) | 0;
 if (!$7) {
  $$0 = 0;
  return $$0 | 0;
 }
 $9 = HEAP32[$4 >> 2] | 0;
 $11 = $w + ($9 + 4 + ($9 & 1) << 2) | 0;
 $13 = HEAP32[$7 + 12 >> 2] | 0;
 $15 = $7 + ($13 + 4 + ($13 & 1) << 2) | 0;
 $16 = HEAP32[$2 >> 2] | 0;
 if (($16 | 0) <= 0) {
  $$0 = $7;
  return $$0 | 0;
 }
 if (!($0 & 255)) {
  $i$06$us = 0;
  $wv$05$us = $11;
  $zv$04$us = $15;
  while (1) {
   HEAP32[$zv$04$us >> 2] = HEAP32[$wv$05$us >> 2];
   $i$06$us = $i$06$us + 1 | 0;
   if (($i$06$us | 0) == ($16 | 0)) {
    $$0 = $7;
    break;
   } else {
    $wv$05$us = $wv$05$us + 8 | 0;
    $zv$04$us = $zv$04$us + 4 | 0;
   }
  }
  return $$0 | 0;
 } else {
  $i$06 = 0;
  $wv$05 = $11;
  $zv$04 = $15;
  while (1) {
   HEAP32[$zv$04 >> 2] = HEAP32[$wv$05 + 4 >> 2];
   $i$06 = $i$06 + 1 | 0;
   if (($i$06 | 0) == ($16 | 0)) {
    $$0 = $7;
    break;
   } else {
    $wv$05 = $wv$05 + 8 | 0;
    $zv$04 = $zv$04 + 4 | 0;
   }
  }
  return $$0 | 0;
 }
 return 0;
}

function _eqj($n, $u, $v) {
 $n = $n | 0;
 $u = $u | 0;
 $v = $v | 0;
 var $$0 = 0, $$014 = 0, $$014$byval_copy = 0, $$023 = 0, $$023$byval_copy = 0, $i$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$014$byval_copy = sp + 16 | 0;
 $$023$byval_copy = sp;
 if (($n | 0) > 0) {
  $$014 = $v;
  $$023 = $u;
  $i$05 = 0;
 } else {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 while (1) {
  HEAP32[$$023$byval_copy >> 2] = HEAP32[$$023 >> 2];
  HEAP32[$$023$byval_copy + 4 >> 2] = HEAP32[$$023 + 4 >> 2];
  HEAP32[$$023$byval_copy + 8 >> 2] = HEAP32[$$023 + 8 >> 2];
  HEAP32[$$023$byval_copy + 12 >> 2] = HEAP32[$$023 + 12 >> 2];
  HEAP32[$$014$byval_copy >> 2] = HEAP32[$$014 >> 2];
  HEAP32[$$014$byval_copy + 4 >> 2] = HEAP32[$$014 + 4 >> 2];
  HEAP32[$$014$byval_copy + 8 >> 2] = HEAP32[$$014 + 8 >> 2];
  HEAP32[$$014$byval_copy + 12 >> 2] = HEAP32[$$014 + 12 >> 2];
  if (!((_zeq($$023$byval_copy, $$014$byval_copy) | 0) << 24 >> 24)) {
   $$0 = 0;
   label = 4;
   break;
  }
  $i$05 = $i$05 + 1 | 0;
  if (($i$05 | 0) >= ($n | 0)) {
   $$0 = 1;
   label = 4;
   break;
  } else {
   $$014 = $$014 + 16 | 0;
   $$023 = $$023 + 16 | 0;
  }
 }
 if ((label | 0) == 4) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _vsnprintf($s, $n, $fmt, $ap) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $5 = 0, $8 = 0, $b = 0, $f = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $b = sp + 112 | 0;
 $f = sp;
 dest = $f;
 src = 9336;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 if (($n + -1 | 0) >>> 0 > 2147483646) if (!$n) {
  $$01 = $b;
  $$02 = 1;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 75;
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$01 = $s;
  $$02 = $n;
 }
 $5 = -2 - $$01 | 0;
 $$$02 = $$02 >>> 0 > $5 >>> 0 ? $5 : $$02;
 HEAP32[$f + 48 >> 2] = $$$02;
 $8 = $f + 20 | 0;
 HEAP32[$8 >> 2] = $$01;
 HEAP32[$f + 44 >> 2] = $$01;
 $10 = $$01 + $$$02 | 0;
 $11 = $f + 16 | 0;
 HEAP32[$11 >> 2] = $10;
 HEAP32[$f + 28 >> 2] = $10;
 $13 = _MUSL_vfprintf($f, $fmt, $ap) | 0;
 if (!$$$02) {
  $$0 = $13;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $15 = HEAP32[$8 >> 2] | 0;
 HEAP8[$15 + ((($15 | 0) == (HEAP32[$11 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
 $$0 = $13;
 STACKTOP = sp;
 return $$0 | 0;
}

function _srd($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$neg$i = 0, $1 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $27 = 0, $28 = 0, $3 = 0, $36 = 0, $40 = 0, $41 = 0, $5 = 0, $7 = 0, $9 = 0, $i$111$i = 0, $i$2$i = 0, label = 0;
 $1 = HEAP32[$a + 12 >> 2] | 0;
 $3 = $a + ($1 + 4 + ($1 & 1) << 2) | 0;
 $5 = HEAP32[$w + 12 >> 2] | 0;
 $7 = $w + ($5 + 4 + ($5 & 1) << 2) | 0;
 $9 = HEAP32[$w + 8 >> 2] | 0;
 $18 = (HEAP8[$3 + ((HEAP32[$a + 8 >> 2] | 0) + -1) >> 0] | 0) + (HEAPU8[$3 >> 0] << 8) | 0;
 $19 = ($18 | 0) % ($9 | 0) | 0;
 $21 = ($18 | 0) % ($9 + -2 | 0) | 0;
 $22 = $21 + 1 | 0;
 $$neg$i = ~$21;
 $24 = HEAP32[$7 + ($19 << 3) >> 2] | 0;
 if (!$24) {
  $i$2$i = $19;
  $40 = $7 + ($i$2$i << 3) + 4 | 0;
  $41 = HEAP32[$40 >> 2] | 0;
  return $41 | 0;
 } else {
  $27 = $24;
  $i$111$i = $19;
 }
 while (1) {
  $28 = HEAP32[$27 + 12 >> 2] | 0;
  if (!(_strcmp($3, $27 + ($28 + 4 + ($28 & 1) << 2) | 0) | 0)) {
   $i$2$i = $i$111$i;
   label = 4;
   break;
  }
  $36 = $i$111$i + $$neg$i + (($i$111$i | 0) < ($22 | 0) ? $9 : 0) | 0;
  $27 = HEAP32[$7 + ($36 << 3) >> 2] | 0;
  if (!$27) {
   $i$2$i = $36;
   label = 4;
   break;
  } else $i$111$i = $36;
 }
 if ((label | 0) == 4) {
  $40 = $7 + ($i$2$i << 3) + 4 | 0;
  $41 = HEAP32[$40 >> 2] | 0;
  return $41 | 0;
 }
 return 0;
}

function _rfd($w) {
 $w = $w | 0;
 var $$0 = 0, $$sum1 = 0, $$sum3 = 0, $$sum5 = 0, $11 = 0, $14 = 0, $18 = 0, $2 = 0, $23 = 0, $6 = 0, $8 = 0, $i1$08 = 0, $indvars$iv = 0, $j$010 = 0, $k$0$lcssa = 0, $k$07 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 12 >> 2] | 0;
 if (($2 | 0) > 1) {
  $$0 = _rank1ex($w, 0, 1, 397) | 0;
  return $$0 | 0;
 }
 $6 = HEAP32[$w + 8 >> 2] | 0;
 $$sum1 = $2 + 4 + ($2 & 1) | 0;
 $8 = _ca($w) | 0;
 if (!$8) {
  $$0 = 0;
  return $$0 | 0;
 }
 $11 = HEAP32[$8 + 12 >> 2] | 0;
 $$sum3 = $11 + 4 + ($11 & 1) | 0;
 if (($6 | 0) <= 1) {
  $$0 = $8;
  return $$0 | 0;
 }
 $14 = $6 + -1 | 0;
 $indvars$iv = $14;
 $j$010 = 0;
 while (1) {
  $j$010 = $j$010 + 1 | 0;
  if (($6 | 0) > ($j$010 | 0)) {
   $$sum5 = $j$010 + $$sum1 | 0;
   $18 = HEAP32[$w + ($$sum5 << 2) >> 2] | 0;
   $i1$08 = 0;
   $k$07 = 0;
   while (1) {
    $23 = (($18 | 0) > (HEAP32[$w + ($$sum5 + $i1$08 << 2) >> 2] | 0) & 1) + $k$07 | 0;
    $i1$08 = $i1$08 + 1 | 0;
    if (($i1$08 | 0) == ($indvars$iv | 0)) {
     $k$0$lcssa = $23;
     break;
    } else $k$07 = $23;
   }
  } else $k$0$lcssa = 0;
  HEAP32[$8 + ($$sum3 + $j$010 << 2) >> 2] = $k$0$lcssa;
  if (($j$010 | 0) == ($14 | 0)) {
   $$0 = $8;
   break;
  } else $indvars$iv = $indvars$iv + -1 | 0;
 }
 return $$0 | 0;
}

function _stfind($w) {
 $w = $w | 0;
 var $$in = 0, $$neg$i$i = 0, $1 = 0, $11 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $29 = 0, $3 = 0, $30 = 0, $38 = 0, $43 = 0, $5 = 0, $7 = 0, $9 = 0, $i$111$i$i = 0, $i$2$i$i = 0;
 if (!$w) {
  $$in = 3584;
  $43 = HEAP32[$$in >> 2] | 0;
  return $43 | 0;
 }
 $1 = HEAP32[898] | 0;
 $3 = HEAP32[$w + 12 >> 2] | 0;
 $5 = $w + ($3 + 4 + ($3 & 1) << 2) | 0;
 $7 = HEAP32[$1 + 12 >> 2] | 0;
 $9 = $1 + ($7 + 4 + ($7 & 1) << 2) | 0;
 $11 = HEAP32[$1 + 8 >> 2] | 0;
 $20 = (HEAP8[$5 + ((HEAP32[$w + 8 >> 2] | 0) + -1) >> 0] | 0) + (HEAPU8[$5 >> 0] << 8) | 0;
 $21 = ($20 | 0) % ($11 | 0) | 0;
 $23 = ($20 | 0) % ($11 + -2 | 0) | 0;
 $24 = $23 + 1 | 0;
 $$neg$i$i = ~$23;
 $26 = HEAP32[$9 + ($21 << 3) >> 2] | 0;
 L4 : do if (!$26) $i$2$i$i = $21; else {
  $29 = $26;
  $i$111$i$i = $21;
  while (1) {
   $30 = HEAP32[$29 + 12 >> 2] | 0;
   if (!(_strcmp($5, $29 + ($30 + 4 + ($30 & 1) << 2) | 0) | 0)) {
    $i$2$i$i = $i$111$i$i;
    break L4;
   }
   $38 = $i$111$i$i + $$neg$i$i + (($i$111$i$i | 0) < ($24 | 0) ? $11 : 0) | 0;
   $29 = HEAP32[$9 + ($38 << 3) >> 2] | 0;
   if (!$29) {
    $i$2$i$i = $38;
    break;
   } else $i$111$i$i = $38;
  }
 } while (0);
 $$in = $9 + ($i$2$i$i << 3) + 4 | 0;
 $43 = HEAP32[$$in >> 2] | 0;
 return $43 | 0;
}

function _words($w) {
 $w = $w | 0;
 var $$0 = 0, $$sum3 = 0, $1 = 0, $11 = 0, $13 = 0, $15 = 0, $17 = 0, $20 = 0, $23 = 0, $24 = 0, $27 = 0, $i$09 = 0, $x$07 = 0, $y$08 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $1 = $w + 12 | 0;
 if ((HEAP32[$1 >> 2] | 0) > 1) {
  $$0 = _rank1ex($w, 0, 1, 122) | 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 2)) if (HEAP32[$w + 8 >> 2] | 0) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $11 = _wordil($w) | 0;
 if (!$11) {
  $$0 = 0;
  return $$0 | 0;
 }
 $13 = HEAP32[$1 >> 2] | 0;
 $15 = $w + ($13 + 4 + ($13 & 1) << 2) | 0;
 $17 = HEAP32[$11 + 12 >> 2] | 0;
 $$sum3 = $17 + 4 + ($17 & 1) | 0;
 $20 = HEAP32[$11 + ($$sum3 << 2) >> 2] | 0;
 $23 = ($20 | 0) < 0 ? 0 - $20 | 0 : $20;
 $24 = _ga(32, $23, 1, 0) | 0;
 if (!$24) {
  $$0 = 0;
  return $$0 | 0;
 }
 $27 = HEAP32[$24 + 12 >> 2] | 0;
 if (($23 | 0) <= 0) {
  $$0 = $24;
  return $$0 | 0;
 }
 $i$09 = 0;
 $x$07 = $24 + ($27 + 4 + ($27 & 1) << 2) | 0;
 $y$08 = $11 + ($$sum3 + 1 << 2) | 0;
 while (1) {
  HEAP32[$x$07 >> 2] = _str(HEAP32[$y$08 + 4 >> 2] | 0, $15 + (HEAP32[$y$08 >> 2] | 0) | 0) | 0;
  $i$09 = $i$09 + 1 | 0;
  if (($i$09 | 0) == ($23 | 0)) {
   $$0 = $24;
   break;
  } else {
   $x$07 = $x$07 + 4 | 0;
   $y$08 = $y$08 + 8 | 0;
  }
 }
 return $$0 | 0;
}

function _fitexp2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$026 = 0, $10 = 0, $13 = 0, $14 = 0, $18 = 0, $20 = 0, $25 = 0, $i$07 = 0, $z$05 = 0, label = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$a + 12 >> 2] | 0) <= 0) if ((HEAP32[$w + 12 >> 2] | 0) <= 0) {
  $10 = HEAP32[$self + 12 >> 2] | 0;
  $13 = HEAP32[$self + ($10 + 7 + ($10 & 1) << 2) >> 2] | 0;
  $14 = _i0($w) | 0;
  if (HEAP8[2472] | 0) {
   $$0 = 0;
   return $$0 | 0;
  }
  if (($14 | 0) <= -1) {
   _jsignal(3);
   $$0 = 0;
   return $$0 | 0;
  }
  $18 = _shape($13) | 0;
  $20 = _reshape($18, HEAP32[646] | 0) | 0;
  if (!$20) {
   $$0 = 0;
   return $$0 | 0;
  }
  if (($14 | 0) > 0) {
   $$026 = $a;
   $i$07 = 0;
   $z$05 = $20;
  } else {
   $$0 = $20;
   return $$0 | 0;
  }
  while (1) {
   $25 = _tymes($z$05, $$026) | 0;
   if (!$25) {
    $$0 = 0;
    label = 13;
    break;
   }
   $$026 = _plus($$026, $13) | 0;
   $i$07 = $i$07 + 1 | 0;
   if (!$$026) {
    $$0 = 0;
    label = 13;
    break;
   }
   if (($i$07 | 0) >= ($14 | 0)) {
    $$0 = $25;
    label = 13;
    break;
   } else $z$05 = $25;
  }
  if ((label | 0) == 13) return $$0 | 0;
 }
 $$0 = _rank2ex($a, $w, $self, 0, 0, 295) | 0;
 return $$0 | 0;
}

function _jpr($w) {
 $w = $w | 0;
 var $$0 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $26 = 0, $32 = 0, $4 = 0, $i$0 = 0, $sa$0 = 0, $y$0 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $4 = HEAP32[$w >> 2] | 0;
 L4 : do if (!($4 & 127)) {
  if ($4 & 896) {
   if (!((_evoke($w) | 0) << 24 >> 24)) {
    $sa$0 = HEAP32[630] | 0;
    $y$0 = $w;
   } else {
    $15 = HEAP32[$w + 12 >> 2] | 0;
    $18 = HEAP32[$w + ($15 + 6 + ($15 & 1) << 2) >> 2] | 0;
    $19 = _symbrd($18) | 0;
    if (!$19) {
     $$0 = 0;
     return $$0 | 0;
    } else {
     $sa$0 = $18;
     $y$0 = $19;
    }
   }
   $22 = HEAP32[594] | 0;
   $i$0 = 0;
   while (1) {
    if (($i$0 | 0) >= ($22 | 0)) break L4;
    $i$0 = $i$0 + 1 | 0;
    $26 = HEAP32[2376 + ($i$0 << 2) >> 2] | 0;
    if (($26 | 0) == 1) $32 = _arep($y$0) | 0; else if (($26 | 0) == 3) $32 = _srep($sa$0, $y$0) | 0; else if (($26 | 0) == 4) $32 = _trep($y$0) | 0; else if (($26 | 0) == 2) $32 = _drep($y$0) | 0; else $32 = _lrep($y$0) | 0;
    if (!(_jpr1(_thorn1($32) | 0) | 0)) {
     $$0 = 0;
     break;
    }
   }
   return $$0 | 0;
  }
 } else if (!(_jpr1(_thorn1($w) | 0) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 } while (0);
 $$0 = _gc($w, $2) | 0;
 return $$0 | 0;
}

function _ga($t, $n, $r, $s) {
 $t = $t | 0;
 $n = $n | 0;
 $r = $r | 0;
 $s = $s | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $16 = 0, $19 = 0, $26 = 0, $27 = 0, $3 = 0, $5 = 0;
 if (($r | 0) >= 128) {
  _jsignal(10);
  $$0 = 0;
  return $$0 | 0;
 }
 $3 = Math_imul(_bp($t) | 0, $n) | 0;
 $5 = ($t & 1027 | 0) != 0;
 $10 = $r + 5 + ((($5 ? 4 : 3) + $3 | 0) / 4 | 0) << 2;
 $11 = _malloc($10) | 0;
 if (!((_breaker() | 0) << 24 >> 24)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!$11) {
  _jsignal(21);
  $$0 = 0;
  return $$0 | 0;
 }
 $16 = (HEAP32[666] | 0) + $10 | 0;
 HEAP32[666] = $16;
 HEAP32[670] = (HEAP32[670] | 0) + $10;
 $19 = HEAP32[668] | 0;
 HEAP32[668] = ($16 | 0) > ($19 | 0) ? $16 : $19;
 if ($t & 33760) _memset($11 | 0, 0, $10 | 0) | 0;
 HEAP32[$11 + 4 >> 2] = 1;
 HEAP32[$11 + 8 >> 2] = $n;
 $26 = $11 + 12 | 0;
 HEAP32[$26 >> 2] = $r;
 HEAP32[$11 >> 2] = 0;
 _tpush($11) | 0;
 HEAP32[$11 >> 2] = $t;
 if ($5) {
  $27 = HEAP32[$26 >> 2] | 0;
  HEAP8[$11 + ($27 + 4 + ($27 & 1) << 2) + $n >> 0] = 0;
 }
 if (($r | 0) == 1) {
  HEAP32[$11 + 16 >> 2] = $n;
  $$0 = $11;
  return $$0 | 0;
 }
 if (!(($r | 0) != 0 & ($s | 0) != 0)) {
  $$0 = $11;
  return $$0 | 0;
 }
 _memcpy($11 + 16 | 0, $s | 0, $r << 2 | 0) | 0;
 $$0 = $11;
 return $$0 | 0;
}

function _tsit2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $18 = 0.0, $21 = 0, $38 = 0.0, $9 = 0, $i$03 = 0, $t$i2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $t$i2 = sp;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ((HEAP32[$a + 12 >> 2] | 0) <= 0) if ((HEAP32[$w + 12 >> 2] | 0) <= 1) {
  $9 = _i0($a) | 0;
  if (HEAP8[2472] | 0) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  _gettimeofday($t$i2 | 0, 0) | 0;
  $18 = +(HEAP32[$t$i2 >> 2] | 0) + +(HEAP32[$t$i2 + 4 >> 2] | 0) / 1.0e6;
  $21 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
  L10 : do if (($9 | 0) > 0) {
   $i$03 = 0;
   while (1) {
    if (!(_exec1($w) | 0)) {
     $$0 = 0;
     break;
    }
    _gc(0, $21) | 0;
    $i$03 = $i$03 + 1 | 0;
    if (($i$03 | 0) >= ($9 | 0)) break L10;
   }
   STACKTOP = sp;
   return $$0 | 0;
  } while (0);
  _gettimeofday($t$i2 | 0, 0) | 0;
  if (!$9) $38 = 0.0; else $38 = (+(HEAP32[$t$i2 >> 2] | 0) + +(HEAP32[$t$i2 + 4 >> 2] | 0) / 1.0e6 - $18) / +($9 | 0);
  $$0 = _scf($38) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$0 = _rank2ex($a, $w, 0, 0, 1, 450) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _stopsub($p, $nw, $md) {
 $p = $p | 0;
 $nw = $nw | 0;
 $md = $md | 0;
 var $$0 = 0, $$13 = 0, $0 = 0, $11 = 0, $16 = 0, $18 = 0, $4 = 0, $7 = 0, $8 = 0, $cp$0 = 0, $cp$0$p = 0, $sp$0 = 0, $sp$0$cp$0 = 0, label = 0;
 $0 = _strchr($p, 59) | 0;
 if (!$0) $sp$0 = $p + (_strlen($p | 0) | 0) | 0; else $sp$0 = $0;
 $4 = _strchr($p, 58) | 0;
 $cp$0 = ($4 | 0) == 0 | $4 >>> 0 > $sp$0 >>> 0 ? $sp$0 : $4;
 $7 = ($md | 0) == 2;
 $cp$0$p = $7 ? $cp$0 : $p;
 $sp$0$cp$0 = $7 ? $sp$0 : $cp$0;
 $8 = _strchr($cp$0$p, 42) | 0;
 if (!(($8 | 0) == 0 | $8 >>> 0 > $sp$0$cp$0 >>> 0)) {
  $$0 = 1;
  return $$0 | 0;
 }
 $11 = _strlen($nw | 0) | 0;
 if ($cp$0$p >>> 0 < $sp$0$cp$0 >>> 0) $$13 = $cp$0$p; else {
  $$0 = 0;
  return $$0 | 0;
 }
 while (1) {
  if (!(_strncmp($$13, $nw, $11) | 0)) {
   $16 = HEAP8[$$13 + -1 >> 0] | 0;
   $18 = HEAP8[$$13 + $11 >> 0] | 0;
   if ($18 << 24 >> 24 == 59 | $18 << 24 >> 24 == 58 | $18 << 24 >> 24 == 32 | $18 << 24 >> 24 == 0) if ($16 << 24 >> 24 == 58 | $16 << 24 >> 24 == 32) {
    $$0 = 1;
    label = 9;
    break;
   }
  }
  $$13 = $$13 + 1 | 0;
  if ($$13 >>> 0 >= $sp$0$cp$0 >>> 0) {
   $$0 = 0;
   label = 9;
   break;
  }
 }
 if ((label | 0) == 9) return $$0 | 0;
 return 0;
}

function _ddot($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $11 = 0, $14 = 0, $21 = 0, $25 = 0, $8 = 0, $a$tr1$i = 0, $d$tr2$i = 0, label = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (HEAP32[$a >> 2] & 128) if (HEAP32[$w >> 2] & 127) {
  $8 = _vi($w) | 0;
  if (!$8) {
   $$0 = 0;
   return $$0 | 0;
  }
  $11 = HEAP32[$8 + 12 >> 2] | 0;
  $14 = HEAP32[$8 + ($11 + 4 + ($11 & 1) << 2) >> 2] | 0;
  if (!(($11 | 0) == 0 & ($14 | 0) > -1)) {
   _jsignal(11);
   $$0 = 0;
   return $$0 | 0;
  }
  L14 : do if ((_nameless($a) | 0) << 24 >> 24) {
   $a$tr1$i = $a;
   $d$tr2$i = $14;
   while (1) {
    $21 = (($d$tr2$i | 0) > 0 & 1) - ($d$tr2$i >>> 31) | 0;
    if (($21 | 0) == -1) {
     label = 10;
     break;
    } else if (($21 | 0) != 1) {
     $$0 = $a$tr1$i;
     label = 13;
     break;
    }
    $a$tr1$i = _diff($a$tr1$i) | 0;
    if (!$a$tr1$i) break L14; else $d$tr2$i = $d$tr2$i + -1 | 0;
   }
   if ((label | 0) == 10) {
    _jsignal(11);
    break;
   } else if ((label | 0) == 13) return $$0 | 0;
  } while (0);
  $25 = _mr($a) | 0;
  $$0 = _fdef(-59, 128, 283, 284, $a, $8, 0, 0, $25, 0, $25) | 0;
  return $$0 | 0;
 }
 _jsignal(3);
 $$0 = 0;
 return $$0 | 0;
}

function _thorn1($w) {
 $w = $w | 0;
 var $$ = 0, $$0 = 0, $12 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0;
 L1 : do if (!$w) $$0 = 0; else {
  $4 = HEAP32[$w >> 2] | 0;
  if (!(HEAP32[$w + 8 >> 2] | 0)) {
   $5 = ($4 | 0) == 32;
   $7 = ($5 & 1) << 1;
   $9 = HEAP32[$w + 12 >> 2] | 0;
   $$ = ($7 | 0) > ($9 | 0) ? $7 : $9;
   $12 = _ga(2, 0, $$, $w + 16 | 0) | 0;
   if (($12 | 0) == 0 | $5 ^ 1) {
    $$0 = $12;
    break;
   }
   HEAP32[$12 + 16 + ($$ + -1 << 2) >> 2] = 0;
   HEAP32[$12 + 16 + ($$ + -2 << 2) >> 2] = 0;
   $$0 = $12;
   break;
  }
  switch ($4 | 0) {
  case 32:
   {
    $$0 = _thbox($w) | 0;
    break L1;
    break;
   }
  case 64:
   {
    $$0 = _thbox(_kast(1, $w) | 0) | 0;
    break L1;
    break;
   }
  case 16:
   {
    $$0 = _th($w, 58, 349) | 0;
    break L1;
    break;
   }
  case 4:
   {
    $$0 = _th($w, 12, 347) | 0;
    break L1;
    break;
   }
  case 8:
   {
    $$0 = _th($w, 29, 348) | 0;
    break L1;
    break;
   }
  case 1:
   {
    $$0 = _th($w, 2, 346) | 0;
    break L1;
    break;
   }
  case 2:
   {
    $$0 = _ca($w) | 0;
    break L1;
    break;
   }
  default:
   {
    $$0 = 0;
    break L1;
   }
  }
 } while (0);
 return $$0 | 0;
}

function _tayn($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $12 = 0, $15 = 0, $18 = 0, $24 = 0, $26 = 0, $30 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (HEAP32[$a >> 2] & 128) if (HEAP32[$w >> 2] & 127) {
  if (HEAP32[$w + 12 >> 2] | 0) {
   _jsignal(14);
   $$0 = 0;
   return $$0 | 0;
  }
  $12 = _vib(_sc(2147483647) | 0, $w) | 0;
  if (!$12) {
   $$0 = 0;
   return $$0 | 0;
  }
  $15 = HEAP32[$12 + 12 >> 2] | 0;
  $18 = HEAP32[$12 + ($15 + 4 + ($15 & 1) << 2) >> 2] | 0;
  if (($18 | 0) <= -1) {
   _jsignal(3);
   $$0 = 0;
   return $$0 | 0;
  }
  if (!((_nameless($a) | 0) << 24 >> 24)) {
   $$0 = _fdef(-48, 128, 286, 0, $a, $w, 0, 0, 127, 127, 127) | 0;
   return $$0 | 0;
  }
  if (($18 | 0) != 2147483647) {
   $24 = _iota($12) | 0;
   $26 = _df1($24, _taylor($a) | 0) | 0;
   $$0 = _amp($26, _ds(-52) | 0) | 0;
   return $$0 | 0;
  }
  $30 = HEAP32[$a + 12 >> 2] | 0;
  if ((HEAP8[$a + ($30 + 4 + ($30 & 1) << 2) + 31 >> 0] | 0) == 94) {
   $$0 = _parse(_tokens(_cstr(176) | 0) | 0) | 0;
   return $$0 | 0;
  } else {
   _jsignal(3);
   $$0 = 0;
   return $$0 | 0;
  }
 }
 _jsignal(3);
 $$0 = 0;
 return $$0 | 0;
}

function _spellout($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $s = 0, $sext = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $s = sp;
 $sext = $0 << 24;
 $1 = $sext >> 24;
 $2 = $s + 1 | 0;
 HEAP8[$2 >> 0] = 0;
 L1 : do switch ($1 | 0) {
 case -18:
  {
   HEAP8[$s >> 0] = 54;
   $16 = 1;
   break;
  }
 case -19:
  {
   HEAP8[$s >> 0] = 53;
   $16 = 1;
   break;
  }
 case -21:
  {
   HEAP8[$s >> 0] = 51;
   $16 = 1;
   break;
  }
 case -22:
  {
   HEAP8[$s >> 0] = 50;
   $16 = 1;
   break;
  }
 case -20:
  {
   HEAP8[$s >> 0] = 52;
   $16 = 1;
   break;
  }
 default:
  {
   if (($sext | 0) > -16777216) {
    HEAP8[$s >> 0] = $1;
    $16 = 1;
    break L1;
   }
   $4 = _strchr(7883, $1) | 0;
   if ($4) {
    HEAP8[$s >> 0] = HEAP8[7824 + ($4 - 7883) >> 0] | 0;
    HEAP8[$2 >> 0] = 46;
    $16 = 2;
    break L1;
   }
   $10 = _strchr(7942, $1) | 0;
   if (!$10) $16 = 1; else {
    HEAP8[$s >> 0] = HEAP8[7824 + ($10 - 7942) >> 0] | 0;
    HEAP8[$2 >> 0] = 58;
    $16 = 2;
   }
  }
 } while (0);
 $17 = _str($16, $s) | 0;
 STACKTOP = sp;
 return $17 | 0;
}

function _even($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0$i = 0, $$0$i2 = 0, $$sum2$i = 0, $$sum4$i = 0, $0 = 0, $18 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $8 = 0;
 $0 = _ds(43) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0$i = 0;
  return $$0$i | 0;
 }
 if (!(HEAP32[$a >> 2] & 128 & HEAP32[$w >> 2])) {
  _jsignal(3);
  $$0$i = 0;
  return $$0$i | 0;
 }
 $8 = _ds(-115) | 0;
 do if (($0 | 0) != 0 & ($8 | 0) != 0) if (!(HEAP32[$8 >> 2] & 128 & HEAP32[$0 >> 2])) {
  _jsignal(3);
  $$0$i2 = 0;
  break;
 } else {
  $$0$i2 = _fdef(-93, 128, 265, 269, $8, $0, 0, 0, 127, 127, 127) | 0;
  break;
 } else $$0$i2 = 0; while (0);
 $18 = _folk($a, $$0$i2, _amp($a, $w) | 0) | 0;
 if (!$18) {
  $$0$i = 0;
  return $$0$i | 0;
 }
 $21 = HEAP32[$18 + 12 >> 2] | 0;
 $$sum2$i = $21 + 4 + ($21 & 1) | 0;
 $23 = $18 + ($$sum2$i << 2) | 0;
 $25 = HEAP32[$a + 12 >> 2] | 0;
 $$sum4$i = $25 + 4 + ($25 & 1) | 0;
 $27 = $a + ($$sum4$i << 2) | 0;
 HEAP8[$a + ($$sum4$i + 7 << 2) >> 0] = HEAP8[$18 + ($$sum2$i + 7 << 2) >> 0] | 0;
 HEAP8[$27 + 29 >> 0] = HEAP8[$23 + 29 >> 0] | 0;
 HEAP8[$27 + 30 >> 0] = HEAP8[$23 + 30 >> 0] | 0;
 $$0$i = $18;
 return $$0$i | 0;
}

function _odd($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0$i = 0, $$0$i2 = 0, $$sum2$i = 0, $$sum4$i = 0, $0 = 0, $18 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $8 = 0;
 $0 = _ds(45) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0$i = 0;
  return $$0$i | 0;
 }
 if (!(HEAP32[$a >> 2] & 128 & HEAP32[$w >> 2])) {
  _jsignal(3);
  $$0$i = 0;
  return $$0$i | 0;
 }
 $8 = _ds(-115) | 0;
 do if (($0 | 0) != 0 & ($8 | 0) != 0) if (!(HEAP32[$8 >> 2] & 128 & HEAP32[$0 >> 2])) {
  _jsignal(3);
  $$0$i2 = 0;
  break;
 } else {
  $$0$i2 = _fdef(-93, 128, 265, 269, $8, $0, 0, 0, 127, 127, 127) | 0;
  break;
 } else $$0$i2 = 0; while (0);
 $18 = _folk($a, $$0$i2, _amp($a, $w) | 0) | 0;
 if (!$18) {
  $$0$i = 0;
  return $$0$i | 0;
 }
 $21 = HEAP32[$18 + 12 >> 2] | 0;
 $$sum2$i = $21 + 4 + ($21 & 1) | 0;
 $23 = $18 + ($$sum2$i << 2) | 0;
 $25 = HEAP32[$a + 12 >> 2] | 0;
 $$sum4$i = $25 + 4 + ($25 & 1) | 0;
 $27 = $a + ($$sum4$i << 2) | 0;
 HEAP8[$a + ($$sum4$i + 7 << 2) >> 0] = HEAP8[$18 + ($$sum2$i + 7 << 2) >> 0] | 0;
 HEAP8[$27 + 29 >> 0] = HEAP8[$23 + 29 >> 0] | 0;
 HEAP8[$27 + 30 >> 0] = HEAP8[$23 + 30 >> 0] | 0;
 $$0$i = $18;
 return $$0$i | 0;
}

function _jsignum($v, $x) {
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0, $1 = 0.0, $v$byval_copy1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $v$byval_copy1 = sp + 16 | 0;
 $0 = sp;
 $1 = +HEAPF64[52];
 HEAP32[$v$byval_copy1 >> 2] = HEAP32[$v >> 2];
 HEAP32[$v$byval_copy1 + 4 >> 2] = HEAP32[$v + 4 >> 2];
 HEAP32[$v$byval_copy1 + 8 >> 2] = HEAP32[$v + 8 >> 2];
 HEAP32[$v$byval_copy1 + 12 >> 2] = HEAP32[$v + 12 >> 2];
 if ($1 > +_zmag($v$byval_copy1)) {
  HEAP32[$x >> 2] = HEAP32[608];
  HEAP32[$x + 4 >> 2] = HEAP32[609];
  HEAP32[$x + 8 >> 2] = HEAP32[610];
  HEAP32[$x + 12 >> 2] = HEAP32[611];
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$v$byval_copy1 >> 2] = HEAP32[$v >> 2];
  HEAP32[$v$byval_copy1 + 4 >> 2] = HEAP32[$v + 4 >> 2];
  HEAP32[$v$byval_copy1 + 8 >> 2] = HEAP32[$v + 8 >> 2];
  HEAP32[$v$byval_copy1 + 12 >> 2] = HEAP32[$v + 12 >> 2];
  _ztrend($0, $v$byval_copy1);
  HEAP32[$x >> 2] = HEAP32[$0 >> 2];
  HEAP32[$x + 4 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$x + 8 >> 2] = HEAP32[$0 + 8 >> 2];
  HEAP32[$x + 12 >> 2] = HEAP32[$0 + 12 >> 2];
  STACKTOP = sp;
  return;
 }
}

function _ad2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$sum2 = 0, $1 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $31 = 0, $32 = 0, $34 = 0, $4 = 0, $6 = 0, $9 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum2 = $1 + 4 + ($1 & 1) | 0;
 $4 = HEAP32[$self + ($$sum2 + 2 << 2) >> 2] | 0;
 $6 = HEAP32[$self + ($$sum2 + 3 << 2) >> 2] | 0;
 if (!$4) $31 = 0; else {
  $9 = HEAP32[$4 + 12 >> 2] | 0;
  $31 = HEAP32[$4 + ($9 + 5 + ($9 & 1) << 2) >> 2] | 0;
 }
 if (!$6) $34 = 0; else {
  $15 = HEAP32[$6 + 12 >> 2] | 0;
  $34 = HEAP32[$6 + ($15 + 5 + ($15 & 1) << 2) >> 2] | 0;
 }
 $19 = HEAP8[2368] | 0;
 $20 = _lr($self) | 0;
 $21 = _rr($self) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($20 | 0) >= (HEAP32[$a + 12 >> 2] | 0)) if (($21 | 0) >= (HEAP32[$w + 12 >> 2] | 0)) {
  HEAP8[2368] = 0;
  $32 = ftCall_iiii($31 | 0, $a | 0, $w | 0, $4 | 0) | 0;
  HEAP8[2368] = $19;
  HEAP8[2472] = 0;
  if ($32) {
   $$0 = $32;
   return $$0 | 0;
  }
  $$0 = ftCall_iiii($34 | 0, $a | 0, $w | 0, $6 | 0) | 0;
  return $$0 | 0;
 }
 $$0 = _rank2ex($a, $w, $self, $20, $21, 273) | 0;
 return $$0 | 0;
}

function _hiat($hct, $k, $v$val) {
 $hct = +$hct;
 $k = $k | 0;
 $v$val = $v$val | 0;
 var $$0 = 0, $1 = 0, $2 = 0, $35 = 0, $36 = 0, $4 = 0, $6 = 0, $66 = 0.0, $7 = 0;
 $1 = HEAP32[$v$val + 8 >> 2] | 0;
 $2 = HEAP32[$v$val >> 2] | 0;
 $4 = HEAP32[$v$val + 12 >> 2] | 0;
 $6 = $v$val + ($4 + 4 + ($4 & 1) << 2) | 0;
 $7 = ($1 | 0) != 0;
 if (!(($2 & 1026 | 0) == 0 | $7 ^ 1)) if (($1 | 0) > 1) {
  $$0 = HEAPU8[$6 + ($1 + -2) >> 0] << 8 | HEAPU8[$6 + ($1 + -1) >> 0] | HEAPU8[$6 + 1 >> 0] << 16 | HEAPU8[$6 >> 0] << 24;
  return $$0 | 0;
 } else {
  $$0 = HEAP8[$6 >> 0] | 0;
  return $$0 | 0;
 }
 if (!($7 & ($2 & 96 | 0) == 0)) {
  if (!$4) {
   $$0 = 32;
   return $$0 | 0;
  }
  $35 = $4 << 2;
  $36 = $v$val + 16 | 0;
  $$0 = HEAPU8[$36 + ($35 + -2) >> 0] << 8 | HEAPU8[$36 + ($35 + -1) >> 0] | HEAPU8[$36 + 1 >> 0] << 16 | HEAPU8[$36 >> 0] << 24;
  return $$0 | 0;
 }
 do if (!($2 & 1)) if (!($2 & 4)) {
  $66 = +HEAPF64[$6 >> 3];
  break;
 } else {
  $66 = +(HEAP32[$6 >> 2] | 0);
  break;
 } else $66 = +(HEAP8[$6 >> 0] | 0); while (0);
 HEAPF64[tempDoublePtr >> 3] = $66 * $hct;
 $$0 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 return $$0 | 0;
}

function _linf($a, $w, $0) {
 $a = $a | 0;
 $w = $w | 0;
 $0 = $0 | 0;
 var $$0 = 0, $12 = 0, $22 = 0, $32 = 0, $37 = 0, $40 = 0, $9 = 0, $tso = 0;
 $tso = $0 & 255;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (HEAP32[$w >> 2] & 32) if (HEAP32[$w + 8 >> 2] | 0) {
  $9 = HEAP32[$w + 12 >> 2] | 0;
  $12 = HEAP32[$w + ($9 + 4 + ($9 & 1) << 2) >> 2] | 0;
  if (!(HEAP32[$12 + 8 >> 2] | 0)) if ((HEAP32[$12 + 12 >> 2] | 0) == 1) {
   HEAP8[8472] = $tso;
   $22 = HEAP32[2120] | 0;
   if ($22) _fclose($22 | 0) | 0;
   HEAP32[2120] = 0;
   HEAP32[2122] = $a;
   do if ($a) {
    if (!(HEAP32[$a >> 2] & 32)) {
     _jsignal(3);
     break;
    }
    if (HEAP32[$a + 12 >> 2] | 0) {
     _jsignal(14);
     break;
    }
    $32 = HEAP32[$a + 16 >> 2] | 0;
    if (!(HEAP32[$32 >> 2] & 2)) {
     _jsignal(3);
     break;
    }
    $37 = HEAP32[$32 + 12 >> 2] | 0;
    $40 = _fopen($32 + ($37 + 4 + ($37 & 1) << 2) | 0, 8496) | 0;
    HEAP32[2120] = $40;
    if (!$40) _jsignal(7);
   } while (0);
   HEAP32[2122] = 0;
   $$0 = HEAP32[616] | 0;
   return $$0 | 0;
  }
 }
 $$0 = _line($a, _jfread($w) | 0, $0 << 24 >> 24) | 0;
 return $$0 | 0;
}

function _dfr($w) {
 $w = $w | 0;
 var $$0 = 0, $$sum1 = 0, $$sum3 = 0, $11 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $6 = 0, $8 = 0, $c$07 = 0, $i$09 = 0, $i1$08 = 0, $c$07$looptemp = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 12 >> 2] | 0;
 if (($2 | 0) > 1) {
  $$0 = _rank1ex($w, 0, 1, 398) | 0;
  return $$0 | 0;
 }
 $6 = HEAP32[$w + 8 >> 2] | 0;
 $$sum1 = $2 + 4 + ($2 & 1) | 0;
 $8 = _ii($w) | 0;
 if (!$8) {
  $$0 = 0;
  return $$0 | 0;
 }
 $11 = HEAP32[$8 + 12 >> 2] | 0;
 $$sum3 = $11 + 4 + ($11 & 1) | 0;
 if (($6 | 0) <= 1) {
  $$0 = $8;
  return $$0 | 0;
 }
 $14 = $6 + -1 | 0;
 $i$09 = 0;
 do {
  $16 = HEAP32[$w + ($$sum1 + $i$09 << 2) >> 2] | 0;
  if (($16 | 0) > -1) {
   $18 = $i$09 + $$sum3 | 0;
   $c$07 = HEAP32[$8 + ($18 + $16 << 2) >> 2] | 0;
   $i1$08 = 0;
   while (1) {
    $21 = $8 + ($18 + $i1$08 << 2) | 0;
    $c$07$looptemp = $c$07;
    $c$07 = HEAP32[$21 >> 2] | 0;
    HEAP32[$21 >> 2] = $c$07$looptemp;
    if (($i1$08 | 0) == ($16 | 0)) break; else $i1$08 = $i1$08 + 1 | 0;
   }
  }
  $i$09 = $i$09 + 1 | 0;
 } while (($i$09 | 0) != ($14 | 0));
 $$0 = $8;
 return $$0 | 0;
}

function _dotprod($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$0$i = 0, $$sum2 = 0, $10 = 0, $11 = 0, $2 = 0, $24 = 0, $32 = 0, $33 = 0, $4 = 0, $7 = 0, $9 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $$sum2 = $4 + 4 + ($4 & 1) | 0;
 $7 = HEAP32[$self + ($$sum2 + 2 << 2) >> 2] | 0;
 $9 = HEAP32[$self + ($$sum2 + 3 << 2) >> 2] | 0;
 $10 = _lr($self) | 0;
 $11 = _rr($self) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($10 | 0) >= (HEAP32[$a + 12 >> 2] | 0)) if (($11 | 0) >= (HEAP32[$w + 12 >> 2] | 0)) {
  $24 = _qq($9, _v2((_lr($9) | 0) + 1 | 0, 127) | 0) | 0;
  do if (($7 | 0) != 0 & ($24 | 0) != 0) if (!(HEAP32[$7 >> 2] & 128 & HEAP32[$24 >> 2])) {
   _jsignal(3);
   $$0$i = 0;
   break;
  } else {
   $32 = _mr($24) | 0;
   $33 = _lr($24) | 0;
   $$0$i = _fdef(64, 128, 265, 269, $7, $24, 0, 0, $32, $33, _rr($24) | 0) | 0;
   break;
  } else $$0$i = 0; while (0);
  $$0 = _gc(_df2($a, $w, $$0$i) | 0, $2) | 0;
  return $$0 | 0;
 }
 $$0 = _rank2ex($a, $w, $self, $10, $11, 275) | 0;
 return $$0 | 0;
}

function _on2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$sum2 = 0, $12 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $33 = 0, $34 = 0, $36 = 0, $4 = 0, $7 = 0, $9 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $$sum2 = $4 + 4 + ($4 & 1) | 0;
 $7 = HEAP32[$self + ($$sum2 + 2 << 2) >> 2] | 0;
 $9 = HEAP32[$self + ($$sum2 + 3 << 2) >> 2] | 0;
 if (!$7) $36 = 0; else {
  $12 = HEAP32[$7 + 12 >> 2] | 0;
  $36 = HEAP32[$7 + ($12 + 5 + ($12 & 1) << 2) >> 2] | 0;
 }
 if (!$9) $33 = 0; else {
  $18 = HEAP32[$9 + 12 >> 2] | 0;
  $33 = HEAP32[$9 + ($18 + 4 + ($18 & 1) << 2) >> 2] | 0;
 }
 $22 = _lr($self) | 0;
 $23 = _rr($self) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($22 | 0) >= (HEAP32[$a + 12 >> 2] | 0)) if (($23 | 0) >= (HEAP32[$w + 12 >> 2] | 0)) {
  $34 = ftCall_iii($33 | 0, $a | 0, $9 | 0) | 0;
  $$0 = _gc(ftCall_iiii($36 | 0, $34 | 0, ftCall_iii($33 | 0, $w | 0, $9 | 0) | 0, $7 | 0) | 0, $2) | 0;
  return $$0 | 0;
 }
 $$0 = _rank2ex($a, $w, $self, $22, $23, 266) | 0;
 return $$0 | 0;
}

function _forko($f, $g, $h) {
 $f = $f | 0;
 $g = $g | 0;
 $h = $h | 0;
 var $$0 = 0, $16 = 0, $6 = 0, $7 = 0, $f1$0 = 0, $f2$0 = 0, $t$0 = 0;
 if (!(($f | 0) != 0 & ($g | 0) != 0 & ($h | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $6 = (HEAP32[$f >> 2] | 0) >>> 5 & 8 ^ 8;
 $7 = HEAP32[$g >> 2] | 0;
 if (!($7 & 127)) if (!($7 & 128)) $16 = $7 >>> 7 & 2 ^ 6; else $16 = 2; else $16 = 0;
 switch ($16 + $6 + ((HEAP32[$h >> 2] | 0) >>> 8 & 1 ^ 1) | 0) {
 case 12:
  {
   $f1$0 = 0;
   $f2$0 = 330;
   $t$0 = 512;
   break;
  }
 case 4:
  {
   $f1$0 = 327;
   $f2$0 = 0;
   $t$0 = 256;
   break;
  }
 case 14:
  {
   $f1$0 = 0;
   $f2$0 = 331;
   $t$0 = 512;
   break;
  }
 case 15:
  {
   $f1$0 = 0;
   $f2$0 = 332;
   $t$0 = 512;
   break;
  }
 case 11:
  {
   $f1$0 = 0;
   $f2$0 = 333;
   $t$0 = 512;
   break;
  }
 case 7:
  {
   $f1$0 = 0;
   $f2$0 = 329;
   $t$0 = 512;
   break;
  }
 case 6:
  {
   $f1$0 = 0;
   $f2$0 = 328;
   $t$0 = 512;
   break;
  }
 default:
  {
   _jsignal(3);
   $$0 = 0;
   return $$0 | 0;
  }
 }
 $$0 = _fdef(-18, $t$0, $f1$0, $f2$0, $f, $g, $h, 0, 0, 0, 0) | 0;
 return $$0 | 0;
}

function _ztrend($agg$result, $v) {
 $agg$result = $agg$result | 0;
 $v = $v | 0;
 var $0 = 0.0, $17 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $23 = 0.0, $29 = 0.0, $31 = 0, $a$0 = 0.0, $b$0 = 0.0, $p$0$i = 0.0, $zi$0 = 0.0, $zr$0 = 0.0, label = 0;
 $0 = +HEAPF64[$v >> 3];
 $2 = +HEAPF64[$v + 8 >> 3];
 if (!($0 != 0.0 | $2 != 0.0)) {
  $zi$0 = 0.0;
  $zr$0 = 0.0;
  HEAPF64[$agg$result >> 3] = $zr$0;
  $31 = $agg$result + 8 | 0;
  HEAPF64[$31 >> 3] = $zi$0;
  return;
 }
 if (($0 >= 0.0 ? $0 : -$0) > 8988465674311577542806216.0e283) label = 4; else if (($2 >= 0.0 ? $2 : -$2) > 8988465674311577542806216.0e283) label = 4; else {
  $a$0 = $0;
  $b$0 = $2;
 }
 if ((label | 0) == 4) {
  $a$0 = $0 * .5;
  $b$0 = $2 * .5;
 }
 $17 = $a$0 >= 0.0 ? $a$0 : -$a$0;
 $20 = $b$0 >= 0.0 ? $b$0 : -$b$0;
 $21 = $17 < $20;
 $p$0$i = $21 ? $20 : $17;
 if ($p$0$i != 0.0) {
  $23 = ($21 ? $17 : $20) / $p$0$i;
  $29 = $p$0$i * +Math_sqrt(+($23 * $23 + 1.0));
 } else $29 = 0.0;
 $zi$0 = $b$0 / $29;
 $zr$0 = $a$0 / $29;
 HEAPF64[$agg$result >> 3] = $zr$0;
 $31 = $agg$result + 8 | 0;
 HEAPF64[$31 >> 3] = $zi$0;
 return;
}

function _wrdir($f) {
 $f = $f | 0;
 var $0 = 0, $11 = 0, $19 = 0, $27 = 0, $30 = 0, $32 = 0, $33 = 0, $38 = 0, $7 = 0;
 $0 = HEAP32[2088] | 0;
 if (!(HEAP32[$0 + 8 >> 2] | 0)) $7 = HEAP32[616] | 0; else $7 = _raze(_every($0, 476) | 0) | 0;
 if (!$7) return 0;
 HEAP32[2098] = _ftell($f | 0) | 0;
 $11 = _srep(HEAP32[630] | 0, $7) | 0;
 if (!(_wa($f, -1, $11) | 0)) return 0;
 HEAP32[2099] = HEAP32[$11 + 8 >> 2];
 HEAP32[2100] = _ftell($f | 0) | 0;
 $19 = _srep(HEAP32[630] | 0, HEAP32[2084] | 0) | 0;
 if (!(_wa($f, -1, $19) | 0)) return 0;
 HEAP32[2101] = HEAP32[$19 + 8 >> 2];
 if (!(_wa($f, -1, _str(9, 8408) | 0) | 0)) return 0;
 $27 = _ga(4, 4, 1, 0) | 0;
 if (!$27) return 0; else {
  $30 = HEAP32[$27 + 12 >> 2] | 0;
  $32 = $27 + ($30 + 4 + ($30 & 1) << 2) | 0;
  HEAP32[$32 >> 2] = HEAP32[2098];
  HEAP32[$32 + 4 >> 2] = HEAP32[2099];
  HEAP32[$32 + 8 >> 2] = HEAP32[2100];
  HEAP32[$32 + 12 >> 2] = HEAP32[2101];
  $33 = _sc(50) | 0;
  $38 = (_wa($f, 20, _take($33, _srep(HEAP32[630] | 0, $27) | 0) | 0) | 0) == 0;
  return ($38 ? 0 : HEAP32[616] | 0) | 0;
 }
 return 0;
}

function _gconj($a, $w, $0) {
 $a = $a | 0;
 $w = $w | 0;
 $0 = $0 | 0;
 var $$0 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $3 = 0, $30 = 0, $31 = 0, label = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $3 = HEAP32[$a >> 2] | 0;
 if (!($3 & 128)) label = 4; else if (!(HEAP32[$w >> 2] & 32)) label = 4;
 do if ((label | 0) == 4) {
  if ($3 & 32) if (HEAP32[$w >> 2] & 128) break;
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 } while (0);
 $14 = $3 & 1;
 $15 = ($14 | 0) != 0;
 $16 = $15 ? $a : $w;
 $18 = HEAP32[$16 + 8 >> 2] | 0;
 if ((HEAP32[$16 + 12 >> 2] | 0) >= 2) {
  _jsignal(14);
  $$0 = 0;
  return $$0 | 0;
 }
 if (($18 & -2 | 0) != 2) {
  _jsignal(9);
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$16 >> 2] & 32)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 if (($18 | 0) == 3) $30 = $16; else $30 = _link(_scc(91) | 0, $16) | 0;
 $31 = _every($30, 299) | 0;
 if (!$31) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = _fdef($0 << 24 >> 24, 128, $15 ? 306 : 305, $15 ? 308 : 307, $a, $w, $31, 2 - $14 | 0, 127, 127, 127) | 0;
 return $$0 | 0;
}

function _seg($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$sum6 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $28 = 0, $29 = 0, $6 = 0, $m$0 = 0, $n$0 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$a >> 2] & 4)) {
  $m$0 = 0;
  $n$0 = 0;
 } else {
  $6 = HEAP32[$a + 12 >> 2] | 0;
  $$sum6 = $6 + 4 + ($6 & 1) | 0;
  $m$0 = HEAP32[$a + ($$sum6 << 2) >> 2] | 0;
  $n$0 = HEAP32[$a + ($$sum6 + 1 << 2) >> 2] | 0;
 }
 $12 = HEAP32[$w >> 2] | 0;
 $13 = _aii($w) | 0;
 $15 = Math_imul(_bp($12) | 0, $13) | 0;
 $16 = Math_imul($13, $n$0) | 0;
 $17 = $w + 12 | 0;
 $18 = HEAP32[$17 >> 2] | 0;
 $21 = _ga($12, $16, ($18 | 0) < 1 ? 1 : $18, $w + 16 | 0) | 0;
 if (!$21) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$21 + 16 >> 2] = $n$0;
 $25 = HEAP32[$21 + 12 >> 2] | 0;
 $28 = Math_imul($15, $m$0) | 0;
 $29 = HEAP32[$17 >> 2] | 0;
 _memcpy($21 + ($25 + 4 + ($25 & 1) << 2) | 0, $w + ($29 + 4 + ($29 & 1) << 2) + $28 | 0, Math_imul($15, $n$0) | 0) | 0;
 $$0 = $21;
 return $$0 | 0;
}

function _upon2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$sum2 = 0, $12 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $33 = 0, $35 = 0, $4 = 0, $7 = 0, $9 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $$sum2 = $4 + 4 + ($4 & 1) | 0;
 $7 = HEAP32[$self + ($$sum2 + 2 << 2) >> 2] | 0;
 $9 = HEAP32[$self + ($$sum2 + 3 << 2) >> 2] | 0;
 if (!$7) $35 = 0; else {
  $12 = HEAP32[$7 + 12 >> 2] | 0;
  $35 = HEAP32[$7 + ($12 + 4 + ($12 & 1) << 2) >> 2] | 0;
 }
 if (!$9) $33 = 0; else {
  $18 = HEAP32[$9 + 12 >> 2] | 0;
  $33 = HEAP32[$9 + ($18 + 5 + ($18 & 1) << 2) >> 2] | 0;
 }
 $22 = _lr($self) | 0;
 $23 = _rr($self) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($22 | 0) >= (HEAP32[$a + 12 >> 2] | 0)) if (($23 | 0) >= (HEAP32[$w + 12 >> 2] | 0)) {
  $$0 = _gc(ftCall_iii($35 | 0, ftCall_iiii($33 | 0, $a | 0, $w | 0, $9 | 0) | 0, $7 | 0) | 0, $2) | 0;
  return $$0 | 0;
 }
 $$0 = _rank2ex($a, $w, $self, $22, $23, 269) | 0;
 return $$0 | 0;
}

function _hook2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$sum2 = 0, $12 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $33 = 0, $35 = 0, $4 = 0, $7 = 0, $9 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $$sum2 = $4 + 4 + ($4 & 1) | 0;
 $7 = HEAP32[$self + ($$sum2 + 2 << 2) >> 2] | 0;
 $9 = HEAP32[$self + ($$sum2 + 3 << 2) >> 2] | 0;
 if (!$7) $35 = 0; else {
  $12 = HEAP32[$7 + 12 >> 2] | 0;
  $35 = HEAP32[$7 + ($12 + 5 + ($12 & 1) << 2) >> 2] | 0;
 }
 if (!$9) $33 = 0; else {
  $18 = HEAP32[$9 + 12 >> 2] | 0;
  $33 = HEAP32[$9 + ($18 + 4 + ($18 & 1) << 2) >> 2] | 0;
 }
 $22 = _lr($self) | 0;
 $23 = _rr($self) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($22 | 0) >= (HEAP32[$a + 12 >> 2] | 0)) if (($23 | 0) >= (HEAP32[$w + 12 >> 2] | 0)) {
  $$0 = _gc(ftCall_iiii($35 | 0, $a | 0, ftCall_iii($33 | 0, $w | 0, $9 | 0) | 0, $7 | 0) | 0, $2) | 0;
  return $$0 | 0;
 }
 $$0 = _rank2ex($a, $w, $self, $22, $23, 326) | 0;
 return $$0 | 0;
}

function _pinv($w) {
 $w = $w | 0;
 var $$0 = 0, $$sum1 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $23 = 0, $26 = 0, $5 = 0, $8 = 0, $i$05 = 0, $m$0$lcssa = 0, $m$04 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$w + 12 >> 2] | 0) > 1) {
  $$0 = _rank1ex($w, 0, 1, 394) | 0;
  return $$0 | 0;
 }
 $5 = _vi($w) | 0;
 if (!$5) {
  $$0 = 0;
  return $$0 | 0;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0;
 $10 = HEAP32[$5 + 12 >> 2] | 0;
 $$sum1 = $10 + 4 + ($10 & 1) | 0;
 $12 = ($8 | 0) > 0;
 if ($12) {
  $i$05 = 0;
  $m$04 = 0;
  while (1) {
   $14 = HEAP32[$5 + ($$sum1 + $i$05 << 2) >> 2] | 0;
   if (($14 | 0) < 0) {
    $16 = ~$14;
    $26 = ($m$04 | 0) > ($16 | 0) ? $m$04 : $16;
   } else $26 = ($m$04 | 0) > ($14 | 0) ? $m$04 : $14;
   $i$05 = $i$05 + 1 | 0;
   if (($i$05 | 0) == ($8 | 0)) {
    $m$0$lcssa = $26;
    break;
   } else $m$04 = $26;
  }
 } else $m$0$lcssa = 0;
 $21 = $m$0$lcssa + ($12 & 1) | 0;
 $23 = _pfill(_sc($21) | 0, $5) | 0;
 $$0 = _indexof($23, _apv($21, 0, 1) | 0) | 0;
 return $$0 | 0;
}

function _jferase($w) {
 $w = $w | 0;
 var $$0 = 0, $1 = 0, $11 = 0, $17 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $31 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $1 = $w + 12 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (($2 | 0) > 0) {
  $$0 = _rank1ex($w, 0, 0, 422) | 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 32)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $11 = _vs(HEAP32[$w + ($2 + 4 + ($2 & 1) << 2) >> 2] | 0) | 0;
 if (!$11) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$11 + 8 >> 2] | 0)) {
  _jsignal(9);
  $$0 = 0;
  return $$0 | 0;
 }
 $17 = HEAP32[$11 + 12 >> 2] | 0;
 $20 = _fopen($11 + ($17 + 4 + ($17 & 1) << 2) | 0, 8440) | 0;
 if (!$20) {
  _jsignal(7);
  $$0 = 0;
  return $$0 | 0;
 } else {
  _fclose($20 | 0) | 0;
  $22 = HEAP32[$1 >> 2] | 0;
  $25 = HEAP32[$w + ($22 + 4 + ($22 & 1) << 2) >> 2] | 0;
  $27 = HEAP32[$25 + 12 >> 2] | 0;
  $31 = (_unlink($25 + ($27 + 4 + ($27 & 1) << 2) | 0) | 0) != 0;
  $$0 = $31 ? HEAP32[660] | 0 : HEAP32[646] | 0;
  return $$0 | 0;
 }
 return 0;
}

function _compUC($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $$lcssa = 0, $$lcssa28 = 0, $0 = 0, $24 = 0, $28 = 0, $6 = 0, $7 = 0, $i$03 = 0, $p$117 = 0, $x$01 = 0, $y$02 = 0, label = 0;
 $0 = HEAP32[1918] | 0;
 do if (($0 | 0) > 0) {
  $i$03 = 0;
  $x$01 = HEAP32[$a >> 2] | 0;
  $y$02 = HEAP32[$b >> 2] | 0;
  while (1) {
   $6 = HEAP8[$x$01 >> 0] | 0;
   $7 = HEAP8[$y$02 >> 0] | 0;
   if ($6 << 24 >> 24 != $7 << 24 >> 24) {
    $$lcssa = $6;
    $$lcssa28 = $7;
    label = 5;
    break;
   }
   $i$03 = $i$03 + 1 | 0;
   if (($i$03 | 0) >= ($0 | 0)) break; else {
    $x$01 = $x$01 + 1 | 0;
    $y$02 = $y$02 + 1 | 0;
   }
  }
  if ((label | 0) == 5) if ($$lcssa << 24 >> 24 != $$lcssa28 << 24 >> 24) {
   $p$117 = ($$lcssa & 255) - ($$lcssa28 & 255) | 0;
   break;
  }
  $24 = (HEAP32[$a + 4 >> 2] | 0) - (HEAP32[$b + 4 >> 2] | 0) | 0;
  $28 = (($24 | 0) > 0 & 1) - ($24 >>> 31) | 0;
  return $28 | 0;
 } else $p$117 = 0; while (0);
 $28 = (($p$117 | 0) > 0 & 1) - ($p$117 >>> 31) | 0;
 return $28 | 0;
}

function _advform($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $12 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $26 = 0, label = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$a >> 2] | 0;
 if (!($2 & 255)) label = 4; else if (!(HEAP32[$w >> 2] & 512)) label = 4; else $12 = 1;
 do if ((label | 0) == 4) {
  if ($2 & 512) if (HEAP32[$w >> 2] & 255) {
   $12 = 0;
   break;
  }
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 } while (0);
 $16 = $12 ? $w : $a;
 $18 = HEAP32[$16 + 12 >> 2] | 0;
 $22 = HEAP8[$16 + ($18 + 4 + ($18 & 1) << 2) + 31 >> 0] | 0;
 $23 = (HEAP32[($12 ? $a : $w) >> 2] & 32 | 0) == 0;
 if ($23 | $12 ^ 1) label = 9; else if ($22 << 24 >> 24 == -79 | $22 << 24 >> 24 == 96 | $22 << 24 >> 24 == -94) $26 = 1; else label = 9;
 if ((label | 0) == 9) if ($12 | $23) $26 = 0; else if ($22 << 24 >> 24 == 96) $26 = 2; else $26 = $22 << 24 >> 24 == -111 ? 2 : 0;
 $$0 = _fdef(-20, 256, 337, 0, $a, $w, 0, $26, 0, 0, 0) | 0;
 return $$0 | 0;
}

function _coerce2($a, $w, $mt) {
 $a = $a | 0;
 $w = $w | 0;
 $mt = $mt | 0;
 var $$0 = 0, $0 = 0, $12 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0;
 $0 = HEAP32[$a >> 2] | 0;
 if (!$0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w >> 2] | 0;
 if (!$2) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$0 + 8 >> 2] | 0)) $12 = 0; else $12 = HEAP32[$0 >> 2] | 0;
 if (!(HEAP32[$2 + 8 >> 2] | 0)) $14 = 0; else $14 = HEAP32[$2 >> 2] | 0;
 $15 = ($12 | 0) > ($14 | 0) ? $12 : $14;
 $17 = ($15 | 0) > ($mt | 0) ? $15 : $mt;
 if (!$17) {
  $19 = HEAP32[$0 >> 2] | 0;
  $20 = HEAP32[$2 >> 2] | 0;
  $$0 = ($19 | 0) > ($20 | 0) ? $19 : $20;
  return $$0 | 0;
 }
 if (($17 | 0) != ($12 | 0)) {
  $23 = _cvt($17, $0) | 0;
  HEAP32[$a >> 2] = $23;
  if (!$23) {
   $$0 = 0;
   return $$0 | 0;
  }
 }
 if (($17 | 0) != ($14 | 0)) {
  $27 = _cvt($17, HEAP32[$w >> 2] | 0) | 0;
  HEAP32[$w >> 2] = $27;
  if (!$27) {
   $$0 = 0;
   return $$0 | 0;
  }
 }
 $$0 = $17;
 return $$0 | 0;
}

function _save2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0$i = 0, $12 = 0, $15 = 0, $2 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 if ((HEAP32[$w + 8 >> 2] | 0) > 1) {
  $$0$i = _rank2ex($a, $w, 0, 0, 0, 426) | 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 if (!(HEAP32[$a >> 2] & 32)) {
  _jsignal(3);
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 $12 = _wopen($w, 2) | 0;
 if (!$12) {
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 HEAP32[$vararg_buffer >> 2] = 20;
 _sprintf(411, 8328, $vararg_buffer) | 0;
 $15 = _save2f($12, _every($a, 475) | 0) | 0;
 _fclose($12 | 0) | 0;
 HEAP8[411] = HEAP8[8344] | 0;
 HEAP8[412] = HEAP8[8345] | 0;
 HEAP8[413] = HEAP8[8346] | 0;
 $$0$i = _gc($15, $2) | 0;
 STACKTOP = sp;
 return $$0$i | 0;
}

function _wnc($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0$i = 0, $12 = 0, $15 = 0, $2 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 if ((HEAP32[$w + 8 >> 2] | 0) > 1) {
  $$0$i = _rank2ex($a, $w, 0, 0, 0, 423) | 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 if (!(HEAP32[$a >> 2] & 32)) {
  _jsignal(3);
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 $12 = _wopen($w, 1) | 0;
 if (!$12) {
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 HEAP32[$vararg_buffer >> 2] = 20;
 _sprintf(411, 8328, $vararg_buffer) | 0;
 $15 = _wncf($12, _every($a, 475) | 0) | 0;
 _fclose($12 | 0) | 0;
 HEAP8[411] = HEAP8[8344] | 0;
 HEAP8[412] = HEAP8[8345] | 0;
 HEAP8[413] = HEAP8[8346] | 0;
 $$0$i = _gc($15, $2) | 0;
 STACKTOP = sp;
 return $$0$i | 0;
}

function _wex($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0$i = 0, $12 = 0, $15 = 0, $2 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 if ((HEAP32[$w + 8 >> 2] | 0) > 1) {
  $$0$i = _rank2ex($a, $w, 0, 0, 0, 433) | 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 if (!(HEAP32[$a >> 2] & 32)) {
  _jsignal(3);
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 $12 = _wopen($w, 2) | 0;
 if (!$12) {
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 HEAP32[$vararg_buffer >> 2] = 20;
 _sprintf(411, 8328, $vararg_buffer) | 0;
 $15 = _wexf($12, _every($a, 475) | 0) | 0;
 _fclose($12 | 0) | 0;
 HEAP8[411] = HEAP8[8344] | 0;
 HEAP8[412] = HEAP8[8345] | 0;
 HEAP8[413] = HEAP8[8346] | 0;
 $$0$i = _gc($15, $2) | 0;
 STACKTOP = sp;
 return $$0$i | 0;
}

function _ad1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$sum1 = 0, $1 = 0, $15 = 0, $19 = 0, $20 = 0, $26 = 0, $27 = 0, $29 = 0, $4 = 0, $6 = 0, $9 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $4 = HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0;
 $6 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 if (!$4) $26 = 0; else {
  $9 = HEAP32[$4 + 12 >> 2] | 0;
  $26 = HEAP32[$4 + ($9 + 4 + ($9 & 1) << 2) >> 2] | 0;
 }
 if (!$6) $29 = 0; else {
  $15 = HEAP32[$6 + 12 >> 2] | 0;
  $29 = HEAP32[$6 + ($15 + 4 + ($15 & 1) << 2) >> 2] | 0;
 }
 $19 = HEAP8[2368] | 0;
 $20 = _mr($self) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($20 | 0) < (HEAP32[$w + 12 >> 2] | 0)) {
  $$0 = _rank1ex($w, $self, $20, 272) | 0;
  return $$0 | 0;
 }
 HEAP8[2368] = 0;
 $27 = ftCall_iii($26 | 0, $w | 0, $4 | 0) | 0;
 HEAP8[2368] = $19;
 HEAP8[2472] = 0;
 if ($27) {
  $$0 = $27;
  return $$0 | 0;
 }
 $$0 = ftCall_iii($29 | 0, $w | 0, $6 | 0) | 0;
 return $$0 | 0;
}

function _dot($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$sum5 = 0, $19 = 0, $26 = 0, $28 = 0, $37 = 0, $38 = 0, $8 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$a >> 2] & 128 & HEAP32[$w >> 2])) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $8 = HEAP32[$w + 12 >> 2] | 0;
 if ((HEAP8[$w + ($8 + 4 + ($8 & 1) << 2) + 31 >> 0] | 0) == 42) if (!(_lr($w) | 0)) if (!(_rr($w) | 0)) {
  $19 = HEAP32[$a + 12 >> 2] | 0;
  $$sum5 = $19 + 4 + ($19 & 1) | 0;
  if ((HEAP8[$a + ($$sum5 << 2) + 31 >> 0] | 0) == 47) {
   $26 = HEAP32[$a + ($$sum5 + 2 << 2) >> 2] | 0;
   $28 = HEAP32[$26 + 12 >> 2] | 0;
   if ((HEAP8[$26 + ($28 + 4 + ($28 & 1) << 2) + 31 >> 0] | 0) == 43) if (!(_lr($26) | 0)) {
    $37 = (_rr($26) | 0) != 0;
    $38 = $37 ? 275 : 274;
   } else $38 = 275; else $38 = 275;
  } else $38 = 275;
 } else $38 = 275; else $38 = 275; else $38 = 275;
 $$0 = _fdef(46, 128, 276, $38, $a, $w, 0, 0, 2, 127, 127) | 0;
 return $$0 | 0;
}

function _psave2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0$i = 0, $12 = 0, $2 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 if ((HEAP32[$w + 8 >> 2] | 0) > 1) {
  $$0$i = _rank2ex($a, $w, 0, 0, 0, 428) | 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 if (!(HEAP32[$a >> 2] & 32)) {
  _jsignal(3);
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 $12 = _wopen($w, 2) | 0;
 if (!$12) {
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 HEAP32[$vararg_buffer >> 2] = 20;
 _sprintf(411, 8328, $vararg_buffer) | 0;
 _every($a, 475) | 0;
 _jsignal(11);
 _fclose($12 | 0) | 0;
 HEAP8[411] = HEAP8[8344] | 0;
 HEAP8[412] = HEAP8[8345] | 0;
 HEAP8[413] = HEAP8[8346] | 0;
 $$0$i = _gc(0, $2) | 0;
 STACKTOP = sp;
 return $$0$i | 0;
}

function _every($w, $f) {
 $w = $w | 0;
 $f = $f | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $18 = 0, $3 = 0, $6 = 0, $9 = 0, $i$06 = 0, $v$05 = 0, $x$04 = 0, label = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $1 = $w + 8 | 0;
 $3 = $w + 12 | 0;
 $6 = _ga(32, HEAP32[$1 >> 2] | 0, HEAP32[$3 >> 2] | 0, $w + 16 | 0) | 0;
 if (!$6) {
  $$0 = 0;
  return $$0 | 0;
 }
 $9 = HEAP32[$6 + 12 >> 2] | 0;
 $10 = HEAP32[$3 >> 2] | 0;
 $11 = HEAP32[$1 >> 2] | 0;
 if (($11 | 0) <= 0) {
  $$0 = $6;
  return $$0 | 0;
 }
 $i$06 = 0;
 $v$05 = $w + ($10 + 4 + ($10 & 1) << 2) | 0;
 $x$04 = $6 + ($9 + 4 + ($9 & 1) << 2) | 0;
 while (1) {
  $18 = ftCall_ii($f | 0, HEAP32[$v$05 >> 2] | 0) | 0;
  HEAP32[$x$04 >> 2] = $18;
  if (!$18) {
   $$0 = 0;
   label = 7;
   break;
  }
  $i$06 = $i$06 + 1 | 0;
  if (($i$06 | 0) >= ($11 | 0)) {
   $$0 = $6;
   label = 7;
   break;
  } else {
   $v$05 = $v$05 + 4 | 0;
   $x$04 = $x$04 + 4 | 0;
  }
 }
 if ((label | 0) == 7) return $$0 | 0;
 return 0;
}

function _icvt($w) {
 $w = $w | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $17 = 0.0, $3 = 0, $6 = 0, $9 = 0, $i$07 = 0, $u$06 = 0, $v$05 = 0, label = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $1 = $w + 8 | 0;
 $3 = $w + 12 | 0;
 $6 = _ga(4, HEAP32[$1 >> 2] | 0, HEAP32[$3 >> 2] | 0, $w + 16 | 0) | 0;
 if (!$6) {
  $$0 = 0;
  return $$0 | 0;
 }
 $9 = HEAP32[$6 + 12 >> 2] | 0;
 $10 = HEAP32[$3 >> 2] | 0;
 $11 = HEAP32[$1 >> 2] | 0;
 if (($11 | 0) <= 0) {
  $$0 = $6;
  return $$0 | 0;
 }
 $i$07 = 0;
 $u$06 = $6 + ($9 + 4 + ($9 & 1) << 2) | 0;
 $v$05 = $w + ($10 + 4 + ($10 & 1) << 2) | 0;
 while (1) {
  $17 = +HEAPF64[$v$05 >> 3];
  if ($17 < -2147483648.0 | $17 > 2147483647.0) {
   $$0 = $w;
   label = 7;
   break;
  }
  HEAP32[$u$06 >> 2] = ~~$17;
  $i$07 = $i$07 + 1 | 0;
  if (($i$07 | 0) >= ($11 | 0)) {
   $$0 = $6;
   label = 7;
   break;
  } else {
   $u$06 = $u$06 + 4 | 0;
   $v$05 = $v$05 + 8 | 0;
  }
 }
 if ((label | 0) == 7) return $$0 | 0;
 return 0;
}

function _compI($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $$lcssa = 0, $$lcssa24 = 0, $0 = 0, $22 = 0, $26 = 0, $6 = 0, $7 = 0, $i$03 = 0, $p$113 = 0, $x$01 = 0, $y$02 = 0, label = 0;
 $0 = HEAP32[1918] | 0;
 do if (($0 | 0) > 0) {
  $i$03 = 0;
  $x$01 = HEAP32[$a >> 2] | 0;
  $y$02 = HEAP32[$b >> 2] | 0;
  while (1) {
   $6 = HEAP32[$x$01 >> 2] | 0;
   $7 = HEAP32[$y$02 >> 2] | 0;
   if (($6 | 0) != ($7 | 0)) {
    $$lcssa = $6;
    $$lcssa24 = $7;
    label = 5;
    break;
   }
   $i$03 = $i$03 + 1 | 0;
   if (($i$03 | 0) >= ($0 | 0)) break; else {
    $x$01 = $x$01 + 4 | 0;
    $y$02 = $y$02 + 4 | 0;
   }
  }
  if ((label | 0) == 5) if (($$lcssa | 0) != ($$lcssa24 | 0)) {
   $p$113 = $$lcssa - $$lcssa24 | 0;
   break;
  }
  $22 = (HEAP32[$a + 4 >> 2] | 0) - (HEAP32[$b + 4 >> 2] | 0) | 0;
  $26 = (($22 | 0) > 0 & 1) - ($22 >>> 31) | 0;
  return $26 | 0;
 } else $p$113 = 0; while (0);
 $26 = (($p$113 | 0) > 0 & 1) - ($p$113 >>> 31) | 0;
 return $26 | 0;
}

function _powop($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $13 = 0, $5 = 0, $8 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $5 = HEAP32[$w >> 2] | 0;
 $8 = ($5 >>> 7 & 1 | (HEAP32[$a >> 2] | 0) >>> 6 & 2) ^ 3;
 if (!$8) {
  $$0 = _fdef(-111, 128, 314, 315, $a, $w, 0, 0, 127, 127, 127) | 0;
  return $$0 | 0;
 } else if (($8 | 0) == 1) {
  if ($5 & 32) {
   $$0 = _gconj($a, $w, -111) | 0;
   return $$0 | 0;
  }
  $13 = _vib(_sc(2147483647) | 0, $w) | 0;
  if (!$13) {
   $$0 = 0;
   return $$0 | 0;
  }
  if (!(HEAP32[$13 + 12 >> 2] | 0)) if ((HEAP32[$13 + 16 >> 2] | 0) == -1) if (!((_nameless($a) | 0) << 24 >> 24)) {
   $$0 = _fdef(-111, 128, 313, 0, $a, $w, 0, 0, 127, 127, 127) | 0;
   return $$0 | 0;
  } else {
   $$0 = _inv($a) | 0;
   return $$0 | 0;
  }
  $$0 = _fdef(-111, 128, 311, 312, $a, $w, $13, 0, 127, 127, 127) | 0;
  return $$0 | 0;
 } else {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function _jtymes($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0, $u$byval_copy = 0, $v$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $v$byval_copy = sp + 32 | 0;
 $u$byval_copy = sp + 16 | 0;
 $0 = sp;
 HEAP32[$u$byval_copy >> 2] = HEAP32[$u >> 2];
 HEAP32[$u$byval_copy + 4 >> 2] = HEAP32[$u + 4 >> 2];
 HEAP32[$u$byval_copy + 8 >> 2] = HEAP32[$u + 8 >> 2];
 HEAP32[$u$byval_copy + 12 >> 2] = HEAP32[$u + 12 >> 2];
 HEAP32[$v$byval_copy >> 2] = HEAP32[$v >> 2];
 HEAP32[$v$byval_copy + 4 >> 2] = HEAP32[$v + 4 >> 2];
 HEAP32[$v$byval_copy + 8 >> 2] = HEAP32[$v + 8 >> 2];
 HEAP32[$v$byval_copy + 12 >> 2] = HEAP32[$v + 12 >> 2];
 _ztymes($0, $u$byval_copy, $v$byval_copy);
 HEAP32[$x >> 2] = HEAP32[$0 >> 2];
 HEAP32[$x + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$x + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$x + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 STACKTOP = sp;
 return;
}

function _jminus($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0, $u$byval_copy = 0, $v$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $v$byval_copy = sp + 32 | 0;
 $u$byval_copy = sp + 16 | 0;
 $0 = sp;
 HEAP32[$u$byval_copy >> 2] = HEAP32[$u >> 2];
 HEAP32[$u$byval_copy + 4 >> 2] = HEAP32[$u + 4 >> 2];
 HEAP32[$u$byval_copy + 8 >> 2] = HEAP32[$u + 8 >> 2];
 HEAP32[$u$byval_copy + 12 >> 2] = HEAP32[$u + 12 >> 2];
 HEAP32[$v$byval_copy >> 2] = HEAP32[$v >> 2];
 HEAP32[$v$byval_copy + 4 >> 2] = HEAP32[$v + 4 >> 2];
 HEAP32[$v$byval_copy + 8 >> 2] = HEAP32[$v + 8 >> 2];
 HEAP32[$v$byval_copy + 12 >> 2] = HEAP32[$v + 12 >> 2];
 _zminus($0, $u$byval_copy, $v$byval_copy);
 HEAP32[$x >> 2] = HEAP32[$0 >> 2];
 HEAP32[$x + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$x + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$x + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 STACKTOP = sp;
 return;
}

function _jbin($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0, $u$byval_copy = 0, $v$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $v$byval_copy = sp + 32 | 0;
 $u$byval_copy = sp + 16 | 0;
 $0 = sp;
 HEAP32[$u$byval_copy >> 2] = HEAP32[$u >> 2];
 HEAP32[$u$byval_copy + 4 >> 2] = HEAP32[$u + 4 >> 2];
 HEAP32[$u$byval_copy + 8 >> 2] = HEAP32[$u + 8 >> 2];
 HEAP32[$u$byval_copy + 12 >> 2] = HEAP32[$u + 12 >> 2];
 HEAP32[$v$byval_copy >> 2] = HEAP32[$v >> 2];
 HEAP32[$v$byval_copy + 4 >> 2] = HEAP32[$v + 4 >> 2];
 HEAP32[$v$byval_copy + 8 >> 2] = HEAP32[$v + 8 >> 2];
 HEAP32[$v$byval_copy + 12 >> 2] = HEAP32[$v + 12 >> 2];
 _znonce2($0, $u$byval_copy, $v$byval_copy);
 HEAP32[$x >> 2] = HEAP32[$0 >> 2];
 HEAP32[$x + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$x + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$x + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 STACKTOP = sp;
 return;
}

function _aii($w) {
 $w = $w | 0;
 var $1 = 0, $10 = 0, $18 = 0, $19 = 0, $4 = 0, $9 = 0, $i$04$i = 0, $i1$03$i = 0, $z$02$i = 0, label = 0;
 $1 = HEAP32[$w + 12 >> 2] | 0;
 if (!$1) $9 = 1; else {
  $4 = HEAP32[$w + 16 >> 2] | 0;
  if (!$4) {
   $10 = $1 + -1 | 0;
   if (($1 | 0) > 1) $i$04$i = 0; else {
    $19 = 1;
    return $19 | 0;
   }
   while (1) {
    $i$04$i = $i$04$i + 1 | 0;
    if (!(HEAP32[$w + 16 + ($i$04$i << 2) >> 2] | 0)) {
     $19 = 0;
     label = 8;
     break;
    }
    if (($i$04$i | 0) >= ($10 | 0)) {
     $i1$03$i = 0;
     $z$02$i = 1;
     break;
    }
   }
   if ((label | 0) == 8) return $19 | 0;
   while (1) {
    $i1$03$i = $i1$03$i + 1 | 0;
    $18 = Math_imul(HEAP32[$w + 16 + ($i1$03$i << 2) >> 2] | 0, $z$02$i) | 0;
    if (($i1$03$i | 0) == ($10 | 0)) {
     $19 = $18;
     break;
    } else $z$02$i = $18;
   }
   return $19 | 0;
  } else $9 = $4;
 }
 $19 = (HEAP32[$w + 8 >> 2] | 0) / ($9 | 0) | 0;
 return $19 | 0;
}

function _jplus($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0, $u$byval_copy = 0, $v$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $v$byval_copy = sp + 32 | 0;
 $u$byval_copy = sp + 16 | 0;
 $0 = sp;
 HEAP32[$u$byval_copy >> 2] = HEAP32[$u >> 2];
 HEAP32[$u$byval_copy + 4 >> 2] = HEAP32[$u + 4 >> 2];
 HEAP32[$u$byval_copy + 8 >> 2] = HEAP32[$u + 8 >> 2];
 HEAP32[$u$byval_copy + 12 >> 2] = HEAP32[$u + 12 >> 2];
 HEAP32[$v$byval_copy >> 2] = HEAP32[$v >> 2];
 HEAP32[$v$byval_copy + 4 >> 2] = HEAP32[$v + 4 >> 2];
 HEAP32[$v$byval_copy + 8 >> 2] = HEAP32[$v + 8 >> 2];
 HEAP32[$v$byval_copy + 12 >> 2] = HEAP32[$v + 12 >> 2];
 _zplus($0, $u$byval_copy, $v$byval_copy);
 HEAP32[$x >> 2] = HEAP32[$0 >> 2];
 HEAP32[$x + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$x + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$x + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 STACKTOP = sp;
 return;
}

function _jrem($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0, $u$byval_copy = 0, $v$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $v$byval_copy = sp + 32 | 0;
 $u$byval_copy = sp + 16 | 0;
 $0 = sp;
 HEAP32[$u$byval_copy >> 2] = HEAP32[$u >> 2];
 HEAP32[$u$byval_copy + 4 >> 2] = HEAP32[$u + 4 >> 2];
 HEAP32[$u$byval_copy + 8 >> 2] = HEAP32[$u + 8 >> 2];
 HEAP32[$u$byval_copy + 12 >> 2] = HEAP32[$u + 12 >> 2];
 HEAP32[$v$byval_copy >> 2] = HEAP32[$v >> 2];
 HEAP32[$v$byval_copy + 4 >> 2] = HEAP32[$v + 4 >> 2];
 HEAP32[$v$byval_copy + 8 >> 2] = HEAP32[$v + 8 >> 2];
 HEAP32[$v$byval_copy + 12 >> 2] = HEAP32[$v + 12 >> 2];
 _zrem($0, $u$byval_copy, $v$byval_copy);
 HEAP32[$x >> 2] = HEAP32[$0 >> 2];
 HEAP32[$x + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$x + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$x + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 STACKTOP = sp;
 return;
}

function _jpow($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0, $u$byval_copy = 0, $v$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $v$byval_copy = sp + 32 | 0;
 $u$byval_copy = sp + 16 | 0;
 $0 = sp;
 HEAP32[$u$byval_copy >> 2] = HEAP32[$u >> 2];
 HEAP32[$u$byval_copy + 4 >> 2] = HEAP32[$u + 4 >> 2];
 HEAP32[$u$byval_copy + 8 >> 2] = HEAP32[$u + 8 >> 2];
 HEAP32[$u$byval_copy + 12 >> 2] = HEAP32[$u + 12 >> 2];
 HEAP32[$v$byval_copy >> 2] = HEAP32[$v >> 2];
 HEAP32[$v$byval_copy + 4 >> 2] = HEAP32[$v + 4 >> 2];
 HEAP32[$v$byval_copy + 8 >> 2] = HEAP32[$v + 8 >> 2];
 HEAP32[$v$byval_copy + 12 >> 2] = HEAP32[$v + 12 >> 2];
 _zpow($0, $u$byval_copy, $v$byval_copy);
 HEAP32[$x >> 2] = HEAP32[$0 >> 2];
 HEAP32[$x + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$x + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$x + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 STACKTOP = sp;
 return;
}

function _jlcm($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0, $u$byval_copy = 0, $v$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $v$byval_copy = sp + 32 | 0;
 $u$byval_copy = sp + 16 | 0;
 $0 = sp;
 HEAP32[$u$byval_copy >> 2] = HEAP32[$u >> 2];
 HEAP32[$u$byval_copy + 4 >> 2] = HEAP32[$u + 4 >> 2];
 HEAP32[$u$byval_copy + 8 >> 2] = HEAP32[$u + 8 >> 2];
 HEAP32[$u$byval_copy + 12 >> 2] = HEAP32[$u + 12 >> 2];
 HEAP32[$v$byval_copy >> 2] = HEAP32[$v >> 2];
 HEAP32[$v$byval_copy + 4 >> 2] = HEAP32[$v + 4 >> 2];
 HEAP32[$v$byval_copy + 8 >> 2] = HEAP32[$v + 8 >> 2];
 HEAP32[$v$byval_copy + 12 >> 2] = HEAP32[$v + 12 >> 2];
 _zlcm($0, $u$byval_copy, $v$byval_copy);
 HEAP32[$x >> 2] = HEAP32[$0 >> 2];
 HEAP32[$x + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$x + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$x + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 STACKTOP = sp;
 return;
}

function _jgcd($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0, $u$byval_copy = 0, $v$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $v$byval_copy = sp + 32 | 0;
 $u$byval_copy = sp + 16 | 0;
 $0 = sp;
 HEAP32[$u$byval_copy >> 2] = HEAP32[$u >> 2];
 HEAP32[$u$byval_copy + 4 >> 2] = HEAP32[$u + 4 >> 2];
 HEAP32[$u$byval_copy + 8 >> 2] = HEAP32[$u + 8 >> 2];
 HEAP32[$u$byval_copy + 12 >> 2] = HEAP32[$u + 12 >> 2];
 HEAP32[$v$byval_copy >> 2] = HEAP32[$v >> 2];
 HEAP32[$v$byval_copy + 4 >> 2] = HEAP32[$v + 4 >> 2];
 HEAP32[$v$byval_copy + 8 >> 2] = HEAP32[$v + 8 >> 2];
 HEAP32[$v$byval_copy + 12 >> 2] = HEAP32[$v + 12 >> 2];
 _zgcd($0, $u$byval_copy, $v$byval_copy);
 HEAP32[$x >> 2] = HEAP32[$0 >> 2];
 HEAP32[$x + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$x + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$x + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 STACKTOP = sp;
 return;
}

function _jdiv($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0, $u$byval_copy = 0, $v$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $v$byval_copy = sp + 32 | 0;
 $u$byval_copy = sp + 16 | 0;
 $0 = sp;
 HEAP32[$u$byval_copy >> 2] = HEAP32[$u >> 2];
 HEAP32[$u$byval_copy + 4 >> 2] = HEAP32[$u + 4 >> 2];
 HEAP32[$u$byval_copy + 8 >> 2] = HEAP32[$u + 8 >> 2];
 HEAP32[$u$byval_copy + 12 >> 2] = HEAP32[$u + 12 >> 2];
 HEAP32[$v$byval_copy >> 2] = HEAP32[$v >> 2];
 HEAP32[$v$byval_copy + 4 >> 2] = HEAP32[$v + 4 >> 2];
 HEAP32[$v$byval_copy + 8 >> 2] = HEAP32[$v + 8 >> 2];
 HEAP32[$v$byval_copy + 12 >> 2] = HEAP32[$v + 12 >> 2];
 _zdiv($0, $u$byval_copy, $v$byval_copy);
 HEAP32[$x >> 2] = HEAP32[$0 >> 2];
 HEAP32[$x + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$x + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$x + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 STACKTOP = sp;
 return;
}

function _jcir($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0, $u$byval_copy = 0, $v$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $v$byval_copy = sp + 32 | 0;
 $u$byval_copy = sp + 16 | 0;
 $0 = sp;
 HEAP32[$u$byval_copy >> 2] = HEAP32[$u >> 2];
 HEAP32[$u$byval_copy + 4 >> 2] = HEAP32[$u + 4 >> 2];
 HEAP32[$u$byval_copy + 8 >> 2] = HEAP32[$u + 8 >> 2];
 HEAP32[$u$byval_copy + 12 >> 2] = HEAP32[$u + 12 >> 2];
 HEAP32[$v$byval_copy >> 2] = HEAP32[$v >> 2];
 HEAP32[$v$byval_copy + 4 >> 2] = HEAP32[$v + 4 >> 2];
 HEAP32[$v$byval_copy + 8 >> 2] = HEAP32[$v + 8 >> 2];
 HEAP32[$v$byval_copy + 12 >> 2] = HEAP32[$v + 12 >> 2];
 _zcir($0, $u$byval_copy, $v$byval_copy);
 HEAP32[$x >> 2] = HEAP32[$0 >> 2];
 HEAP32[$x + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$x + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$x + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 STACKTOP = sp;
 return;
}

function _powv2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$sum2 = 0, $12 = 0, $16 = 0, $17 = 0, $2 = 0, $27 = 0, $28 = 0, $4 = 0, $7 = 0, $9 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $$sum2 = $4 + 4 + ($4 & 1) | 0;
 $7 = HEAP32[$self + ($$sum2 + 2 << 2) >> 2] | 0;
 $9 = HEAP32[$self + ($$sum2 + 3 << 2) >> 2] | 0;
 if (!$9) $28 = 0; else {
  $12 = HEAP32[$9 + 12 >> 2] | 0;
  $28 = HEAP32[$9 + ($12 + 5 + ($12 & 1) << 2) >> 2] | 0;
 }
 $16 = _lr($self) | 0;
 $17 = _rr($self) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($16 | 0) >= (HEAP32[$a + 12 >> 2] | 0)) if (($17 | 0) >= (HEAP32[$w + 12 >> 2] | 0)) {
  $27 = _amp($a, $7) | 0;
  $$0 = _gc(_df1($w, _powop($27, ftCall_iiii($28 | 0, $a | 0, $w | 0, $9 | 0) | 0) | 0) | 0, $2) | 0;
  return $$0 | 0;
 }
 $$0 = _rank2ex($a, $w, $self, $16, $17, 315) | 0;
 return $$0 | 0;
}

function _hook1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$sum1 = 0, $12 = 0, $18 = 0, $2 = 0, $22 = 0, $28 = 0, $30 = 0, $4 = 0, $7 = 0, $9 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $4 + 4 + ($4 & 1) | 0;
 $7 = HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0;
 $9 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 if (!$7) $30 = 0; else {
  $12 = HEAP32[$7 + 12 >> 2] | 0;
  $30 = HEAP32[$7 + ($12 + 5 + ($12 & 1) << 2) >> 2] | 0;
 }
 if (!$9) $28 = 0; else {
  $18 = HEAP32[$9 + 12 >> 2] | 0;
  $28 = HEAP32[$9 + ($18 + 4 + ($18 & 1) << 2) >> 2] | 0;
 }
 $22 = _mr($self) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($22 | 0) < (HEAP32[$w + 12 >> 2] | 0)) {
  $$0 = _rank1ex($w, $self, $22, 325) | 0;
  return $$0 | 0;
 } else {
  $$0 = _gc(ftCall_iiii($30 | 0, $w | 0, ftCall_iii($28 | 0, $w | 0, $9 | 0) | 0, $7 | 0) | 0, $2) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _fdef($0, $t, $f1, $f2, $fs, $gs, $hs, $flag, $m, $l, $r) {
 $0 = $0 | 0;
 $t = $t | 0;
 $f1 = $f1 | 0;
 $f2 = $f2 | 0;
 $fs = $fs | 0;
 $gs = $gs | 0;
 $hs = $hs | 0;
 $flag = $flag | 0;
 $m = $m | 0;
 $l = $l | 0;
 $r = $r | 0;
 var $$0 = 0, $$sum1 = 0, $1 = 0, $4 = 0, $6 = 0;
 $1 = _ga($t, 1, 0, 0) | 0;
 if (!$1) {
  $$0 = 0;
  return $$0 | 0;
 }
 $4 = HEAP32[$1 + 12 >> 2] | 0;
 $$sum1 = $4 + 4 + ($4 & 1) | 0;
 $6 = $1 + ($$sum1 << 2) | 0;
 HEAP32[$6 >> 2] = ($f1 | 0) != 0 ? $f1 : 262;
 HEAP32[$1 + ($$sum1 + 1 << 2) >> 2] = ($f2 | 0) != 0 ? $f2 : 262;
 HEAP32[$1 + ($$sum1 + 2 << 2) >> 2] = $fs;
 HEAP32[$1 + ($$sum1 + 3 << 2) >> 2] = $gs;
 HEAP32[$1 + ($$sum1 + 4 << 2) >> 2] = $hs;
 HEAP32[$1 + ($$sum1 + 5 << 2) >> 2] = 0;
 HEAP32[$1 + ($$sum1 + 6 << 2) >> 2] = $flag;
 HEAP8[$1 + ($$sum1 + 7 << 2) >> 0] = $m;
 HEAP8[$6 + 29 >> 0] = $l;
 HEAP8[$6 + 30 >> 0] = $r;
 HEAP8[$6 + 31 >> 0] = $0;
 $$0 = $1;
 return $$0 | 0;
}

function _rank1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$sum1 = 0, $1 = 0, $13 = 0, $15 = 0, $17 = 0, $20 = 0, $22 = 0, $26 = 0, $28 = 0, $4 = 0, $7 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $4 = HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0;
 if (!$4) $28 = 0; else {
  $7 = HEAP32[$4 + 12 >> 2] | 0;
  $28 = HEAP32[$4 + ($7 + 4 + ($7 & 1) << 2) >> 2] | 0;
 }
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $13 = HEAP32[$w + 12 >> 2] | 0;
 $15 = HEAP32[$self + ($$sum1 + 4 << 2) >> 2] | 0;
 $17 = HEAP32[$15 + 12 >> 2] | 0;
 $20 = HEAP32[$15 + ($17 + 4 + ($17 & 1) << 2) >> 2] | 0;
 if (($20 | 0) < 0) {
  $22 = $20 + $13 | 0;
  $26 = ($22 | 0) < 0 ? 0 : $22;
 } else $26 = ($20 | 0) < ($13 | 0) ? $20 : $13;
 if (($26 | 0) < ($13 | 0)) {
  $$0 = _rank1ex($w, $4, $26, $28) | 0;
  return $$0 | 0;
 } else {
  $$0 = ftCall_iii($28 | 0, $w | 0, $4 | 0) | 0;
  return $$0 | 0;
 }
 return 0;
}

function ___remdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $rem = __stackBase__ | 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 ___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, $rem) | 0;
 $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
 $10$1 = tempRet0;
 STACKTOP = __stackBase__;
 return (tempRet0 = $10$1, $10$0) | 0;
}

function _on1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$sum1 = 0, $12 = 0, $18 = 0, $2 = 0, $22 = 0, $28 = 0, $30 = 0, $4 = 0, $7 = 0, $9 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $4 + 4 + ($4 & 1) | 0;
 $7 = HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0;
 $9 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 if (!$7) $30 = 0; else {
  $12 = HEAP32[$7 + 12 >> 2] | 0;
  $30 = HEAP32[$7 + ($12 + 4 + ($12 & 1) << 2) >> 2] | 0;
 }
 if (!$9) $28 = 0; else {
  $18 = HEAP32[$9 + 12 >> 2] | 0;
  $28 = HEAP32[$9 + ($18 + 4 + ($18 & 1) << 2) >> 2] | 0;
 }
 $22 = _mr($self) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($22 | 0) < (HEAP32[$w + 12 >> 2] | 0)) {
  $$0 = _rank1ex($w, $self, $22, 265) | 0;
  return $$0 | 0;
 } else {
  $$0 = _gc(ftCall_iii($30 | 0, ftCall_iii($28 | 0, $w | 0, $9 | 0) | 0, $7 | 0) | 0, $2) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _vmonad($agg$result, $b, $e, $stack) {
 $agg$result = $agg$result | 0;
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 var $1 = 0, $16 = 0, $3 = 0, $5 = 0, $9 = 0, $z$sroa$0$0 = 0, $z$sroa$3$0 = 0;
 $1 = HEAP32[$stack + ($e << 3) + 4 >> 2] | 0;
 $3 = HEAP32[$stack + ($b << 3) >> 2] | 0;
 do if (!$1) {
  $z$sroa$0$0 = _df1(HEAP32[$stack + ($e << 3) >> 2] | 0, $3) | 0;
  $z$sroa$3$0 = 0;
 } else {
  $5 = HEAP32[646] | 0;
  if ((HEAP32[830] | 0) == 1) {
   $9 = HEAP32[$1 + 12 >> 2] | 0;
   if ((HEAP8[$1 + ($9 + 4 + ($9 & 1) << 2) + 31 >> 0] | 0) == 93) {
    $16 = HEAP32[$3 + 12 >> 2] | 0;
    if ((HEAP8[$3 + ($16 + 11 + ($16 & 1) << 2) >> 0] | 0) == 127) {
     $z$sroa$0$0 = $5;
     $z$sroa$3$0 = $3;
     break;
    }
   }
  }
  $z$sroa$0$0 = $5;
  $z$sroa$3$0 = _folk(_ds(-87) | 0, $3, $1) | 0;
 } while (0);
 HEAP32[$agg$result >> 2] = $z$sroa$0$0;
 HEAP32[$agg$result + 4 >> 2] = $z$sroa$3$0;
 return;
}

function _ilcm($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $12 = 0, $17 = 0, $22 = 0.0, $6 = 0, $9 = 0, $a$tr1$i = 0, $b$tr$lcssa$i = 0, $b$tr2$i = 0, $b$tr2$i$phi = 0;
 $0 = HEAP32[$u >> 2] | 0;
 $1 = HEAP32[$v >> 2] | 0;
 if (!(($0 | 0) != 0 & ($1 | 0) != 0)) {
  $22 = 0.0;
  HEAPF64[$x >> 3] = $22;
  return;
 }
 $6 = ($1 | 0) > -1 ? $1 : 0 - $1 | 0;
 $9 = ($0 | 0) > -1 ? $0 : 0 - $0 | 0;
 $10 = +($0 | 0);
 if (!$9) $b$tr$lcssa$i = $6; else {
  $a$tr1$i = $9;
  $b$tr2$i = $6;
  while (1) {
   $12 = ($b$tr2$i | 0) % ($a$tr1$i | 0) | 0;
   $17 = ((($a$tr1$i | 0) > 0 ? ($12 | 0) < 0 : ($12 | 0) > 0) ? $a$tr1$i : 0) + $12 | 0;
   if (!$17) {
    $b$tr$lcssa$i = $a$tr1$i;
    break;
   } else {
    $b$tr2$i$phi = $a$tr1$i;
    $a$tr1$i = $17;
    $b$tr2$i = $b$tr2$i$phi;
   }
  }
 }
 $22 = $10 * +(($1 | 0) / ($b$tr$lcssa$i | 0) | 0 | 0);
 HEAPF64[$x >> 3] = $22;
 return;
}

function _cons2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$sum5 = 0, $1 = 0, $11 = 0, $13 = 0, $15 = 0, $20 = 0, $22 = 0, $24 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $4 = HEAP32[$self + ($1 + 8 + ($1 & 1) << 2) >> 2] | 0;
 $6 = HEAP32[$4 + 12 >> 2] | 0;
 $$sum5 = $6 + 4 + ($6 & 1) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $11 = HEAP32[$a + 12 >> 2] | 0;
 $13 = HEAP32[$4 + ($$sum5 + 1 << 2) >> 2] | 0;
 if (($13 | 0) < 0) {
  $15 = $13 + $11 | 0;
  $28 = ($15 | 0) < 0 ? 0 : $15;
 } else $28 = ($13 | 0) < ($11 | 0) ? $13 : $11;
 $20 = HEAP32[$w + 12 >> 2] | 0;
 $22 = HEAP32[$4 + ($$sum5 + 2 << 2) >> 2] | 0;
 if (($22 | 0) < 0) {
  $24 = $22 + $20 | 0;
  $29 = ($24 | 0) < 0 ? 0 : $24;
 } else $29 = ($22 | 0) < ($20 | 0) ? $22 : $20;
 $$0 = _rank2ex($a, $w, $self, $28, $29, 322) | 0;
 return $$0 | 0;
}

function _scalbn($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $$0 = 0, $1 = 0.0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $5 = 0, $8 = 0.0, $9 = 0, $y$0 = 0.0;
 if (($n | 0) > 1023) {
  $1 = $x * 8988465674311579538646525.0e283;
  $2 = $n + -1023 | 0;
  if (($2 | 0) > 1023) {
   $5 = $n + -2046 | 0;
   $$0 = ($5 | 0) > 1023 ? 1023 : $5;
   $y$0 = $1 * 8988465674311579538646525.0e283;
  } else {
   $$0 = $2;
   $y$0 = $1;
  }
 } else if (($n | 0) < -1022) {
  $8 = $x * 2.2250738585072014e-308;
  $9 = $n + 1022 | 0;
  if (($9 | 0) < -1022) {
   $12 = $n + 2044 | 0;
   $$0 = ($12 | 0) < -1022 ? -1022 : $12;
   $y$0 = $8 * 2.2250738585072014e-308;
  } else {
   $$0 = $9;
   $y$0 = $8;
  }
 } else {
  $$0 = $n;
  $y$0 = $x;
 }
 $15 = _bitshift64Shl($$0 + 1023 | 0, 0, 52) | 0;
 $16 = tempRet0;
 HEAP32[tempDoublePtr >> 2] = $15;
 HEAP32[tempDoublePtr + 4 >> 2] = $16;
 return +($y$0 * +HEAPF64[tempDoublePtr >> 3]);
}

function _cosh($x) {
 $x = +$x;
 var $$0 = 0.0, $14 = 0.0, $2 = 0, $3 = 0.0, $7 = 0.0, $__x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__x = sp;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $2 = HEAP32[tempDoublePtr + 4 >> 2] & 2147483647;
 HEAP32[tempDoublePtr >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[tempDoublePtr + 4 >> 2] = $2;
 $3 = +HEAPF64[tempDoublePtr >> 3];
 if ($2 >>> 0 < 1072049730) if ($2 >>> 0 < 1045430272) {
  HEAPF64[$__x >> 3] = $3 + 1329227995784915872903807.0e12;
  $$0 = 1.0;
  STACKTOP = sp;
  return +$$0;
 } else {
  $7 = +_expm1($3);
  $$0 = $7 * $7 / (($7 + 1.0) * 2.0) + 1.0;
  STACKTOP = sp;
  return +$$0;
 } else if ($2 >>> 0 < 1082535490) {
  $14 = +Math_exp(+$3);
  $$0 = ($14 + 1.0 / $14) * .5;
  STACKTOP = sp;
  return +$$0;
 } else {
  $$0 = +___expo2($3);
  STACKTOP = sp;
  return +$$0;
 }
 return +(0.0);
}

function _ts($w) {
 $w = $w | 0;
 var $$0 = 0, $$sum1 = 0, $1 = 0, $2 = 0, $5 = 0, $now = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $now = sp;
 if (!$w) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _time($now | 0) | 0;
 $1 = _localtime($now | 0) | 0;
 $2 = _ga(4, 6, 1, 0) | 0;
 if (!$2) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $5 = HEAP32[$2 + 12 >> 2] | 0;
 $$sum1 = $5 + 4 + ($5 & 1) | 0;
 HEAP32[$2 + ($$sum1 << 2) >> 2] = (HEAP32[$1 + 20 >> 2] | 0) + 1900;
 HEAP32[$2 + ($$sum1 + 1 << 2) >> 2] = (HEAP32[$1 + 16 >> 2] | 0) + 1;
 HEAP32[$2 + ($$sum1 + 2 << 2) >> 2] = HEAP32[$1 + 12 >> 2];
 HEAP32[$2 + ($$sum1 + 3 << 2) >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$2 + ($$sum1 + 4 << 2) >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + ($$sum1 + 5 << 2) >> 2] = HEAP32[$1 >> 2];
 $$0 = $2;
 STACKTOP = sp;
 return $$0 | 0;
}

function _wcrtomb($s, $wc, $st) {
 $s = $s | 0;
 $wc = $wc | 0;
 $st = $st | 0;
 var $$0 = 0;
 if (!$s) {
  $$0 = 1;
  return $$0 | 0;
 }
 if ($wc >>> 0 < 128) {
  HEAP8[$s >> 0] = $wc;
  $$0 = 1;
  return $$0 | 0;
 }
 if ($wc >>> 0 < 2048) {
  HEAP8[$s >> 0] = $wc >>> 6 | 192;
  HEAP8[$s + 1 >> 0] = $wc & 63 | 128;
  $$0 = 2;
  return $$0 | 0;
 }
 if ($wc >>> 0 < 55296 | ($wc & -8192 | 0) == 57344) {
  HEAP8[$s >> 0] = $wc >>> 12 | 224;
  HEAP8[$s + 1 >> 0] = $wc >>> 6 & 63 | 128;
  HEAP8[$s + 2 >> 0] = $wc & 63 | 128;
  $$0 = 3;
  return $$0 | 0;
 }
 if (($wc + -65536 | 0) >>> 0 < 1048576) {
  HEAP8[$s >> 0] = $wc >>> 18 | 240;
  HEAP8[$s + 1 >> 0] = $wc >>> 12 & 63 | 128;
  HEAP8[$s + 2 >> 0] = $wc >>> 6 & 63 | 128;
  HEAP8[$s + 3 >> 0] = $wc & 63 | 128;
  $$0 = 4;
  return $$0 | 0;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  $$0 = -1;
  return $$0 | 0;
 }
 return 0;
}

function _fitpp1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$sum1 = 0, $1 = 0, $14 = 0, $18 = 0, $19 = 0, $4 = 0, $6 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $4 = HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0;
 $6 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 if (!$4) $18 = 0; else {
  $9 = HEAP32[$4 + 12 >> 2] | 0;
  $18 = HEAP32[$4 + ($9 + 4 + ($9 & 1) << 2) >> 2] | 0;
 }
 $14 = HEAP32[$6 + 12 >> 2] | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$6 + ($14 + 4 + ($14 & 1) << 2) >> 2];
 _sprintf(411, 8328, $vararg_buffer) | 0;
 $19 = ftCall_iii($18 | 0, $w | 0, $4 | 0) | 0;
 HEAP8[411] = HEAP8[8344] | 0;
 HEAP8[412] = HEAP8[8345] | 0;
 HEAP8[413] = HEAP8[8346] | 0;
 STACKTOP = sp;
 return $19 | 0;
}

function _vis($agg$result, $b, $e, $stack) {
 $agg$result = $agg$result | 0;
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 var $1 = 0, $10 = 0, $2 = 0, $20 = 0, $28 = 0, $3 = 0, $33 = 0, $34 = 0, $4 = 0, $8 = 0;
 $1 = HEAP32[$stack + ($b << 3) >> 2] | 0;
 $2 = $stack + ($e << 3) | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = HEAP32[894] | 0;
 if (!$4) $20 = 0; else {
  $8 = HEAP32[$stack + ($b + 1 << 3) >> 2] | 0;
  $10 = HEAP32[$8 + 12 >> 2] | 0;
  $20 = (HEAP32[$8 + ($10 + 4 + ($10 & 1) << 2) >> 2] | 0) != 0;
 }
 HEAP8[3296] = (HEAP32[$1 >> 2] | 0) >>> 10 & 1 ^ 1;
 _symbis($1, $3, $20 ? $4 : HEAP32[892] | 0) | 0;
 HEAP32[826] = _link($1, HEAP32[826] | 0) | 0;
 HEAP32[828] = _link(HEAP32[$stack + ($e << 3) + 4 >> 2] | 0, HEAP32[828] | 0) | 0;
 $28 = $2;
 $33 = HEAP32[$28 + 4 >> 2] | 0;
 $34 = $agg$result;
 HEAP32[$34 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$34 + 4 >> 2] = $33;
 return;
}

function _strncmp($_l, $_r, $n) {
 $_l = $_l | 0;
 $_r = $_r | 0;
 $n = $n | 0;
 var $$03 = 0, $$08$in = 0, $1 = 0, $13 = 0, $3 = 0, $6 = 0, $9 = 0, $l$06 = 0, $r$0$lcssa = 0, $r$07 = 0;
 if (!$n) {
  $$03 = 0;
  return $$03 | 0;
 }
 $1 = HEAP8[$_l >> 0] | 0;
 L4 : do if (!($1 << 24 >> 24)) {
  $13 = 0;
  $r$0$lcssa = $_r;
 } else {
  $$08$in = $n;
  $6 = $1;
  $l$06 = $_l;
  $r$07 = $_r;
  while (1) {
   $$08$in = $$08$in + -1 | 0;
   $3 = HEAP8[$r$07 >> 0] | 0;
   if (!($6 << 24 >> 24 == $3 << 24 >> 24 & (($$08$in | 0) != 0 & $3 << 24 >> 24 != 0))) {
    $13 = $6;
    $r$0$lcssa = $r$07;
    break L4;
   }
   $l$06 = $l$06 + 1 | 0;
   $9 = $r$07 + 1 | 0;
   $6 = HEAP8[$l$06 >> 0] | 0;
   if (!($6 << 24 >> 24)) {
    $13 = 0;
    $r$0$lcssa = $9;
    break;
   } else $r$07 = $9;
  }
 } while (0);
 $$03 = ($13 & 255) - (HEAPU8[$r$0$lcssa >> 0] | 0) | 0;
 return $$03 | 0;
}

function _fitctv($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$sum1 = 0, $1 = 0, $13 = 0, $19 = 0.0, $22 = 0, $23 = 0, $4 = 0, $9 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $4 = HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0;
 if (!$4) $22 = 0; else {
  $9 = HEAP32[$4 + 12 >> 2] | 0;
  $22 = HEAP32[$4 + ($9 + 5 + ($9 & 1) << 2) >> 2] | 0;
 }
 $13 = _cvt(8, HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0) | 0;
 if (!$13) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (HEAP32[$13 + 12 >> 2] | 0) {
  _jsignal(14);
  $$0 = 0;
  return $$0 | 0;
 }
 $19 = +HEAPF64[$13 + 16 >> 3];
 if ($19 >= 0.0 & $19 <= 5.820766091e-11) {
  HEAPF64[52] = $19;
  $23 = ftCall_iiii($22 | 0, $a | 0, $w | 0, $4 | 0) | 0;
  HEAPF64[52] = +HEAPF64[326];
  $$0 = $23;
  return $$0 | 0;
 } else {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function _sex1($w, $zt, $f1) {
 $w = $w | 0;
 $zt = $zt | 0;
 $f1 = $f1 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $13 = 0, $2 = 0, $3 = 0, $6 = 0, $9 = 0, $i$06 = 0, $v$05 = 0, $x$04 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 8 >> 2] | 0;
 $3 = $w + 12 | 0;
 $6 = _ga($zt, $2, HEAP32[$3 >> 2] | 0, $w + 16 | 0) | 0;
 if (!$6) {
  $$0 = 0;
  return $$0 | 0;
 }
 $9 = _bp(HEAP32[$w >> 2] | 0) | 0;
 $10 = HEAP32[$3 >> 2] | 0;
 $11 = _bp($zt) | 0;
 $13 = HEAP32[$6 + 12 >> 2] | 0;
 if (($2 | 0) > 0) {
  $i$06 = 0;
  $v$05 = $w + ($10 + 4 + ($10 & 1) << 2) + (0 - $9) | 0;
  $x$04 = $6 + ($13 + 4 + ($13 & 1) << 2) + (0 - $11) | 0;
  do {
   $v$05 = $v$05 + $9 | 0;
   $x$04 = $x$04 + $11 | 0;
   ftCall_vii($f1 | 0, $v$05 | 0, $x$04 | 0);
   $i$06 = $i$06 + 1 | 0;
  } while (($i$06 | 0) != ($2 | 0));
 }
 $$0 = (HEAP8[2472] | 0) != 0 ? 0 : $6;
 return $$0 | 0;
}

function _wnl($w) {
 $w = $w | 0;
 var $$0$i = 0, $10 = 0, $12 = 0, $2 = 0, $8 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!$w) {
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 if ((HEAP32[$w + 8 >> 2] | 0) > 1) {
  $$0$i = _rank1ex($w, 0, 0, 424) | 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 $8 = _wopen($w, 1) | 0;
 if (!$8) {
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 HEAP32[$vararg_buffer >> 2] = 20;
 _sprintf(411, 8328, $vararg_buffer) | 0;
 $10 = HEAP32[2088] | 0;
 $12 = _grade2($10, _ope($10) | 0) | 0;
 _fclose($8 | 0) | 0;
 HEAP8[411] = HEAP8[8344] | 0;
 HEAP8[412] = HEAP8[8345] | 0;
 HEAP8[413] = HEAP8[8346] | 0;
 $$0$i = _gc($12, $2) | 0;
 STACKTOP = sp;
 return $$0$i | 0;
}

function _catred($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $2 = 0, $21 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 8 >> 2] | 0;
 $3 = $w + 12 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $w + 16 | 0;
 $6 = HEAP32[$w >> 2] | 0;
 if (($4 | 0) < 2) {
  $$0 = _ca($w) | 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$5 >> 2] | 0)) {
  $$0 = _reduce($w, $self) | 0;
  return $$0 | 0;
 }
 $13 = $w + 20 | 0;
 $14 = _ga($6, $2, $4 + -1 | 0, $13) | 0;
 if (!$14) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$14 + 16 >> 2] = Math_imul(HEAP32[$13 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0;
 $21 = HEAP32[$14 + 12 >> 2] | 0;
 $24 = HEAP32[$3 >> 2] | 0;
 _memcpy($14 + ($21 + 4 + ($21 & 1) << 2) | 0, $w + ($24 + 4 + ($24 & 1) << 2) | 0, Math_imul(_bp($6) | 0, $2) | 0) | 0;
 $$0 = $14;
 return $$0 | 0;
}

function _save1($w) {
 $w = $w | 0;
 var $$0$i = 0, $10 = 0, $2 = 0, $8 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!$w) {
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 if ((HEAP32[$w + 8 >> 2] | 0) > 1) {
  $$0$i = _rank1ex($w, 0, 0, 425) | 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 $8 = _jfopen($w, 8360) | 0;
 if (!$8) {
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 HEAP32[2084] = 0;
 HEAP32[2088] = 0;
 HEAP32[$vararg_buffer >> 2] = 20;
 _sprintf(411, 8328, $vararg_buffer) | 0;
 $10 = _save1f($8) | 0;
 _fclose($8 | 0) | 0;
 HEAP8[411] = HEAP8[8344] | 0;
 HEAP8[412] = HEAP8[8345] | 0;
 HEAP8[413] = HEAP8[8346] | 0;
 $$0$i = _gc($10, $2) | 0;
 STACKTOP = sp;
 return $$0$i | 0;
}

function _case2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $12 = 0, $16 = 0, $19 = 0;
 $0 = _lr($self) | 0;
 $1 = _rr($self) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($0 | 0) >= (HEAP32[$a + 12 >> 2] | 0)) if (($1 | 0) >= (HEAP32[$w + 12 >> 2] | 0)) {
  $12 = HEAP32[$self + 12 >> 2] | 0;
  $$sum2 = $12 + 4 + ($12 & 1) | 0;
  $16 = _df2($a, $w, HEAP32[$self + ($$sum2 + 3 << 2) >> 2] | 0) | 0;
  $19 = _from($16, HEAP32[$self + ($$sum2 + 4 << 2) >> 2] | 0) | 0;
  if (!$19) {
   $$0 = 0;
   return $$0 | 0;
  }
  if (!(HEAP32[$19 + 12 >> 2] | 0)) {
   $$0 = _df2($a, $w, HEAP32[$19 + 16 >> 2] | 0) | 0;
   return $$0 | 0;
  } else {
   _jsignal(14);
   $$0 = 0;
   return $$0 | 0;
  }
 }
 $$0 = _rank2ex($a, $w, $self, $0, $1, 304) | 0;
 return $$0 | 0;
}

function _wr($n, $v) {
 $n = $n | 0;
 $v = $v | 0;
 var $13 = 0, $29 = 0, $31 = 0, $5 = 0, $k$08 = 0, $k$16 = 0;
 if (HEAP8[8472] | 0) if (($n | 0) > 0 & (HEAP8[2472] | 0) == 0) {
  $5 = HEAP32[_stdout >> 2] | 0;
  $k$08 = 0;
  do $k$08 = (_fwrite($v + $k$08 | 0, 1, $n - $k$08 | 0, $5 | 0) | 0) + $k$08 | 0; while (($k$08 | 0) < ($n | 0) & (HEAP8[2472] | 0) == 0);
 }
 $13 = HEAP32[2120] | 0;
 if ($13) {
  _fputc(0, $13 | 0) | 0;
  if (($n | 0) > 0 & (HEAP8[2472] | 0) == 0) {
   $k$16 = 0;
   do $k$16 = (_fwrite($v + $k$16 | 0, 1, $n - $k$16 | 0, HEAP32[2120] | 0) | 0) + $k$16 | 0; while (($k$16 | 0) < ($n | 0) & (HEAP8[2472] | 0) == 0);
  }
 }
 if (HEAP8[8472] | 0) _fputc(10, HEAP32[_stdout >> 2] | 0) | 0;
 $29 = HEAP32[2120] | 0;
 if (!$29) {
  $31 = $v + $n | 0;
  return $31 | 0;
 }
 _fputc(10, $29 | 0) | 0;
 $31 = $v + $n | 0;
 return $31 | 0;
}

function _spellit($0, $s) {
 $0 = $0 | 0;
 $s = $s | 0;
 var $1 = 0, $10 = 0, $2 = 0, $4 = 0, $sext = 0;
 $1 = $s + 1 | 0;
 HEAP8[$1 >> 0] = 0;
 $sext = $0 << 24;
 $2 = $sext >> 24;
 switch ($2 | 0) {
 case -18:
  {
   HEAP8[$s >> 0] = 54;
   return;
  }
 case -20:
  {
   HEAP8[$s >> 0] = 52;
   return;
  }
 case -22:
  {
   HEAP8[$s >> 0] = 50;
   return;
  }
 case -21:
  {
   HEAP8[$s >> 0] = 51;
   return;
  }
 case -19:
  {
   HEAP8[$s >> 0] = 53;
   return;
  }
 default:
  {
   if (($sext | 0) > -16777216) {
    HEAP8[$s >> 0] = $0;
    return;
   }
   $4 = _strchr(7883, $2) | 0;
   if ($4) {
    HEAP8[$s >> 0] = HEAP8[7824 + ($4 - 7883) >> 0] | 0;
    HEAP8[$1 >> 0] = 46;
    return;
   }
   $10 = _strchr(7942, $2) | 0;
   if (!$10) return;
   HEAP8[$s >> 0] = HEAP8[7824 + ($10 - 7942) >> 0] | 0;
   HEAP8[$1 >> 0] = 58;
   return;
  }
 }
}

function _frexp($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $2 = 0, $4 = 0, $7 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $2 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 $4 = $2 & 2047;
 if (($4 | 0) == 2047) {
  $$0 = $x;
  return +$$0;
 } else if (!$4) {
  if ($x != 0.0) {
   $7 = +_frexp($x * 18446744073709551616.0, $e);
   $$01 = $7;
   $storemerge = (HEAP32[$e >> 2] | 0) + -64 | 0;
  } else {
   $$01 = $x;
   $storemerge = 0;
  }
  HEAP32[$e >> 2] = $storemerge;
  $$0 = $$01;
  return +$$0;
 } else {
  HEAP32[$e >> 2] = $4 + -1022;
  HEAP32[tempDoublePtr >> 2] = $0;
  HEAP32[tempDoublePtr + 4 >> 2] = $1 & -2146435073 | 1071644672;
  $$0 = +HEAPF64[tempDoublePtr >> 3];
  return +$$0;
 }
 return +(0.0);
}

function _swap($w) {
 $w = $w | 0;
 var $$0 = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $21 = 0, $22 = 0, $4 = 0, $t$0 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (HEAP32[$w >> 2] & 128) {
  $4 = _rr($w) | 0;
  $$0 = _fdef(126, 128, 244, 245, $w, 0, 0, 0, 127, $4, _lr($w) | 0) | 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w + 12 >> 2] | 0)) $11 = _ravel($w) | 0; else $11 = $w;
 $12 = _onm($11) | 0;
 if (!$12) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$12 >> 2] = 2;
 $14 = _srdlg($12) | 0;
 if (!$14) {
  $16 = _ds(-32) | 0;
  if (!$16) {
   $$0 = 0;
   return $$0 | 0;
  } else $t$0 = $16;
 } else $t$0 = $14;
 $18 = HEAP32[$t$0 >> 2] | 0;
 if ($18 & 127) {
  $$0 = $t$0;
  return $$0 | 0;
 }
 $21 = _mr($t$0) | 0;
 $22 = _lr($t$0) | 0;
 $$0 = _fdef(126, $18, 246, 247, $12, 0, 0, 0, $21, $22, _rr($t$0) | 0) | 0;
 return $$0 | 0;
}

function _psave1($w) {
 $w = $w | 0;
 var $$0$i = 0, $2 = 0, $8 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!$w) {
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 if ((HEAP32[$w + 8 >> 2] | 0) > 1) {
  $$0$i = _rank1ex($w, 0, 0, 427) | 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 $8 = _jfopen($w, 8360) | 0;
 if (!$8) {
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 HEAP32[2084] = 0;
 HEAP32[2088] = 0;
 HEAP32[$vararg_buffer >> 2] = 20;
 _sprintf(411, 8328, $vararg_buffer) | 0;
 _jsignal(11);
 _fclose($8 | 0) | 0;
 HEAP8[411] = HEAP8[8344] | 0;
 HEAP8[412] = HEAP8[8345] | 0;
 HEAP8[413] = HEAP8[8346] | 0;
 $$0$i = _gc(0, $2) | 0;
 STACKTOP = sp;
 return $$0$i | 0;
}

function _cut($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $10 = 0, $17 = 0, $24 = 0, $8 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (HEAP32[$a >> 2] & 128) if (HEAP32[$w >> 2] & 127) {
  $8 = _vi($w) | 0;
  if (!$8) {
   $$0 = 0;
   return $$0 | 0;
  }
  $10 = _i0($8) | 0;
  if (HEAP8[2472] | 0) {
   $$0 = 0;
   return $$0 | 0;
  }
  if (($10 + 3 | 0) >>> 0 >= 7) {
   _jsignal(3);
   $$0 = 0;
   return $$0 | 0;
  }
  if (!$10) {
   $$0 = _fdef(-98, 128, 277, 278, $a, $8, 0, 0, 127, 2, 127) | 0;
   return $$0 | 0;
  } else {
   $17 = HEAP32[$a + 12 >> 2] | 0;
   $24 = (_strchr(144, HEAP8[$a + ($17 + 4 + ($17 & 1) << 2) + 31 >> 0] | 0) | 0) != 0;
   $$0 = _fdef(-98, 128, $24 ? 280 : 279, 281, $a, $8, 0, 0, 127, 1, 127) | 0;
   return $$0 | 0;
  }
 }
 _jsignal(3);
 $$0 = 0;
 return $$0 | 0;
}

function _cconj($agg$result, $b, $e, $stack) {
 $agg$result = $agg$result | 0;
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 var $1 = 0, $10 = 0, $11 = 0, $16 = 0, $3 = 0, $5 = 0, $7 = 0, $z$sroa$2$0 = 0;
 $1 = HEAP32[$stack + ($b << 3) >> 2] | 0;
 $3 = HEAP32[$stack + ($b << 3) + 4 >> 2] | 0;
 $5 = HEAP32[$stack + ($e << 3) >> 2] | 0;
 $7 = HEAP32[$stack + ($e << 3) + 4 >> 2] | 0;
 $10 = HEAP32[$stack + ($e + -1 << 3) >> 2] | 0;
 $11 = _df2($1, $5, $10) | 0;
 $16 = ($7 | 0) != 0 | (($3 | 0) != 0 ? 2 : 0);
 if (($16 | 0) == 1) $z$sroa$2$0 = _thook($7, _advform($1, $10) | 0) | 0; else if (($16 | 0) == 3) $z$sroa$2$0 = _tfork($3, $10, $7) | 0; else if (($16 | 0) == 2) $z$sroa$2$0 = _thook($3, _advform($10, $5) | 0) | 0; else $z$sroa$2$0 = 0;
 HEAP32[$agg$result >> 2] = $11;
 HEAP32[$agg$result + 4 >> 2] = $z$sroa$2$0;
 return;
}

function _jfsize($w) {
 $w = $w | 0;
 var $$0 = 0, $11 = 0, $17 = 0, $2 = 0, $20 = 0, $22 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 12 >> 2] | 0;
 if (($2 | 0) > 0) {
  $$0 = _rank1ex($w, 0, 0, 419) | 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 32)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $11 = _vs(HEAP32[$w + ($2 + 4 + ($2 & 1) << 2) >> 2] | 0) | 0;
 if (!$11) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$11 + 8 >> 2] | 0)) {
  _jsignal(9);
  $$0 = 0;
  return $$0 | 0;
 }
 $17 = HEAP32[$11 + 12 >> 2] | 0;
 $20 = _fopen($11 + ($17 + 4 + ($17 & 1) << 2) | 0, 8440) | 0;
 if (!$20) {
  _jsignal(7);
  $$0 = 0;
  return $$0 | 0;
 } else {
  _fseek($20 | 0, 0, 2) | 0;
  $22 = _ftell($20 | 0) | 0;
  _rewind($20 | 0);
  _fclose($20 | 0) | 0;
  $$0 = _sc($22) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _nameless($w) {
 $w = $w | 0;
 var $$0 = 0, $$sum1 = 0, $11 = 0, $13 = 0, $15 = 0, $5 = 0, $9 = 0;
 if (!$w) {
  $$0 = 1;
  return $$0 | 0;
 }
 if (HEAP32[$w >> 2] & 127) {
  $$0 = 1;
  return $$0 | 0;
 }
 $5 = HEAP32[$w + 12 >> 2] | 0;
 $$sum1 = $5 + 4 + ($5 & 1) | 0;
 $9 = HEAP8[$w + ($$sum1 << 2) + 31 >> 0] | 0;
 $11 = HEAP32[$w + ($$sum1 + 2 << 2) >> 2] | 0;
 $13 = HEAP32[$w + ($$sum1 + 3 << 2) >> 2] | 0;
 $15 = HEAP32[$w + ($$sum1 + 4 << 2) >> 2] | 0;
 if ($9 << 24 >> 24 == 126) if (HEAP32[$11 >> 2] & 2) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!((_nameless($11) | 0) << 24 >> 24)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!((_nameless($13) | 0) << 24 >> 24)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ($9 << 24 >> 24 == -21) return (_nameless($15) | 0) << 24 >> 24 != 0 | 0; else {
  $$0 = 1;
  return $$0 | 0;
 }
 return 0;
}

function _compD($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $$lcssa = 0.0, $0 = 0, $24 = 0, $28 = 0, $8 = 0.0, $i$03 = 0, $p$17 = 0.0, $x$01 = 0, $y$02 = 0;
 $0 = HEAP32[1918] | 0;
 if (($0 | 0) > 0) {
  $i$03 = 0;
  $x$01 = HEAP32[$a >> 2] | 0;
  $y$02 = HEAP32[$b >> 2] | 0;
  while (1) {
   $8 = +HEAPF64[$x$01 >> 3] - +HEAPF64[$y$02 >> 3];
   if ($8 != 0.0) {
    $$lcssa = $8;
    break;
   }
   $i$03 = $i$03 + 1 | 0;
   if (($i$03 | 0) >= ($0 | 0)) {
    $$lcssa = $8;
    break;
   } else {
    $x$01 = $x$01 + 8 | 0;
    $y$02 = $y$02 + 8 | 0;
   }
  }
  if ($$lcssa != 0.0) $p$17 = $$lcssa; else {
   $24 = (HEAP32[$a + 4 >> 2] | 0) - (HEAP32[$b + 4 >> 2] | 0) | 0;
   $28 = (($24 | 0) > 0 & 1) - ($24 >>> 31) | 0;
   return $28 | 0;
  }
 } else $p$17 = 0.0;
 $28 = ($p$17 > 0.0 & 1) - ($p$17 < 0.0 & 1) | 0;
 return $28 | 0;
}

function _filler($w) {
 $w = $w | 0;
 var $$0 = 0, $1 = 0, $18 = 0, $2 = 0, $5 = 0, $7 = 0, $8 = 0, $kv$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $kv$i = sp;
 if (!$w) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $1 = HEAP32[$w >> 2] | 0;
 $2 = _ga($1, 1, 0, 0) | 0;
 if (!$2) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $5 = HEAP32[$2 + 12 >> 2] | 0;
 $7 = $2 + ($5 + 4 + ($5 & 1) << 2) | 0;
 $8 = _bp($1) | 0;
 do if (!($1 & 29)) {
  if ($1 & 2) {
   HEAP8[$7 >> 0] = 32;
   break;
  }
  if (!($1 & 32)) {
   HEAP32[$kv$i >> 2] = HEAP32[660];
   HEAP32[$kv$i + 4 >> 2] = HEAP32[616];
   $18 = $kv$i;
  } else $18 = 2464;
  _mvc($8, $7, $8, $18);
 } else _memset($7 | 0, 0, $8 | 0) | 0; while (0);
 $$0 = $2;
 STACKTOP = sp;
 return $$0 | 0;
}

function _kbox($w) {
 $w = $w | 0;
 var $$0 = 0, $1 = 0, $12 = 0, $17 = 0, $2 = 0, $20 = 0, $9 = 0, $z$0 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $1 = $w + 12 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 do if (!$2) {
  $12 = _ga(32, 2, 2, 0) | 0;
  if (!$12) {
   $$0 = 0;
   return $$0 | 0;
  } else {
   HEAP32[$12 + 16 >> 2] = 1;
   HEAP32[$12 + 20 >> 2] = 2;
   $z$0 = $12;
   break;
  }
 } else {
  $9 = _ga(32, HEAP32[$w + 8 >> 2] << 1, $2 + 1 | 0, $w + 16 | 0) | 0;
  if (!$9) {
   $$0 = 0;
   return $$0 | 0;
  } else {
   HEAP32[$9 + 16 + ($2 << 2) >> 2] = 2;
   $z$0 = $9;
   break;
  }
 } while (0);
 $17 = HEAP32[$z$0 + 12 >> 2] | 0;
 $20 = HEAP32[$1 >> 2] | 0;
 _memcpy($z$0 + ($17 + 4 + ($17 & 1) << 2) | 0, $w + ($20 + 4 + ($20 & 1) << 2) | 0, HEAP32[$z$0 + 8 >> 2] << 2 | 0) | 0;
 $$0 = $z$0;
 return $$0 | 0;
}

function _under2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0$i = 0, $$sum1 = 0, $1 = 0, $16 = 0, $17 = 0, $20 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $4 = HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0;
 $6 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 $7 = _inv($6) | 0;
 $8 = _amp($4, $6) | 0;
 if (!(($7 | 0) != 0 & ($8 | 0) != 0)) {
  $$0$i = 0;
  $20 = _df2($a, $w, $$0$i) | 0;
  return $20 | 0;
 }
 if (!(HEAP32[$7 >> 2] & 128 & HEAP32[$8 >> 2])) {
  _jsignal(3);
  $$0$i = 0;
  $20 = _df2($a, $w, $$0$i) | 0;
  return $20 | 0;
 } else {
  $16 = _mr($8) | 0;
  $17 = _lr($8) | 0;
  $$0$i = _fdef(64, 128, 265, 269, $7, $8, 0, 0, $16, $17, _rr($8) | 0) | 0;
  $20 = _df2($a, $w, $$0$i) | 0;
  return $20 | 0;
 }
 return 0;
}

function _zsqrt($agg$result, $v) {
 $agg$result = $agg$result | 0;
 $v = $v | 0;
 var $0 = 0.0, $12 = 0.0, $13 = 0.0, $2 = 0.0, $22 = 0.0, $24 = 0.0, $5 = 0.0, $8 = 0.0, $9 = 0, $p$0 = 0.0, $zi$0 = 0.0, $zr$0 = 0.0;
 $0 = +HEAPF64[$v >> 3];
 $2 = +HEAPF64[$v + 8 >> 3];
 $5 = $0 >= 0.0 ? $0 : -$0;
 $8 = $2 >= 0.0 ? $2 : -$2;
 $9 = $5 < $8;
 $p$0 = $9 ? $8 : $5;
 if ($p$0 != 0.0) {
  $12 = ($9 ? $5 : $8) * .5 / $p$0;
  $13 = $0 * .5;
  $22 = +Math_sqrt(+(($13 >= 0.0 ? $13 : -$13) + $p$0 * +Math_sqrt(+($12 * $12 + .25))));
  $24 = $2 / ($22 + $22);
  if ($0 < 0.0) {
   $zi$0 = $2 < 0.0 ? -$22 : $22;
   $zr$0 = $24 >= 0.0 ? $24 : -$24;
  } else {
   $zi$0 = $24;
   $zr$0 = $22;
  }
 } else {
  $zi$0 = 0.0;
  $zr$0 = 0.0;
 }
 HEAPF64[$agg$result >> 3] = $zr$0;
 HEAPF64[$agg$result + 8 >> 3] = $zi$0;
 return;
}

function _pind($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $12 = 0, $3 = 0, $6 = 0, $8 = 0, $i$03 = 0, $v$02 = 0, label = 0;
 $0 = _i0($a) | 0;
 $1 = 0 - $0 | 0;
 $3 = _ca(_vi($w) | 0) | 0;
 if (!$3) {
  $$0 = 0;
  return $$0 | 0;
 }
 $6 = HEAP32[$3 + 12 >> 2] | 0;
 $8 = HEAP32[$3 + 8 >> 2] | 0;
 if (($8 | 0) <= 0) {
  $$0 = $3;
  return $$0 | 0;
 }
 $i$03 = 0;
 $v$02 = $3 + ($6 + 4 + ($6 & 1) << 2) | 0;
 while (1) {
  $12 = HEAP32[$v$02 >> 2] | 0;
  if (!(($12 | 0) >= ($1 | 0) & ($12 | 0) < ($0 | 0))) break;
  HEAP32[$v$02 >> 2] = (($12 | 0) < 0 ? $0 : 0) + $12;
  $i$03 = $i$03 + 1 | 0;
  if (($i$03 | 0) >= ($8 | 0)) {
   $$0 = $3;
   label = 7;
   break;
  } else $v$02 = $v$02 + 4 | 0;
 }
 if ((label | 0) == 7) return $$0 | 0;
 _jsignal(6);
 $$0 = 0;
 return $$0 | 0;
}

function _jne($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $u$byval_copy = 0, $v$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $v$byval_copy = sp + 16 | 0;
 $u$byval_copy = sp;
 HEAP32[$u$byval_copy >> 2] = HEAP32[$u >> 2];
 HEAP32[$u$byval_copy + 4 >> 2] = HEAP32[$u + 4 >> 2];
 HEAP32[$u$byval_copy + 8 >> 2] = HEAP32[$u + 8 >> 2];
 HEAP32[$u$byval_copy + 12 >> 2] = HEAP32[$u + 12 >> 2];
 HEAP32[$v$byval_copy >> 2] = HEAP32[$v >> 2];
 HEAP32[$v$byval_copy + 4 >> 2] = HEAP32[$v + 4 >> 2];
 HEAP32[$v$byval_copy + 8 >> 2] = HEAP32[$v + 8 >> 2];
 HEAP32[$v$byval_copy + 12 >> 2] = HEAP32[$v + 12 >> 2];
 HEAP8[$x >> 0] = (_zeq($u$byval_copy, $v$byval_copy) | 0) << 24 >> 24 == 0 & 1;
 STACKTOP = sp;
 return;
}

function _powv1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$sum1 = 0, $12 = 0, $16 = 0, $2 = 0, $22 = 0, $4 = 0, $7 = 0, $9 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $4 + 4 + ($4 & 1) | 0;
 $7 = HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0;
 $9 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 if (!$9) $22 = 0; else {
  $12 = HEAP32[$9 + 12 >> 2] | 0;
  $22 = HEAP32[$9 + ($12 + 4 + ($12 & 1) << 2) >> 2] | 0;
 }
 $16 = _mr($self) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($16 | 0) < (HEAP32[$w + 12 >> 2] | 0)) {
  $$0 = _rank1ex($w, $self, $16, 314) | 0;
  return $$0 | 0;
 } else {
  $$0 = _gc(_df1($w, _powop($7, ftCall_iii($22 | 0, $w | 0, $9 | 0) | 0) | 0) | 0, $2) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _mag($w) {
 $w = $w | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $4 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $w;
 $1 = _coerce1($0, 1) | 0;
 do if (($1 | 0) == 8) $$0 = _sex1(HEAP32[$0 >> 2] | 0, 8, 370) | 0; else if (($1 | 0) == 1) $$0 = _ca(HEAP32[$0 >> 2] | 0) | 0; else if (($1 | 0) == 4) {
  $4 = _sc(-2147483648) | 0;
  $8 = (_all1(_eps($4, HEAP32[$0 >> 2] | 0) | 0) | 0) << 24 >> 24 == 0;
  $9 = HEAP32[$0 >> 2] | 0;
  if ($8) {
   $$0 = _sex1($9, 4, 371) | 0;
   break;
  } else {
   $$0 = _sex1(_cvt(8, $9) | 0, 8, 370) | 0;
   break;
  }
 } else if (($1 | 0) == 16) $$0 = _sex1(HEAP32[$0 >> 2] | 0, 8, 372) | 0; else $$0 = 0; while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _under1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0$i = 0, $$sum1 = 0, $1 = 0, $16 = 0, $17 = 0, $20 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $4 = HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0;
 $6 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 $7 = _inv($6) | 0;
 $8 = _amp($4, $6) | 0;
 if (!(($7 | 0) != 0 & ($8 | 0) != 0)) {
  $$0$i = 0;
  $20 = _df1($w, $$0$i) | 0;
  return $20 | 0;
 }
 if (!(HEAP32[$7 >> 2] & 128 & HEAP32[$8 >> 2])) {
  _jsignal(3);
  $$0$i = 0;
  $20 = _df1($w, $$0$i) | 0;
  return $20 | 0;
 } else {
  $16 = _mr($8) | 0;
  $17 = _lr($8) | 0;
  $$0$i = _fdef(64, 128, 265, 269, $7, $8, 0, 0, $16, $17, _rr($8) | 0) | 0;
  $20 = _df1($w, $$0$i) | 0;
  return $20 | 0;
 }
 return 0;
}

function _swap2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $2 = 0, $25 = 0, $4 = 0, $7 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $7 = HEAP32[$self + ($4 + 6 + ($4 & 1) << 2) >> 2] | 0;
 if (!$7) $25 = 0; else {
  $10 = HEAP32[$7 + 12 >> 2] | 0;
  $25 = HEAP32[$7 + ($10 + 5 + ($10 & 1) << 2) >> 2] | 0;
 }
 $14 = _lr($self) | 0;
 $15 = _rr($self) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($14 | 0) >= (HEAP32[$a + 12 >> 2] | 0)) if (($15 | 0) >= (HEAP32[$w + 12 >> 2] | 0)) {
  $$0 = _gc(ftCall_iiii($25 | 0, $w | 0, $a | 0, $7 | 0) | 0, $2) | 0;
  return $$0 | 0;
 }
 $$0 = _rank2ex($a, $w, $self, $14, $15, 245) | 0;
 return $$0 | 0;
}

function _strtod($s, $p) {
 $s = $s | 0;
 $p = $p | 0;
 var $0 = 0, $1 = 0, $12 = 0, $4 = 0.0, $f$i = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $f$i = sp;
 dest = $f$i;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $0 = $f$i + 4 | 0;
 HEAP32[$0 >> 2] = $s;
 $1 = $f$i + 8 | 0;
 HEAP32[$1 >> 2] = -1;
 HEAP32[$f$i + 44 >> 2] = $s;
 HEAP32[$f$i + 76 >> 2] = -1;
 ___shlim($f$i, 0);
 $4 = +___floatscan($f$i, 1, 1);
 $12 = (HEAP32[$0 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) + (HEAP32[$f$i + 108 >> 2] | 0) | 0;
 if (!$p) {
  STACKTOP = sp;
  return +$4;
 }
 HEAP32[$p >> 2] = ($12 | 0) != 0 ? $s + $12 | 0 : $s;
 STACKTOP = sp;
 return +$4;
}

function _obv2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $2 = 0, $25 = 0, $4 = 0, $7 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $7 = HEAP32[$self + ($4 + 6 + ($4 & 1) << 2) >> 2] | 0;
 if (!$7) $25 = 0; else {
  $10 = HEAP32[$7 + 12 >> 2] | 0;
  $25 = HEAP32[$7 + ($10 + 5 + ($10 & 1) << 2) >> 2] | 0;
 }
 $14 = _lr($self) | 0;
 $15 = _rr($self) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($14 | 0) >= (HEAP32[$a + 12 >> 2] | 0)) if (($15 | 0) >= (HEAP32[$w + 12 >> 2] | 0)) {
  $$0 = _gc(ftCall_iiii($25 | 0, $a | 0, $w | 0, $7 | 0) | 0, $2) | 0;
  return $$0 | 0;
 }
 $$0 = _rank2ex($a, $w, $self, $14, $15, 271) | 0;
 return $$0 | 0;
}

function _xv2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $2 = 0, $25 = 0, $4 = 0, $7 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $7 = HEAP32[$self + ($4 + 7 + ($4 & 1) << 2) >> 2] | 0;
 if (!$7) $25 = 0; else {
  $10 = HEAP32[$7 + 12 >> 2] | 0;
  $25 = HEAP32[$7 + ($10 + 5 + ($10 & 1) << 2) >> 2] | 0;
 }
 $14 = _lr($self) | 0;
 $15 = _rr($self) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($14 | 0) >= (HEAP32[$a + 12 >> 2] | 0)) if (($15 | 0) >= (HEAP32[$w + 12 >> 2] | 0)) {
  $$0 = _gc(ftCall_iiii($25 | 0, $a | 0, $w | 0, $7 | 0) | 0, $2) | 0;
  return $$0 | 0;
 }
 $$0 = _rank2ex($a, $w, $self, $14, $15, 342) | 0;
 return $$0 | 0;
}

function _ttokens($w) {
 $w = $w | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $11 = 0, $2 = 0, $5 = 0, $8 = 0, $i$06 = 0, $x$05 = 0, $y$04 = 0;
 $0 = _tokens($w) | 0;
 if (!$0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = $0 + 8 | 0;
 $5 = _ga(32, HEAP32[$2 >> 2] << 1, 1, 0) | 0;
 if (!$5) {
  $$0 = 0;
  return $$0 | 0;
 }
 $8 = HEAP32[$5 + 12 >> 2] | 0;
 $10 = HEAP32[$0 + 12 >> 2] | 0;
 $11 = HEAP32[$2 >> 2] | 0;
 if (($11 | 0) <= 0) {
  $$0 = $5;
  return $$0 | 0;
 }
 $i$06 = 0;
 $x$05 = $5 + ($8 + 4 + ($8 & 1) << 2) | 0;
 $y$04 = $0 + ($10 + 4 + ($10 & 1) << 2) | 0;
 while (1) {
  HEAP32[$x$05 >> 2] = HEAP32[$y$04 >> 2];
  $i$06 = $i$06 + 1 | 0;
  if (($i$06 | 0) == ($11 | 0)) {
   $$0 = $5;
   break;
  } else {
   $x$05 = $x$05 + 8 | 0;
   $y$04 = $y$04 + 4 | 0;
  }
 }
 return $$0 | 0;
}

function _igcd($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0, $14 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0, $a$tr1$i = 0, $b$tr$lcssa$i = 0, $b$tr2$i = 0, $b$tr2$i$phi = 0;
 $0 = HEAP32[$u >> 2] | 0;
 $3 = ($0 | 0) > -1 ? $0 : 0 - $0 | 0;
 $4 = HEAP32[$v >> 2] | 0;
 $7 = ($4 | 0) > -1 ? $4 : 0 - $4 | 0;
 if (!$3) {
  $b$tr$lcssa$i = $7;
  HEAP32[$x >> 2] = $b$tr$lcssa$i;
  return;
 } else {
  $a$tr1$i = $3;
  $b$tr2$i = $7;
 }
 while (1) {
  $9 = ($b$tr2$i | 0) % ($a$tr1$i | 0) | 0;
  $14 = ((($a$tr1$i | 0) > 0 ? ($9 | 0) < 0 : ($9 | 0) > 0) ? $a$tr1$i : 0) + $9 | 0;
  if (!$14) {
   $b$tr$lcssa$i = $a$tr1$i;
   break;
  } else {
   $b$tr2$i$phi = $a$tr1$i;
   $a$tr1$i = $14;
   $b$tr2$i = $b$tr2$i$phi;
  }
 }
 HEAP32[$x >> 2] = $b$tr$lcssa$i;
 return;
}

function _jeq($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $u$byval_copy = 0, $v$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $v$byval_copy = sp + 16 | 0;
 $u$byval_copy = sp;
 HEAP32[$u$byval_copy >> 2] = HEAP32[$u >> 2];
 HEAP32[$u$byval_copy + 4 >> 2] = HEAP32[$u + 4 >> 2];
 HEAP32[$u$byval_copy + 8 >> 2] = HEAP32[$u + 8 >> 2];
 HEAP32[$u$byval_copy + 12 >> 2] = HEAP32[$u + 12 >> 2];
 HEAP32[$v$byval_copy >> 2] = HEAP32[$v >> 2];
 HEAP32[$v$byval_copy + 4 >> 2] = HEAP32[$v + 4 >> 2];
 HEAP32[$v$byval_copy + 8 >> 2] = HEAP32[$v + 8 >> 2];
 HEAP32[$v$byval_copy + 12 >> 2] = HEAP32[$v + 12 >> 2];
 HEAP8[$x >> 0] = _zeq($u$byval_copy, $v$byval_copy) | 0;
 STACKTOP = sp;
 return;
}

function _bp($t) {
 $t = $t | 0;
 var $$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 if (($t | 0) == 16 | ($t | 0) == 8 | ($t | 0) == 1) $$0 = $t; else if (($t | 0) == 4 | ($t | 0) == 16384 | ($t | 0) == 8192 | ($t | 0) == 4096 | ($t | 0) == 2048) $$0 = 4; else if (($t | 0) == 32768) $$0 = 8; else if (($t | 0) == 64) $$0 = 8; else if (($t | 0) == 2 | ($t | 0) == 1024) $$0 = 1; else if (($t | 0) == 512 | ($t | 0) == 256 | ($t | 0) == 128) $$0 = 32; else if (($t | 0) == 32) $$0 = 4; else {
  _jsignal(19);
  HEAP32[$vararg_buffer >> 2] = $t;
  _sprintf(2256, 7656, $vararg_buffer) | 0;
  _jouts(2256);
  _jputc(10);
  $$0 = 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _reitem($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $$0$i = 0, $11 = 0, $14 = 0, $5 = 0, $6 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$a + 12 >> 2] | 0) <= 1) {
  $5 = $w + 12 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  if (($6 | 0) <= 127) {
   if (($6 | 0) < 2) {
    $$0 = _reshape($a, $w) | 0;
    return $$0 | 0;
   }
   $11 = _ga(4, $6, 1, 0) | 0;
   if (!$11) $$0$i = 0; else {
    $14 = HEAP32[$11 + 12 >> 2] | 0;
    _memcpy($11 + ($14 + 4 + ($14 & 1) << 2) | 0, $w + 16 | 0, HEAP32[$5 >> 2] << 2 | 0) | 0;
    $$0$i = $11;
   }
   $$0 = _reshape(_over($a, _drop(HEAP32[646] | 0, $$0$i) | 0) | 0, $w) | 0;
   return $$0 | 0;
  }
 }
 $$0 = _rank2ex($a, $w, 0, 1, 127, 35) | 0;
 return $$0 | 0;
}

function _deba($stack, $i) {
 $stack = $stack | 0;
 $i = $i | 0;
 var $$0 = 0, $$012 = 0, $12 = 0, $2 = 0, $k$03 = 0, $spx$04 = 0;
 $2 = _ga(4, ($i << 1) + 6 | 0, 1, 0) | 0;
 if (!$2) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$2 + 24 >> 2] = 1;
 HEAP32[$2 + 20 >> 2] = HEAP32[108];
 HEAP32[108] = $2;
 HEAP32[$2 + 28 >> 2] = $i;
 HEAP32[$2 + 32 >> 2] = $i + -1;
 _memcpy($2 + 44 | 0, $stack | 0, $i << 2 | 0) | 0;
 $12 = $2 + ($i + 11 << 2) | 0;
 if (!$i) {
  $$0 = $12;
  return $$0 | 0;
 } else {
  $$012 = $i;
  $k$03 = 0;
  $spx$04 = $12;
 }
 while (1) {
  $$012 = $$012 + -1 | 0;
  HEAP32[$spx$04 >> 2] = $k$03;
  if (!$$012) {
   $$0 = $12;
   break;
  } else {
   $k$03 = $k$03 + 1 | 0;
   $spx$04 = $spx$04 + 4 | 0;
  }
 }
 return $$0 | 0;
}

function _rbrace($w) {
 $w = $w | 0;
 var $$0 = 0, $1 = 0, $w$tr3 = 0, $w$tr3$lcssa = 0, $w$tr3$lcssa12 = 0, label = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 } else $w$tr3 = $w;
 while (1) {
  $1 = HEAP32[$w$tr3 >> 2] | 0;
  if ($1 & 128) {
   $w$tr3$lcssa = $w$tr3;
   label = 3;
   break;
  }
  if ($1 & 32) {
   $w$tr3$lcssa12 = $w$tr3;
   label = 5;
   break;
  }
  $w$tr3 = _qq($w$tr3, HEAP32[624] | 0) | 0;
  if (!$w$tr3) {
   $$0 = 0;
   label = 7;
   break;
  }
 }
 if ((label | 0) == 3) {
  $$0 = _fdef(125, 128, 242, 243, $w$tr3$lcssa, 0, 0, 0, 127, 127, 127) | 0;
  return $$0 | 0;
 } else if ((label | 0) == 5) {
  $$0 = _gadv($w$tr3$lcssa12, 125) | 0;
  return $$0 | 0;
 } else if ((label | 0) == 7) return $$0 | 0;
 return 0;
}

function ___divdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $7$0 = 0, $7$1 = 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 $7$0 = $2$0 ^ $1$0;
 $7$1 = $2$1 ^ $1$1;
 return _i64Subtract((___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, 0) | 0) ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
}

function _ply2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$sum2 = 0, $10 = 0, $11 = 0, $2 = 0, $4 = 0, $7 = 0, $9 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $$sum2 = $4 + 4 + ($4 & 1) | 0;
 $7 = HEAP32[$self + ($$sum2 + 2 << 2) >> 2] | 0;
 $9 = HEAP32[$self + ($$sum2 + 3 << 2) >> 2] | 0;
 $10 = _lr($self) | 0;
 $11 = _rr($self) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($10 | 0) >= (HEAP32[$a + 12 >> 2] | 0)) if (($11 | 0) >= (HEAP32[$w + 12 >> 2] | 0)) {
  $$0 = _gc(_df1($w, _powop(_amp($a, $7) | 0, $9) | 0) | 0, $2) | 0;
  return $$0 | 0;
 }
 $$0 = _rank2ex($a, $w, $self, $10, $11, 312) | 0;
 return $$0 | 0;
}

function _amp($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $11 = 0, $12 = 0, $8 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $8 = ((HEAP32[$w >> 2] | 0) >>> 7 & 1 | (HEAP32[$a >> 2] | 0) >>> 6 & 2) ^ 3;
 if (($8 | 0) == 2) {
  $$0 = _fdef(38, 128, 263, 0, $a, $w, 0, 0, 127, 127, 127) | 0;
  return $$0 | 0;
 } else if (($8 | 0) == 3) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 } else if (($8 | 0) == 1) {
  $$0 = _fdef(38, 128, 264, 0, $a, $w, 0, 0, 127, 127, 127) | 0;
  return $$0 | 0;
 } else if (!$8) {
  $11 = _mr($w) | 0;
  $12 = _mr($w) | 0;
  $$0 = _fdef(38, 128, 265, 266, $a, $w, 0, 0, $11, $12, _mr($w) | 0) | 0;
  return $$0 | 0;
 } else {
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function _hooko($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $14 = 0, $15 = 0, $5 = 0, $6 = 0, $f1$0 = 0, $f2$0 = 0, $t$0 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $5 = (HEAP32[$a >> 2] | 0) >>> 5 & 8 ^ 8;
 $6 = HEAP32[$w >> 2] | 0;
 if (!($6 & 127)) if (!($6 & 128)) $15 = $6 >>> 7 & 2 ^ 6; else $15 = 2; else $15 = 0;
 $14 = $15 + $5 | 0;
 if (($14 | 0) == 4) {
  $f1$0 = 334;
  $f2$0 = 0;
  $t$0 = 256;
 } else if (($14 | 0) == 12) {
  $f1$0 = 0;
  $f2$0 = 336;
  $t$0 = 512;
 } else if (($14 | 0) == 6) {
  $f1$0 = 335;
  $f2$0 = 0;
  $t$0 = 256;
 } else {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = _fdef(-19, $t$0, $f1$0, $f2$0, $a, $w, 0, 0, 0, 0, 0) | 0;
 return $$0 | 0;
}

function _ac2($f) {
 $f = $f | 0;
 var $$0$i = 0, $$sum1$i = 0, $0 = 0, $3 = 0, $5 = 0;
 $0 = _ga(128, 1, 0, 0) | 0;
 if (!$0) {
  $$0$i = 0;
  return $$0$i | 0;
 }
 $3 = HEAP32[$0 + 12 >> 2] | 0;
 $$sum1$i = $3 + 4 + ($3 & 1) | 0;
 $5 = $0 + ($$sum1$i << 2) | 0;
 HEAP32[$5 >> 2] = 262;
 HEAP32[$0 + ($$sum1$i + 1 << 2) >> 2] = ($f | 0) != 0 ? $f : 262;
 HEAP32[$0 + ($$sum1$i + 2 << 2) >> 2] = 0;
 HEAP32[$0 + ($$sum1$i + 3 << 2) >> 2] = 0;
 HEAP32[$0 + ($$sum1$i + 4 << 2) >> 2] = 0;
 HEAP32[$0 + ($$sum1$i + 5 << 2) >> 2] = 0;
 HEAP32[$0 + ($$sum1$i + 6 << 2) >> 2] = 0;
 HEAP8[$0 + ($$sum1$i + 7 << 2) >> 0] = 0;
 HEAP8[$5 + 29 >> 0] = 127;
 HEAP8[$5 + 30 >> 0] = 127;
 HEAP8[$5 + 31 >> 0] = 0;
 $$0$i = $0;
 return $$0$i | 0;
}

function _case1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$sum1 = 0, $0 = 0, $11 = 0, $14 = 0, $7 = 0;
 $0 = _mr($self) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($0 | 0) < (HEAP32[$w + 12 >> 2] | 0)) {
  $$0 = _rank1ex($w, $self, $0, 303) | 0;
  return $$0 | 0;
 }
 $7 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $7 + 4 + ($7 & 1) | 0;
 $11 = _df1($w, HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0) | 0;
 $14 = _from($11, HEAP32[$self + ($$sum1 + 4 << 2) >> 2] | 0) | 0;
 if (!$14) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$14 + 12 >> 2] | 0)) {
  $$0 = _df1($w, HEAP32[$14 + 16 >> 2] | 0) | 0;
  return $$0 | 0;
 } else {
  _jsignal(14);
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function _folk($f, $g, $h) {
 $f = $f | 0;
 $g = $g | 0;
 $h = $h | 0;
 var $$0 = 0, $10 = 0, $15 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0;
 if (!(($f | 0) != 0 & ($g | 0) != 0 & ($h | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$f >> 2] & 128 & HEAP32[$g >> 2] & HEAP32[$h >> 2])) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $10 = _mr($f) | 0;
 if (($10 | 0) > (_mr($h) | 0)) $25 = _mr($f) | 0; else $25 = _mr($h) | 0;
 $15 = _lr($f) | 0;
 if (($15 | 0) > (_lr($h) | 0)) $26 = _lr($f) | 0; else $26 = _lr($h) | 0;
 $20 = _rr($f) | 0;
 if (($20 | 0) > (_rr($h) | 0)) $27 = _rr($f) | 0; else $27 = _rr($h) | 0;
 $$0 = _fdef(-21, 128, 323, 324, $f, $g, $h, 0, $25, $26, $27) | 0;
 return $$0 | 0;
}

function _strtol($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0, $4 = 0, $6 = 0, $f$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $f$i = sp;
 HEAP32[$f$i >> 2] = 0;
 $0 = $f$i + 4 | 0;
 HEAP32[$0 >> 2] = $s;
 HEAP32[$f$i + 44 >> 2] = $s;
 $4 = $f$i + 8 | 0;
 HEAP32[$4 >> 2] = ($s | 0) < 0 ? -1 : $s + 2147483647 | 0;
 HEAP32[$f$i + 76 >> 2] = -1;
 ___shlim($f$i, 0);
 $6 = ___intscan($f$i, $base, 1, -2147483648, 0) | 0;
 if (!$p) {
  STACKTOP = sp;
  return $6 | 0;
 }
 HEAP32[$p >> 2] = $s + ((HEAP32[$0 >> 2] | 0) + (HEAP32[$f$i + 108 >> 2] | 0) - (HEAP32[$4 >> 2] | 0));
 STACKTOP = sp;
 return $6 | 0;
}

function _zceil($agg$result, $v) {
 $agg$result = $agg$result | 0;
 $v = $v | 0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $zi$0$i = 0.0, $zr$0$i = 0.0;
 $0 = +HEAPF64[304];
 $1 = +HEAPF64[305];
 $2 = $0 - +HEAPF64[$v >> 3];
 $3 = $1 - +HEAPF64[$v + 8 >> 3];
 $4 = +Math_floor(+$2);
 $5 = $2 - $4;
 $6 = +Math_floor(+$3);
 $7 = $3 - $6;
 do if (!(+HEAPF64[52] + ($5 + $7) >= 1.0)) {
  $zi$0$i = $6;
  $zr$0$i = $4;
 } else if (!($5 >= $7)) {
  $zi$0$i = $6 + 1.0;
  $zr$0$i = $4;
  break;
 } else {
  $zi$0$i = $6;
  $zr$0$i = $4 + 1.0;
  break;
 } while (0);
 HEAPF64[$agg$result >> 3] = $0 - $zr$0$i;
 HEAPF64[$agg$result + 8 >> 3] = $1 - $zi$0$i;
 return;
}

function _table($w) {
 $w = $w | 0;
 var $$0 = 0, $12 = 0, $16 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = $w + 8 | 0;
 $4 = _ga(HEAP32[$w >> 2] | 0, HEAP32[$2 >> 2] | 0, 2, 0) | 0;
 if (!$4) {
  $$0 = 0;
  return $$0 | 0;
 }
 $6 = $w + 12 | 0;
 if (!(HEAP32[$6 >> 2] | 0)) $12 = 1; else $12 = HEAP32[$w + 16 >> 2] | 0;
 HEAP32[$4 + 16 >> 2] = $12;
 HEAP32[$4 + 20 >> 2] = _aii($w) | 0;
 $16 = HEAP32[$4 + 12 >> 2] | 0;
 $19 = HEAP32[$6 >> 2] | 0;
 $22 = HEAP32[$2 >> 2] | 0;
 _memcpy($4 + ($16 + 4 + ($16 & 1) << 2) | 0, $w + ($19 + 4 + ($19 & 1) << 2) | 0, Math_imul(_bp(HEAP32[$w >> 2] | 0) | 0, $22) | 0) | 0;
 $$0 = $4;
 return $$0 | 0;
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((num | 0) >= 4096) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 ret = dest | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  while ((num | 0) >= 4) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
   num = num - 4 | 0;
  }
 }
 while ((num | 0) > 0) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
  num = num - 1 | 0;
 }
 return ret | 0;
}

function _gcr2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$sum1 = 0, $$sum6 = 0, $1 = 0, $13 = 0, $16 = 0, $19 = 0, $5 = 0, $7 = 0, $9 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $5 = HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0;
 $7 = HEAP32[$self + ($$sum1 + 4 << 2) >> 2] | 0;
 $9 = HEAP32[$7 + 12 >> 2] | 0;
 $$sum6 = $9 + 4 + ($9 & 1) | 0;
 $13 = _df2($a, $w, HEAP32[$7 + ($$sum6 << 2) >> 2] | 0) | 0;
 $16 = _df2($a, $w, HEAP32[$7 + ($$sum6 + 2 << 2) >> 2] | 0) | 0;
 $19 = _df2($a, $w, HEAP32[$7 + ($$sum6 + 1 << 2) >> 2] | 0) | 0;
 return _df2($13, $16, _df2($5, $19, _ds(HEAP8[$self + ($$sum1 << 2) + 31 >> 0] | 0) | 0) | 0) | 0;
}

function _gcl2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$sum1 = 0, $$sum6 = 0, $1 = 0, $13 = 0, $16 = 0, $19 = 0, $5 = 0, $7 = 0, $9 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $5 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 $7 = HEAP32[$self + ($$sum1 + 4 << 2) >> 2] | 0;
 $9 = HEAP32[$7 + 12 >> 2] | 0;
 $$sum6 = $9 + 4 + ($9 & 1) | 0;
 $13 = _df2($a, $w, HEAP32[$7 + ($$sum6 << 2) >> 2] | 0) | 0;
 $16 = _df2($a, $w, HEAP32[$7 + ($$sum6 + 2 << 2) >> 2] | 0) | 0;
 $19 = _df2($a, $w, HEAP32[$7 + ($$sum6 + 1 << 2) >> 2] | 0) | 0;
 return _df2($13, $16, _df2($19, $5, _ds(HEAP8[$self + ($$sum1 << 2) + 31 >> 0] | 0) | 0) | 0) | 0;
}

function ___toread($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $15 = 0, $2 = 0, $21 = 0, $6 = 0, $8 = 0;
 $0 = $f + 74 | 0;
 $2 = HEAP8[$0 >> 0] | 0;
 HEAP8[$0 >> 0] = $2 + 255 | $2;
 $6 = $f + 20 | 0;
 $8 = $f + 44 | 0;
 if ((HEAP32[$6 >> 2] | 0) >>> 0 > (HEAP32[$8 >> 2] | 0) >>> 0) ftCall_iiii(HEAP32[$f + 36 >> 2] | 0, $f | 0, 0, 0) | 0;
 HEAP32[$f + 16 >> 2] = 0;
 HEAP32[$f + 28 >> 2] = 0;
 HEAP32[$6 >> 2] = 0;
 $15 = HEAP32[$f >> 2] | 0;
 if (!($15 & 20)) {
  $21 = HEAP32[$8 >> 2] | 0;
  HEAP32[$f + 8 >> 2] = $21;
  HEAP32[$f + 4 >> 2] = $21;
  $$0 = 0;
  return $$0 | 0;
 }
 if (!($15 & 4)) {
  $$0 = -1;
  return $$0 | 0;
 }
 HEAP32[$f >> 2] = $15 | 32;
 $$0 = -1;
 return $$0 | 0;
}

function _memcmp($vl, $vr, $n) {
 $vl = $vl | 0;
 $vr = $vr | 0;
 $n = $n | 0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $1 = 0, $11 = 0, $2 = 0, $l$04 = 0, $r$05 = 0, label = 0;
 if (!$n) {
  $11 = 0;
  return $11 | 0;
 } else {
  $$03 = $n;
  $l$04 = $vl;
  $r$05 = $vr;
 }
 while (1) {
  $1 = HEAP8[$l$04 >> 0] | 0;
  $2 = HEAP8[$r$05 >> 0] | 0;
  if ($1 << 24 >> 24 != $2 << 24 >> 24) {
   $$lcssa = $1;
   $$lcssa19 = $2;
   break;
  }
  $$03 = $$03 + -1 | 0;
  if (!$$03) {
   $11 = 0;
   label = 5;
   break;
  } else {
   $l$04 = $l$04 + 1 | 0;
   $r$05 = $r$05 + 1 | 0;
  }
 }
 if ((label | 0) == 5) return $11 | 0;
 $11 = ($$lcssa & 255) - ($$lcssa19 & 255) | 0;
 return $11 | 0;
}

function _wa($f, $j, $w) {
 $f = $f | 0;
 $j = $j | 0;
 $w = $w | 0;
 var $$0 = 0, $12 = 0, $3 = 0, $5 = 0, $7 = 0, $p$04 = 0;
 if (!(($f | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $3 = HEAP32[$w + 8 >> 2] | 0;
 $5 = HEAP32[$w + 12 >> 2] | 0;
 $7 = $w + ($5 + 4 + ($5 & 1) << 2) | 0;
 if (($j | 0) > -1) _fseek($f | 0, $j | 0, 0) | 0;
 if (($3 | 0) > 0) {
  $p$04 = 0;
  do {
   $12 = _fwrite($7 + $p$04 | 0, 1, $3 - $p$04 | 0, $f | 0) | 0;
   $p$04 = $12 + $p$04 | 0;
  } while (($3 | 0) > ($p$04 | 0) & ($12 | 0) != 0);
 }
 if (!(_ferror($f | 0) | 0)) {
  $$0 = HEAP32[616] | 0;
  return $$0 | 0;
 } else {
  _jsignal(7);
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function _is($b, $e, $stack) {
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $19 = 0, $3 = 0, $4 = 0, $8 = 0;
 $1 = HEAP32[$stack + ($b << 2) >> 2] | 0;
 $3 = HEAP32[$stack + ($e << 2) >> 2] | 0;
 $4 = HEAP32[894] | 0;
 if (!$4) $19 = 0; else {
  $8 = HEAP32[$stack + ($b + 1 << 2) >> 2] | 0;
  $10 = HEAP32[$8 + 12 >> 2] | 0;
  $19 = (HEAP32[$8 + ($10 + 4 + ($10 & 1) << 2) >> 2] | 0) != 0;
 }
 if (!(HEAP32[$1 >> 2] & 1024)) {
  if (!(_rank2ex($1, $3, 0, -1, -1, $19 ? 353 : 352) | 0)) {
   $$0 = 0;
   return $$0 | 0;
  }
 } else if (!(_symbis($1, $3, $19 ? $4 : HEAP32[892] | 0) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = $3;
 return $$0 | 0;
}

function _prod($n, $v) {
 $n = $n | 0;
 $v = $v | 0;
 var $$0 = 0, $0 = 0, $8 = 0, $i$04 = 0, $i1$03 = 0, $z$02 = 0, label = 0;
 $0 = ($n | 0) > 0;
 if ($0) $i$04 = 0; else {
  $$0 = 1;
  return $$0 | 0;
 }
 do {
  if (!(HEAP32[$v + ($i$04 << 2) >> 2] | 0)) {
   $$0 = 0;
   label = 6;
   break;
  }
  $i$04 = $i$04 + 1 | 0;
 } while (($i$04 | 0) < ($n | 0));
 if ((label | 0) == 6) return $$0 | 0;
 if ($0) {
  $i1$03 = 0;
  $z$02 = 1;
 } else {
  $$0 = 1;
  return $$0 | 0;
 }
 while (1) {
  $8 = Math_imul(HEAP32[$v + ($i1$03 << 2) >> 2] | 0, $z$02) | 0;
  $i1$03 = $i1$03 + 1 | 0;
  if (($i1$03 | 0) == ($n | 0)) {
   $$0 = $8;
   break;
  } else $z$02 = $8;
 }
 return $$0 | 0;
}

function _disps($w) {
 $w = $w | 0;
 var $$0 = 0, $0 = 0, $14 = 0, $3 = 0, $4 = 0;
 $0 = _vi($w) | 0;
 if (!$0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $3 = HEAP32[$0 + 8 >> 2] | 0;
 $4 = $0 + 12 | 0;
 if ((HEAP32[$4 >> 2] | 0) >= 2) {
  _jsignal(14);
  $$0 = 0;
  return $$0 | 0;
 }
 if (!((_all1(_nubsieve($0) | 0) | 0) << 24 >> 24)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 if (!((_all1(_eps($0, _apv(5, 1, 1) | 0) | 0) | 0) << 24 >> 24)) {
  _jsignal(6);
  $$0 = 0;
  return $$0 | 0;
 } else {
  HEAP32[594] = $3;
  $14 = HEAP32[$4 >> 2] | 0;
  _memcpy(2380, $0 + ($14 + 4 + ($14 & 1) << 2) | 0, $3 << 2 | 0) | 0;
  $$0 = HEAP32[616] | 0;
  return $$0 | 0;
 }
 return 0;
}

function _dbs($w) {
 $w = $w | 0;
 var $$0 = 0, $$01$i = 0, $0 = 0, $12 = 0, $4 = 0, $7 = 0, $9 = 0, $si$02 = 0;
 $0 = HEAP32[108] | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 do if ($0) {
  $4 = HEAP32[$0 + 24 >> 2] | 0;
  if (($4 | 0) == 5) {
   $7 = HEAP32[$0 + 20 >> 2] | 0;
   if (!$7) break;
   $9 = HEAP32[$7 + 24 >> 2] | 0;
   $si$02 = $7;
  } else {
   $9 = $4;
   $si$02 = $0;
  }
  if (($9 | 0) == 1) {
   $12 = HEAP32[$si$02 + 20 >> 2] | 0;
   if (!$12) break; else $$01$i = $12;
  } else $$01$i = $si$02;
  do {
   _debdisp($$01$i);
   $$01$i = HEAP32[$$01$i + 20 >> 2] | 0;
  } while (($$01$i | 0) != 0);
 } while (0);
 $$0 = HEAP32[638] | 0;
 return $$0 | 0;
}

function _swap1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $2 = 0, $20 = 0, $4 = 0, $7 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $7 = HEAP32[$self + ($4 + 6 + ($4 & 1) << 2) >> 2] | 0;
 if (!$7) $20 = 0; else {
  $10 = HEAP32[$7 + 12 >> 2] | 0;
  $20 = HEAP32[$7 + ($10 + 5 + ($10 & 1) << 2) >> 2] | 0;
 }
 $14 = _mr($self) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($14 | 0) < (HEAP32[$w + 12 >> 2] | 0)) {
  $$0 = _rank1ex($w, $self, $14, 244) | 0;
  return $$0 | 0;
 } else {
  $$0 = _gc(ftCall_iiii($20 | 0, $w | 0, $w | 0, $7 | 0) | 0, $2) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
 stop = ptr + num | 0;
 if ((num | 0) >= 20) {
  value = value & 255;
  unaligned = ptr & 3;
  value4 = value | value << 8 | value << 16 | value << 24;
  stop4 = stop & ~3;
  if (unaligned) {
   unaligned = ptr + 4 - unaligned | 0;
   while ((ptr | 0) < (unaligned | 0)) {
    HEAP8[ptr >> 0] = value;
    ptr = ptr + 1 | 0;
   }
  }
  while ((ptr | 0) < (stop4 | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (stop | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return ptr - num | 0;
}

function _gadv($w, $0) {
 $w = $w | 0;
 $0 = $0 | 0;
 var $$0 = 0, $16 = 0, $17 = 0, $6 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 32)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $6 = HEAP32[$w + 8 >> 2] | 0;
 if ((HEAP32[$w + 12 >> 2] | 0) >= 2) {
  _jsignal(14);
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(($6 | 0) != 0 & ($6 | 0) < 4)) {
  _jsignal(9);
  $$0 = 0;
  return $$0 | 0;
 }
 if (($6 | 0) == 3) $16 = $w; else $16 = _behead(_reshape(_sc(4) | 0, $w) | 0) | 0;
 $17 = _every($16, 299) | 0;
 if (!$17) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = _fdef($0 << 24 >> 24, 128, 309, 310, $w, 0, $17, 1, 127, 127, 127) | 0;
 return $$0 | 0;
}

function _jconjug($v, $x) {
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0, $v$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $v$byval_copy = sp + 16 | 0;
 $0 = sp;
 HEAP32[$v$byval_copy >> 2] = HEAP32[$v >> 2];
 HEAP32[$v$byval_copy + 4 >> 2] = HEAP32[$v + 4 >> 2];
 HEAP32[$v$byval_copy + 8 >> 2] = HEAP32[$v + 8 >> 2];
 HEAP32[$v$byval_copy + 12 >> 2] = HEAP32[$v + 12 >> 2];
 _zconjug($0, $v$byval_copy);
 HEAP32[$x >> 2] = HEAP32[$0 >> 2];
 HEAP32[$x + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$x + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$x + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 STACKTOP = sp;
 return;
}

function _jfloor($v, $x) {
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0, $v$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $v$byval_copy = sp + 16 | 0;
 $0 = sp;
 HEAP32[$v$byval_copy >> 2] = HEAP32[$v >> 2];
 HEAP32[$v$byval_copy + 4 >> 2] = HEAP32[$v + 4 >> 2];
 HEAP32[$v$byval_copy + 8 >> 2] = HEAP32[$v + 8 >> 2];
 HEAP32[$v$byval_copy + 12 >> 2] = HEAP32[$v + 12 >> 2];
 _zfloor($0, $v$byval_copy);
 HEAP32[$x >> 2] = HEAP32[$0 >> 2];
 HEAP32[$x + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$x + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$x + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 STACKTOP = sp;
 return;
}

function _obv1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $2 = 0, $20 = 0, $4 = 0, $7 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $7 = HEAP32[$self + ($4 + 6 + ($4 & 1) << 2) >> 2] | 0;
 if (!$7) $20 = 0; else {
  $10 = HEAP32[$7 + 12 >> 2] | 0;
  $20 = HEAP32[$7 + ($10 + 4 + ($10 & 1) << 2) >> 2] | 0;
 }
 $14 = _mr($self) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($14 | 0) < (HEAP32[$w + 12 >> 2] | 0)) {
  $$0 = _rank1ex($w, $self, $14, 270) | 0;
  return $$0 | 0;
 } else {
  $$0 = _gc(ftCall_iii($20 | 0, $w | 0, $7 | 0) | 0, $2) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _xv1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $2 = 0, $20 = 0, $4 = 0, $7 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $7 = HEAP32[$self + ($4 + 6 + ($4 & 1) << 2) >> 2] | 0;
 if (!$7) $20 = 0; else {
  $10 = HEAP32[$7 + 12 >> 2] | 0;
  $20 = HEAP32[$7 + ($10 + 4 + ($10 & 1) << 2) >> 2] | 0;
 }
 $14 = _mr($self) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($14 | 0) < (HEAP32[$w + 12 >> 2] | 0)) {
  $$0 = _rank1ex($w, $self, $14, 340) | 0;
  return $$0 | 0;
 } else {
  $$0 = _gc(ftCall_iii($20 | 0, $w | 0, $7 | 0) | 0, $2) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _jsqrt($v, $x) {
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0, $v$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $v$byval_copy = sp + 16 | 0;
 $0 = sp;
 HEAP32[$v$byval_copy >> 2] = HEAP32[$v >> 2];
 HEAP32[$v$byval_copy + 4 >> 2] = HEAP32[$v + 4 >> 2];
 HEAP32[$v$byval_copy + 8 >> 2] = HEAP32[$v + 8 >> 2];
 HEAP32[$v$byval_copy + 12 >> 2] = HEAP32[$v + 12 >> 2];
 _zsqrt($0, $v$byval_copy);
 HEAP32[$x >> 2] = HEAP32[$0 >> 2];
 HEAP32[$x + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$x + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$x + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 STACKTOP = sp;
 return;
}

function _jceil($v, $x) {
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0, $v$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $v$byval_copy = sp + 16 | 0;
 $0 = sp;
 HEAP32[$v$byval_copy >> 2] = HEAP32[$v >> 2];
 HEAP32[$v$byval_copy + 4 >> 2] = HEAP32[$v + 4 >> 2];
 HEAP32[$v$byval_copy + 8 >> 2] = HEAP32[$v + 8 >> 2];
 HEAP32[$v$byval_copy + 12 >> 2] = HEAP32[$v + 12 >> 2];
 _zceil($0, $v$byval_copy);
 HEAP32[$x >> 2] = HEAP32[$0 >> 2];
 HEAP32[$x + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$x + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$x + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 STACKTOP = sp;
 return;
}

function _sinh($x) {
 $x = +$x;
 var $$ = 0.0, $$0 = 0.0, $1 = 0, $3 = 0, $4 = 0.0, $6 = 0.0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $$ = ($1 | 0) < 0 ? -.5 : .5;
 $3 = $1 & 2147483647;
 HEAP32[tempDoublePtr >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[tempDoublePtr + 4 >> 2] = $3;
 $4 = +HEAPF64[tempDoublePtr >> 3];
 if ($3 >>> 0 >= 1082535490) {
  $$0 = $$ * 2.0 * +___expo2($4);
  return +$$0;
 }
 $6 = +_expm1($4);
 if ($3 >>> 0 >= 1072693248) {
  $$0 = $$ * ($6 + $6 / ($6 + 1.0));
  return +$$0;
 }
 if ($3 >>> 0 < 1045430272) {
  $$0 = $x;
  return +$$0;
 }
 $$0 = $$ * ($6 * 2.0 - $6 * $6 / ($6 + 1.0));
 return +$$0;
}

function _agenda($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$a >> 2] | 0;
 if ($2 & 127) if (HEAP32[$w >> 2] & 128) {
  if (!(HEAP32[$a + 8 >> 2] | 0)) {
   _jsignal(9);
   $$0 = 0;
   return $$0 | 0;
  }
  if (!($2 & 32)) {
   _jsignal(3);
   $$0 = 0;
   return $$0 | 0;
  }
  $13 = _every($a, 299) | 0;
  if (!$13) {
   $$0 = 0;
   return $$0 | 0;
  }
  $15 = _mr($w) | 0;
  $16 = _lr($w) | 0;
  $$0 = _fdef(-94, 128, 303, 304, $a, $w, $13, 1, $15, $16, _rr($w) | 0) | 0;
  return $$0 | 0;
 }
 _jsignal(3);
 $$0 = 0;
 return $$0 | 0;
}

function _jlog($v, $x) {
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0, $v$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $v$byval_copy = sp + 16 | 0;
 $0 = sp;
 HEAP32[$v$byval_copy >> 2] = HEAP32[$v >> 2];
 HEAP32[$v$byval_copy + 4 >> 2] = HEAP32[$v + 4 >> 2];
 HEAP32[$v$byval_copy + 8 >> 2] = HEAP32[$v + 8 >> 2];
 HEAP32[$v$byval_copy + 12 >> 2] = HEAP32[$v + 12 >> 2];
 _zlog($0, $v$byval_copy);
 HEAP32[$x >> 2] = HEAP32[$0 >> 2];
 HEAP32[$x + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$x + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$x + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 STACKTOP = sp;
 return;
}

function _jexp($v, $x) {
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0, $v$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $v$byval_copy = sp + 16 | 0;
 $0 = sp;
 HEAP32[$v$byval_copy >> 2] = HEAP32[$v >> 2];
 HEAP32[$v$byval_copy + 4 >> 2] = HEAP32[$v + 4 >> 2];
 HEAP32[$v$byval_copy + 8 >> 2] = HEAP32[$v + 8 >> 2];
 HEAP32[$v$byval_copy + 12 >> 2] = HEAP32[$v + 12 >> 2];
 _zexp($0, $v$byval_copy);
 HEAP32[$x >> 2] = HEAP32[$0 >> 2];
 HEAP32[$x + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$x + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$x + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 STACKTOP = sp;
 return;
}

function _rd($f, $j, $n) {
 $f = $f | 0;
 $j = $j | 0;
 $n = $n | 0;
 var $$0 = 0, $1 = 0, $11 = 0, $4 = 0, $6 = 0, $p$02 = 0;
 if (!$f) {
  $$0 = 0;
  return $$0 | 0;
 }
 $1 = _ga(2, $n, 1, 0) | 0;
 if (!$1) {
  $$0 = 0;
  return $$0 | 0;
 }
 $4 = HEAP32[$1 + 12 >> 2] | 0;
 $6 = $1 + ($4 + 4 + ($4 & 1) << 2) | 0;
 if (($j | 0) > -1) _fseek($f | 0, $j | 0, 0) | 0;
 if (($n | 0) > 0) {
  $p$02 = 0;
  do {
   $11 = _fread($6 + $p$02 | 0, 1, $n - $p$02 | 0, $f | 0) | 0;
   $p$02 = $11 + $p$02 | 0;
  } while (($p$02 | 0) < ($n | 0) & ($11 | 0) != 0);
 }
 if (!(_ferror($f | 0) | 0)) {
  $$0 = $1;
  return $$0 | 0;
 }
 _jsignal(7);
 $$0 = 0;
 return $$0 | 0;
}

function _ii($w) {
 $w = $w | 0;
 var $$0 = 0, $11 = 0, $6 = 0, $7 = 0, $8 = 0, $j$112$i = 0, $x$113$i = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w + 12 >> 2] | 0)) $7 = 1; else $7 = HEAP32[$w + 16 >> 2] | 0;
 $6 = $7 + -1 | 0;
 $8 = _ga(4, $7, 1, 0) | 0;
 if (!$8) {
  $$0 = 0;
  return $$0 | 0;
 }
 $11 = HEAP32[$8 + 12 >> 2] | 0;
 if (!$7) {
  $$0 = $8;
  return $$0 | 0;
 }
 $j$112$i = -1;
 $x$113$i = $8 + ($11 + 4 + ($11 & 1) << 2) | 0;
 while (1) {
  $j$112$i = $j$112$i + 1 | 0;
  HEAP32[$x$113$i >> 2] = $j$112$i;
  if (($j$112$i | 0) == ($6 | 0)) {
   $$0 = $8;
   break;
  } else $x$113$i = $x$113$i + 4 | 0;
 }
 return $$0 | 0;
}

function _fitfill($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$sum1 = 0, $1 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $9 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $4 = HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0;
 $6 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 if (!$4) {
  $13 = 0;
  HEAP32[100] = $6;
  $14 = ftCall_iiii($13 | 0, $a | 0, $w | 0, $4 | 0) | 0;
  HEAP32[100] = 0;
  return $14 | 0;
 }
 $9 = HEAP32[$4 + 12 >> 2] | 0;
 $13 = HEAP32[$4 + ($9 + 5 + ($9 & 1) << 2) >> 2] | 0;
 HEAP32[100] = $6;
 $14 = ftCall_iiii($13 | 0, $a | 0, $w | 0, $4 | 0) | 0;
 HEAP32[100] = 0;
 return $14 | 0;
}

function _sscript1($w) {
 $w = $w | 0;
 var $$0 = 0, $13 = 0, $2 = 0, $22 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 12 >> 2] | 0;
 if (($2 | 0) > 0) {
  $$0 = _rank1ex($w, 0, 0, 408) | 0;
  return $$0 | 0;
 }
 if (HEAP32[$w >> 2] & 32) if (HEAP32[$w + 8 >> 2] | 0) {
  $13 = HEAP32[$w + ($2 + 4 + ($2 & 1) << 2) >> 2] | 0;
  if (!(HEAP32[$13 + 8 >> 2] | 0)) if ((HEAP32[$13 + 12 >> 2] | 0) == 1) {
   HEAP8[8472] = 0;
   $22 = HEAP32[2120] | 0;
   if ($22) _fclose($22 | 0) | 0;
   HEAP32[2120] = 0;
   HEAP32[2122] = 0;
   $$0 = HEAP32[616] | 0;
   return $$0 | 0;
  }
 }
 $$0 = _line(0, _jfread($w) | 0, 0) | 0;
 return $$0 | 0;
}

function _script1($w) {
 $w = $w | 0;
 var $$0 = 0, $13 = 0, $2 = 0, $22 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 12 >> 2] | 0;
 if (($2 | 0) > 0) {
  $$0 = _rank1ex($w, 0, 0, 406) | 0;
  return $$0 | 0;
 }
 if (HEAP32[$w >> 2] & 32) if (HEAP32[$w + 8 >> 2] | 0) {
  $13 = HEAP32[$w + ($2 + 4 + ($2 & 1) << 2) >> 2] | 0;
  if (!(HEAP32[$13 + 8 >> 2] | 0)) if ((HEAP32[$13 + 12 >> 2] | 0) == 1) {
   HEAP8[8472] = 1;
   $22 = HEAP32[2120] | 0;
   if ($22) _fclose($22 | 0) | 0;
   HEAP32[2120] = 0;
   HEAP32[2122] = 0;
   $$0 = HEAP32[616] | 0;
   return $$0 | 0;
  }
 }
 $$0 = _line(0, _jfread($w) | 0, 1) | 0;
 return $$0 | 0;
}

function _prefix($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $11 = 0, $17 = 0, $19 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $7 = HEAP32[$self + ($4 + 6 + ($4 & 1) << 2) >> 2] | 0;
 $8 = _mr($self) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $11 = HEAP32[$w + 12 >> 2] | 0;
 if (($8 | 0) < ($11 | 0)) {
  $$0 = _rank1ex($w, $self, $8, 254) | 0;
  return $$0 | 0;
 }
 if (!$11) $17 = 1; else $17 = HEAP32[$w + 16 >> 2] | 0;
 $19 = _table(_apv($17, 1, 1) | 0) | 0;
 $$0 = _gc(_df2($19, $w, _atop($7, _ds(-84) | 0) | 0) | 0, $2) | 0;
 return $$0 | 0;
}

function _oprod($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $7 = HEAP32[$self + ($4 + 6 + ($4 & 1) << 2) >> 2] | 0;
 $8 = _lr($self) | 0;
 $9 = _rr($self) | 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($8 | 0) >= (HEAP32[$a + 12 >> 2] | 0)) if (($9 | 0) >= (HEAP32[$w + 12 >> 2] | 0)) {
  $$0 = _gc(_df2($a, $w, _qq($7, _v2(_lr($7) | 0, 127) | 0) | 0) | 0, $2) | 0;
  return $$0 | 0;
 }
 $$0 = _rank2ex($a, $w, $self, $8, $9, 240) | 0;
 return $$0 | 0;
}

function _bsdot($w) {
 $w = $w | 0;
 var $$0 = 0, $$0$i = 0, $$sum1$i = 0, $12 = 0, $14 = 0, $5 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 128)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $5 = HEAP32[$w + 12 >> 2] | 0;
 $$sum1$i = $5 + 4 + ($5 & 1) | 0;
 if ((HEAP8[$w + ($$sum1$i << 2) + 31 >> 0] | 0) == 47) {
  $12 = HEAP32[$w + ($$sum1$i + 2 << 2) >> 2] | 0;
  $14 = HEAP32[$12 + 12 >> 2] | 0;
  $$0$i = (HEAP8[6304 + (HEAPU8[$12 + ($14 + 4 + ($14 & 1) << 2) + 31 >> 0] | 0) >> 0] | 0) != 0 ? 258 : 257;
 } else $$0$i = 257;
 $$0 = _fdef(-90, 128, $$0$i, 259, $w, 0, 0, 0, 127, 0, 127) | 0;
 return $$0 | 0;
}

function _bslash($w) {
 $w = $w | 0;
 var $$0 = 0, $$0$i = 0, $$sum1$i = 0, $13 = 0, $15 = 0, $6 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (HEAP32[$w >> 2] & 127) {
  $$0 = _gtrain($w) | 0;
  return $$0 | 0;
 }
 $6 = HEAP32[$w + 12 >> 2] | 0;
 $$sum1$i = $6 + 4 + ($6 & 1) | 0;
 if ((HEAP8[$w + ($$sum1$i << 2) + 31 >> 0] | 0) == 47) {
  $13 = HEAP32[$w + ($$sum1$i + 2 << 2) >> 2] | 0;
  $15 = HEAP32[$13 + 12 >> 2] | 0;
  $$0$i = (HEAP8[6304 + (HEAPU8[$13 + ($15 + 4 + ($15 & 1) << 2) + 31 >> 0] | 0) >> 0] | 0) != 0 ? 255 : 254;
 } else $$0$i = 254;
 $$0 = _fdef(92, 128, $$0$i, 256, $w, 0, 0, 0, 127, 0, 127) | 0;
 return $$0 | 0;
}

function _fitct2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$sum1 = 0, $1 = 0, $14 = 0, $18 = 0, $19 = 0, $4 = 0, $6 = 0, $9 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $4 = HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0;
 $6 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 if (!$4) $18 = 0; else {
  $9 = HEAP32[$4 + 12 >> 2] | 0;
  $18 = HEAP32[$4 + ($9 + 5 + ($9 & 1) << 2) >> 2] | 0;
 }
 $14 = HEAP32[$6 + 12 >> 2] | 0;
 HEAPF64[52] = +HEAPF64[$6 + ($14 + 4 + ($14 & 1) << 2) >> 3];
 $19 = ftCall_iiii($18 | 0, $a | 0, $w | 0, $4 | 0) | 0;
 HEAPF64[52] = +HEAPF64[326];
 return $19 | 0;
}

function _jfopen($w, $mode) {
 $w = $w | 0;
 $mode = $mode | 0;
 var $$0 = 0, $15 = 0, $18 = 0, $5 = 0, $9 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 32)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $5 = HEAP32[$w + 12 >> 2] | 0;
 $9 = _vs(HEAP32[$w + ($5 + 4 + ($5 & 1) << 2) >> 2] | 0) | 0;
 if (!$9) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$9 + 8 >> 2] | 0)) {
  _jsignal(9);
  $$0 = 0;
  return $$0 | 0;
 }
 $15 = HEAP32[$9 + 12 >> 2] | 0;
 $18 = _fopen($9 + ($15 + 4 + ($15 & 1) << 2) | 0, $mode | 0) | 0;
 if ($18) {
  $$0 = $18;
  return $$0 | 0;
 }
 _jsignal(7);
 $$0 = 0;
 return $$0 | 0;
}

function _fitbox($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$sum5 = 0, $1 = 0, $11 = 0, $14 = 0, $4 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $4 = HEAP32[$self + ($1 + 7 + ($1 & 1) << 2) >> 2] | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((_all1(_match($4, HEAP32[660] | 0) | 0) | 0) << 24 >> 24) {
  $$0 = _box($w) | 0;
  return $$0 | 0;
 }
 $11 = _ga(64, 1, 0, 0) | 0;
 if (!$11) {
  $$0 = 0;
  return $$0 | 0;
 }
 $14 = HEAP32[$11 + 12 >> 2] | 0;
 $$sum5 = $14 + 4 + ($14 & 1) | 0;
 HEAP32[$11 + ($$sum5 << 2) >> 2] = _ca($4) | 0;
 HEAP32[$11 + ($$sum5 + 1 << 2) >> 2] = _ca($w) | 0;
 $$0 = $11;
 return $$0 | 0;
}

function _nl2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $6 = 0, $8 = 0, $i1$04 = 0, $u$03 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$a >> 2] & 2)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $6 = HEAP32[$a + 12 >> 2] | 0;
 _memset(3608, 0, 256) | 0;
 $8 = HEAP32[$a + 8 >> 2] | 0;
 if (($8 | 0) > 0) {
  $i1$04 = 0;
  $u$03 = $a + ($6 + 4 + ($6 & 1) << 2) | 0;
  while (1) {
   HEAP8[3608 + (HEAPU8[$u$03 >> 0] | 0) >> 0] = 1;
   $i1$04 = $i1$04 + 1 | 0;
   if (($i1$04 | 0) == ($8 | 0)) break; else $u$03 = $u$03 + 1 | 0;
  }
 }
 $$0 = _nlx($w) | 0;
 return $$0 | 0;
}

function _gav2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$sum1 = 0, $$sum5 = 0, $1 = 0, $11 = 0, $14 = 0, $17 = 0, $5 = 0, $7 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $5 = HEAP32[$self + ($$sum1 + 4 << 2) >> 2] | 0;
 $7 = HEAP32[$5 + 12 >> 2] | 0;
 $$sum5 = $7 + 4 + ($7 & 1) | 0;
 $11 = _df2($a, $w, HEAP32[$5 + ($$sum5 << 2) >> 2] | 0) | 0;
 $14 = _df2($a, $w, HEAP32[$5 + ($$sum5 + 2 << 2) >> 2] | 0) | 0;
 $17 = _df2($a, $w, HEAP32[$5 + ($$sum5 + 1 << 2) >> 2] | 0) | 0;
 return _df2($11, $14, _df1($17, _ds(HEAP8[$self + ($$sum1 << 2) + 31 >> 0] | 0) | 0) | 0) | 0;
}

function _tayn1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $$sum1 = 0, $10 = 0, $2 = 0, $4 = 0, $7 = 0, $9 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $4 + 4 + ($4 & 1) | 0;
 $7 = HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0;
 $9 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 $10 = _mr($self) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($10 | 0) < (HEAP32[$w + 12 >> 2] | 0)) {
  $$0 = _rank1ex($w, $self, $10, 286) | 0;
  return $$0 | 0;
 } else {
  $$0 = _gc(_df1($w, _tayn(_fix($7) | 0, $9) | 0) | 0, $2) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _fillv($t, $n, $v) {
 $t = $t | 0;
 $n = $n | 0;
 $v = $v | 0;
 var $0 = 0, $12 = 0, $6 = 0, $kv = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $kv = sp;
 $0 = _bp($t) | 0;
 if ($t & 29) {
  _memset($v | 0, 0, Math_imul($0, $n) | 0) | 0;
  STACKTOP = sp;
  return;
 }
 if ($t & 2) {
  _memset($v | 0, 32, $n | 0) | 0;
  STACKTOP = sp;
  return;
 }
 $6 = Math_imul($0, $n) | 0;
 if (!($t & 32)) {
  HEAP32[$kv >> 2] = HEAP32[660];
  HEAP32[$kv + 4 >> 2] = HEAP32[616];
  $12 = $kv;
 } else $12 = 2464;
 _mvc($6, $v, $0, $12);
 STACKTOP = sp;
 return;
}

function _fitct1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$sum1 = 0, $1 = 0, $14 = 0, $18 = 0, $19 = 0, $4 = 0, $6 = 0, $9 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $4 = HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0;
 $6 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 if (!$4) $18 = 0; else {
  $9 = HEAP32[$4 + 12 >> 2] | 0;
  $18 = HEAP32[$4 + ($9 + 4 + ($9 & 1) << 2) >> 2] | 0;
 }
 $14 = HEAP32[$6 + 12 >> 2] | 0;
 HEAPF64[52] = +HEAPF64[$6 + ($14 + 4 + ($14 & 1) << 2) >> 3];
 $19 = ftCall_iii($18 | 0, $w | 0, $4 | 0) | 0;
 HEAPF64[52] = +HEAPF64[326];
 return $19 | 0;
}

function _eqa($n, $u, $v) {
 $n = $n | 0;
 $u = $u | 0;
 $v = $v | 0;
 var $$0 = 0, $$014 = 0, $$023 = 0, $1 = 0, $i$05 = 0, label = 0;
 if (($n | 0) > 0) {
  $$014 = $v;
  $$023 = $u;
  $i$05 = 0;
 } else {
  $$0 = 1;
  return $$0 | 0;
 }
 while (1) {
  $1 = HEAP32[646] | 0;
  if (($1 | 0) != (_match(HEAP32[$$023 >> 2] | 0, HEAP32[$$014 >> 2] | 0) | 0)) {
   $$0 = 0;
   label = 4;
   break;
  }
  $i$05 = $i$05 + 1 | 0;
  if (($i$05 | 0) >= ($n | 0)) {
   $$0 = 1;
   label = 4;
   break;
  } else {
   $$014 = $$014 + 4 | 0;
   $$023 = $$023 + 4 | 0;
  }
 }
 if ((label | 0) == 4) return $$0 | 0;
 return 0;
}

function _rotate($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $13 = 0, $5 = 0, $9 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$a + 12 >> 2] | 0) <= 0) {
  $5 = $w + 12 | 0;
  if ((HEAP32[$5 >> 2] | 0) <= 127) {
   $9 = _i0($a) | 0;
   if (HEAP32[$5 >> 2] | 0) {
    $13 = HEAP32[$w + 16 >> 2] | 0;
    if ($13) {
     $$0 = _from(_apv($13, (($9 | 0) % ($13 | 0) | 0) - (($9 | 0) > 0 ? $13 : 0) | 0, 1) | 0, $w) | 0;
     return $$0 | 0;
    }
   }
   $$0 = _ca($w) | 0;
   return $$0 | 0;
  }
 }
 $$0 = _rank2ex($a, $w, 0, 0, 127, 110) | 0;
 return $$0 | 0;
}

function _strcmp($l, $r) {
 $l = $l | 0;
 $r = $r | 0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $6 = 0, $7 = 0;
 $0 = HEAP8[$l >> 0] | 0;
 $1 = HEAP8[$r >> 0] | 0;
 if ($0 << 24 >> 24 == 0 ? 1 : $0 << 24 >> 24 != $1 << 24 >> 24) {
  $$lcssa = $0;
  $$lcssa2 = $1;
 } else {
  $$014 = $l;
  $$05 = $r;
  do {
   $$014 = $$014 + 1 | 0;
   $$05 = $$05 + 1 | 0;
   $6 = HEAP8[$$014 >> 0] | 0;
   $7 = HEAP8[$$05 >> 0] | 0;
  } while (!($6 << 24 >> 24 == 0 ? 1 : $6 << 24 >> 24 != $7 << 24 >> 24));
  $$lcssa = $6;
  $$lcssa2 = $7;
 }
 return ($$lcssa & 255) - ($$lcssa2 & 255) | 0;
}

function _zfloor($agg$result, $v) {
 $agg$result = $agg$result | 0;
 $v = $v | 0;
 var $0 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $zi$0 = 0.0, $zr$0 = 0.0;
 $0 = +HEAPF64[$v >> 3];
 $2 = +HEAPF64[$v + 8 >> 3];
 $3 = +Math_floor(+$0);
 $4 = $0 - $3;
 $5 = +Math_floor(+$2);
 $6 = $2 - $5;
 do if (!(+HEAPF64[52] + ($4 + $6) >= 1.0)) {
  $zi$0 = $5;
  $zr$0 = $3;
 } else if (!($4 >= $6)) {
  $zi$0 = $5 + 1.0;
  $zr$0 = $3;
  break;
 } else {
  $zi$0 = $5;
  $zr$0 = $3 + 1.0;
  break;
 } while (0);
 HEAPF64[$agg$result >> 3] = $zr$0;
 HEAPF64[$agg$result + 8 >> 3] = $zi$0;
 return;
}

function _vib($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $14 = 0, $16 = 0, $3 = 0, $5 = 0, $8 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $3 = (HEAP32[$w >> 2] & 5 | 0) != 0;
 do if (!$3) {
  $5 = _eq($w, _floor1($w) | 0) | 0;
  if ($5) {
   $8 = HEAP32[$5 + 12 >> 2] | 0;
   if (!(_memchr($5 + ($8 + 4 + ($8 & 1) << 2) | 0, 0, HEAP32[$5 + 8 >> 2] | 0) | 0)) break;
  }
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 } while (0);
 $14 = _negate($a) | 0;
 $16 = _maximum($14, _minimum($a, $w) | 0) | 0;
 if ($3) {
  $$0 = $16;
  return $$0 | 0;
 }
 $$0 = _icvt($16) | 0;
 return $$0 | 0;
}

function _gcr1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$sum1 = 0, $$sum6 = 0, $1 = 0, $13 = 0, $16 = 0, $5 = 0, $7 = 0, $9 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $5 = HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0;
 $7 = HEAP32[$self + ($$sum1 + 4 << 2) >> 2] | 0;
 $9 = HEAP32[$7 + 12 >> 2] | 0;
 $$sum6 = $9 + 4 + ($9 & 1) | 0;
 $13 = _df1($w, HEAP32[$7 + ($$sum6 + 2 << 2) >> 2] | 0) | 0;
 $16 = _df1($w, HEAP32[$7 + ($$sum6 + 1 << 2) >> 2] | 0) | 0;
 return _df1($13, _df2($5, $16, _ds(HEAP8[$self + ($$sum1 << 2) + 31 >> 0] | 0) | 0) | 0) | 0;
}

function _gcl1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$sum1 = 0, $$sum6 = 0, $1 = 0, $13 = 0, $16 = 0, $5 = 0, $7 = 0, $9 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $5 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 $7 = HEAP32[$self + ($$sum1 + 4 << 2) >> 2] | 0;
 $9 = HEAP32[$7 + 12 >> 2] | 0;
 $$sum6 = $9 + 4 + ($9 & 1) | 0;
 $13 = _df1($w, HEAP32[$7 + ($$sum6 + 2 << 2) >> 2] | 0) | 0;
 $16 = _df1($w, HEAP32[$7 + ($$sum6 + 1 << 2) >> 2] | 0) | 0;
 return _df1($13, _df2($16, $5, _ds(HEAP8[$self + ($$sum1 << 2) + 31 >> 0] | 0) | 0) | 0) | 0;
}

function _vaa($w, $t, $f2, $cv) {
 $w = $w | 0;
 $t = $t | 0;
 $f2 = $f2 | 0;
 $cv = $cv | 0;
 var $1 = 0, $14 = 0, $23 = 0, $4 = 0, $6 = 0;
 $1 = HEAP32[$w + 12 >> 2] | 0;
 $4 = HEAP32[$w + ($1 + 6 + ($1 & 1) << 2) >> 2] | 0;
 $6 = HEAP32[$4 + 12 >> 2] | 0;
 $14 = HEAPU8[6304 + (HEAPU8[$4 + ($6 + 4 + ($6 & 1) << 2) + 31 >> 0] | 0) >> 0] | 0;
 if (!($t & 1)) if (!($t & 4)) $23 = $t >>> 3 & 1 ^ 3; else $23 = 1; else $23 = 0;
 HEAP32[$f2 >> 2] = HEAP32[6560 + ($14 * 52 | 0) + 4 + ($23 << 3) >> 2];
 HEAP32[$cv >> 2] = HEAP32[6560 + ($14 * 52 | 0) + 4 + ($23 << 3) + 4 >> 2];
 return;
}

function _num2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $4 = 0, $9 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0 & ($self | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $9 = HEAP8[$self + ($4 + 4 + ($4 & 1) << 2) + 31 >> 0] | 0;
 if (($9 | 0) == -31) {
  $$0 = HEAP32[646] | 0;
  return $$0 | 0;
 } else if (($9 | 0) == -121) {
  $$0 = HEAP32[624] | 0;
  return $$0 | 0;
 } else if (($9 | 0) == -32) {
  $$0 = HEAP32[660] | 0;
  return $$0 | 0;
 } else {
  $$0 = _sc($9 + 32 | 0) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _cut1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $1 = 0, $4 = 0, $6 = 0, $9 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $4 = HEAP32[$self + ($1 + 7 + ($1 & 1) << 2) >> 2] | 0;
 $6 = HEAP32[$4 + 12 >> 2] | 0;
 $9 = HEAP32[$4 + ($6 + 4 + ($6 & 1) << 2) >> 2] | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (HEAP32[$w + 12 >> 2] | 0) if (!(HEAP32[$w + 16 >> 2] | 0)) {
  $$0 = HEAP32[616] | 0;
  return $$0 | 0;
 }
 $$0 = _cut2(_eps($w, _take(($9 | 0) == 1 | ($9 | 0) == -1 ? HEAP32[646] | 0 : HEAP32[644] | 0, $w) | 0) | 0, $w, $self) | 0;
 return $$0 | 0;
}

function _xcvt($w) {
 $w = $w | 0;
 var $0 = 0.0, $11 = 0, $8 = 0, $y$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $y$i = sp;
 $0 = +HEAPF64[326];
 HEAPF64[326] = 0.0;
 do if (!((_ccvt(1, $w, $y$i) | 0) << 24 >> 24)) if (!((_ccvt(4, $w, $y$i) | 0) << 24 >> 24)) {
  $8 = (_ccvt(8, $w, $y$i) | 0) << 24 >> 24 != 0;
  $11 = $8 ? HEAP32[$y$i >> 2] | 0 : $w;
  break;
 } else {
  $11 = HEAP32[$y$i >> 2] | 0;
  break;
 } else $11 = HEAP32[$y$i >> 2] | 0; while (0);
 HEAPF64[326] = $0;
 STACKTOP = sp;
 return $11 | 0;
}

function _vconj($agg$result, $b, $e, $stack) {
 $agg$result = $agg$result | 0;
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 var $z$sroa$0$0 = 0, label = 0;
 if (!(HEAP32[$stack + ($b << 3) + 4 >> 2] | 0)) if (!(HEAP32[$stack + ($e << 3) + 4 >> 2] | 0)) $z$sroa$0$0 = _df2(HEAP32[$stack + ($b << 3) >> 2] | 0, HEAP32[$stack + ($e << 3) >> 2] | 0, HEAP32[$stack + ($e + -1 << 3) >> 2] | 0) | 0; else label = 3; else label = 3;
 if ((label | 0) == 3) {
  HEAP8[3296] = 1;
  $z$sroa$0$0 = 0;
 }
 HEAP32[$agg$result >> 2] = $z$sroa$0$0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 return;
}

function _eqd($n, $u, $v) {
 $n = $n | 0;
 $u = $u | 0;
 $v = $v | 0;
 var $$0 = 0, $$014 = 0, $$023 = 0, $i$05 = 0, label = 0;
 if (($n | 0) > 0) {
  $$014 = $v;
  $$023 = $u;
  $i$05 = 0;
 } else {
  $$0 = 1;
  return $$0 | 0;
 }
 while (1) {
  if (!((_teq(+HEAPF64[$$023 >> 3], +HEAPF64[$$014 >> 3]) | 0) << 24 >> 24)) {
   $$0 = 0;
   label = 4;
   break;
  }
  $i$05 = $i$05 + 1 | 0;
  if (($i$05 | 0) >= ($n | 0)) {
   $$0 = 1;
   label = 4;
   break;
  } else {
   $$014 = $$014 + 8 | 0;
   $$023 = $$023 + 8 | 0;
  }
 }
 if ((label | 0) == 4) return $$0 | 0;
 return 0;
}

function _suffix($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $15 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $7 = HEAP32[$self + ($4 + 6 + ($4 & 1) << 2) >> 2] | 0;
 $8 = _mr($self) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($8 | 0) < (HEAP32[$w + 12 >> 2] | 0)) {
  $$0 = _rank1ex($w, $self, $8, 257) | 0;
  return $$0 | 0;
 } else {
  $15 = _table(_ii($w) | 0) | 0;
  $$0 = _gc(_df2($15, $w, _atop($7, _ds(-82) | 0) | 0) | 0, $2) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _cons1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $1 = 0, $12 = 0, $14 = 0, $18 = 0, $5 = 0, $7 = 0, $9 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $5 = HEAP32[$w + 12 >> 2] | 0;
 $7 = HEAP32[$self + ($1 + 8 + ($1 & 1) << 2) >> 2] | 0;
 $9 = HEAP32[$7 + 12 >> 2] | 0;
 $12 = HEAP32[$7 + ($9 + 4 + ($9 & 1) << 2) >> 2] | 0;
 if (($12 | 0) < 0) {
  $14 = $12 + $5 | 0;
  $18 = ($14 | 0) < 0 ? 0 : $14;
 } else $18 = ($12 | 0) < ($5 | 0) ? $12 : $5;
 $$0 = _rank1ex($w, $self, $18, 321) | 0;
 return $$0 | 0;
}

function _fix($w) {
 $w = $w | 0;
 var $$0 = 0, $11 = 0, $17 = 0, $2 = 0, $3 = 0, $5 = 0, $8 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 HEAP32[18] = 255;
 $3 = _sc(255) | 0;
 $5 = _reshape($3, HEAP32[636] | 0) | 0;
 HEAP32[20] = $5;
 if (!$5) {
  $$0 = 0;
  return $$0 | 0;
 }
 $8 = HEAP32[$5 + 12 >> 2] | 0;
 HEAP32[22] = $5 + ($8 + 4 + ($8 & 1) << 2);
 $11 = HEAP32[$w >> 2] | 0;
 if (!($11 & 1154)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 if (!($11 & 128)) $17 = _symbrd($w) | 0; else $17 = $w;
 $$0 = _gc(_fixa($17) | 0, $2) | 0;
 return $$0 | 0;
}

function _ca($w) {
 $w = $w | 0;
 var $$0 = 0, $10 = 0, $13 = 0, $16 = 0, $2 = 0, $4 = 0, $7 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = $w + 8 | 0;
 $4 = $w + 12 | 0;
 $7 = _ga(HEAP32[$w >> 2] | 0, HEAP32[$2 >> 2] | 0, HEAP32[$4 >> 2] | 0, $w + 16 | 0) | 0;
 if (!$7) {
  $$0 = 0;
  return $$0 | 0;
 }
 $10 = HEAP32[$7 + 12 >> 2] | 0;
 $13 = HEAP32[$4 >> 2] | 0;
 $16 = HEAP32[$2 >> 2] | 0;
 _memcpy($7 + ($10 + 4 + ($10 & 1) << 2) | 0, $w + ($13 + 4 + ($13 & 1) << 2) | 0, Math_imul(_bp(HEAP32[$w >> 2] | 0) | 0, $16) | 0) | 0;
 $$0 = $7;
 return $$0 | 0;
}

function _i0($w) {
 $w = $w | 0;
 var $$0 = 0, $$0$i3 = 0, $$pre$i = 0, $8 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$pre$i = HEAP32[$w >> 2] | 0;
 if ((HEAP32[$w + 8 >> 2] | 0) != 0 & ($$pre$i & 29 | 0) == 0) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 if (!($$pre$i & 4)) {
  $8 = _cvt(4, $w) | 0;
  if (!$8) {
   $$0 = 0;
   return $$0 | 0;
  } else $$0$i3 = $8;
 } else $$0$i3 = $w;
 if (!(HEAP32[$$0$i3 + 12 >> 2] | 0)) {
  $$0 = HEAP32[$$0$i3 + 16 >> 2] | 0;
  return $$0 | 0;
 } else {
  _jsignal(14);
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function _cva($cv, $w) {
 $cv = $cv | 0;
 $w = $w | 0;
 var $$0 = 0, $1 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $1 = HEAP32[$w >> 2] | 0;
 if (($cv & 4 | 0) != 0 & ($1 | 0) != 8) {
  $$0 = _cvt(8, $w) | 0;
  return $$0 | 0;
 }
 if (($cv & 2 | 0) != 0 & ($1 | 0) != 4) {
  $$0 = _cvt(4, $w) | 0;
  return $$0 | 0;
 }
 if (($cv & 8 | 0) != 0 & ($1 | 0) != 16) {
  $$0 = _cvt(16, $w) | 0;
  return $$0 | 0;
 }
 if (($cv & 1 | 0) != 0 & ($1 | 0) != 1) {
  $$0 = _cvt(1, $w) | 0;
  return $$0 | 0;
 } else {
  $$0 = _ca($w) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _ztymes($agg$result, $u, $v) {
 $agg$result = $agg$result | 0;
 $u = $u | 0;
 $v = $v | 0;
 var $0 = 0.0, $2 = 0.0, $3 = 0.0, $5 = 0.0, $zi$0 = 0.0, $zr$0 = 0.0;
 $0 = +HEAPF64[$u >> 3];
 $2 = +HEAPF64[$u + 8 >> 3];
 $3 = +HEAPF64[$v >> 3];
 $5 = +HEAPF64[$v + 8 >> 3];
 if ($0 != 0.0 | $2 != 0.0) if ($3 != 0.0 | $5 != 0.0) {
  $zi$0 = $2 * $3 + $0 * $5;
  $zr$0 = $0 * $3 - $2 * $5;
 } else {
  $zi$0 = 0.0;
  $zr$0 = 0.0;
 } else {
  $zi$0 = 0.0;
  $zr$0 = 0.0;
 }
 HEAPF64[$agg$result >> 3] = $zr$0;
 HEAPF64[$agg$result + 8 >> 3] = $zi$0;
 return;
}

function _withr($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$sum1 = 0, $1 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $9 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $4 = HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0;
 $6 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 if (!$4) {
  $13 = 0;
  $14 = ftCall_iiii($13 | 0, $w | 0, $6 | 0, $4 | 0) | 0;
  return $14 | 0;
 }
 $9 = HEAP32[$4 + 12 >> 2] | 0;
 $13 = HEAP32[$4 + ($9 + 5 + ($9 & 1) << 2) >> 2] | 0;
 $14 = ftCall_iiii($13 | 0, $w | 0, $6 | 0, $4 | 0) | 0;
 return $14 | 0;
}

function _withl($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$sum1 = 0, $1 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $9 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $4 = HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0;
 $6 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 if (!$6) {
  $13 = 0;
  $14 = ftCall_iiii($13 | 0, $4 | 0, $w | 0, $6 | 0) | 0;
  return $14 | 0;
 }
 $9 = HEAP32[$6 + 12 >> 2] | 0;
 $13 = HEAP32[$6 + ($9 + 5 + ($9 & 1) << 2) >> 2] | 0;
 $14 = ftCall_iiii($13 | 0, $4 | 0, $w | 0, $6 | 0) | 0;
 return $14 | 0;
}

function _ir($w) {
 $w = $w | 0;
 var $$0 = 0, $17 = 0, $18 = 0, $21 = 0, $3 = 0, $5 = 0, $8 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $3 = (HEAP32[$w + 12 >> 2] | 0) + 5 | 0;
 $5 = HEAP32[$w + 8 >> 2] | 0;
 $8 = Math_imul(_bp(HEAP32[$w >> 2] | 0) | 0, $5) | 0;
 $17 = $3 + (($8 + 3 + ((HEAP32[$w >> 2] & 1027 | 0) != 0 & 1) | 0) / 4 | 0) << 2;
 $18 = _ga(2, $17, 1, 0) | 0;
 if (!$18) {
  $$0 = 0;
  return $$0 | 0;
 }
 $21 = HEAP32[$18 + 12 >> 2] | 0;
 _memcpy($18 + ($21 + 4 + ($21 & 1) << 2) | 0, $w | 0, $17 | 0) | 0;
 $$0 = $18;
 return $$0 | 0;
}

function _num1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $3 = 0, $8 = 0;
 if (!(($w | 0) != 0 & ($self | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $3 = HEAP32[$self + 12 >> 2] | 0;
 $8 = HEAP8[$self + ($3 + 4 + ($3 & 1) << 2) + 31 >> 0] | 0;
 if (($8 | 0) == -31) {
  $$0 = HEAP32[646] | 0;
  return $$0 | 0;
 } else if (($8 | 0) == -121) {
  $$0 = HEAP32[624] | 0;
  return $$0 | 0;
 } else if (($8 | 0) == -32) {
  $$0 = HEAP32[660] | 0;
  return $$0 | 0;
 } else {
  $$0 = _sc($8 + 32 | 0) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _signum($w) {
 $w = $w | 0;
 var $$0 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $w;
 $1 = _coerce1($0, 1) | 0;
 if (($1 | 0) == 8) $$0 = _sex1(HEAP32[$0 >> 2] | 0, 4, 368) | 0; else if (($1 | 0) == 16) $$0 = _sex1(HEAP32[$0 >> 2] | 0, 16, 369) | 0; else if (($1 | 0) == 4) $$0 = _sex1(HEAP32[$0 >> 2] | 0, 4, 367) | 0; else if (($1 | 0) == 1) $$0 = _ca(HEAP32[$0 >> 2] | 0) | 0; else $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _cvz($cv, $w) {
 $cv = $cv | 0;
 $w = $w | 0;
 var $$0 = 0, $1 = 0, $12 = 0, $8 = 0;
 do if (!$w) $$0 = 0; else {
  $1 = HEAP32[$w >> 2] | 0;
  if (($cv & 256 | 0) != 0 & ($1 | 0) != 8) {
   $$0 = _pcvt(8, $w) | 0;
   break;
  }
  $8 = ($1 | 0) != 4;
  if (($cv & 512 | 0) != 0 & $8) {
   $$0 = _icvt($w) | 0;
   break;
  }
  if (($cv & 1024 | 0) != 0 & $8) {
   $12 = _pcvt(8, $w) | 0;
   if (!$12) $$0 = 0; else if (!(HEAP32[$12 >> 2] & 16)) $$0 = _pcvt(4, $12) | 0; else $$0 = $12;
  } else $$0 = $w;
 } while (0);
 return $$0 | 0;
}

function _boxs($w) {
 $w = $w | 0;
 var $$0 = 0, $6 = 0, dest = 0, src = 0, stop = 0;
 if (!(_vs($w) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$w + 8 >> 2] | 0) == 11) {
  $6 = HEAP32[$w + 12 >> 2] | 0;
  dest = 2448;
  src = $w + ($6 + 4 + ($6 & 1) << 2) | 0;
  stop = dest + 11 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $$0 = HEAP32[616] | 0;
  return $$0 | 0;
 } else {
  _jsignal(9);
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function _gav1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$sum1 = 0, $$sum5 = 0, $1 = 0, $11 = 0, $14 = 0, $5 = 0, $7 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $5 = HEAP32[$self + ($$sum1 + 4 << 2) >> 2] | 0;
 $7 = HEAP32[$5 + 12 >> 2] | 0;
 $$sum5 = $7 + 4 + ($7 & 1) | 0;
 $11 = _df1($w, HEAP32[$5 + ($$sum5 + 2 << 2) >> 2] | 0) | 0;
 $14 = _df1($w, HEAP32[$5 + ($$sum5 + 1 << 2) >> 2] | 0) | 0;
 return _df1($11, _df1($14, _ds(HEAP8[$self + ($$sum1 << 2) + 31 >> 0] | 0) | 0) | 0) | 0;
}

function ___towrite($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $13 = 0, $2 = 0, $6 = 0;
 $0 = $f + 74 | 0;
 $2 = HEAP8[$0 >> 0] | 0;
 HEAP8[$0 >> 0] = $2 + 255 | $2;
 $6 = HEAP32[$f >> 2] | 0;
 if (!($6 & 8)) {
  HEAP32[$f + 8 >> 2] = 0;
  HEAP32[$f + 4 >> 2] = 0;
  $13 = HEAP32[$f + 44 >> 2] | 0;
  HEAP32[$f + 28 >> 2] = $13;
  HEAP32[$f + 20 >> 2] = $13;
  HEAP32[$f + 16 >> 2] = $13 + (HEAP32[$f + 48 >> 2] | 0);
  $$0 = 0;
  return $$0 | 0;
 } else {
  HEAP32[$f >> 2] = $6 | 32;
  $$0 = -1;
  return $$0 | 0;
 }
 return 0;
}

function _taylor1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $7 = HEAP32[$self + ($4 + 6 + ($4 & 1) << 2) >> 2] | 0;
 $8 = _mr($self) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($8 | 0) < (HEAP32[$w + 12 >> 2] | 0)) {
  $$0 = _rank1ex($w, $self, $8, 285) | 0;
  return $$0 | 0;
 } else {
  $$0 = _gc(_df1($w, _taylor(_fix($7) | 0) | 0) | 0, $2) | 0;
  return $$0 | 0;
 }
 return 0;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = tempRet0;
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0;
}

function _tceil($v) {
 $v = +$v;
 var $1 = 0.0, $10 = 0.0, $13 = 0.0, $19 = 0.0, $20 = 0.0, $4 = 0;
 $1 = +Math_floor(+($v + .5));
 if (!($1 < $v) | $1 == $v) {
  $20 = 0.0;
  $19 = $1 + $20;
  return +$19;
 }
 $4 = $1 > 0.0;
 if ($v > 0.0 ^ $4) {
  $20 = 1.0;
  $19 = $1 + $20;
  return +$19;
 }
 $10 = $4 ? ($1 > $v ? $1 : $v) : -$1;
 if ($10 == +HEAPF64[317]) {
  $20 = 1.0;
  $19 = $1 + $20;
  return +$19;
 }
 $13 = $1 - $v;
 $20 = +(!(($13 >= 0.0 ? $13 : -$13) <= $10 * +HEAPF64[52]) & 1);
 $19 = $1 + $20;
 return +$19;
}

function _base2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $5 = 0, $9 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $5 = HEAP32[$w + 12 >> 2] | 0;
 if (!$5) $10 = 1; else $10 = HEAP32[$w + 16 + ($5 + -1 << 2) >> 2] | 0;
 $9 = (HEAP32[$a + 12 >> 2] | 0) < 2;
 $11 = _sc($10) | 0;
 if ($9) {
  $$0 = _pdt($w, _wt($11, $a) | 0) | 0;
  return $$0 | 0;
 } else {
  $$0 = _rank2ex($w, _rank2ex($11, $a, 0, 0, 1, 377) | 0, 0, 1, 1, 274) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _rdot2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0$i$i$i = 0, $0 = 0, $3 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = _tymes(HEAP32[622] | 0, $w) | 0;
 $3 = _coerce1($0, 8) | 0;
 if (($3 | 0) == 8) $$0$i$i$i = _sex1(HEAP32[$0 >> 2] | 0, 8, 388) | 0; else if (($3 | 0) == 16) $$0$i$i$i = _sex1(HEAP32[$0 >> 2] | 0, 16, 389) | 0; else $$0$i$i$i = 0;
 $8 = _tymes($a, $$0$i$i$i) | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function _dren($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $$0$i = 0.0, $0 = 0.0, $1 = 0.0, $3 = 0.0, $4 = 0.0, $9 = 0.0;
 $0 = +HEAPF64[$u >> 3];
 $1 = +HEAPF64[$v >> 3];
 do if ($0 != 0.0) {
  $3 = $1 / $0;
  $4 = +_tfloor($3);
  if (!((_teq($4, +_tceil($3)) | 0) << 24 >> 24)) {
   $9 = $1 - $0 * $4;
   if (!($0 > 0.0 & $9 > 0.0)) if (!($0 < 0.0 & $9 < 0.0)) {
    $$0$i = 0.0;
    break;
   }
   $$0$i = $9;
  } else $$0$i = 0.0;
 } else $$0$i = $1; while (0);
 HEAPF64[$x >> 3] = $$0$i;
 return;
}

function _ravel($w) {
 $w = $w | 0;
 var $$0 = 0, $11 = 0, $14 = 0, $2 = 0, $4 = 0, $7 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = $w + 8 | 0;
 $4 = _ga(HEAP32[$w >> 2] | 0, HEAP32[$2 >> 2] | 0, 1, 0) | 0;
 if (!$4) {
  $$0 = 0;
  return $$0 | 0;
 }
 $7 = HEAP32[$4 + 12 >> 2] | 0;
 $11 = HEAP32[$w + 12 >> 2] | 0;
 $14 = HEAP32[$2 >> 2] | 0;
 _memcpy($4 + ($7 + 4 + ($7 & 1) << 2) | 0, $w + ($11 + 4 + ($11 & 1) << 2) | 0, Math_imul(_bp(HEAP32[$w >> 2] | 0) | 0, $14) | 0) | 0;
 $$0 = $4;
 return $$0 | 0;
}

function _logar2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0$i = 0, $$0$i1 = 0, $11 = 0, $14 = 0, $4 = 0;
 if (!$w) $$0$i = 0; else {
  if ((HEAP32[$w >> 2] | 0) == 16) $4 = $w; else $4 = _cvt(16, $w) | 0;
  $$0$i = _pcvt(8, _sex1($4, 16, 390) | 0) | 0;
 }
 if (!$a) {
  $$0$i1 = 0;
  $14 = _divide($$0$i, $$0$i1) | 0;
  return $14 | 0;
 }
 if ((HEAP32[$a >> 2] | 0) == 16) $11 = $a; else $11 = _cvt(16, $a) | 0;
 $$0$i1 = _pcvt(8, _sex1($11, 16, 390) | 0) | 0;
 $14 = _divide($$0$i, $$0$i1) | 0;
 return $14 | 0;
}

function _coerce1($w, $mt) {
 $w = $w | 0;
 $mt = $mt | 0;
 var $$0 = 0, $0 = 0, $11 = 0, $5 = 0, $7 = 0;
 $0 = HEAP32[$w >> 2] | 0;
 do if (!$0) $$0 = 0; else if (!(HEAP32[$0 + 8 >> 2] | 0)) $$0 = $mt; else {
  $5 = HEAP32[$0 >> 2] | 0;
  $7 = ($5 | 0) > ($mt | 0) ? $5 : $mt;
  if (!($5 & 29)) {
   _jsignal(3);
   $$0 = 0;
   break;
  }
  if (($7 | 0) != ($5 | 0)) {
   $11 = _cvt($7, $0) | 0;
   HEAP32[$w >> 2] = $11;
   if (!$11) {
    $$0 = 0;
    break;
   }
  }
  $$0 = $7;
 } while (0);
 return $$0 | 0;
}

function _inv1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0;
 $2 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $7 = HEAP32[$self + ($4 + 6 + ($4 & 1) << 2) >> 2] | 0;
 $8 = _mr($self) | 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($8 | 0) < (HEAP32[$w + 12 >> 2] | 0)) {
  $$0 = _rank1ex($w, $self, $8, 313) | 0;
  return $$0 | 0;
 } else {
  $$0 = _gc(_df1($w, _inv($7) | 0) | 0, $2) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _floor1($w) {
 $w = $w | 0;
 var $$0 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $w;
 $1 = _coerce1($0, 1) | 0;
 if (($1 | 0) == 16) $$0 = _sex1(HEAP32[$0 >> 2] | 0, 16, 374) | 0; else if (($1 | 0) == 4 | ($1 | 0) == 1) $$0 = _ca(HEAP32[$0 >> 2] | 0) | 0; else if (($1 | 0) == 8) $$0 = _icvt(_sex1(HEAP32[$0 >> 2] | 0, 8, 373) | 0) | 0; else $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _ceil1($w) {
 $w = $w | 0;
 var $$0 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $w;
 $1 = _coerce1($0, 1) | 0;
 if (($1 | 0) == 16) $$0 = _sex1(HEAP32[$0 >> 2] | 0, 16, 376) | 0; else if (($1 | 0) == 4 | ($1 | 0) == 1) $$0 = _ca(HEAP32[$0 >> 2] | 0) | 0; else if (($1 | 0) == 8) $$0 = _icvt(_sex1(HEAP32[$0 >> 2] | 0, 8, 375) | 0) | 0; else $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _mvc($m, $z, $n, $w) {
 $m = $m | 0;
 $z = $z | 0;
 $n = $n | 0;
 $w = $w | 0;
 var $2 = 0, $4 = 0, $p$01 = 0;
 if (($n | 0) == 1) {
  _memset($z | 0, HEAP8[$w >> 0] | 0, $m | 0) | 0;
  return;
 }
 $2 = ($n | 0) < ($m | 0);
 _memcpy($z | 0, $w | 0, ($2 ? $n : $m) | 0) | 0;
 if ($2) $p$01 = $n; else return;
 do {
  $4 = $m - $p$01 | 0;
  _memcpy($z + $p$01 | 0, $z | 0, (($p$01 | 0) < ($4 | 0) ? $p$01 : $4) | 0) | 0;
  $p$01 = $p$01 << 1;
 } while (($p$01 | 0) < ($m | 0));
 return;
}

function _prompts($w) {
 $w = $w | 0;
 var $$0 = 0, $3 = 0, $5 = 0, $7 = 0;
 if (!(_vs($w) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $3 = HEAP32[$w + 8 >> 2] | 0;
 $5 = HEAP32[$w + 12 >> 2] | 0;
 $7 = $w + ($5 + 4 + ($5 & 1) << 2) | 0;
 if (_memchr($7, 0, $3) | 0) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 if (($3 | 0) < 21) {
  _memcpy(2400, $7 | 0, $3 + 1 | 0) | 0;
  $$0 = HEAP32[616] | 0;
  return $$0 | 0;
 } else {
  _jsignal(10);
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function _slash($w) {
 $w = $w | 0;
 var $$0 = 0, $11 = 0, $18 = 0, $7 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (HEAP32[$w >> 2] & 127) {
  $$0 = _evger($w, _sc(3) | 0) | 0;
  return $$0 | 0;
 }
 $7 = HEAP32[$w + 12 >> 2] | 0;
 $11 = HEAP8[$w + ($7 + 4 + ($7 & 1) << 2) + 31 >> 0] | 0;
 if ($11 << 24 >> 24 == 44) $18 = 241; else $18 = (HEAP8[6304 + ($11 & 255) >> 0] | 0) != 0 ? 239 : 238;
 $$0 = _fdef(47, 128, $18, 240, $w, 0, 0, 0, 127, 127, 127) | 0;
 return $$0 | 0;
}

function _jmag($v, $x) {
 $v = $v | 0;
 $x = $x | 0;
 var $v$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $v$byval_copy = sp;
 HEAP32[$v$byval_copy >> 2] = HEAP32[$v >> 2];
 HEAP32[$v$byval_copy + 4 >> 2] = HEAP32[$v + 4 >> 2];
 HEAP32[$v$byval_copy + 8 >> 2] = HEAP32[$v + 8 >> 2];
 HEAP32[$v$byval_copy + 12 >> 2] = HEAP32[$v + 12 >> 2];
 HEAPF64[$x >> 3] = +_zmag($v$byval_copy);
 STACKTOP = sp;
 return;
}

function copyTempDouble(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
 HEAP8[tempDoublePtr + 4 >> 0] = HEAP8[ptr + 4 >> 0];
 HEAP8[tempDoublePtr + 5 >> 0] = HEAP8[ptr + 5 >> 0];
 HEAP8[tempDoublePtr + 6 >> 0] = HEAP8[ptr + 6 >> 0];
 HEAP8[tempDoublePtr + 7 >> 0] = HEAP8[ptr + 7 >> 0];
}

function _rdot1($w) {
 $w = $w | 0;
 var $$0$i$i = 0, $0 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = _tymes(HEAP32[622] | 0, $w) | 0;
 $3 = _coerce1($0, 8) | 0;
 if (($3 | 0) == 8) $$0$i$i = _sex1(HEAP32[$0 >> 2] | 0, 8, 388) | 0; else if (($3 | 0) == 16) $$0$i$i = _sex1(HEAP32[$0 >> 2] | 0, 16, 389) | 0; else $$0$i$i = 0;
 STACKTOP = sp;
 return $$0$i$i | 0;
}

function _hostne($w) {
 $w = $w | 0;
 var $$0 = 0, $2 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 12 >> 2] | 0;
 if (($2 | 0) > 1) {
  $$0 = _rank1ex($w, 0, 1, 405) | 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 2)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(_system($w + ($2 + 4 + ($2 & 1) << 2) | 0) | 0)) {
  $$0 = HEAP32[616] | 0;
  return $$0 | 0;
 } else {
  _jsignal(7);
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function _vformo($agg$result, $b, $e, $stack) {
 $agg$result = $agg$result | 0;
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 var $1 = 0, $12 = 0, $4 = 0;
 $1 = HEAP32[$stack + ($b << 3) >> 2] | 0;
 $4 = HEAP32[$stack + ($b + 1 << 3) >> 2] | 0;
 if (($e + -1 | 0) == ($b | 0)) $12 = _hooko($1, $4) | 0; else $12 = _forko($1, $4, HEAP32[$stack + ($b + 2 << 3) >> 2] | 0) | 0;
 HEAP32[$agg$result >> 2] = $12;
 HEAP32[$agg$result + 4 >> 2] = 0;
 return;
}

function ___uflow($f) {
 $f = $f | 0;
 var $$0 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $c = sp;
 if (!(HEAP32[$f + 8 >> 2] | 0)) if (!(___toread($f) | 0)) label = 3; else $$0 = -1; else label = 3;
 if ((label | 0) == 3) if ((ftCall_iiii(HEAP32[$f + 32 >> 2] | 0, $f | 0, $c | 0, 1) | 0) == 1) $$0 = HEAPU8[$c >> 0] | 0; else $$0 = -1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _main($argc, $argv) {
 $argc = $argc | 0;
 $argv = $argv | 0;
 var $5 = 0, $7 = 0, $x$1$i = 0;
 if (!((_jinit2($argc, $argv) | 0) << 24 >> 24)) return 0;
 $5 = (HEAP32[664] | 0) + (HEAP32[662] | 0) | 0;
 if (!(HEAP32[616] | 0)) return 0;
 do {
  HEAP8[2472] = 0;
  $7 = _jgets(2400) | 0;
  if (!(HEAP8[2472] | 0)) {
   _immex($7) | 0;
   $x$1$i = $7;
  } else $x$1$i = HEAP32[616] | 0;
  _tpop($5) | 0;
 } while (($x$1$i | 0) != 0);
 return 0;
}

function _label($w) {
 $w = $w | 0;
 var $$sum1 = 0, $11 = 0, $14 = 0, $2 = 0, $7 = 0, $8 = 0;
 if (!$w) return 0; else {
  $2 = HEAP32[$w + 12 >> 2] | 0;
  $$sum1 = $2 + 4 + ($2 & 1) | 0;
  $7 = _i0(HEAP32[$w + ($$sum1 + 1 << 2) >> 2] | 0) | 0;
  $8 = HEAP32[$w + ($$sum1 << 2) >> 2] | 0;
  $11 = _apv((HEAP32[106] | 0) - $7 | 0, $7, 1) | 0;
  $14 = (_symbis($8, $11, HEAP32[894] | 0) | 0) == 0;
  return ($14 ? 0 : HEAP32[646] | 0) | 0;
 }
 return 0;
}

function _ccurry($agg$result, $b, $e, $stack) {
 $agg$result = $agg$result | 0;
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 var $1 = 0, $5 = 0;
 $1 = HEAP32[$stack + ($b << 3) >> 2] | 0;
 $5 = HEAP32[$stack + ($e << 3) >> 2] | 0;
 HEAP8[3296] = ((HEAP32[$stack + ($b << 3) + 4 >> 2] | 0) != 0 ? 1 : (HEAP32[$stack + ($e << 3) + 4 >> 2] | 0) != 0) & 1;
 HEAP32[$agg$result >> 2] = _advform($1, $5) | 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 return;
}

function _fi($s, $v) {
 $s = $s | 0;
 $v = $v | 0;
 var $$0 = 0, $0 = 0, $2 = 0, $t = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $t = sp;
 $0 = _strtol($s, $t, 10) | 0;
 HEAP32[$v >> 2] = $0;
 if (($0 | 0) > -1) {
  $2 = HEAP32[$t >> 2] | 0;
  if (($2 | 0) != ($s | 0)) {
   $$0 = $2;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 _jsignal(3);
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _tfloor($v) {
 $v = +$v;
 var $1 = 0.0, $13 = 0.0, $14 = 0.0, $21 = 0, $3 = 0;
 $1 = +Math_floor(+($v + .5));
 if (!($1 <= $v)) {
  $3 = $1 > 0.0;
  if ($v > 0.0 ^ $3) $21 = 1; else {
   if ($3) $13 = $1 > $v ? $1 : $v; else $13 = -($1 < $v ? $1 : $v);
   if ($13 == +HEAPF64[317]) $21 = 1; else {
    $14 = $1 - $v;
    $21 = !(($14 >= 0.0 ? $14 : -$14) <= $13 * +HEAPF64[52]);
   }
  }
 } else $21 = 0;
 return +($1 - +($21 & 1 | 0));
}

function _exec1($w) {
 $w = $w | 0;
 var $$0 = 0, $7 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$w + 12 >> 2] | 0) > 1) {
  $$0 = _rank1ex($w, 0, 1, 144) | 0;
  return $$0 | 0;
 }
 $7 = _parse(_tokens(_vs($w) | 0) | 0) | 0;
 HEAP8[2512] = 0;
 if (!$7) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$7 >> 2] & 16384)) {
  $$0 = _vn($7) | 0;
  return $$0 | 0;
 } else {
  $$0 = HEAP32[616] | 0;
  return $$0 | 0;
 }
 return 0;
}

function _dbss($w) {
 $w = $w | 0;
 var $$0 = 0, $7 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$w + 12 >> 2] | 0) != 1) {
  _jsignal(14);
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 2)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 $7 = $w + 8 | 0;
 if (HEAP32[$7 >> 2] | 0) _ra($w) | 0;
 _fa(HEAP32[126] | 0) | 0;
 HEAP32[126] = (HEAP32[$7 >> 2] | 0) != 0 ? $w : 0;
 $$0 = HEAP32[616] | 0;
 return $$0 | 0;
}

function _vcurry($agg$result, $b, $e, $stack) {
 $agg$result = $agg$result | 0;
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 var $6 = 0;
 if (!(HEAP32[$stack + ($b << 3) + 4 >> 2] | 0)) $6 = (HEAP32[$stack + ($e << 3) + 4 >> 2] | 0) != 0 & 1; else $6 = 1;
 HEAP8[3296] = $6;
 HEAP32[$agg$result >> 2] = _advform(HEAP32[$stack + ($b << 3) >> 2] | 0, HEAP32[$stack + ($e << 3) >> 2] | 0) | 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 return;
}

function _cadv($agg$result, $b, $e, $stack) {
 $agg$result = $agg$result | 0;
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 var $10 = 0, $3 = 0, $5 = 0, $6 = 0;
 $3 = HEAP32[$stack + ($b << 3) + 4 >> 2] | 0;
 $5 = HEAP32[$stack + ($e << 3) >> 2] | 0;
 $6 = _df1(HEAP32[$stack + ($b << 3) >> 2] | 0, $5) | 0;
 if (!$3) $10 = 0; else $10 = _thook($3, $5) | 0;
 HEAP32[$agg$result >> 2] = $6;
 HEAP32[$agg$result + 4 >> 2] = $10;
 return;
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}

function _conjug($w) {
 $w = $w | 0;
 var $$0 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $w;
 $1 = _coerce1($0, 1) | 0;
 if (($1 | 0) == 8 | ($1 | 0) == 4 | ($1 | 0) == 1) $$0 = _ca(HEAP32[$0 >> 2] | 0) | 0; else if (($1 | 0) == 16) $$0 = _sex1(HEAP32[$0 >> 2] | 0, 16, 366) | 0; else $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _aform($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$sum1 = 0, $1 = 0, $12 = 0, $4 = 0, $6 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $4 = HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0;
 $6 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 if (!(HEAP32[$4 >> 2] & 512)) {
  $12 = _df2($4, $w, $6) | 0;
  return $12 | 0;
 } else {
  $12 = _df2($w, $6, $4) | 0;
  return $12 | 0;
 }
 return 0;
}

function _vadv($agg$result, $b, $e, $stack) {
 $agg$result = $agg$result | 0;
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 var $z$sroa$0$0 = 0;
 if (!(HEAP32[$stack + ($b << 3) + 4 >> 2] | 0)) $z$sroa$0$0 = _df1(HEAP32[$stack + ($b << 3) >> 2] | 0, HEAP32[$stack + ($e << 3) >> 2] | 0) | 0; else {
  HEAP8[3296] = 1;
  $z$sroa$0$0 = 0;
 }
 HEAP32[$agg$result >> 2] = $z$sroa$0$0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 return;
}

function _tle($u, $v) {
 $u = +$u;
 $v = +$v;
 var $1 = 0, $11 = 0.0, $12 = 0.0, $19 = 0;
 if ($u <= $v) {
  $19 = 1;
  return $19 | 0;
 }
 $1 = $u > 0.0;
 if ($1 ^ $v > 0.0) {
  $19 = 0;
  return $19 | 0;
 }
 if ($1) $11 = $u > $v ? $u : $v; else $11 = -($u < $v ? $u : $v);
 if ($11 == +HEAPF64[317]) {
  $19 = 0;
  return $19 | 0;
 }
 $12 = $u - $v;
 $19 = ($12 >= 0.0 ? $12 : -$12) <= $11 * +HEAPF64[52] & 1;
 return $19 | 0;
}

function _teq($u, $v) {
 $u = +$u;
 $v = +$v;
 var $$0 = 0, $1 = 0, $11 = 0.0, $12 = 0.0;
 if ($u == $v) {
  $$0 = 1;
  return $$0 | 0;
 }
 $1 = $u > 0.0;
 if ($1 ^ $v > 0.0) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ($1) $11 = $u > $v ? $u : $v; else $11 = -($u < $v ? $u : $v);
 if ($11 == +HEAPF64[317]) {
  $$0 = 0;
  return $$0 | 0;
 }
 $12 = $u - $v;
 $$0 = ($12 >= 0.0 ? $12 : -$12) <= $11 * +HEAPF64[52] & 1;
 return $$0 | 0;
}

function _lamin1($w) {
 $w = $w | 0;
 var $$0$i = 0, $0 = 0, $2 = 0, $4 = 0, $7 = 0;
 $0 = HEAP32[646] | 0;
 if (!$w) $$0$i = 0; else {
  $2 = $w + 12 | 0;
  $4 = _ga(4, HEAP32[$2 >> 2] | 0, 1, 0) | 0;
  if (!$4) $$0$i = 0; else {
   $7 = HEAP32[$4 + 12 >> 2] | 0;
   _memcpy($4 + ($7 + 4 + ($7 & 1) << 2) | 0, $w + 16 | 0, HEAP32[$2 >> 2] << 2 | 0) | 0;
   $$0$i = $4;
  }
 }
 return _reshape(_over($0, $$0$i) | 0, $w) | 0;
}

function _expn1($w) {
 $w = $w | 0;
 var $$0$i = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $w;
 $1 = _coerce1($0, 8) | 0;
 if (($1 | 0) == 16) $$0$i = _sex1(HEAP32[$0 >> 2] | 0, 16, 389) | 0; else if (($1 | 0) == 8) $$0$i = _sex1(HEAP32[$0 >> 2] | 0, 8, 388) | 0; else $$0$i = 0;
 STACKTOP = sp;
 return $$0$i | 0;
}

function _fact($w) {
 $w = $w | 0;
 var $$0$i = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $w;
 $1 = _coerce1($0, 8) | 0;
 if (($1 | 0) == 8) $$0$i = _sex1(HEAP32[$0 >> 2] | 0, 8, 392) | 0; else if (($1 | 0) == 16) $$0$i = _sex1(HEAP32[$0 >> 2] | 0, 16, 393) | 0; else $$0$i = 0;
 STACKTOP = sp;
 return $$0$i | 0;
}

function _zmag($v) {
 $v = $v | 0;
 var $0 = 0.0, $11 = 0.0, $16 = 0.0, $2 = 0.0, $5 = 0.0, $8 = 0.0, $9 = 0, $p$0$i = 0.0;
 $0 = +HEAPF64[$v >> 3];
 $2 = +HEAPF64[$v + 8 >> 3];
 $5 = $0 >= 0.0 ? $0 : -$0;
 $8 = $2 >= 0.0 ? $2 : -$2;
 $9 = $5 < $8;
 $p$0$i = $9 ? $8 : $5;
 if (!($p$0$i != 0.0)) {
  $16 = 0.0;
  return +$16;
 }
 $11 = ($9 ? $5 : $8) / $p$0$i;
 $16 = $p$0$i * +Math_sqrt(+($11 * $11 + 1.0));
 return +$16;
}

function _fitope($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $1 = 0, $2 = 0;
 do if (!$w) $$0 = 0; else {
  $1 = HEAP32[$w >> 2] | 0;
  if (($1 | 0) == 32) {
   $2 = _shape($w) | 0;
   $$0 = _reshape($2, HEAP32[660] | 0) | 0;
   break;
  } else if (($1 | 0) == 64) {
   $$0 = _ope(_kast(0, $w) | 0) | 0;
   break;
  } else {
   _jsignal(3);
   $$0 = 0;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function _tlt($u, $v) {
 $u = +$u;
 $v = +$v;
 var $11 = 0.0, $17 = 0, $2 = 0, $8 = 0.0;
 if (!($u < $v) | $u == $v) {
  $17 = 0;
  return $17 | 0;
 }
 $2 = $u > 0.0;
 if ($2 ^ $v > 0.0) {
  $17 = 1;
  return $17 | 0;
 }
 $8 = $2 ? ($u > $v ? $u : $v) : -$u;
 if ($8 == +HEAPF64[317]) {
  $17 = 1;
  return $17 | 0;
 }
 $11 = $u - $v;
 $17 = !(($11 >= 0.0 ? $11 : -$11) <= $8 * +HEAPF64[52]) & 1;
 return $17 | 0;
}

function _tcvc($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$sum1 = 0, $1 = 0, $6 = 0, $8 = 0, $9 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $6 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 $8 = HEAP32[$self + ($$sum1 + 4 << 2) >> 2] | 0;
 $9 = _df2($a, $w, HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0) | 0;
 return _folk($9, $6, _df2($a, $w, $8) | 0) | 0;
}

function _tccc($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$sum1 = 0, $1 = 0, $6 = 0, $8 = 0, $9 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $6 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 $8 = HEAP32[$self + ($$sum1 + 4 << 2) >> 2] | 0;
 $9 = _df2($a, $w, HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0) | 0;
 return _df2($9, _df2($a, $w, $8) | 0, $6) | 0;
}

function _copysign($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $6 = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $6 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $1 & 2147483647;
 HEAP32[tempDoublePtr >> 2] = $0;
 HEAP32[tempDoublePtr + 4 >> 2] = $6;
 return +(+HEAPF64[tempDoublePtr >> 3]);
}

function _self2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $3 = 0, $6 = 0;
 if (!((_breaker() | 0) << 24 >> 24)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $3 = (HEAP32[808] | 0) + 1 | 0;
 HEAP32[808] = $3;
 if (($3 | 0) < 175) {
  $6 = _df2($a, $w, HEAP32[810] | 0) | 0;
  HEAP32[808] = (HEAP32[808] | 0) + -1;
  $$0 = $6;
  return $$0 | 0;
 } else {
  _jsignal(10);
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function _obverse($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $7 = 0, $8 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$a >> 2] & 128 & HEAP32[$w >> 2])) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 } else {
  $7 = _mr($a) | 0;
  $8 = _lr($a) | 0;
  $$0 = _fdef(-102, 128, 270, 271, $a, $w, 0, 0, $7, $8, _rr($a) | 0) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _adverse($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $7 = 0, $8 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$a >> 2] & 128 & HEAP32[$w >> 2])) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 } else {
  $7 = _mr($a) | 0;
  $8 = _lr($a) | 0;
  $$0 = _fdef(-101, 128, 272, 273, $a, $w, 0, 0, $7, $8, _rr($a) | 0) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _tcca($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$sum1 = 0, $1 = 0, $6 = 0, $8 = 0, $9 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $6 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 $8 = HEAP32[$self + ($$sum1 + 4 << 2) >> 2] | 0;
 $9 = _df2($a, $w, HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0) | 0;
 return _df2($9, _df1($w, $8) | 0, $6) | 0;
}

function _tacc($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$sum1 = 0, $1 = 0, $6 = 0, $8 = 0, $9 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $6 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 $8 = HEAP32[$self + ($$sum1 + 4 << 2) >> 2] | 0;
 $9 = _df1($a, HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0) | 0;
 return _df2($9, _df2($a, $w, $8) | 0, $6) | 0;
}

function _fxx($w) {
 $w = $w | 0;
 var $$0 = 0, $1 = 0;
 do if (!$w) $$0 = 0; else {
  $1 = HEAP32[$w >> 2] | 0;
  if (!($1 & 34)) {
   _jsignal(3);
   $$0 = 0;
   break;
  }
  if ((HEAP32[$w + 12 >> 2] | 0) >= 2) {
   _jsignal(14);
   $$0 = 0;
   break;
  }
  if (!($1 & 2)) {
   $$0 = _fx(_ope($w) | 0) | 0;
   break;
  } else {
   $$0 = _unsr(_ca($w) | 0) | 0;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function _under($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $7 = 0, $8 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$a >> 2] & 128 & HEAP32[$w >> 2])) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 } else {
  $7 = _mr($w) | 0;
  $8 = _mr($w) | 0;
  $$0 = _fdef(-76, 128, 267, 268, $a, $w, 0, 0, $7, $8, _mr($w) | 0) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _atop($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $7 = 0, $8 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$a >> 2] & 128 & HEAP32[$w >> 2])) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 } else {
  $7 = _mr($w) | 0;
  $8 = _lr($w) | 0;
  $$0 = _fdef(64, 128, 265, 269, $a, $w, 0, 0, $7, $8, _rr($w) | 0) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _taca($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$sum1 = 0, $1 = 0, $6 = 0, $8 = 0, $9 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $6 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 $8 = HEAP32[$self + ($$sum1 + 4 << 2) >> 2] | 0;
 $9 = _df1($a, HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0) | 0;
 return _df2($9, _df1($w, $8) | 0, $6) | 0;
}

function _fmtI($s, $v) {
 $s = $s | 0;
 $v = $v | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$v >> 2];
 _sprintf($s, 3416, $vararg_buffer) | 0;
 if ((HEAP8[$s >> 0] | 0) != 45) {
  STACKTOP = sp;
  return;
 }
 HEAP8[$s >> 0] = 95;
 STACKTOP = sp;
 return;
}

function _var($0, $t, $f2, $cv) {
 $0 = $0 | 0;
 $t = $t | 0;
 $f2 = $f2 | 0;
 $cv = $cv | 0;
 var $13 = 0, $4 = 0;
 $4 = HEAPU8[6304 + ($0 & 255) >> 0] | 0;
 if (!($t & 1)) if (!($t & 4)) $13 = $t >>> 3 & 1 ^ 3; else $13 = 5; else $13 = 4;
 HEAP32[$f2 >> 2] = HEAP32[6560 + ($4 * 52 | 0) + 4 + ($13 << 3) >> 2];
 HEAP32[$cv >> 2] = HEAP32[6560 + ($4 * 52 | 0) + 4 + ($13 << 3) + 4 >> 2];
 return;
}

function _formo($b, $e, $stack) {
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 var $1 = 0, $12 = 0, $4 = 0;
 $1 = HEAP32[$stack + ($b << 2) >> 2] | 0;
 $4 = HEAP32[$stack + ($b + 1 << 2) >> 2] | 0;
 if (($e + -1 | 0) == ($b | 0)) {
  $12 = _hooko($1, $4) | 0;
  return $12 | 0;
 } else {
  $12 = _forko($1, $4, HEAP32[$stack + ($b + 2 << 2) >> 2] | 0) | 0;
  return $12 | 0;
 }
 return 0;
}

function _dbr($w) {
 $w = $w | 0;
 var $$0 = 0, $3 = 0;
 do if (HEAP32[$w + 8 >> 2] | 0) {
  $3 = _i0($w) | 0;
  if (HEAP8[2472] | 0) {
   $$0 = 0;
   return $$0 | 0;
  }
  if ($3 >>> 0 < 2) {
   HEAP8[472] = $3;
   break;
  }
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 } while (0);
 HEAP8[448] = 1;
 HEAP8[480] = 0;
 HEAP8[440] = 0;
 HEAP8[496] = 4;
 $$0 = HEAP32[638] | 0;
 return $$0 | 0;
}

function _self1($w) {
 $w = $w | 0;
 var $$0 = 0, $3 = 0, $6 = 0;
 if (!((_breaker() | 0) << 24 >> 24)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $3 = (HEAP32[808] | 0) + 1 | 0;
 HEAP32[808] = $3;
 if (($3 | 0) < 175) {
  $6 = _df1($w, HEAP32[810] | 0) | 0;
  HEAP32[808] = (HEAP32[808] | 0) + -1;
  $$0 = $6;
  return $$0 | 0;
 } else {
  _jsignal(10);
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function _kne($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0, $12 = 0, $5 = 0;
 $0 = HEAP32[646] | 0;
 if (($0 | 0) != (_match(HEAP32[$u >> 2] | 0, HEAP32[$v >> 2] | 0) | 0)) {
  $12 = 1;
  HEAP8[$x >> 0] = $12;
  return;
 }
 $5 = HEAP32[646] | 0;
 $12 = ($5 | 0) != (_match(HEAP32[$u + 4 >> 2] | 0, HEAP32[$v + 4 >> 2] | 0) | 0) & 1;
 HEAP8[$x >> 0] = $12;
 return;
}

function _keq($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0, $12 = 0, $5 = 0;
 $0 = HEAP32[646] | 0;
 if (($0 | 0) != (_match(HEAP32[$u >> 2] | 0, HEAP32[$v >> 2] | 0) | 0)) {
  $12 = 0;
  HEAP8[$x >> 0] = $12;
  return;
 }
 $5 = HEAP32[646] | 0;
 $12 = ($5 | 0) == (_match(HEAP32[$u + 4 >> 2] | 0, HEAP32[$v + 4 >> 2] | 0) | 0) & 1;
 HEAP8[$x >> 0] = $12;
 return;
}

function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $rem = __stackBase__ | 0;
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
 STACKTOP = __stackBase__;
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}

function _tcaa($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$sum1 = 0, $1 = 0, $6 = 0, $8 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $6 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 $8 = HEAP32[$self + ($$sum1 + 4 << 2) >> 2] | 0;
 return _df1(_df1(_df2($a, $w, HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0) | 0, $6) | 0, $8) | 0;
}

function _srx($w) {
 $w = $w | 0;
 var $$0 = 0, $8 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$w + 12 >> 2] | 0) > 0) {
  $$0 = _rank1ex($w, 0, 0, 444) | 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 32)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 } else {
  $8 = _ope($w) | 0;
  $$0 = _srep($8, _symbrd(_onm($w) | 0) | 0) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _symbinit() {
 var $$0 = 0, $1 = 0, $6 = 0;
 $1 = _ga(32768, HEAP32[885] | 0, 1, 0) | 0;
 HEAP32[892] = $1;
 if (!$1) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$1 + 4 >> 2] = 1073741823;
 HEAP32[896] = $1;
 $6 = _ga(32768, HEAP32[883] | 0, 1, 0) | 0;
 HEAP32[898] = $6;
 if (!$6) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$6 + 4 >> 2] = 1073741823;
 $$0 = 1;
 return $$0 | 0;
}

function ___shlim($f, $lim) {
 $f = $f | 0;
 $lim = $lim | 0;
 var $4 = 0, $5 = 0, $7 = 0;
 HEAP32[$f + 104 >> 2] = $lim;
 $4 = HEAP32[$f + 4 >> 2] | 0;
 $5 = HEAP32[$f + 8 >> 2] | 0;
 $7 = $5 - $4 | 0;
 HEAP32[$f + 108 >> 2] = $7;
 if (($lim | 0) != 0 & ($7 | 0) > ($lim | 0)) {
  HEAP32[$f + 100 >> 2] = $4 + $lim;
  return;
 } else {
  HEAP32[$f + 100 >> 2] = $5;
  return;
 }
}

function _link($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $10 = 0, $2 = 0, label = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = _box($a) | 0;
 if (!(HEAP32[$w + 8 >> 2] | 0)) label = 4; else if (!(HEAP32[$w >> 2] & 96)) label = 4; else $10 = $w;
 if ((label | 0) == 4) $10 = _box($w) | 0;
 $$0 = _over($2, $10) | 0;
 return $$0 | 0;
}

function _shape($w) {
 $w = $w | 0;
 var $$0 = 0, $1 = 0, $3 = 0, $6 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $1 = $w + 12 | 0;
 $3 = _ga(4, HEAP32[$1 >> 2] | 0, 1, 0) | 0;
 if (!$3) {
  $$0 = 0;
  return $$0 | 0;
 }
 $6 = HEAP32[$3 + 12 >> 2] | 0;
 _memcpy($3 + ($6 + 4 + ($6 & 1) << 2) | 0, $w + 16 | 0, HEAP32[$1 >> 2] << 2 | 0) | 0;
 $$0 = $3;
 return $$0 | 0;
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret | 0;
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 8 | 0;
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 16 | 0;
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0;
}

function _dyad($b, $e, $stack) {
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 var $1 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0;
 $1 = HEAP32[$stack + ($b << 2) >> 2] | 0;
 $3 = HEAP32[$stack + ($e << 2) >> 2] | 0;
 $6 = HEAP32[$stack + ($e + -1 << 2) >> 2] | 0;
 $7 = HEAP32[810] | 0;
 HEAP32[810] = $6;
 $8 = _df2($1, $3, $6) | 0;
 HEAP32[810] = $7;
 return $8 | 0;
}

function _taaa($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$sum1 = 0, $1 = 0, $6 = 0, $8 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $6 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 $8 = HEAP32[$self + ($$sum1 + 4 << 2) >> 2] | 0;
 return _df1(_df1(_df1($w, HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0) | 0, $6) | 0, $8) | 0;
}

function _gc3($x, $y, $z, $old) {
 $x = $x | 0;
 $y = $y | 0;
 $z = $z | 0;
 $old = $old | 0;
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = ($x | 0) != 0;
 if ($0) _ra($x) | 0;
 $1 = ($y | 0) != 0;
 if ($1) _ra($y) | 0;
 $2 = ($z | 0) != 0;
 if ($2) _ra($z) | 0;
 _tpop($old) | 0;
 if ($0) _tpush($x) | 0;
 if ($1) _tpush($y) | 0;
 if (!$2) return;
 _tpush($z) | 0;
 return;
}

function _vap($w) {
 $w = $w | 0;
 var $$0 = 0, $2 = 0, $5 = 0, $7 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 12 >> 2] | 0;
 $5 = HEAP32[$w + ($2 + 6 + ($2 & 1) << 2) >> 2] | 0;
 $7 = HEAP32[$5 + 12 >> 2] | 0;
 $$0 = 6560 + ((HEAPU8[6304 + (HEAPU8[$5 + ($7 + 4 + ($7 & 1) << 2) + 31 >> 0] | 0) >> 0] | 0) * 52 | 0) | 0;
 return $$0 | 0;
}

function _spit($w) {
 $w = $w | 0;
 var $$0 = 0, $5 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$w + 12 >> 2] | 0) > 1) {
  $$0 = _rank1ex($w, 0, 1, 454) | 0;
  return $$0 | 0;
 }
 $5 = HEAP32[666] | 0;
 HEAP32[668] = $5;
 if (!(_exec1($w) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = _sc((HEAP32[668] | 0) - $5 | 0) | 0;
 return $$0 | 0;
}

function _irem($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0, $1 = 0, $3 = 0, $9 = 0;
 $0 = HEAP32[$u >> 2] | 0;
 $1 = HEAP32[$v >> 2] | 0;
 if (!$0) {
  $9 = $1;
  HEAP32[$x >> 2] = $9;
  return;
 }
 $3 = ($1 | 0) % ($0 | 0) | 0;
 $9 = ((($0 | 0) > 0 ? ($3 | 0) < 0 : ($3 | 0) > 0) ? $0 : 0) + $3 | 0;
 HEAP32[$x >> 2] = $9;
 return;
}

function _trx($w) {
 $w = $w | 0;
 var $$0 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$w + 12 >> 2] | 0) > 0) {
  $$0 = _rank1ex($w, 0, 0, 445) | 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 32)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 } else {
  $$0 = _trep(_symbrd(_onm($w) | 0) | 0) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _lrx($w) {
 $w = $w | 0;
 var $$0 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$w + 12 >> 2] | 0) > 0) {
  $$0 = _rank1ex($w, 0, 0, 446) | 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 32)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 } else {
  $$0 = _lrep(_symbrd(_onm($w) | 0) | 0) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _drx($w) {
 $w = $w | 0;
 var $$0 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$w + 12 >> 2] | 0) > 0) {
  $$0 = _rank1ex($w, 0, 0, 443) | 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 32)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 } else {
  $$0 = _drep(_symbrd(_onm($w) | 0) | 0) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _arx($w) {
 $w = $w | 0;
 var $$0 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$w + 12 >> 2] | 0) > 0) {
  $$0 = _rank1ex($w, 0, 0, 442) | 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 32)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 } else {
  $$0 = _arep(_symbrd(_onm($w) | 0) | 0) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _df2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $4 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0 & ($self | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $4 = HEAP32[$self + 12 >> 2] | 0;
 $$0 = ftCall_iiii(HEAP32[$self + ($4 + 5 + ($4 & 1) << 2) >> 2] | 0, $a | 0, $w | 0, $self | 0) | 0;
 return $$0 | 0;
}

function _ampco($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$a >> 2] & 128 & HEAP32[$w >> 2])) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 } else {
  $$0 = _fdef(-75, 128, 265, 266, $a, $w, 0, 0, 127, 127, 127) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _hook($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$a >> 2] & 128 & HEAP32[$w >> 2])) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 } else {
  $$0 = _fdef(-22, 128, 325, 326, $a, $w, 0, 0, 127, 127, 127) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _atco($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$a >> 2] & 128 & HEAP32[$w >> 2])) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 } else {
  $$0 = _fdef(-93, 128, 265, 269, $a, $w, 0, 0, 127, 127, 127) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _sclass($w) {
 $w = $w | 0;
 var $$0 = 0, $5 = 0, $6 = 0, $9 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w + 12 >> 2] | 0)) $5 = _ravel($w) | 0; else $5 = $w;
 $6 = _indexof($w, $5) | 0;
 $9 = _repeat(_neeq(_ii($w) | 0, $6, 0, 0, 61) | 0, $6) | 0;
 $$0 = _df2($9, $6, _slash(_ds(61) | 0) | 0) | 0;
 return $$0 | 0;
}

function _sn_write($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 var $2 = 0, $3 = 0, $6 = 0, $l$ = 0;
 $2 = $f + 20 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $6 = (HEAP32[$f + 16 >> 2] | 0) - $3 | 0;
 $l$ = $6 >>> 0 > $l >>> 0 ? $l : $6;
 _memcpy($3 | 0, $s | 0, $l$ | 0) | 0;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $l$;
 return $l | 0;
}

function _afi($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $5 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 32)) {
  $$0 = _pind($a, $w) | 0;
  return $$0 | 0;
 } else {
  $5 = _iota($a) | 0;
  $$0 = _less($5, _pind($a, _ope($w) | 0) | 0) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _v2($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $$0 = 0, $$sum1 = 0, $0 = 0, $3 = 0;
 $0 = _ga(4, 2, 1, 0) | 0;
 if (!$0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $3 = HEAP32[$0 + 12 >> 2] | 0;
 $$sum1 = $3 + 4 + ($3 & 1) | 0;
 HEAP32[$0 + ($$sum1 << 2) >> 2] = $a;
 HEAP32[$0 + ($$sum1 + 1 << 2) >> 2] = $b;
 $$0 = $0;
 return $$0 | 0;
}

function _tie($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $10 = 0, $11 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$a >> 2] & 128)) $10 = $a; else $10 = _arep($a) | 0;
 if (!(HEAP32[$w >> 2] & 128)) $11 = $w; else $11 = _arep($w) | 0;
 $$0 = _over($10, $11) | 0;
 return $$0 | 0;
}

function _tss($w) {
 $w = $w | 0;
 var $9 = 0, $t$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $t$i = sp;
 _gettimeofday($t$i | 0, 0) | 0;
 $9 = _scf(+(HEAP32[$t$i >> 2] | 0) + +(HEAP32[$t$i + 4 >> 2] | 0) / 1.0e6 - +HEAPF64[328]) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function _vi($w) {
 $w = $w | 0;
 var $$0 = 0, $$pre = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$pre = HEAP32[$w >> 2] | 0;
 if ((HEAP32[$w + 8 >> 2] | 0) != 0 & ($$pre & 29 | 0) == 0) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 if ($$pre & 4) {
  $$0 = $w;
  return $$0 | 0;
 }
 $$0 = _cvt(4, $w) | 0;
 return $$0 | 0;
}

function _sprintf($s, $fmt, $varargs) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = _vsprintf($s, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function _sscript2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$a + 12 >> 2] | 0) <= 0) if ((HEAP32[$w + 12 >> 2] | 0) <= 0) {
  $$0 = _linf($a, $w, 0) | 0;
  return $$0 | 0;
 }
 $$0 = _rank2ex($a, $w, 0, 0, 0, 409) | 0;
 return $$0 | 0;
}

function _script2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$a + 12 >> 2] | 0) <= 0) if ((HEAP32[$w + 12 >> 2] | 0) <= 0) {
  $$0 = _linf($a, $w, 1) | 0;
  return $$0 | 0;
 }
 $$0 = _rank2ex($a, $w, 0, 0, 0, 407) | 0;
 return $$0 | 0;
}

function _sline2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$a + 12 >> 2] | 0) <= 0) if ((HEAP32[$w + 12 >> 2] | 0) <= 1) {
  $$0 = _line($a, $w, 0) | 0;
  return $$0 | 0;
 }
 $$0 = _rank2ex($a, $w, 0, 0, 1, 413) | 0;
 return $$0 | 0;
}

function _line2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$a + 12 >> 2] | 0) <= 0) if ((HEAP32[$w + 12 >> 2] | 0) <= 1) {
  $$0 = _line($a, $w, 1) | 0;
  return $$0 | 0;
 }
 $$0 = _rank2ex($a, $w, 0, 0, 1, 411) | 0;
 return $$0 | 0;
}

function _cvt($t, $w) {
 $t = $t | 0;
 $w = $w | 0;
 var $$0 = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $y = sp;
 if (!((_ccvt($t, $w, $y) | 0) << 24 >> 24)) {
  _jsignal(3);
  $$0 = 0;
 } else $$0 = HEAP32[$y >> 2] | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _vforkv($agg$result, $b, $e, $stack) {
 $agg$result = $agg$result | 0;
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 HEAP32[$agg$result >> 2] = _folk(HEAP32[$stack + ($b << 3) >> 2] | 0, HEAP32[$stack + ($b + 1 << 3) >> 2] | 0, HEAP32[$stack + ($e << 3) >> 2] | 0) | 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 return;
}

function _cdyad($agg$result, $b, $e, $stack) {
 $agg$result = $agg$result | 0;
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 HEAP32[$agg$result >> 2] = _df2(HEAP32[$stack + ($b << 3) >> 2] | 0, HEAP32[$stack + ($e << 3) >> 2] | 0, HEAP32[$stack + ($e + -1 << 3) >> 2] | 0) | 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 return;
}

function _vs($w) {
 $w = $w | 0;
 var $$0 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (HEAP32[$w + 8 >> 2] | 0) if (!(HEAP32[$w >> 2] & 1026)) {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$w + 12 >> 2] | 0) < 2) {
  $$0 = $w;
  return $$0 | 0;
 }
 _jsignal(14);
 $$0 = 0;
 return $$0 | 0;
}

function _vpunc($agg$result, $b, $e, $stack) {
 $agg$result = $agg$result | 0;
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 var $2 = 0, $7 = 0, $8 = 0;
 $2 = $stack + ($e + -1 << 3) | 0;
 $7 = HEAP32[$2 + 4 >> 2] | 0;
 $8 = $agg$result;
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$8 + 4 >> 2] = $7;
 return;
}

function _tca($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$sum1 = 0, $1 = 0, $6 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $6 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 return _df1(_df2($a, $w, HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0) | 0, $6) | 0;
}

function _evoke($w) {
 $w = $w | 0;
 var $$sum1 = 0, $1 = 0, $11 = 0;
 $1 = HEAP32[$w + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 if ((HEAP8[$w + ($$sum1 << 2) + 31 >> 0] | 0) != 126) {
  $11 = 0;
  return $11 | 0;
 }
 $11 = (HEAP32[HEAP32[$w + ($$sum1 + 2 << 2) >> 2] >> 2] | 0) >>> 1 & 1;
 return $11 | 0;
}

function _zexp($agg$result, $v) {
 $agg$result = $agg$result | 0;
 $v = $v | 0;
 var $2 = 0.0, $3 = 0.0, $5 = 0.0, $7 = 0.0;
 $2 = +HEAPF64[$v + 8 >> 3];
 $3 = +_xexp(+HEAPF64[$v >> 3]);
 $5 = $3 * +_xcos($2);
 $7 = $3 * +_xsin($2);
 HEAPF64[$agg$result >> 3] = $5;
 HEAPF64[$agg$result + 8 >> 3] = $7;
 return;
}

function _strncpy(pdest, psrc, num) {
 pdest = pdest | 0;
 psrc = psrc | 0;
 num = num | 0;
 var padding = 0, i = 0;
 while ((i | 0) < (num | 0)) {
  HEAP8[pdest + i >> 0] = padding ? 0 : HEAP8[psrc + i >> 0] | 0;
  padding = padding ? 1 : (HEAP8[psrc + i >> 0] | 0) == 0;
  i = i + 1 | 0;
 }
 return pdest | 0;
}

function _cdot2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $$0 = 0, $4 = 0, $5 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $4 = (HEAP32[$a >> 2] & 32 | 0) != 0;
 $5 = _tally($w) | 0;
 $$0 = _from(ftCall_iii(($4 ? 396 : 395) | 0, $5 | 0, $a | 0) | 0, $w) | 0;
 return $$0 | 0;
}

function _bdiv($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $2 = 0, $7 = 0.0;
 $2 = HEAP8[$u >> 0] | 0;
 if (!(HEAP8[$v >> 0] | 0)) {
  $7 = $2 << 24 >> 24 != 0 ? +HEAPF64[317] : 0.0;
  HEAPF64[$x >> 3] = $7;
  return;
 } else {
  $7 = +($2 << 24 >> 24);
  HEAPF64[$x >> 3] = $7;
  return;
 }
}

function _monad($b, $e, $stack) {
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 var $1 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = HEAP32[$stack + ($e << 2) >> 2] | 0;
 $3 = HEAP32[$stack + ($b << 2) >> 2] | 0;
 $4 = HEAP32[810] | 0;
 HEAP32[810] = $3;
 $5 = _df1($1, $3) | 0;
 HEAP32[810] = $4;
 return $5 | 0;
}

function _cstr($s) {
 $s = $s | 0;
 var $$0$i = 0, $0 = 0, $1 = 0, $4 = 0;
 $0 = _strlen($s | 0) | 0;
 $1 = _ga(2, $0, 1, 0) | 0;
 if (!$1) {
  $$0$i = 0;
  return $$0$i | 0;
 }
 $4 = HEAP32[$1 + 12 >> 2] | 0;
 _memcpy($1 + ($4 + 4 + ($4 & 1) << 2) | 0, $s | 0, $0 | 0) | 0;
 $$0$i = $1;
 return $$0$i | 0;
}

function _df1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0, $3 = 0;
 if (!(($w | 0) != 0 & ($self | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $3 = HEAP32[$self + 12 >> 2] | 0;
 $$0 = ftCall_iii(HEAP32[$self + ($3 + 4 + ($3 & 1) << 2) >> 2] | 0, $w | 0, $self | 0) | 0;
 return $$0 | 0;
}

function _rls($w) {
 $w = $w | 0;
 var $$0 = 0, $0 = 0;
 $0 = _i0($w) | 0;
 if (HEAP8[2472] | 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($0 + -1 | 0) >>> 0 < 2147483645) {
  HEAP32[606] = $0;
  $$0 = HEAP32[616] | 0;
  return $$0 | 0;
 } else {
  _jsignal(3);
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function _znonce2($agg$result, $u, $v) {
 $agg$result = $agg$result | 0;
 $u = $u | 0;
 $v = $v | 0;
 _jsignal(11);
 HEAP32[$agg$result >> 2] = HEAP32[608];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[609];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[610];
 HEAP32[$agg$result + 12 >> 2] = HEAP32[611];
 return;
}

function _pcvt($t, $w) {
 $t = $t | 0;
 $w = $w | 0;
 var $1 = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $y = sp;
 $1 = (_ccvt($t, $w, $y) | 0) << 24 >> 24 != 0;
 STACKTOP = sp;
 return ($1 ? HEAP32[$y >> 2] | 0 : $w) | 0;
}

function _ddiv($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0.0, $2 = 0.0, $8 = 0.0;
 $0 = +HEAPF64[$v >> 3];
 $2 = +HEAPF64[$u >> 3];
 if ($0 != 0.0) $8 = $2 / $0; else if ($2 != 0.0) $8 = $2 * +HEAPF64[317]; else $8 = 0.0;
 HEAPF64[$x >> 3] = $8 == 0.0 ? 0.0 : $8;
 return;
}

function _tac($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$sum1 = 0, $1 = 0, $6 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $6 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 return _df2(_df1($w, HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0) | 0, $w, $6) | 0;
}

function _idiv($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0, $10 = 0.0, $2 = 0;
 $0 = HEAP32[$v >> 2] | 0;
 $2 = HEAP32[$u >> 2] | 0;
 if (!$0) if (!$2) $10 = 0.0; else $10 = +($2 | 0) * +HEAPF64[317]; else $10 = +($2 | 0) / +($0 | 0);
 HEAPF64[$x >> 3] = $10;
 return;
}

function _taa($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$sum1 = 0, $1 = 0, $6 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 $$sum1 = $1 + 4 + ($1 & 1) | 0;
 $6 = HEAP32[$self + ($$sum1 + 3 << 2) >> 2] | 0;
 return _df1(_df1($w, HEAP32[$self + ($$sum1 + 2 << 2) >> 2] | 0) | 0, $6) | 0;
}

function _bool2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $1 = 0, $3 = 0, $5 = 0;
 $1 = _duble(_cvt(1, $a) | 0) | 0;
 $3 = _plus($1, _cvt(1, $w) | 0) | 0;
 $5 = HEAP32[$self + 12 >> 2] | 0;
 return _from($3, HEAP32[$self + ($5 + 8 + ($5 & 1) << 2) >> 2] | 0) | 0;
}

function _sldot($w) {
 $w = $w | 0;
 var $$0 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w >> 2] & 128)) {
  $$0 = _evger($w, _sc(0) | 0) | 0;
  return $$0 | 0;
 } else {
  $$0 = _fdef(-92, 128, 252, 253, $w, 0, 0, 0, 127, 127, 127) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _dispq($w) {
 $w = $w | 0;
 var $$0 = 0, $1 = 0, $4 = 0;
 $1 = _ga(4, HEAP32[594] | 0, 1, 0) | 0;
 if (!$1) {
  $$0 = 0;
  return $$0 | 0;
 }
 $4 = HEAP32[$1 + 12 >> 2] | 0;
 _memcpy($1 + ($4 + 4 + ($4 & 1) << 2) | 0, 2380, HEAP32[594] << 2 | 0) | 0;
 $$0 = $1;
 return $$0 | 0;
}

function _vhookv($agg$result, $b, $e, $stack) {
 $agg$result = $agg$result | 0;
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 HEAP32[$agg$result >> 2] = _hook(HEAP32[$stack + ($b << 3) >> 2] | 0, HEAP32[$stack + ($e << 3) >> 2] | 0) | 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 return;
}

function _bool1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $2 = 0, $4 = 0, $6 = 0;
 $2 = _duble(_cvt(1, HEAP32[660] | 0) | 0) | 0;
 $4 = _plus($2, _cvt(1, $w) | 0) | 0;
 $6 = HEAP32[$self + 12 >> 2] | 0;
 return _from($4, HEAP32[$self + ($6 + 8 + ($6 & 1) << 2) >> 2] | 0) | 0;
}

function _cmonad($agg$result, $b, $e, $stack) {
 $agg$result = $agg$result | 0;
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 HEAP32[$agg$result >> 2] = _df1(HEAP32[$stack + ($e << 3) >> 2] | 0, HEAP32[$stack + ($b << 3) >> 2] | 0) | 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 return;
}

function _znonce1($agg$result, $v) {
 $agg$result = $agg$result | 0;
 $v = $v | 0;
 _jsignal(11);
 HEAP32[$agg$result >> 2] = HEAP32[608];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[609];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[610];
 HEAP32[$agg$result + 12 >> 2] = HEAP32[611];
 return;
}

function _zminus($agg$result, $u, $v) {
 $agg$result = $agg$result | 0;
 $u = $u | 0;
 $v = $v | 0;
 var $7 = 0.0;
 $7 = +HEAPF64[$u + 8 >> 3] - +HEAPF64[$v + 8 >> 3];
 HEAPF64[$agg$result >> 3] = +HEAPF64[$u >> 3] - +HEAPF64[$v >> 3];
 HEAPF64[$agg$result + 8 >> 3] = $7;
 return;
}

function _zplus($agg$result, $u, $v) {
 $agg$result = $agg$result | 0;
 $u = $u | 0;
 $v = $v | 0;
 var $7 = 0.0;
 $7 = +HEAPF64[$u + 8 >> 3] + +HEAPF64[$v + 8 >> 3];
 HEAPF64[$agg$result >> 3] = +HEAPF64[$u >> 3] + +HEAPF64[$v >> 3];
 HEAPF64[$agg$result + 8 >> 3] = $7;
 return;
}

function _bitshift64Ashr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = (high | 0) < 0 ? -1 : 0;
 return high >> bits - 32 | 0;
}

function _reverse($w) {
 $w = $w | 0;
 var $$0 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w + 12 >> 2] | 0)) {
  $$0 = _ca($w) | 0;
  return $$0 | 0;
 } else {
  $$0 = _from(_apv(HEAP32[$w + 16 >> 2] | 0, -1, -1) | 0, $w) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _str($n, $s) {
 $n = $n | 0;
 $s = $s | 0;
 var $$0 = 0, $0 = 0, $3 = 0;
 $0 = _ga(2, $n, 1, 0) | 0;
 if (!$0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $3 = HEAP32[$0 + 12 >> 2] | 0;
 _memcpy($0 + ($3 + 4 + ($3 & 1) << 2) | 0, $s | 0, $n | 0) | 0;
 $$0 = $0;
 return $$0 | 0;
}

function _dsignum($v, $x) {
 $v = $v | 0;
 $x = $x | 0;
 var $1 = 0.0, $11 = 0;
 $1 = +HEAPF64[$v >> 3];
 if (+HEAPF64[52] > ($1 >= 0.0 ? $1 : -$1)) {
  $11 = 0;
  HEAP32[$x >> 2] = $11;
  return;
 }
 $11 = ($1 > 0.0 & 1) - ($1 < 0.0 & 1) | 0;
 HEAP32[$x >> 2] = $11;
 return;
}

function _xsin($x) {
 $x = +$x;
 var $0 = 0.0, $8 = 0.0, $9 = 0.0;
 $0 = +HEAPF64[317];
 if ($0 == $x | $x == -$0) {
  $8 = 0.0;
  $9 = +Math_sin(+$8);
  return +$9;
 }
 $8 = $x - +Math_floor(+($x / 6.283185307179586)) * 6.283185307179586;
 $9 = +Math_sin(+$8);
 return +$9;
}

function _xcos($x) {
 $x = +$x;
 var $0 = 0.0, $8 = 0.0, $9 = 0.0;
 $0 = +HEAPF64[317];
 if ($0 == $x | $x == -$0) {
  $8 = 0.0;
  $9 = +Math_cos(+$8);
  return +$9;
 }
 $8 = $x - +Math_floor(+($x / 6.283185307179586)) * 6.283185307179586;
 $9 = +Math_cos(+$8);
 return +$9;
}

function _dtymes($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0.0, $2 = 0.0, $5 = 0.0;
 $0 = +HEAPF64[$u >> 3];
 if ($0 != 0.0) {
  $2 = +HEAPF64[$v >> 3];
  if ($2 != 0.0) $5 = $0 * $2; else $5 = 0.0;
 } else $5 = 0.0;
 HEAPF64[$x >> 3] = $5;
 return;
}

function _scalar4($t, $v) {
 $t = $t | 0;
 $v = $v | 0;
 var $$0 = 0, $0 = 0, $3 = 0;
 $0 = _ga($t, 1, 0, 0) | 0;
 if (!$0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $3 = HEAP32[$0 + 12 >> 2] | 0;
 HEAP32[$0 + ($3 + 4 + ($3 & 1) << 2) >> 2] = $v;
 $$0 = $0;
 return $$0 | 0;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}

function _tod() {
 var $t = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $t = sp;
 _gettimeofday($t | 0, 0) | 0;
 STACKTOP = sp;
 return +(+(HEAP32[$t >> 2] | 0) + +(HEAP32[$t + 4 >> 2] | 0) / 1.0e6);
}

function _osub($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $8 = 0, $9 = 0;
 if (HEAP32[$w + 12 >> 2] | 0) if (!(HEAP32[$w + 16 >> 2] | 0)) {
  $8 = $w;
  $9 = _ope($8) | 0;
  return $9 | 0;
 }
 $8 = _from(_ope($a) | 0, $w) | 0;
 $9 = _ope($8) | 0;
 return $9 | 0;
}

function _jouts($s) {
 $s = $s | 0;
 var $0 = 0, $5 = 0;
 $0 = HEAP32[2120] | 0;
 if ($0) _fputc(0, $0 | 0) | 0;
 if (HEAP8[8472] | 0) _fputs($s | 0, HEAP32[_stdout >> 2] | 0) | 0;
 $5 = HEAP32[2120] | 0;
 if (!$5) return;
 _fputs($s | 0, $5 | 0) | 0;
 return;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}

function _dbret($w) {
 $w = $w | 0;
 var $$0 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP8[480] = 0;
 HEAP8[464] = 1;
 HEAP8[496] = 2;
 _fa(HEAP32[114] | 0) | 0;
 HEAP32[114] = 0;
 HEAP32[114] = _ra($w) | 0;
 $$0 = HEAP32[638] | 0;
 return $$0 | 0;
}

function copyTempFloat(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
}

function _debadd($type) {
 $type = $type | 0;
 var $$0 = 0, $0 = 0;
 $0 = _ga(4, 6, 1, 0) | 0;
 if (!$0) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$0 + 24 >> 2] = $type;
 HEAP32[$0 + 20 >> 2] = HEAP32[108];
 HEAP32[108] = $0;
 $$0 = $0;
 return $$0 | 0;
}

function _scnm($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0;
 $1 = _ga(1024, 1, 0, 0) | 0;
 if (!$1) {
  $$0 = 0;
  return $$0 | 0;
 }
 $4 = HEAP32[$1 + 12 >> 2] | 0;
 HEAP8[$1 + ($4 + 4 + ($4 & 1) << 2) >> 0] = $0;
 $$0 = $1;
 return $$0 | 0;
}

function _fmtZ($s, $v) {
 $s = $s | 0;
 $v = $v | 0;
 var $0 = 0, $3 = 0;
 _fmtD($s, $v);
 $0 = $v + 8 | 0;
 if (!(+HEAPF64[$0 >> 3] != 0.0)) return;
 $3 = _strlen($s | 0) | 0;
 HEAP8[$s + $3 >> 0] = 106;
 _fmtD($s + ($3 + 1) | 0, $0);
 return;
}

function _scc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0;
 $1 = _ga(2, 1, 0, 0) | 0;
 if (!$1) {
  $$0 = 0;
  return $$0 | 0;
 }
 $4 = HEAP32[$1 + 12 >> 2] | 0;
 HEAP8[$1 + ($4 + 4 + ($4 & 1) << 2) >> 0] = $0;
 $$0 = $1;
 return $$0 | 0;
}

function _sc($k) {
 $k = $k | 0;
 var $$0 = 0, $0 = 0, $3 = 0;
 $0 = _ga(4, 1, 0, 0) | 0;
 if (!$0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $3 = HEAP32[$0 + 12 >> 2] | 0;
 HEAP32[$0 + ($3 + 4 + ($3 & 1) << 2) >> 2] = $k;
 $$0 = $0;
 return $$0 | 0;
}

function _all1($w) {
 $w = $w | 0;
 var $$0 = 0, $2 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 12 >> 2] | 0;
 $$0 = (_memchr($w + ($2 + 4 + ($2 & 1) << 2) | 0, 0, HEAP32[$w + 8 >> 2] | 0) | 0) == 0 & 1;
 return $$0 | 0;
}

function _all0($w) {
 $w = $w | 0;
 var $$0 = 0, $2 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 12 >> 2] | 0;
 $$0 = (_memchr($w + ($2 + 4 + ($2 & 1) << 2) | 0, 1, HEAP32[$w + 8 >> 2] | 0) | 0) == 0 & 1;
 return $$0 | 0;
}

function _scf($x) {
 $x = +$x;
 var $$0 = 0, $0 = 0, $3 = 0;
 $0 = _ga(8, 1, 0, 0) | 0;
 if (!$0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $3 = HEAP32[$0 + 12 >> 2] | 0;
 HEAPF64[$0 + ($3 + 4 + ($3 & 1) << 2) >> 3] = $x;
 $$0 = $0;
 return $$0 | 0;
}

function _sline1($w) {
 $w = $w | 0;
 var $$0 = 0;
 do if (!$w) $$0 = 0; else if ((HEAP32[$w + 12 >> 2] | 0) > 1) {
  $$0 = _rank1ex($w, 0, 1, 412) | 0;
  break;
 } else {
  $$0 = _line(0, $w, 0) | 0;
  break;
 } while (0);
 return $$0 | 0;
}

function _line1($w) {
 $w = $w | 0;
 var $$0 = 0;
 do if (!$w) $$0 = 0; else if ((HEAP32[$w + 12 >> 2] | 0) > 1) {
  $$0 = _rank1ex($w, 0, 1, 410) | 0;
  break;
 } else {
  $$0 = _line(0, $w, 1) | 0;
  break;
 } while (0);
 return $$0 | 0;
}

function _homo($s, $t) {
 $s = $s | 0;
 $t = $t | 0;
 var $9 = 0;
 if (($s | 0) == ($t | 0)) $9 = 1; else if (($s & 29 | 0) == 0 | ($t & 29 | 0) == 0) if (!($s & 96)) $9 = 0; else $9 = ($t & 96 | 0) != 0 & 1; else $9 = 1;
 return $9 | 0;
}

function _cl($w) {
 $w = $w | 0;
 var $$0 = 0, $2 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 12 >> 2] | 0;
 $$0 = HEAP8[$w + ($2 + 4 + ($2 & 1) << 2) + ((HEAP32[$w + 8 >> 2] | 0) + -1) >> 0] | 0;
 return $$0 | 0;
}

function _sqroot($w) {
 $w = $w | 0;
 var $$0 = 0, $4 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$w >> 2] | 0) == 16) $4 = $w; else $4 = _cvt(16, $w) | 0;
 $$0 = _pcvt(8, _sex1($4, 16, 391) | 0) | 0;
 return $$0 | 0;
}

function _logar1($w) {
 $w = $w | 0;
 var $$0 = 0, $4 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$w >> 2] | 0) == 16) $4 = $w; else $4 = _cvt(16, $w) | 0;
 $$0 = _pcvt(8, _sex1($4, 16, 390) | 0) | 0;
 return $$0 | 0;
}

function _feq($u, $v) {
 $u = +$u;
 $v = +$v;
 var $0 = 0.0, $10 = 0.0, $7 = 0.0;
 $0 = $u - $v;
 $7 = $u >= 0.0 ? $u : -$u;
 $10 = $v >= 0.0 ? $v : -$v;
 return ($0 >= 0.0 ? $0 : -$0) <= ($7 > $10 ? $7 : $10) * +HEAPF64[326] | 0;
}

function runPostSets() {}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, a - c >>> 0 | 0) | 0;
}

function _bnand($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $3 = 0;
 if (!(HEAP8[$u >> 0] | 0)) {
  $3 = 1;
  HEAP8[$x >> 0] = $3;
  return;
 }
 $3 = (HEAP8[$v >> 0] | 0) == 0 & 1;
 HEAP8[$x >> 0] = $3;
 return;
}

function _bnor($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $3 = 0;
 if (HEAP8[$u >> 0] | 0) {
  $3 = 0;
  HEAP8[$x >> 0] = $3;
  return;
 }
 $3 = (HEAP8[$v >> 0] | 0) == 0 & 1;
 HEAP8[$x >> 0] = $3;
 return;
}

function _xn2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = _vn(_xd($a, $w, $self) | 0) | 0;
 return $$0 | 0;
}

function _zconjug($agg$result, $v) {
 $agg$result = $agg$result | 0;
 $v = $v | 0;
 var $3 = 0.0;
 $3 = -+HEAPF64[$v + 8 >> 3];
 HEAPF64[$agg$result >> 3] = +HEAPF64[$v >> 3];
 HEAPF64[$agg$result + 8 >> 3] = $3;
 return;
}

function _unquo2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = _unquote($a, $w, $self) | 0;
 return $$0 | 0;
}

function _jputc($0) {
 $0 = $0 | 0;
 var $5 = 0;
 if (HEAP8[8472] | 0) _fputc($0 << 24 >> 24 | 0, HEAP32[_stdout >> 2] | 0) | 0;
 $5 = HEAP32[2120] | 0;
 if (!$5) return;
 _fputc($0 << 24 >> 24 | 0, $5 | 0) | 0;
 return;
}

function _conj978($b, $e, $stack) {
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 return _df2(HEAP32[$stack + ($b << 2) >> 2] | 0, HEAP32[$stack + ($e << 2) >> 2] | 0, HEAP32[$stack + ($e + -1 << 2) >> 2] | 0) | 0;
}

function _forkv($b, $e, $stack) {
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 return _folk(HEAP32[$stack + ($b << 2) >> 2] | 0, HEAP32[$stack + ($b + 1 << 2) >> 2] | 0, HEAP32[$stack + ($e << 2) >> 2] | 0) | 0;
}

function _tally($w) {
 $w = $w | 0;
 var $$0 = 0, $6 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$w + 12 >> 2] | 0)) $6 = 1; else $6 = HEAP32[$w + 16 >> 2] | 0;
 $$0 = _sc($6) | 0;
 return $$0 | 0;
}

function _xconj($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0;
 if (!(($a | 0) != 0 & ($w | 0) != 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = _xd($a, $w, $self) | 0;
 return $$0 | 0;
}

function _strcpy(pdest, psrc) {
 pdest = pdest | 0;
 psrc = psrc | 0;
 var i = 0;
 do {
  HEAP8[pdest + i >> 0] = HEAP8[psrc + i >> 0];
  i = i + 1 | 0;
 } while (HEAP8[psrc + (i - 1) >> 0] | 0);
 return pdest | 0;
}

function _nc($w) {
 $w = $w | 0;
 var $1 = 0, $9 = 0;
 if (!$w) $9 = 0; else {
  $1 = HEAP32[$w >> 2] | 0;
  if (!($1 & 127)) if (!($1 & 128)) $9 = $1 >>> 8 & 1 ^ 5; else $9 = 3; else $9 = 2;
 }
 return $9 | 0;
}

function _xsinh($x) {
 $x = +$x;
 var $6 = 0.0;
 do if ($x < -709.0) $6 = -+HEAPF64[317]; else if ($x > 709.0) {
  $6 = +HEAPF64[317];
  break;
 } else {
  $6 = +_sinh($x);
  break;
 } while (0);
 return +$6;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 return ret | 0;
}

function _immex($w) {
 $w = $w | 0;
 var $1 = 0, $6 = 0;
 $1 = _parse(_tokens($w) | 0) | 0;
 if (($1 | 0) == 0 | (HEAP8[2512] | 0) != 0) {
  $6 = $1;
  return $6 | 0;
 }
 $6 = _jpr($1) | 0;
 return $6 | 0;
}

function _imin($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0, $1 = 0;
 $0 = HEAP32[$u >> 2] | 0;
 $1 = HEAP32[$v >> 2] | 0;
 HEAP32[$x >> 2] = ($0 | 0) < ($1 | 0) ? $0 : $1;
 return;
}

function _imax($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0, $1 = 0;
 $0 = HEAP32[$u >> 2] | 0;
 $1 = HEAP32[$v >> 2] | 0;
 HEAP32[$x >> 2] = ($0 | 0) > ($1 | 0) ? $0 : $1;
 return;
}

function _cant1($w) {
 $w = $w | 0;
 var $$0 = 0, $2 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 12 >> 2] | 0;
 $$0 = _cant2(_apv($2, $2 + -1 | 0, -1) | 0, $w) | 0;
 return $$0 | 0;
}

function _ane($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0;
 $0 = HEAP32[646] | 0;
 HEAP8[$x >> 0] = ($0 | 0) != (_match(HEAP32[$u >> 2] | 0, HEAP32[$v >> 2] | 0) | 0) & 1;
 return;
}

function _aeq($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0;
 $0 = HEAP32[646] | 0;
 HEAP8[$x >> 0] = ($0 | 0) == (_match(HEAP32[$u >> 2] | 0, HEAP32[$v >> 2] | 0) | 0) & 1;
 return;
}

function _hix($k, $v) {
 $k = $k | 0;
 $v = $v | 0;
 return (HEAPU8[$v + ($k + -2) >> 0] | 0) << 8 | (HEAPU8[$v + ($k + -1) >> 0] | 0) | (HEAPU8[$v + 1 >> 0] | 0) << 16 | (HEAPU8[$v >> 0] | 0) << 24 | 0;
}

function _debz() {
 var $0 = 0, $3 = 0;
 $0 = HEAP32[108] | 0;
 if ($0) {
  $3 = HEAP32[$0 + 20 >> 2] | 0;
  HEAP32[108] = $3;
  if ($3) return;
 }
 HEAP8[440] = HEAP8[472] | 0;
 HEAP8[448] = 0;
 return;
}

function _cf($w) {
 $w = $w | 0;
 var $$0 = 0, $2 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$w + 12 >> 2] | 0;
 $$0 = HEAP8[$w + ($2 + 4 + ($2 & 1) << 2) >> 0] | 0;
 return $$0 | 0;
}

function _dexp($v, $x) {
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0.0, $4 = 0.0;
 $0 = +HEAPF64[$v >> 3];
 if ($0 > 709.0) $4 = +HEAPF64[317]; else $4 = +Math_exp(+$0);
 HEAPF64[$x >> 3] = $4;
 return;
}

function _not($w) {
 $w = $w | 0;
 var $8 = 0;
 if ($w) if (HEAP32[$w >> 2] & 1) {
  $8 = _eq(HEAP32[660] | 0, $w) | 0;
  return $8 | 0;
 }
 $8 = _va2(HEAP32[646] | 0, $w, 45) | 0;
 return $8 | 0;
}

function _jputs($s) {
 $s = $s | 0;
 var $3 = 0;
 if (HEAP8[8472] | 0) _fputs($s | 0, HEAP32[_stdout >> 2] | 0) | 0;
 $3 = HEAP32[2120] | 0;
 if (!$3) return;
 _fputs($s | 0, $3 | 0) | 0;
 return;
}

function _dmin($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0.0, $1 = 0.0;
 $0 = +HEAPF64[$u >> 3];
 $1 = +HEAPF64[$v >> 3];
 HEAPF64[$x >> 3] = $0 < $1 ? $0 : $1;
 return;
}

function _dmax($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0.0, $1 = 0.0;
 $0 = +HEAPF64[$u >> 3];
 $1 = +HEAPF64[$v >> 3];
 HEAPF64[$x >> 3] = $0 > $1 ? $0 : $1;
 return;
}

function _freal($v) {
 $v = $v | 0;
 var $1 = 0.0, $6 = 0.0;
 $1 = +HEAPF64[$v + 8 >> 3];
 $6 = +HEAPF64[$v >> 3];
 return ($1 >= 0.0 ? $1 : -$1) <= +HEAPF64[326] * ($6 >= 0.0 ? $6 : -$6) | 0;
}

function _drep($w) {
 $w = $w | 0;
 var $0 = 0, $7 = 0;
 $0 = _drr($w) | 0;
 if ($0) if (HEAP32[$0 >> 2] & 96) {
  $7 = $0;
  return $7 | 0;
 }
 $7 = _ravel(_box($0) | 0) | 0;
 return $7 | 0;
}

function _band($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $4 = 0;
 if (!(HEAP8[$u >> 0] | 0)) $4 = 0; else $4 = (HEAP8[$v >> 0] | 0) != 0 & 1;
 HEAP8[$x >> 0] = $4;
 return;
}

function _joff($w) {
 $w = $w | 0;
 var $0 = 0;
 $0 = HEAP32[2120] | 0;
 if (($0 | 0) == 0 ? 1 : ($0 | 0) == (HEAP32[_stdout >> 2] | 0)) _exit(0);
 _fclose($0 | 0) | 0;
 _exit(0);
 return 0;
}

function _bor($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $4 = 0;
 if (!(HEAP8[$u >> 0] | 0)) $4 = (HEAP8[$v >> 0] | 0) != 0 & 1; else $4 = 1;
 HEAP8[$x >> 0] = $4;
 return;
}

function _blt($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $4 = 0;
 if (!(HEAP8[$u >> 0] | 0)) $4 = (HEAP8[$v >> 0] | 0) != 0 & 1; else $4 = 0;
 HEAP8[$x >> 0] = $4;
 return;
}

function _ble($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $4 = 0;
 if (!(HEAP8[$u >> 0] | 0)) $4 = 1; else $4 = (HEAP8[$v >> 0] | 0) != 0 & 1;
 HEAP8[$x >> 0] = $4;
 return;
}

function _bgt($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $4 = 0;
 if (!(HEAP8[$u >> 0] | 0)) $4 = 0; else $4 = (HEAP8[$v >> 0] | 0) == 0 & 1;
 HEAP8[$x >> 0] = $4;
 return;
}

function _bge($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 var $4 = 0;
 if (!(HEAP8[$u >> 0] | 0)) $4 = (HEAP8[$v >> 0] | 0) == 0 & 1; else $4 = 1;
 HEAP8[$x >> 0] = $4;
 return;
}

function _symbrd($w) {
 $w = $w | 0;
 var $$0 = 0, $1 = 0;
 if (!$w) $$0 = 0; else {
  $1 = _srdlg($w) | 0;
  if (!$1) {
   _jsignal(20);
   $$0 = 0;
  } else $$0 = $1;
 }
 return $$0 | 0;
}

function _cons2a($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 var $1 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 return HEAP32[$self + ($1 + 6 + ($1 & 1) << 2) >> 2] | 0;
}

function _dbsq($w) {
 $w = $w | 0;
 var $$0 = 0, $1 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $1 = HEAP32[126] | 0;
 $$0 = ($1 | 0) != 0 ? $1 : HEAP32[616] | 0;
 return $$0 | 0;
}

function _dbrun($w) {
 $w = $w | 0;
 var $$0 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP8[480] = 0;
 HEAP8[464] = 1;
 HEAP8[496] = 1;
 $$0 = HEAP32[638] | 0;
 return $$0 | 0;
}

function _dbpop($w) {
 $w = $w | 0;
 var $$0 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP8[480] = 0;
 HEAP8[464] = 1;
 HEAP8[496] = 3;
 $$0 = HEAP32[638] | 0;
 return $$0 | 0;
}

function _dbnxt($w) {
 $w = $w | 0;
 var $$0 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP8[480] = 0;
 HEAP8[464] = 1;
 HEAP8[496] = 5;
 $$0 = HEAP32[638] | 0;
 return $$0 | 0;
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0;
}

function _curry($b, $e, $stack) {
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 return _advform(HEAP32[$stack + ($b << 2) >> 2] | 0, HEAP32[$stack + ($e << 2) >> 2] | 0) | 0;
}

function _xcosh($x) {
 $x = +$x;
 var $4 = 0.0;
 if ($x < -709.0 | $x > 709.0) {
  $4 = +HEAPF64[317];
  return +$4;
 } else {
  $4 = +_cosh($x);
  return +$4;
 }
 return +(0.0);
}

function _hookv($b, $e, $stack) {
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 return _hook(HEAP32[$stack + ($b << 2) >> 2] | 0, HEAP32[$stack + ($e << 2) >> 2] | 0) | 0;
}

function _cut01($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $0 = 0;
 $0 = HEAP32[660] | 0;
 return _cut02(_lamin2($0, _negate(_shape($w) | 0) | 0) | 0, $w, $self) | 0;
}

function _xn1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = _vn(_xd(0, $w, $self) | 0) | 0;
 return $$0 | 0;
}

function _dl($w) {
 $w = $w | 0;
 var $$0 = 0;
 if (!$w) $$0 = 0; else if ((HEAP32[$w + 12 >> 2] | 0) > 0) $$0 = _rank1ex($w, 0, 0, 451) | 0; else $$0 = $w;
 return $$0 | 0;
}

function _adv($b, $e, $stack) {
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 return _df1(HEAP32[$stack + ($b << 2) >> 2] | 0, HEAP32[$stack + ($e << 2) >> 2] | 0) | 0;
}

function _razein($w) {
 $w = $w | 0;
 var $1 = 0, $3 = 0;
 $1 = _box(_raze($w) | 0) | 0;
 $3 = _swap(_ds(-58) | 0) | 0;
 return _df2($w, $1, _amp($3, _ds(62) | 0) | 0) | 0;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
}

function _strchr($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $0 = 0;
 $0 = ___strchrnul($s, $c) | 0;
 return ((HEAP8[$0 >> 0] | 0) == ($c & 255) << 24 >> 24 ? $0 : 0) | 0;
}

function _cons1a($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $1 = 0;
 $1 = HEAP32[$self + 12 >> 2] | 0;
 return HEAP32[$self + ($1 + 6 + ($1 & 1) << 2) >> 2] | 0;
}

function _xexp($x) {
 $x = +$x;
 var $3 = 0.0;
 if ($x > 709.0) {
  $3 = +HEAPF64[317];
  return +$3;
 } else {
  $3 = +Math_exp(+$x);
  return +$3;
 }
 return +(0.0);
}

function _dne($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 HEAP8[$x >> 0] = (_teq(+HEAPF64[$u >> 3], +HEAPF64[$v >> 3]) | 0) << 24 >> 24 == 0 & 1;
 return;
}

function _dgt($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 HEAP8[$x >> 0] = (_tle(+HEAPF64[$u >> 3], +HEAPF64[$v >> 3]) | 0) << 24 >> 24 == 0 & 1;
 return;
}

function _dge($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 HEAP8[$x >> 0] = (_tlt(+HEAPF64[$u >> 3], +HEAPF64[$v >> 3]) | 0) << 24 >> 24 == 0 & 1;
 return;
}

function _vn($w) {
 $w = $w | 0;
 var $$0 = 0;
 if (!$w) $$0 = 0; else if (!(HEAP32[$w >> 2] & 127)) {
  _jsignal(18);
  $$0 = 0;
 } else $$0 = $w;
 return $$0 | 0;
}

function _rtype($cv) {
 $cv = $cv | 0;
 var $8 = 0;
 if (!($cv & 16)) if (!($cv & 32)) $8 = ($cv >>> 3 & 8 ^ 8) + 8 | 0; else $8 = 4; else $8 = 1;
 return $8 | 0;
}

function _atype($cv) {
 $cv = $cv | 0;
 var $8 = 0;
 if (!($cv & 1)) if (!($cv & 2)) $8 = ($cv << 1 & 8 ^ 8) + 8 | 0; else $8 = 4; else $8 = 1;
 return $8 | 0;
}

function _isl($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $0 = 0, $1 = 0;
 $0 = _onm($a) | 0;
 $1 = _ope($w) | 0;
 return _symbis($0, $1, HEAP32[894] | 0) | 0;
}

function _isg($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $0 = 0, $1 = 0;
 $0 = _onm($a) | 0;
 $1 = _ope($w) | 0;
 return _symbis($0, $1, HEAP32[892] | 0) | 0;
}

function _isignum($v, $x) {
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0;
 $0 = HEAP32[$v >> 2] | 0;
 HEAP32[$x >> 2] = (($0 | 0) > 0 & 1) - ($0 >>> 31);
 return;
}

function _rankle($w) {
 $w = $w | 0;
 var $5 = 0;
 if (!$w) $5 = 0; else if (!(HEAP32[$w + 12 >> 2] | 0)) $5 = _ravel($w) | 0; else $5 = $w;
 return $5 | 0;
}

function _imag($v, $x) {
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0;
 $0 = HEAP32[$v >> 2] | 0;
 HEAP32[$x >> 2] = ($0 | 0) > -1 ? $0 : 0 - $0 | 0;
 return;
}

function ___expo2($x) {
 $x = +$x;
 return +(+Math_exp(+($x + -1416.0996898839683)) * 2247116418577894884661631.0e283 * 2247116418577894884661631.0e283);
}

function _unquo1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0;
 if (!$w) $$0 = 0; else $$0 = _unquote(0, $w, $self) | 0;
 return $$0 | 0;
}

function _rank($w) {
 $w = $w | 0;
 var $$0 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = _sc(HEAP32[$w + 12 >> 2] | 0) | 0;
 return $$0 | 0;
}

function _itymes($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 HEAPF64[$x >> 3] = +(HEAP32[$u >> 2] | 0) * +(HEAP32[$v >> 2] | 0);
 return;
}

function _iminus($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 HEAPF64[$x >> 3] = +(HEAP32[$u >> 2] | 0) - +(HEAP32[$v >> 2] | 0);
 return;
}

function _iplus($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 HEAPF64[$x >> 3] = +(HEAP32[$u >> 2] | 0) + +(HEAP32[$v >> 2] | 0);
 return;
}

function _ine($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 HEAP8[$x >> 0] = (HEAP32[$u >> 2] | 0) != (HEAP32[$v >> 2] | 0) & 1;
 return;
}

function _ile($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 HEAP8[$x >> 0] = (HEAP32[$u >> 2] | 0) <= (HEAP32[$v >> 2] | 0) & 1;
 return;
}

function _ige($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 HEAP8[$x >> 0] = (HEAP32[$u >> 2] | 0) >= (HEAP32[$v >> 2] | 0) & 1;
 return;
}

function _ieq($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 HEAP8[$x >> 0] = (HEAP32[$u >> 2] | 0) == (HEAP32[$v >> 2] | 0) & 1;
 return;
}

function _ilt($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 HEAP8[$x >> 0] = (HEAP32[$u >> 2] | 0) < (HEAP32[$v >> 2] | 0) & 1;
 return;
}

function _igt($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 HEAP8[$x >> 0] = (HEAP32[$u >> 2] | 0) > (HEAP32[$v >> 2] | 0) & 1;
 return;
}

function _bminus($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 HEAP32[$x >> 2] = (HEAP32[$u >> 2] | 0) - (HEAP32[$v >> 2] | 0);
 return;
}

function _cne($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 HEAP8[$x >> 0] = (HEAP8[$u >> 0] | 0) != (HEAP8[$v >> 0] | 0) & 1;
 return;
}

function _ceq($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 HEAP8[$x >> 0] = (HEAP8[$u >> 0] | 0) == (HEAP8[$v >> 0] | 0) & 1;
 return;
}

function _bplus($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 HEAP32[$x >> 2] = (HEAP32[$v >> 2] | 0) + (HEAP32[$u >> 2] | 0);
 return;
}

function _box($w) {
 $w = $w | 0;
 var $$0 = 0;
 if (!$w) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = _scalar4(32, _ca($w) | 0) | 0;
 return $$0 | 0;
}

function _bne($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 HEAP8[$x >> 0] = (HEAP8[$u >> 0] | 0) != (HEAP8[$v >> 0] | 0) & 1;
 return;
}

function _bminus2($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 HEAP32[$x >> 2] = (HEAP8[$u >> 0] | 0) - (HEAP8[$v >> 0] | 0);
 return;
}

function _beq($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 HEAP8[$x >> 0] = (HEAP8[$u >> 0] | 0) == (HEAP8[$v >> 0] | 0) & 1;
 return;
}

function _xadv($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 var $$0 = 0;
 if (!$w) $$0 = 0; else $$0 = _xd($w, 0, $self) | 0;
 return $$0 | 0;
}

function _bplus2($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 HEAP32[$x >> 2] = (HEAP8[$v >> 0] | 0) + (HEAP8[$u >> 0] | 0);
 return;
}

function _wctomb($s, $wc) {
 $s = $s | 0;
 $wc = $wc | 0;
 var $$0 = 0;
 if (!$s) $$0 = 0; else $$0 = _wcrtomb($s, $wc, 0) | 0;
 return $$0 | 0;
}

function _dlt($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 HEAP8[$x >> 0] = _tlt(+HEAPF64[$u >> 3], +HEAPF64[$v >> 3]) | 0;
 return;
}

function _dle($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 HEAP8[$x >> 0] = _tle(+HEAPF64[$u >> 3], +HEAPF64[$v >> 3]) | 0;
 return;
}

function _deq($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 HEAP8[$x >> 0] = _teq(+HEAPF64[$u >> 3], +HEAPF64[$v >> 3]) | 0;
 return;
}

function _dmag($v, $x) {
 $v = $v | 0;
 $x = $x | 0;
 var $0 = 0.0;
 $0 = +HEAPF64[$v >> 3];
 HEAPF64[$x >> 3] = $0 >= 0.0 ? $0 : -$0;
 return;
}

function _strlen(ptr) {
 ptr = ptr | 0;
 var curr = 0;
 curr = ptr;
 while (HEAP8[curr >> 0] | 0) curr = curr + 1 | 0;
 return curr - ptr | 0;
}

function _rr($w) {
 $w = $w | 0;
 var $1 = 0;
 $1 = HEAP32[$w + 12 >> 2] | 0;
 return HEAPU8[$w + ($1 + 4 + ($1 & 1) << 2) + 30 >> 0] | 0 | 0;
}

function _lr($w) {
 $w = $w | 0;
 var $1 = 0;
 $1 = HEAP32[$w + 12 >> 2] | 0;
 return HEAPU8[$w + ($1 + 4 + ($1 & 1) << 2) + 29 >> 0] | 0 | 0;
}

function _fmtB($s, $v) {
 $s = $s | 0;
 $v = $v | 0;
 HEAP8[$s >> 0] = (HEAP8[$v >> 0] | 0) != 0 ? 49 : 48;
 HEAP8[$s + 1 >> 0] = 0;
 return;
}

function _dminus($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 HEAPF64[$x >> 3] = +HEAPF64[$u >> 3] - +HEAPF64[$v >> 3];
 return;
}

function _dplus($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 HEAPF64[$x >> 3] = +HEAPF64[$u >> 3] + +HEAPF64[$v >> 3];
 return;
}

function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw;
  threwValue = value;
 }
}

function _mr($w) {
 $w = $w | 0;
 var $1 = 0;
 $1 = HEAP32[$w + 12 >> 2] | 0;
 return HEAPU8[$w + ($1 + 11 + ($1 & 1) << 2) >> 0] | 0 | 0;
}

function _vsprintf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 return _vsnprintf($s, 2147483647, $fmt, $ap) | 0;
}

function _eps($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 var $0 = 0;
 $0 = _indexof($w, $a) | 0;
 return _va2($0, _tally($w) | 0, 60) | 0;
}

function _punc($b, $e, $stack) {
 $b = $b | 0;
 $e = $e | 0;
 $stack = $stack | 0;
 return HEAP32[$stack + ($e + -1 << 2) >> 2] | 0;
}

function _fitexp1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 return _df1($w, _amp(_scf(2.718281828459045) | 0, $self) | 0) | 0;
}

function _nubsieve($w) {
 $w = $w | 0;
 var $0 = 0;
 $0 = _ii($w) | 0;
 return _neeq($0, _indexof($w, $w) | 0, 0, 0, 61) | 0;
}

function _shl($w) {
 $w = $w | 0;
 var $0 = 0;
 $0 = HEAP32[646] | 0;
 return _amp($0, _fit(_ds(-106) | 0, $w) | 0) | 0;
}

function _eqx($k, $u, $v) {
 $k = $k | 0;
 $u = $u | 0;
 $v = $v | 0;
 return (_memcmp($u, $v, $k) | 0) == 0 | 0;
}

function _shift1($w, $self) {
 $w = $w | 0;
 $self = $self | 0;
 return _shift2(HEAP32[644] | 0, $w, $self) | 0;
}

function _gc($w, $old) {
 $w = $w | 0;
 $old = $old | 0;
 _ra($w) | 0;
 _tpop($old) | 0;
 return _tpush($w) | 0;
}

function _dfloor($v, $x) {
 $v = $v | 0;
 $x = $x | 0;
 HEAPF64[$x >> 3] = +_tfloor(+HEAPF64[$v >> 3]);
 return;
}

function _dceil($v, $x) {
 $v = $v | 0;
 $x = $x | 0;
 HEAPF64[$x >> 3] = +_tceil(+HEAPF64[$v >> 3]);
 return;
}

function _jdot2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return _plus($a, _tymes(HEAP32[622] | 0, $w) | 0) | 0;
}

function _dfact($v, $x) {
 $v = $v | 0;
 $x = $x | 0;
 HEAPF64[$x >> 3] = +_fac(+HEAPF64[$v >> 3]);
 return;
}

function _deriv2($a, $w, $self) {
 $a = $a | 0;
 $w = $w | 0;
 $self = $self | 0;
 _jsignal(3);
 return 0;
}

function _sigint($k) {
 $k = $k | 0;
 HEAP32[350] = (HEAP32[350] | 0) + 1;
 _signal(2, 351) | 0;
 return;
}

function _jc($k, $f1, $f2) {
 $k = $k | 0;
 $f1 = $f1 | 0;
 $f2 = $f2 | 0;
 _jsignal(11);
 return 0;
}

function _hia($k, $v) {
 $k = $k | 0;
 $v = $v | 0;
 return _hiat(1.0, $k, HEAP32[$v >> 2] | 0) | 0;
}

function _nne($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 HEAP8[$x >> 0] = 1;
 return;
}

function _neq($u, $v, $x) {
 $u = $u | 0;
 $v = $v | 0;
 $x = $x | 0;
 HEAP8[$x >> 0] = 0;
 return;
}

function _isspace($c) {
 $c = $c | 0;
 return (($c | 0) == 32 | ($c + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function _dgrade2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return _from(_grade(0, $w) | 0, $a) | 0;
}

function _grade2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return _from(_grade(1, $w) | 0, $a) | 0;
}

function _root($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return _va2($w, _recip($a) | 0, 94) | 0;
}

function _polar($w) {
 $w = $w | 0;
 return _rank2ex(_v2(10, 12) | 0, $w, 0, 1, 0, 169) | 0;
}

function _rect($w) {
 $w = $w | 0;
 return _rank2ex(_v2(9, 11) | 0, $w, 0, 1, 0, 169) | 0;
}

function _ne($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return _neeq($a, $w, 0, 0, -107) | 0;
}

function _minimum($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return _va2($a, $w, -126) | 0;
}

function _maximum($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return _va2($a, $w, -124) | 0;
}

function _eq($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return _neeq($a, $w, 0, 0, 61) | 0;
}

function _residue($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return _va2($a, $w, 124) | 0;
}

function _circle($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return _va2($a, $w, -53) | 0;
}

function _nand($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return _va2($a, $w, -117) | 0;
}

function _hid($k, $v) {
 $k = $k | 0;
 $v = $v | 0;
 return HEAP32[$v + 4 >> 2] | 0;
}

function _divide($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return _va2($a, $w, 37) | 0;
}

function _tymes($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return _va2($a, $w, 42) | 0;
}

function _outof($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return _va2($a, $w, 33) | 0;
}

function _nor($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return _va2($a, $w, -119) | 0;
}

function _nl1($w) {
 $w = $w | 0;
 _memset(3608, 1, 256) | 0;
 return _nlx($w) | 0;
}

function _minus($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return _va2($a, $w, 45) | 0;
}

function _lcm($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return _va2($a, $w, -118) | 0;
}

function _gcd($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return _va2($a, $w, -120) | 0;
}

function _expn2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return _va2($a, $w, 94) | 0;
}

function _plus($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return _va2($a, $w, 43) | 0;
}

function _le($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return _va2($a, $w, -125) | 0;
}

function _ge($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return _va2($a, $w, -123) | 0;
}

function _copysignl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_copysign($x, $y));
}

function _scalbnl($x, $n) {
 $x = +$x;
 $n = $n | 0;
 return +(+_scalbn($x, $n));
}

function _lt($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return _va2($a, $w, 60) | 0;
}

function _gt($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return _va2($a, $w, 62) | 0;
}

function _negate($w) {
 $w = $w | 0;
 return _va2(HEAP32[660] | 0, $w, 45) | 0;
}

function _increm($w) {
 $w = $w | 0;
 return _va2(HEAP32[646] | 0, $w, 43) | 0;
}

function _frexpl($x, $e) {
 $x = +$x;
 $e = $e | 0;
 return +(+_frexp($x, $e));
}

function _domerr($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 _jsignal(3);
 return 0;
}

function _decrem($w) {
 $w = $w | 0;
 return _va2($w, HEAP32[646] | 0, 45) | 0;
}

function _recip($w) {
 $w = $w | 0;
 return _va2(HEAP32[646] | 0, $w, 37) | 0;
}

function _halve($w) {
 $w = $w | 0;
 return _va2($w, HEAP32[658] | 0, 37) | 0;
}

function _eig2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 _jsignal(11);
 return 0;
}

function _nub($w) {
 $w = $w | 0;
 return _repeat(_nubsieve($w) | 0, $w) | 0;
}

function _curtail($w) {
 $w = $w | 0;
 return _drop(HEAP32[644] | 0, $w) | 0;
}

function _tsit1($w) {
 $w = $w | 0;
 return _tsit2(HEAP32[646] | 0, $w) | 0;
}

function _jdot1($w) {
 $w = $w | 0;
 return _tymes(HEAP32[622] | 0, $w) | 0;
}

function _behead($w) {
 $w = $w | 0;
 return _drop(HEAP32[646] | 0, $w) | 0;
}

function _right2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return _ca($w) | 0;
}

function _tail($w) {
 $w = $w | 0;
 return _from(HEAP32[644] | 0, $w) | 0;
}

function _pix($w) {
 $w = $w | 0;
 return _tymes(HEAP32[648] | 0, $w) | 0;
}

function _left2($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return _ca($a) | 0;
}

function _head($w) {
 $w = $w | 0;
 return _from(HEAP32[660] | 0, $w) | 0;
}

function _fmodl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_fmod($x, $y));
}

function _stype($w) {
 $w = $w | 0;
 return _sc(HEAP32[$w >> 2] | 0) | 0;
}

function _sr1($w) {
 $w = $w | 0;
 return _srep(HEAP32[630] | 0, $w) | 0;
}

function _ex56($w) {
 $w = $w | 0;
 HEAP8[3600] = 1;
 return _ex($w) | 0;
}

function _ex55($w) {
 $w = $w | 0;
 HEAP8[3600] = 0;
 return _ex($w) | 0;
}

function _evmq($w) {
 $w = $w | 0;
 return _behead(HEAP32[650] | 0) | 0;
}

function _catsp($w) {
 $w = $w | 0;
 return _over($w, _scc(32) | 0) | 0;
}

function _shr($w) {
 $w = $w | 0;
 return _fit(_ds(-106) | 0, $w) | 0;
}

function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}

function _sps($w) {
 $w = $w | 0;
 return _sc(HEAP32[670] | 0) | 0;
}

function _rlq($w) {
 $w = $w | 0;
 return _sc(HEAP32[606] | 0) | 0;
}

function _lev($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return $a | 0;
}

function _dex($a, $w) {
 $a = $a | 0;
 $w = $w | 0;
 return $w | 0;
}

function _square($w) {
 $w = $w | 0;
 return _va2($w, $w, 42) | 0;
}

function _sp($w) {
 $w = $w | 0;
 return _sc(HEAP32[666] | 0) | 0;
}

function _arep($w) {
 $w = $w | 0;
 return _box(_aro($w) | 0) | 0;
}

function _duble($w) {
 $w = $w | 0;
 return _va2($w, $w, 43) | 0;
}

function _dgrade1($w) {
 $w = $w | 0;
 return _grade(0, $w) | 0;
}

function _grade1($w) {
 $w = $w | 0;
 return _grade(1, $w) | 0;
}

function _promptq($w) {
 $w = $w | 0;
 return _cstr(2400) | 0;
}

function _boxq($w) {
 $w = $w | 0;
 return _str(11, 2448) | 0;
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function _poly1($w) {
 $w = $w | 0;
 _jsignal(11);
 return 0;
}

function _jfdir($w) {
 $w = $w | 0;
 _jsignal(11);
 return 0;
}

function _eig1($w) {
 $w = $w | 0;
 _jsignal(11);
 return 0;
}

function _right1($w) {
 $w = $w | 0;
 return _ca($w) | 0;
}

function _breaker() {
 return (HEAP8[2472] | 0) == 0 | 0;
}

function _left1($w) {
 $w = $w | 0;
 return _ca($w) | 0;
}

function _sesminit() {
 _signal(2, 351) | 0;
 return 1;
}

function getTempRet0() {
 return tempRet0 | 0;
}

function stackSave() {
 return STACKTOP | 0;
}

function _spc() {
 return 1;
}

// EMSCRIPTEN_END_FUNCS


  return { _strlen: _strlen, _outof: _outof, _vconj: _vconj, _fitexp1: _fitexp1, _afrom: _afrom, _divide: _divide, _bslash: _bslash, _blt: _blt, _arx: _arx, _negate: _negate, _xadv: _xadv, _from: _from, _fitfill: _fitfill, _tcvc: _tcvc, _recip: _recip, _bge: _bge, _fmtD: _fmtD, _spit: _spit, _fmtB: _fmtB, _strncpy: _strncpy, _psave2: _psave2, _fmtI: _fmtI, _host: _host, _duble: _duble, _cons2a: _cons2a, _jminus: _jminus, _unquo2: _unquo2, _unquo1: _unquo1, _sscript1: _sscript1, _sscript2: _sscript2, _fmtZ: _fmtZ, _behead: _behead, _jferase: _jferase, _dbin: _dbin, _aeq: _aeq, _deriv1: _deriv1, _deriv2: _deriv2, _adot1: _adot1, _reitem: _reitem, _numbpx: _numbpx, _adot2: _adot2, _compUC: _compUC, _inv1: _inv1, _cforkv: _cforkv, _conjug: _conjug, _roll: _roll, _on1: _on1, stackSave: stackSave, _lrx: _lrx, _chookv: _chookv, _jiwrite: _jiwrite, _plus: _plus, _dne: _dne, _ane: _ane, _dgcd: _dgcd, _swap: _swap, _drr: _drr, _ddiv: _ddiv, _dfc: _dfc, _bor: _bor, _fitpp1: _fitpp1, _main: _main, _ieq: _ieq, _cut02: _cut02, _wt: _wt, _prompts: _prompts, _joff: _joff, _dbsq: _dbsq, _cdot2: _cdot2, _dbss: _dbss, _dfr: _dfr, setThrew: setThrew, _overr: _overr, _numj: _numj, _gcl1: _gcl1, _gcl2: _gcl2, _tie: _tie, _tymes: _tymes, _numd: _numd, _minus: _minus, _tcaa: _tcaa, _dren: _dren, _fitctv: _fitctv, _obverse: _obverse, _dyad: _dyad, _vmonad: _vmonad, _ceq: _ceq, _fix: _fix, _cant2: _cant2, _decrem: _decrem, _deal: _deal, stackAlloc: stackAlloc, _hook2: _hook2, _jfloor: _jfloor, _aform: _aform, _igt: _igt, getTempRet0: getTempRet0, _ts: _ts, _cformo: _cformo, _jcir: _jcir, _hostne: _hostne, _box: _box, _abase1: _abase1, _num2: _num2, _num1: _num1, _ige: _ige, _agenda: _agenda, _eq: _eq, _rank2a: _rank2a, _cut: _cut, _keq: _keq, _dfact: _dfact, _fitct1: _fitct1, _fitct2: _fitct2, _trx: _trx, _key: _key, _minv: _minv, _ri: _ri, _jlcm: _jlcm, _trr: _trr, _hookv: _hookv, _matth1: _matth1, _disps: _disps, _dgt: _dgt, _dfloor: _dfloor, _dot: _dot, _eps: _eps, _signum: _signum, _dbrun: _dbrun, _floor1: _floor1, _lamin1: _lamin1, _lamin2: _lamin2, _mdiv: _mdiv, _shape: _shape, _take: _take, _outfix: _outfix, _srx: _srx, _ddot: _ddot, _bplus2: _bplus2, _table: _table, _ply1: _ply1, _jexp: _jexp, _ply2: _ply2, _rfd: _rfd, _reduce: _reduce, _sqroot: _sqroot, _fxx: _fxx, _dplus: _dplus, _bnor: _bnor, _shift1: _shift1, _atop: _atop, _dgrade2: _dgrade2, _ne: _ne, _ad1: _ad1, _ad2: _ad2, _gcd: _gcd, _ge: _ge, _grade2: _grade2, _grade1: _grade1, _ine: _ine, _head: _head, _fork2: _fork2, _fork1: _fork1, _bminus2: _bminus2, _cmonad: _cmonad, _not: _not, _ravel: _ravel, _nor: _nor, _even: _even, _catalog: _catalog, _gt: _gt, _dmin: _dmin, _sr1: _sr1, _ampco: _ampco, _dminus: _dminus, _seg: _seg, _jfsize: _jfsize, _malloc: _malloc, _abase2: _abase2, _catred: _catred, _reshape: _reshape, _self1: _self1, _self2: _self2, _pscan: _pscan, _cconj: _cconj, _jfdir: _jfdir, _tsit2: _tsit2, _tsit1: _tsit1, _imin: _imin, _cut01: _cut01, _vforkv: _vforkv, _shift2: _shift2, _punc: _punc, _tca: _tca, _iplus: _iplus, _formo: _formo, _line1: _line1, _sps: _sps, _line2: _line2, _tail: _tail, _boxq: _boxq, _afi: _afi, _osub: _osub, _root: _root, _vhookv: _vhookv, _ilcm: _ilcm, _jsqrt: _jsqrt, _merge1: _merge1, _merge2: _merge2, _square: _square, _amp: _amp, _words: _words, _ilt: _ilt, _basis1: _basis1, _less: _less, _i64Add: _i64Add, _jmag: _jmag, _pind: _pind, stackRestore: stackRestore, _polar: _polar, _dceil: _dceil, _base1: _base1, _wnc: _wnc, _wnl: _wnl, _pdt: _pdt, _band: _band, _dispq: _dispq, _pinv: _pinv, _swap1: _swap1, _swap2: _swap2, _isl: _isl, _tccc: _tccc, _script2: _script2, _dbpop: _dbpop, _script1: _script1, _cant1: _cant1, _isg: _isg, _expn1: _expn1, _powop: _powop, _fixa: _fixa, _qr: _qr, _qq: _qq, _sclass: _sclass, _right2: _right2, _right1: _right1, _xv2: _xv2, _xv1: _xv1, _ccurry: _ccurry, _dexp: _dexp, _psave1: _psave1, _label: _label, _rank1: _rank1, _rank2: _rank2, _adv: _adv, _jceil: _jceil, _bnand: _bnand, _ble: _ble, _bitshift64Lshr: _bitshift64Lshr, _con2: _con2, _tokens: _tokens, _powv2: _powv2, _powv1: _powv1, _ile: _ile, _rbrace: _rbrace, _match: _match, _link: _link, _tss: _tss, _slash: _slash, _rotate: _rotate, _curry: _curry, _memcpy: _memcpy, _on2: _on2, _cdot1: _cdot1, _forkv: _forkv, _jfread: _jfread, _boxs: _boxs, _jiread: _jiread, _ex56: _ex56, _beq: _beq, _ex55: _ex55, _atco: _atco, _withr: _withr, _dtymes: _dtymes, _dbnxt: _dbnxt, _sn_write: _sn_write, _tayn: _tayn, _adverse: _adverse, _znonce1: _znonce1, _ncx: _ncx, _exec1: _exec1, _cadv: _cadv, _domerr: _domerr, _drop: _drop, _withl: _withl, _gav1: _gav1, _exec2: _exec2, _under2: _under2, _catsp: _catsp, _iota: _iota, _free: _free, runPostSets: runPostSets, _gav2: _gav2, _ceil1: _ceil1, _iminus: _iminus, _jconjug: _jconjug, _repeat: _repeat, _cons1a: _cons1a, _taaa: _taaa, _over: _over, _lcm: _lcm, _monad: _monad, _jtymes: _jtymes, _evger: _evger, _dl: _dl, _stype: _stype, _thorn1: _thorn1, _jdiv: _jdiv, _thorn2: _thorn2, _upon2: _upon2, _igcd: _igcd, _bne: _bne, _promptq: _promptq, _dsignum: _dsignum, _left1: _left1, _tally: _tally, _bool: _bool, _eqj: _eqj, _under: _under, _eqd: _eqd, _eqa: _eqa, _minimum: _minimum, _idiv: _idiv, _nand: _nand, _fitexp2: _fitexp2, _odd: _odd, _eqx: _eqx, _aro: _aro, _bsdot: _bsdot, _bgt: _bgt, _jeq: _jeq, _neq: _neq, _hid: _hid, _dge: _dge, _hia: _hia, _fact: _fact, _drx: _drx, _compD: _compD, _rls: _rls, _rlq: _rlq, _sp: _sp, _jfwrite: _jfwrite, _oblique: _oblique, _compI: _compI, _hix: _hix, _irem: _irem, _le: _le, _nub: _nub, _reverse: _reverse, _insert: _insert, _nl2: _nl2, _nl1: _nl1, _wex: _wex, _dgrade1: _dgrade1, _conj978: _conj978, _sldot: _sldot, _pix: _pix, _fitbox: _fitbox, _vadv: _vadv, _cut2: _cut2, _strcpy: _strcpy, _expn2: _expn2, _cut1: _cut1, _pcopy1: _pcopy1, _xconj: _xconj, _pcopy2: _pcopy2, _nne: _nne, _sigint: _sigint, _vcurry: _vcurry, _gcr2: _gcr2, _prefix: _prefix, _fx: _fx, _gcr1: _gcr1, _vis: _vis, _cut1x: _cut1x, _under1: _under1, _halve: _halve, _raze: _raze, _oprod: _oprod, _rankle: _rankle, _dlt: _dlt, _taylor: _taylor, _rdot2: _rdot2, _memset: _memset, _rdot1: _rdot1, _vpunc: _vpunc, _taylor1: _taylor1, _dle: _dle, _razein: _razein, _fit: _fit, _itymes: _itymes, _maximum: _maximum, _rinv: _rinv, _i64Subtract: _i64Subtract, setTempRet0: setTempRet0, _copy2: _copy2, _increm: _increm, _dlcm: _dlcm, _copy1: _copy1, _evmq: _evmq, _evms: _evms, _infix: _infix, _dex: _dex, _logar1: _logar1, _nubsieve: _nubsieve, _det: _det, _logar2: _logar2, _jbin: _jbin, _deq: _deq, _rect: _rect, _vformo: _vformo, _dmax: _dmax, _tac: _tac, _colon: _colon, _taa: _taa, _mag: _mag, _dbret: _dbret, _jfappend: _jfappend, _bminus: _bminus, _dmag: _dmag, _pfill: _pfill, _sline2: _sline2, _sline1: _sline1, _bool2: _bool2, _bool1: _bool1, _sscan: _sscan, _kne: _kne, _ebar: _ebar, _vdyad: _vdyad, _jpow: _jpow, _jgcd: _jgcd, _isignum: _isignum, _curtail: _curtail, _areduce: _areduce, _tayn1: _tayn1, _eig1: _eig1, _eig2: _eig2, _circle: _circle, _cne: _cne, _bitshift64Shl: _bitshift64Shl, _con1: _con1, _hook1: _hook1, _shr: _shr, _left2: _left2, _imax: _imax, _dbs: _dbs, _dbr: _dbr, _residue: _residue, _jrem: _jrem, _imag: _imag, _xn2: _xn2, _xn1: _xn1, _poly1: _poly1, _save2: _save2, _bplus: _bplus, _poly2: _poly2, _indexof: _indexof, _foreign: _foreign, _fitope: _fitope, _base2: _base2, _jsignum: _jsignum, _tcca: _tcca, _obv2: _obv2, _obv1: _obv1, _save1: _save1, _cdyad: _cdyad, _shl: _shl, _lev: _lev, _jplus: _jplus, _ope: _ope, _lt: _lt, _suffix: _suffix, _tacc: _tacc, _taca: _taca, _jdot2: _jdot2, _jdot1: _jdot1, _is: _is, _ir: _ir, _dotprod: _dotprod, _cons2: _cons2, _case1: _case1, _cons1: _cons1, _jne: _jne, _case2: _case2, _jlog: _jlog, _bdiv: _bdiv };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__strncpy = asm["_strncpy"]; asm["_strncpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strncpy.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__strcpy = asm["_strcpy"]; asm["_strcpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcpy.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _memset = Module["_memset"] = asm["_memset"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];

function b1(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
function b2(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(2);return 0; }
function b3(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(3);return 0; }
function b4(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(5);return 0; }
function b5(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(6);return 0; }
function b6(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(8);return 0; }
function b7(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(9);return 0; }
function b8(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(11);return 0; }
function b9(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(12);return 0; }
function b10(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(14);return 0; }
function b11(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(15);return 0; }
function b12(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(17);return 0; }
function b13(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(18);return 0; }
function b14(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(20);return 0; }
function b15(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(21);return 0; }
function b16(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(23);return 0; }
function b17(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(24);return 0; }
function b18(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(26);return 0; }
function b19(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(28);return 0; }
function b20(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(29);return 0; }
function b21(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(30);return 0; }
function b22(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(31);return 0; }
function b23(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(32);return 0; }
function b24(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(33);return 0; }
function b25(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(34);return 0; }
function b26(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(35);return 0; }
function b27(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(36);return 0; }
function b28(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(37);return 0; }
function b29(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(38);return 0; }
function b30(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(39);return 0; }
function b31(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(40);return 0; }
function b32(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(41);return 0; }
function b33(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(42);return 0; }
function b34(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(43);return 0; }
function b35(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(44);return 0; }
function b36(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(45);return 0; }
function b37(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(46);return 0; }
function b38(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(47);return 0; }
function b39(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(48);return 0; }
function b40(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(49);return 0; }
function b41(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(50);return 0; }
function b42(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(51);return 0; }
function b43(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(52);return 0; }
function b44(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(53);return 0; }
function b45(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(54);return 0; }
function b46(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(55);return 0; }
function b47(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(56);return 0; }
function b48(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(57);return 0; }
function b49(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(58);return 0; }
function b50(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(59);return 0; }
function b51(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(60);return 0; }
function b52(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(61);return 0; }
function b53(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(62);return 0; }
function b54(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(63);return 0; }
function b55(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(64);return 0; }
function b56(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(65);return 0; }
function b57(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(66);return 0; }
function b58(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(67);return 0; }
function b59(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(68);return 0; }
function b60(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(69);return 0; }
function b61(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(70);return 0; }
function b62(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(71);return 0; }
function b63(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(72);return 0; }
function b64(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(73);return 0; }
function b65(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(74);return 0; }
function b66(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(75);return 0; }
function b67(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(76);return 0; }
function b68(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(77);return 0; }
function b69(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(78);return 0; }
function b70(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(79);return 0; }
function b71(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(80);return 0; }
function b72(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(81);return 0; }
function b73(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(82);return 0; }
function b74(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(83);return 0; }
function b75(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(85);return 0; }
function b76(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(86);return 0; }
function b77(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(87);return 0; }
function b78(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(88);return 0; }
function b79(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(89);return 0; }
function b80(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(90);return 0; }
function b81(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(91);return 0; }
function b82(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(92);return 0; }
function b83(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(93);return 0; }
function b84(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(94);return 0; }
function b85(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(95);return 0; }
function b86(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(96);return 0; }
function b87(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(97);return 0; }
function b88(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(98);return 0; }
function b89(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(99);return 0; }
function b90(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(100);return 0; }
function b91(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(101);return 0; }
function b92(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(102);return 0; }
function b93(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(103);return 0; }
function b94(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(104);return 0; }
function b95(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(105);return 0; }
function b96(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(106);return 0; }
function b97(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(107);return 0; }
function b98(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(108);return 0; }
function b99(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(109);return 0; }
function b100(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(110);return 0; }
function b101(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(111);return 0; }
function b102(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(112);return 0; }
function b103(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(113);return 0; }
function b104(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(114);return 0; }
function b105(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(115);return 0; }
function b106(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(116);return 0; }
function b107(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(117);return 0; }
function b108(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(118);return 0; }
function b109(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(119);return 0; }
function b110(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(120);return 0; }
function b111(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(121);return 0; }
function b112(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(122);return 0; }
function b113(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(123);return 0; }
function b114(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(124);return 0; }
function b115(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(125);return 0; }
function b116(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(126);return 0; }
function b117(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(127);return 0; }
function b118(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(128);return 0; }
function b119(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(129);return 0; }
function b120(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(130);return 0; }
function b121(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(131);return 0; }
function b122(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(132);return 0; }
function b123(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(133);return 0; }
function b124(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(134);return 0; }
function b125(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(135);return 0; }
function b126(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(136);return 0; }
function b127(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(137);return 0; }
function b128(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(138);return 0; }
function b129(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(139);return 0; }
function b130(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(140);return 0; }
function b131(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(141);return 0; }
function b132(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(142);return 0; }
function b133(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(143);return 0; }
function b134(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(144);return 0; }
function b135(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(145);return 0; }
function b136(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(146);return 0; }
function b137(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(147);return 0; }
function b138(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(148);return 0; }
function b139(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(149);return 0; }
function b140(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(150);return 0; }
function b141(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(151);return 0; }
function b142(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(152);return 0; }
function b143(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(153);return 0; }
function b144(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(154);return 0; }
function b145(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(155);return 0; }
function b146(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(156);return 0; }
function b147(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(157);return 0; }
function b148(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(158);return 0; }
function b149(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(159);return 0; }
function b150(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(160);return 0; }
function b151(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(161);return 0; }
function b152(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(162);return 0; }
function b153(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(163);return 0; }
function b154(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(164);return 0; }
function b155(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(165);return 0; }
function b156(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(166);return 0; }
function b157(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(167);return 0; }
function b158(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(168);return 0; }
function b159(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(169);return 0; }
function b160(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(170);return 0; }
function b161(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(171);return 0; }
function b162(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(172);return 0; }
function b163(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(173);return 0; }
function b164(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(174);return 0; }
function b165(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(175);return 0; }
function b166(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(176);return 0; }
function b167(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(177);return 0; }
function b168(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(178);return 0; }
function b169(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(179);return 0; }
function b170(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(180);return 0; }
function b171(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(181);return 0; }
function b172(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(182);return 0; }
function b173(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(183);return 0; }
function b174(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(184);return 0; }
function b175(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(185);return 0; }
function b176(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(186);return 0; }
function b177(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(187);return 0; }
function b178(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(188);return 0; }
function b179(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(189);return 0; }
function b180(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(190);return 0; }
function b181(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(191);return 0; }
function b182(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(192);return 0; }
function b183(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(193);return 0; }
function b184(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(194);return 0; }
function b185(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(195);return 0; }
function b186(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(196);return 0; }
function b187(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(197);return 0; }
function b188(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(198);return 0; }
function b189(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(199);return 0; }
function b190(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(200);return 0; }
function b191(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(201);return 0; }
function b192(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(202);return 0; }
function b193(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(203);return 0; }
function b194(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(204);return 0; }
function b195(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(205);return 0; }
function b196(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(206);return 0; }
function b197(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(207);return 0; }
function b198(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(208);return 0; }
function b199(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(209);return 0; }
function b200(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(210);return 0; }
function b201(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(211);return 0; }
function b202(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(212);return 0; }
function b203(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(213);return 0; }
function b204(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(214);return 0; }
function b205(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(215);return 0; }
function b206(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(216);return 0; }
function b207(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(217);return 0; }
function b208(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(218);return 0; }
function b209(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(219);return 0; }
function b210(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(220);return 0; }
function b211(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(221);return 0; }
function b212(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(222);return 0; }
function b213(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(223);return 0; }
function b214(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(224);return 0; }
function b215(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(225);return 0; }
function b216(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(226);return 0; }
function b217(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(227);return 0; }
function b218(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(228);return 0; }
function b219(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(229);return 0; }
function b220(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(230);return 0; }
function b221(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(231);return 0; }
function b222(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(232);return 0; }
function b223(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(233);return 0; }
function b224(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(235);return 0; }
function b225(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(236);return 0; }
function b226(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(238);return 0; }
function b227(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(239);return 0; }
function b228(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(241);return 0; }
function b229(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(242);return 0; }
function b230(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(244);return 0; }
function b231(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(246);return 0; }
function b232(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(248);return 0; }
function b233(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(249);return 0; }
function b234(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(250);return 0; }
function b235(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(251);return 0; }
function b236(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(252);return 0; }
function b237(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(254);return 0; }
function b238(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(255);return 0; }
function b239(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(257);return 0; }
function b240(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(258);return 0; }
function b241(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(260);return 0; }
function b242(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(261);return 0; }
function b243(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(262);return 0; }
function b244(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(263);return 0; }
function b245(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(264);return 0; }
function b246(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(265);return 0; }
function b247(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(267);return 0; }
function b248(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(270);return 0; }
function b249(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(272);return 0; }
function b250(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(274);return 0; }
function b251(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(276);return 0; }
function b252(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(277);return 0; }
function b253(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(279);return 0; }
function b254(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(280);return 0; }
function b255(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(282);return 0; }
function b256(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(283);return 0; }
function b257(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(285);return 0; }
function b258(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(286);return 0; }
function b259(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(287);return 0; }
function b260(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(289);return 0; }
function b261(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(291);return 0; }
function b262(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(292);return 0; }
function b263(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(294);return 0; }
function b264(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(297);return 0; }
function b265(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(298);return 0; }
function b266(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(299);return 0; }
function b267(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(300);return 0; }
function b268(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(302);return 0; }
function b269(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(303);return 0; }
function b270(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(305);return 0; }
function b271(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(306);return 0; }
function b272(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(309);return 0; }
function b273(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(311);return 0; }
function b274(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(313);return 0; }
function b275(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(314);return 0; }
function b276(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(316);return 0; }
function b277(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(317);return 0; }
function b278(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(321);return 0; }
function b279(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(323);return 0; }
function b280(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(325);return 0; }
function b281(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(327);return 0; }
function b282(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(334);return 0; }
function b283(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(335);return 0; }
function b284(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(337);return 0; }
function b285(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(338);return 0; }
function b286(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(340);return 0; }
function b287(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(341);return 0; }
function b288(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(344);return 0; }
function b289(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(345);return 0; }
function b290(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(346);return 0; }
function b291(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(347);return 0; }
function b292(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(348);return 0; }
function b293(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(349);return 0; }
function b294(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(350);return 0; }
function b295(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(351);return 0; }
function b296(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(352);return 0; }
function b297(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(353);return 0; }
function b298(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(354);return 0; }
function b299(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(355);return 0; }
function b300(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(356);return 0; }
function b301(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(357);return 0; }
function b302(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(358);return 0; }
function b303(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(359);return 0; }
function b304(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(360);return 0; }
function b305(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(361);return 0; }
function b306(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(362);return 0; }
function b307(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(363);return 0; }
function b308(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(364);return 0; }
function b309(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(365);return 0; }
function b310(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(366);return 0; }
function b311(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(367);return 0; }
function b312(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(368);return 0; }
function b313(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(369);return 0; }
function b314(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(370);return 0; }
function b315(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(371);return 0; }
function b316(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(372);return 0; }
function b317(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(373);return 0; }
function b318(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(374);return 0; }
function b319(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(375);return 0; }
function b320(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(376);return 0; }
function b321(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(377);return 0; }
function b322(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(378);return 0; }
function b323(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(379);return 0; }
function b324(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(380);return 0; }
function b325(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(383);return 0; }
function b326(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(384);return 0; }
function b327(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(386);return 0; }
function b328(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(388);return 0; }
function b329(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(389);return 0; }
function b330(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(390);return 0; }
function b331(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(391);return 0; }
function b332(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(392);return 0; }
function b333(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(393);return 0; }
function b334(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(394);return 0; }
function b335(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(395);return 0; }
function b336(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(396);return 0; }
function b337(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(397);return 0; }
function b338(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(398);return 0; }
function b339(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(399);return 0; }
function b340(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(400);return 0; }
function b341(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(404);return 0; }
function b342(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(405);return 0; }
function b343(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(406);return 0; }
function b344(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(407);return 0; }
function b345(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(408);return 0; }
function b346(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(409);return 0; }
function b347(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(410);return 0; }
function b348(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(411);return 0; }
function b349(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(412);return 0; }
function b350(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(413);return 0; }
function b351(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(414);return 0; }
function b352(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(415);return 0; }
function b353(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(416);return 0; }
function b354(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(417);return 0; }
function b355(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(418);return 0; }
function b356(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(419);return 0; }
function b357(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(420);return 0; }
function b358(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(421);return 0; }
function b359(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(422);return 0; }
function b360(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(423);return 0; }
function b361(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(424);return 0; }
function b362(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(425);return 0; }
function b363(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(426);return 0; }
function b364(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(427);return 0; }
function b365(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(428);return 0; }
function b366(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(429);return 0; }
function b367(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(430);return 0; }
function b368(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(431);return 0; }
function b369(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(432);return 0; }
function b370(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(433);return 0; }
function b371(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(434);return 0; }
function b372(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(435);return 0; }
function b373(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(436);return 0; }
function b374(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(437);return 0; }
function b375(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(438);return 0; }
function b376(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(439);return 0; }
function b377(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(440);return 0; }
function b378(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(441);return 0; }
function b379(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(442);return 0; }
function b380(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(443);return 0; }
function b381(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(444);return 0; }
function b382(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(445);return 0; }
function b383(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(446);return 0; }
function b384(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(447);return 0; }
function b385(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(448);return 0; }
function b386(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(449);return 0; }
function b387(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(450);return 0; }
function b388(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(451);return 0; }
function b389(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(452);return 0; }
function b390(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(453);return 0; }
function b391(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(454);return 0; }
function b392(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(455);return 0; }
function b393(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(456);return 0; }
function b394(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(457);return 0; }
function b395(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(458);return 0; }
function b396(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(459);return 0; }
function b397(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(460);return 0; }
function b398(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(461);return 0; }
function b399(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(462);return 0; }
function b400(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(463);return 0; }
function b401(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(464);return 0; }
function b402(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(465);return 0; }
function b403(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(466);return 0; }
function b404(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(467);return 0; }
function b405(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(468);return 0; }
function b406(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(469);return 0; }
function b407(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(470);return 0; }
function b408(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(471);return 0; }
function b409(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(472);return 0; }
function b410(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(473);return 0; }
function b411(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(474);return 0; }
function b412(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(475);return 0; }
function b413(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(476);return 0; }
function b414(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(477);return 0; }
function b415(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(478);return 0; }
function b416(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(479);return 0; }
function b417(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(480);return 0; }
function b418(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(481);return 0; }
function b419(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(482);return 0; }
function b420(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(483);return 0; }
function b421(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(484);return 0; }
function b422(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(485);return 0; }
function b423(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(486);return 0; }
function b424(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(487);return 0; }
function b425(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(488);return 0; }
function b426(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(489);return 0; }
function b427(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(490);return 0; }
function b428(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(491);return 0; }
function b429(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(492);return 0; }
function b430(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(493);return 0; }
function b431(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(494);return 0; }
function b432(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(495);return 0; }
function b433(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(496);return 0; }
function b434(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(497);return 0; }
function b435(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(498);return 0; }
function b436(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(499);return 0; }
function b437(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(500);return 0; }
function b438(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(501);return 0; }
function b439(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(502);return 0; }
function b440(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(503);return 0; }
function b441(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(504);return 0; }
function b442(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(505);return 0; }
function b443(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(506);return 0; }
function b444(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(507);return 0; }
function b445(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(508);return 0; }
function b446(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(509);return 0; }
function b447(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(510);return 0; }
function b448(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(511);return 0; }
function b450(p0) { p0 = p0|0; nullFunc_vi(0); }
function b451(p0) { p0 = p0|0; nullFunc_vi(1); }
function b452(p0) { p0 = p0|0; nullFunc_vi(2); }
function b453(p0) { p0 = p0|0; nullFunc_vi(3); }
function b454(p0) { p0 = p0|0; nullFunc_vi(4); }
function b455(p0) { p0 = p0|0; nullFunc_vi(5); }
function b456(p0) { p0 = p0|0; nullFunc_vi(6); }
function b457(p0) { p0 = p0|0; nullFunc_vi(7); }
function b458(p0) { p0 = p0|0; nullFunc_vi(8); }
function b459(p0) { p0 = p0|0; nullFunc_vi(9); }
function b460(p0) { p0 = p0|0; nullFunc_vi(10); }
function b461(p0) { p0 = p0|0; nullFunc_vi(11); }
function b462(p0) { p0 = p0|0; nullFunc_vi(12); }
function b463(p0) { p0 = p0|0; nullFunc_vi(13); }
function b464(p0) { p0 = p0|0; nullFunc_vi(14); }
function b465(p0) { p0 = p0|0; nullFunc_vi(15); }
function b466(p0) { p0 = p0|0; nullFunc_vi(16); }
function b467(p0) { p0 = p0|0; nullFunc_vi(17); }
function b468(p0) { p0 = p0|0; nullFunc_vi(18); }
function b469(p0) { p0 = p0|0; nullFunc_vi(19); }
function b470(p0) { p0 = p0|0; nullFunc_vi(20); }
function b471(p0) { p0 = p0|0; nullFunc_vi(21); }
function b472(p0) { p0 = p0|0; nullFunc_vi(22); }
function b473(p0) { p0 = p0|0; nullFunc_vi(23); }
function b474(p0) { p0 = p0|0; nullFunc_vi(24); }
function b475(p0) { p0 = p0|0; nullFunc_vi(25); }
function b476(p0) { p0 = p0|0; nullFunc_vi(26); }
function b477(p0) { p0 = p0|0; nullFunc_vi(27); }
function b478(p0) { p0 = p0|0; nullFunc_vi(28); }
function b479(p0) { p0 = p0|0; nullFunc_vi(29); }
function b480(p0) { p0 = p0|0; nullFunc_vi(30); }
function b481(p0) { p0 = p0|0; nullFunc_vi(31); }
function b482(p0) { p0 = p0|0; nullFunc_vi(32); }
function b483(p0) { p0 = p0|0; nullFunc_vi(33); }
function b484(p0) { p0 = p0|0; nullFunc_vi(34); }
function b485(p0) { p0 = p0|0; nullFunc_vi(35); }
function b486(p0) { p0 = p0|0; nullFunc_vi(36); }
function b487(p0) { p0 = p0|0; nullFunc_vi(37); }
function b488(p0) { p0 = p0|0; nullFunc_vi(38); }
function b489(p0) { p0 = p0|0; nullFunc_vi(39); }
function b490(p0) { p0 = p0|0; nullFunc_vi(40); }
function b491(p0) { p0 = p0|0; nullFunc_vi(41); }
function b492(p0) { p0 = p0|0; nullFunc_vi(42); }
function b493(p0) { p0 = p0|0; nullFunc_vi(43); }
function b494(p0) { p0 = p0|0; nullFunc_vi(44); }
function b495(p0) { p0 = p0|0; nullFunc_vi(45); }
function b496(p0) { p0 = p0|0; nullFunc_vi(46); }
function b497(p0) { p0 = p0|0; nullFunc_vi(47); }
function b498(p0) { p0 = p0|0; nullFunc_vi(48); }
function b499(p0) { p0 = p0|0; nullFunc_vi(49); }
function b500(p0) { p0 = p0|0; nullFunc_vi(50); }
function b501(p0) { p0 = p0|0; nullFunc_vi(51); }
function b502(p0) { p0 = p0|0; nullFunc_vi(52); }
function b503(p0) { p0 = p0|0; nullFunc_vi(53); }
function b504(p0) { p0 = p0|0; nullFunc_vi(54); }
function b505(p0) { p0 = p0|0; nullFunc_vi(55); }
function b506(p0) { p0 = p0|0; nullFunc_vi(56); }
function b507(p0) { p0 = p0|0; nullFunc_vi(57); }
function b508(p0) { p0 = p0|0; nullFunc_vi(58); }
function b509(p0) { p0 = p0|0; nullFunc_vi(59); }
function b510(p0) { p0 = p0|0; nullFunc_vi(60); }
function b511(p0) { p0 = p0|0; nullFunc_vi(61); }
function b512(p0) { p0 = p0|0; nullFunc_vi(62); }
function b513(p0) { p0 = p0|0; nullFunc_vi(63); }
function b514(p0) { p0 = p0|0; nullFunc_vi(64); }
function b515(p0) { p0 = p0|0; nullFunc_vi(65); }
function b516(p0) { p0 = p0|0; nullFunc_vi(66); }
function b517(p0) { p0 = p0|0; nullFunc_vi(67); }
function b518(p0) { p0 = p0|0; nullFunc_vi(68); }
function b519(p0) { p0 = p0|0; nullFunc_vi(69); }
function b520(p0) { p0 = p0|0; nullFunc_vi(70); }
function b521(p0) { p0 = p0|0; nullFunc_vi(71); }
function b522(p0) { p0 = p0|0; nullFunc_vi(72); }
function b523(p0) { p0 = p0|0; nullFunc_vi(73); }
function b524(p0) { p0 = p0|0; nullFunc_vi(74); }
function b525(p0) { p0 = p0|0; nullFunc_vi(75); }
function b526(p0) { p0 = p0|0; nullFunc_vi(76); }
function b527(p0) { p0 = p0|0; nullFunc_vi(77); }
function b528(p0) { p0 = p0|0; nullFunc_vi(78); }
function b529(p0) { p0 = p0|0; nullFunc_vi(79); }
function b530(p0) { p0 = p0|0; nullFunc_vi(80); }
function b531(p0) { p0 = p0|0; nullFunc_vi(81); }
function b532(p0) { p0 = p0|0; nullFunc_vi(82); }
function b533(p0) { p0 = p0|0; nullFunc_vi(83); }
function b534(p0) { p0 = p0|0; nullFunc_vi(84); }
function b535(p0) { p0 = p0|0; nullFunc_vi(85); }
function b536(p0) { p0 = p0|0; nullFunc_vi(86); }
function b537(p0) { p0 = p0|0; nullFunc_vi(87); }
function b538(p0) { p0 = p0|0; nullFunc_vi(88); }
function b539(p0) { p0 = p0|0; nullFunc_vi(89); }
function b540(p0) { p0 = p0|0; nullFunc_vi(90); }
function b541(p0) { p0 = p0|0; nullFunc_vi(91); }
function b542(p0) { p0 = p0|0; nullFunc_vi(92); }
function b543(p0) { p0 = p0|0; nullFunc_vi(93); }
function b544(p0) { p0 = p0|0; nullFunc_vi(94); }
function b545(p0) { p0 = p0|0; nullFunc_vi(95); }
function b546(p0) { p0 = p0|0; nullFunc_vi(96); }
function b547(p0) { p0 = p0|0; nullFunc_vi(97); }
function b548(p0) { p0 = p0|0; nullFunc_vi(98); }
function b549(p0) { p0 = p0|0; nullFunc_vi(99); }
function b550(p0) { p0 = p0|0; nullFunc_vi(100); }
function b551(p0) { p0 = p0|0; nullFunc_vi(101); }
function b552(p0) { p0 = p0|0; nullFunc_vi(102); }
function b553(p0) { p0 = p0|0; nullFunc_vi(103); }
function b554(p0) { p0 = p0|0; nullFunc_vi(104); }
function b555(p0) { p0 = p0|0; nullFunc_vi(105); }
function b556(p0) { p0 = p0|0; nullFunc_vi(106); }
function b557(p0) { p0 = p0|0; nullFunc_vi(107); }
function b558(p0) { p0 = p0|0; nullFunc_vi(108); }
function b559(p0) { p0 = p0|0; nullFunc_vi(109); }
function b560(p0) { p0 = p0|0; nullFunc_vi(110); }
function b561(p0) { p0 = p0|0; nullFunc_vi(111); }
function b562(p0) { p0 = p0|0; nullFunc_vi(112); }
function b563(p0) { p0 = p0|0; nullFunc_vi(113); }
function b564(p0) { p0 = p0|0; nullFunc_vi(114); }
function b565(p0) { p0 = p0|0; nullFunc_vi(115); }
function b566(p0) { p0 = p0|0; nullFunc_vi(116); }
function b567(p0) { p0 = p0|0; nullFunc_vi(117); }
function b568(p0) { p0 = p0|0; nullFunc_vi(118); }
function b569(p0) { p0 = p0|0; nullFunc_vi(119); }
function b570(p0) { p0 = p0|0; nullFunc_vi(120); }
function b571(p0) { p0 = p0|0; nullFunc_vi(121); }
function b572(p0) { p0 = p0|0; nullFunc_vi(122); }
function b573(p0) { p0 = p0|0; nullFunc_vi(123); }
function b574(p0) { p0 = p0|0; nullFunc_vi(124); }
function b575(p0) { p0 = p0|0; nullFunc_vi(125); }
function b576(p0) { p0 = p0|0; nullFunc_vi(126); }
function b577(p0) { p0 = p0|0; nullFunc_vi(127); }
function b578(p0) { p0 = p0|0; nullFunc_vi(128); }
function b579(p0) { p0 = p0|0; nullFunc_vi(129); }
function b580(p0) { p0 = p0|0; nullFunc_vi(130); }
function b581(p0) { p0 = p0|0; nullFunc_vi(131); }
function b582(p0) { p0 = p0|0; nullFunc_vi(132); }
function b583(p0) { p0 = p0|0; nullFunc_vi(133); }
function b584(p0) { p0 = p0|0; nullFunc_vi(134); }
function b585(p0) { p0 = p0|0; nullFunc_vi(135); }
function b586(p0) { p0 = p0|0; nullFunc_vi(136); }
function b587(p0) { p0 = p0|0; nullFunc_vi(137); }
function b588(p0) { p0 = p0|0; nullFunc_vi(138); }
function b589(p0) { p0 = p0|0; nullFunc_vi(139); }
function b590(p0) { p0 = p0|0; nullFunc_vi(140); }
function b591(p0) { p0 = p0|0; nullFunc_vi(141); }
function b592(p0) { p0 = p0|0; nullFunc_vi(142); }
function b593(p0) { p0 = p0|0; nullFunc_vi(143); }
function b594(p0) { p0 = p0|0; nullFunc_vi(144); }
function b595(p0) { p0 = p0|0; nullFunc_vi(145); }
function b596(p0) { p0 = p0|0; nullFunc_vi(146); }
function b597(p0) { p0 = p0|0; nullFunc_vi(147); }
function b598(p0) { p0 = p0|0; nullFunc_vi(148); }
function b599(p0) { p0 = p0|0; nullFunc_vi(149); }
function b600(p0) { p0 = p0|0; nullFunc_vi(150); }
function b601(p0) { p0 = p0|0; nullFunc_vi(151); }
function b602(p0) { p0 = p0|0; nullFunc_vi(152); }
function b603(p0) { p0 = p0|0; nullFunc_vi(153); }
function b604(p0) { p0 = p0|0; nullFunc_vi(154); }
function b605(p0) { p0 = p0|0; nullFunc_vi(155); }
function b606(p0) { p0 = p0|0; nullFunc_vi(156); }
function b607(p0) { p0 = p0|0; nullFunc_vi(157); }
function b608(p0) { p0 = p0|0; nullFunc_vi(158); }
function b609(p0) { p0 = p0|0; nullFunc_vi(159); }
function b610(p0) { p0 = p0|0; nullFunc_vi(160); }
function b611(p0) { p0 = p0|0; nullFunc_vi(161); }
function b612(p0) { p0 = p0|0; nullFunc_vi(162); }
function b613(p0) { p0 = p0|0; nullFunc_vi(163); }
function b614(p0) { p0 = p0|0; nullFunc_vi(164); }
function b615(p0) { p0 = p0|0; nullFunc_vi(165); }
function b616(p0) { p0 = p0|0; nullFunc_vi(166); }
function b617(p0) { p0 = p0|0; nullFunc_vi(167); }
function b618(p0) { p0 = p0|0; nullFunc_vi(168); }
function b619(p0) { p0 = p0|0; nullFunc_vi(169); }
function b620(p0) { p0 = p0|0; nullFunc_vi(170); }
function b621(p0) { p0 = p0|0; nullFunc_vi(171); }
function b622(p0) { p0 = p0|0; nullFunc_vi(172); }
function b623(p0) { p0 = p0|0; nullFunc_vi(173); }
function b624(p0) { p0 = p0|0; nullFunc_vi(174); }
function b625(p0) { p0 = p0|0; nullFunc_vi(175); }
function b626(p0) { p0 = p0|0; nullFunc_vi(176); }
function b627(p0) { p0 = p0|0; nullFunc_vi(177); }
function b628(p0) { p0 = p0|0; nullFunc_vi(178); }
function b629(p0) { p0 = p0|0; nullFunc_vi(179); }
function b630(p0) { p0 = p0|0; nullFunc_vi(180); }
function b631(p0) { p0 = p0|0; nullFunc_vi(181); }
function b632(p0) { p0 = p0|0; nullFunc_vi(182); }
function b633(p0) { p0 = p0|0; nullFunc_vi(183); }
function b634(p0) { p0 = p0|0; nullFunc_vi(184); }
function b635(p0) { p0 = p0|0; nullFunc_vi(185); }
function b636(p0) { p0 = p0|0; nullFunc_vi(186); }
function b637(p0) { p0 = p0|0; nullFunc_vi(187); }
function b638(p0) { p0 = p0|0; nullFunc_vi(188); }
function b639(p0) { p0 = p0|0; nullFunc_vi(189); }
function b640(p0) { p0 = p0|0; nullFunc_vi(190); }
function b641(p0) { p0 = p0|0; nullFunc_vi(191); }
function b642(p0) { p0 = p0|0; nullFunc_vi(192); }
function b643(p0) { p0 = p0|0; nullFunc_vi(193); }
function b644(p0) { p0 = p0|0; nullFunc_vi(194); }
function b645(p0) { p0 = p0|0; nullFunc_vi(195); }
function b646(p0) { p0 = p0|0; nullFunc_vi(196); }
function b647(p0) { p0 = p0|0; nullFunc_vi(197); }
function b648(p0) { p0 = p0|0; nullFunc_vi(198); }
function b649(p0) { p0 = p0|0; nullFunc_vi(199); }
function b650(p0) { p0 = p0|0; nullFunc_vi(200); }
function b651(p0) { p0 = p0|0; nullFunc_vi(201); }
function b652(p0) { p0 = p0|0; nullFunc_vi(202); }
function b653(p0) { p0 = p0|0; nullFunc_vi(203); }
function b654(p0) { p0 = p0|0; nullFunc_vi(204); }
function b655(p0) { p0 = p0|0; nullFunc_vi(205); }
function b656(p0) { p0 = p0|0; nullFunc_vi(206); }
function b657(p0) { p0 = p0|0; nullFunc_vi(207); }
function b658(p0) { p0 = p0|0; nullFunc_vi(208); }
function b659(p0) { p0 = p0|0; nullFunc_vi(209); }
function b660(p0) { p0 = p0|0; nullFunc_vi(210); }
function b661(p0) { p0 = p0|0; nullFunc_vi(211); }
function b662(p0) { p0 = p0|0; nullFunc_vi(212); }
function b663(p0) { p0 = p0|0; nullFunc_vi(213); }
function b664(p0) { p0 = p0|0; nullFunc_vi(214); }
function b665(p0) { p0 = p0|0; nullFunc_vi(215); }
function b666(p0) { p0 = p0|0; nullFunc_vi(216); }
function b667(p0) { p0 = p0|0; nullFunc_vi(217); }
function b668(p0) { p0 = p0|0; nullFunc_vi(218); }
function b669(p0) { p0 = p0|0; nullFunc_vi(219); }
function b670(p0) { p0 = p0|0; nullFunc_vi(220); }
function b671(p0) { p0 = p0|0; nullFunc_vi(221); }
function b672(p0) { p0 = p0|0; nullFunc_vi(222); }
function b673(p0) { p0 = p0|0; nullFunc_vi(223); }
function b674(p0) { p0 = p0|0; nullFunc_vi(224); }
function b675(p0) { p0 = p0|0; nullFunc_vi(225); }
function b676(p0) { p0 = p0|0; nullFunc_vi(226); }
function b677(p0) { p0 = p0|0; nullFunc_vi(227); }
function b678(p0) { p0 = p0|0; nullFunc_vi(228); }
function b679(p0) { p0 = p0|0; nullFunc_vi(229); }
function b680(p0) { p0 = p0|0; nullFunc_vi(230); }
function b681(p0) { p0 = p0|0; nullFunc_vi(231); }
function b682(p0) { p0 = p0|0; nullFunc_vi(232); }
function b683(p0) { p0 = p0|0; nullFunc_vi(233); }
function b684(p0) { p0 = p0|0; nullFunc_vi(234); }
function b685(p0) { p0 = p0|0; nullFunc_vi(235); }
function b686(p0) { p0 = p0|0; nullFunc_vi(236); }
function b687(p0) { p0 = p0|0; nullFunc_vi(237); }
function b688(p0) { p0 = p0|0; nullFunc_vi(238); }
function b689(p0) { p0 = p0|0; nullFunc_vi(239); }
function b690(p0) { p0 = p0|0; nullFunc_vi(240); }
function b691(p0) { p0 = p0|0; nullFunc_vi(241); }
function b692(p0) { p0 = p0|0; nullFunc_vi(242); }
function b693(p0) { p0 = p0|0; nullFunc_vi(243); }
function b694(p0) { p0 = p0|0; nullFunc_vi(244); }
function b695(p0) { p0 = p0|0; nullFunc_vi(245); }
function b696(p0) { p0 = p0|0; nullFunc_vi(246); }
function b697(p0) { p0 = p0|0; nullFunc_vi(247); }
function b698(p0) { p0 = p0|0; nullFunc_vi(248); }
function b699(p0) { p0 = p0|0; nullFunc_vi(249); }
function b700(p0) { p0 = p0|0; nullFunc_vi(250); }
function b701(p0) { p0 = p0|0; nullFunc_vi(251); }
function b702(p0) { p0 = p0|0; nullFunc_vi(252); }
function b703(p0) { p0 = p0|0; nullFunc_vi(253); }
function b704(p0) { p0 = p0|0; nullFunc_vi(254); }
function b705(p0) { p0 = p0|0; nullFunc_vi(255); }
function b706(p0) { p0 = p0|0; nullFunc_vi(256); }
function b707(p0) { p0 = p0|0; nullFunc_vi(257); }
function b708(p0) { p0 = p0|0; nullFunc_vi(258); }
function b709(p0) { p0 = p0|0; nullFunc_vi(259); }
function b710(p0) { p0 = p0|0; nullFunc_vi(260); }
function b711(p0) { p0 = p0|0; nullFunc_vi(261); }
function b712(p0) { p0 = p0|0; nullFunc_vi(262); }
function b713(p0) { p0 = p0|0; nullFunc_vi(263); }
function b714(p0) { p0 = p0|0; nullFunc_vi(264); }
function b715(p0) { p0 = p0|0; nullFunc_vi(265); }
function b716(p0) { p0 = p0|0; nullFunc_vi(266); }
function b717(p0) { p0 = p0|0; nullFunc_vi(267); }
function b718(p0) { p0 = p0|0; nullFunc_vi(268); }
function b719(p0) { p0 = p0|0; nullFunc_vi(269); }
function b720(p0) { p0 = p0|0; nullFunc_vi(270); }
function b721(p0) { p0 = p0|0; nullFunc_vi(271); }
function b722(p0) { p0 = p0|0; nullFunc_vi(272); }
function b723(p0) { p0 = p0|0; nullFunc_vi(273); }
function b724(p0) { p0 = p0|0; nullFunc_vi(274); }
function b725(p0) { p0 = p0|0; nullFunc_vi(275); }
function b726(p0) { p0 = p0|0; nullFunc_vi(276); }
function b727(p0) { p0 = p0|0; nullFunc_vi(277); }
function b728(p0) { p0 = p0|0; nullFunc_vi(278); }
function b729(p0) { p0 = p0|0; nullFunc_vi(279); }
function b730(p0) { p0 = p0|0; nullFunc_vi(280); }
function b731(p0) { p0 = p0|0; nullFunc_vi(281); }
function b732(p0) { p0 = p0|0; nullFunc_vi(282); }
function b733(p0) { p0 = p0|0; nullFunc_vi(283); }
function b734(p0) { p0 = p0|0; nullFunc_vi(284); }
function b735(p0) { p0 = p0|0; nullFunc_vi(285); }
function b736(p0) { p0 = p0|0; nullFunc_vi(286); }
function b737(p0) { p0 = p0|0; nullFunc_vi(287); }
function b738(p0) { p0 = p0|0; nullFunc_vi(288); }
function b739(p0) { p0 = p0|0; nullFunc_vi(289); }
function b740(p0) { p0 = p0|0; nullFunc_vi(290); }
function b741(p0) { p0 = p0|0; nullFunc_vi(291); }
function b742(p0) { p0 = p0|0; nullFunc_vi(292); }
function b743(p0) { p0 = p0|0; nullFunc_vi(293); }
function b744(p0) { p0 = p0|0; nullFunc_vi(294); }
function b745(p0) { p0 = p0|0; nullFunc_vi(295); }
function b746(p0) { p0 = p0|0; nullFunc_vi(296); }
function b747(p0) { p0 = p0|0; nullFunc_vi(297); }
function b748(p0) { p0 = p0|0; nullFunc_vi(298); }
function b749(p0) { p0 = p0|0; nullFunc_vi(299); }
function b750(p0) { p0 = p0|0; nullFunc_vi(300); }
function b751(p0) { p0 = p0|0; nullFunc_vi(301); }
function b752(p0) { p0 = p0|0; nullFunc_vi(302); }
function b753(p0) { p0 = p0|0; nullFunc_vi(303); }
function b754(p0) { p0 = p0|0; nullFunc_vi(304); }
function b755(p0) { p0 = p0|0; nullFunc_vi(305); }
function b756(p0) { p0 = p0|0; nullFunc_vi(306); }
function b757(p0) { p0 = p0|0; nullFunc_vi(307); }
function b758(p0) { p0 = p0|0; nullFunc_vi(308); }
function b759(p0) { p0 = p0|0; nullFunc_vi(309); }
function b760(p0) { p0 = p0|0; nullFunc_vi(310); }
function b761(p0) { p0 = p0|0; nullFunc_vi(311); }
function b762(p0) { p0 = p0|0; nullFunc_vi(312); }
function b763(p0) { p0 = p0|0; nullFunc_vi(313); }
function b764(p0) { p0 = p0|0; nullFunc_vi(314); }
function b765(p0) { p0 = p0|0; nullFunc_vi(315); }
function b766(p0) { p0 = p0|0; nullFunc_vi(316); }
function b767(p0) { p0 = p0|0; nullFunc_vi(317); }
function b768(p0) { p0 = p0|0; nullFunc_vi(318); }
function b769(p0) { p0 = p0|0; nullFunc_vi(319); }
function b770(p0) { p0 = p0|0; nullFunc_vi(320); }
function b771(p0) { p0 = p0|0; nullFunc_vi(321); }
function b772(p0) { p0 = p0|0; nullFunc_vi(322); }
function b773(p0) { p0 = p0|0; nullFunc_vi(323); }
function b774(p0) { p0 = p0|0; nullFunc_vi(324); }
function b775(p0) { p0 = p0|0; nullFunc_vi(325); }
function b776(p0) { p0 = p0|0; nullFunc_vi(326); }
function b777(p0) { p0 = p0|0; nullFunc_vi(327); }
function b778(p0) { p0 = p0|0; nullFunc_vi(328); }
function b779(p0) { p0 = p0|0; nullFunc_vi(329); }
function b780(p0) { p0 = p0|0; nullFunc_vi(330); }
function b781(p0) { p0 = p0|0; nullFunc_vi(331); }
function b782(p0) { p0 = p0|0; nullFunc_vi(332); }
function b783(p0) { p0 = p0|0; nullFunc_vi(333); }
function b784(p0) { p0 = p0|0; nullFunc_vi(334); }
function b785(p0) { p0 = p0|0; nullFunc_vi(335); }
function b786(p0) { p0 = p0|0; nullFunc_vi(336); }
function b787(p0) { p0 = p0|0; nullFunc_vi(337); }
function b788(p0) { p0 = p0|0; nullFunc_vi(338); }
function b789(p0) { p0 = p0|0; nullFunc_vi(339); }
function b790(p0) { p0 = p0|0; nullFunc_vi(340); }
function b791(p0) { p0 = p0|0; nullFunc_vi(341); }
function b792(p0) { p0 = p0|0; nullFunc_vi(342); }
function b793(p0) { p0 = p0|0; nullFunc_vi(343); }
function b794(p0) { p0 = p0|0; nullFunc_vi(344); }
function b795(p0) { p0 = p0|0; nullFunc_vi(345); }
function b796(p0) { p0 = p0|0; nullFunc_vi(346); }
function b797(p0) { p0 = p0|0; nullFunc_vi(347); }
function b798(p0) { p0 = p0|0; nullFunc_vi(348); }
function b799(p0) { p0 = p0|0; nullFunc_vi(349); }
function b800(p0) { p0 = p0|0; nullFunc_vi(350); }
function b801(p0) { p0 = p0|0; nullFunc_vi(352); }
function b802(p0) { p0 = p0|0; nullFunc_vi(353); }
function b803(p0) { p0 = p0|0; nullFunc_vi(354); }
function b804(p0) { p0 = p0|0; nullFunc_vi(355); }
function b805(p0) { p0 = p0|0; nullFunc_vi(356); }
function b806(p0) { p0 = p0|0; nullFunc_vi(357); }
function b807(p0) { p0 = p0|0; nullFunc_vi(358); }
function b808(p0) { p0 = p0|0; nullFunc_vi(359); }
function b809(p0) { p0 = p0|0; nullFunc_vi(360); }
function b810(p0) { p0 = p0|0; nullFunc_vi(361); }
function b811(p0) { p0 = p0|0; nullFunc_vi(362); }
function b812(p0) { p0 = p0|0; nullFunc_vi(363); }
function b813(p0) { p0 = p0|0; nullFunc_vi(364); }
function b814(p0) { p0 = p0|0; nullFunc_vi(365); }
function b815(p0) { p0 = p0|0; nullFunc_vi(366); }
function b816(p0) { p0 = p0|0; nullFunc_vi(367); }
function b817(p0) { p0 = p0|0; nullFunc_vi(368); }
function b818(p0) { p0 = p0|0; nullFunc_vi(369); }
function b819(p0) { p0 = p0|0; nullFunc_vi(370); }
function b820(p0) { p0 = p0|0; nullFunc_vi(371); }
function b821(p0) { p0 = p0|0; nullFunc_vi(372); }
function b822(p0) { p0 = p0|0; nullFunc_vi(373); }
function b823(p0) { p0 = p0|0; nullFunc_vi(374); }
function b824(p0) { p0 = p0|0; nullFunc_vi(375); }
function b825(p0) { p0 = p0|0; nullFunc_vi(376); }
function b826(p0) { p0 = p0|0; nullFunc_vi(377); }
function b827(p0) { p0 = p0|0; nullFunc_vi(378); }
function b828(p0) { p0 = p0|0; nullFunc_vi(379); }
function b829(p0) { p0 = p0|0; nullFunc_vi(380); }
function b830(p0) { p0 = p0|0; nullFunc_vi(381); }
function b831(p0) { p0 = p0|0; nullFunc_vi(382); }
function b832(p0) { p0 = p0|0; nullFunc_vi(383); }
function b833(p0) { p0 = p0|0; nullFunc_vi(384); }
function b834(p0) { p0 = p0|0; nullFunc_vi(385); }
function b835(p0) { p0 = p0|0; nullFunc_vi(386); }
function b836(p0) { p0 = p0|0; nullFunc_vi(387); }
function b837(p0) { p0 = p0|0; nullFunc_vi(388); }
function b838(p0) { p0 = p0|0; nullFunc_vi(389); }
function b839(p0) { p0 = p0|0; nullFunc_vi(390); }
function b840(p0) { p0 = p0|0; nullFunc_vi(391); }
function b841(p0) { p0 = p0|0; nullFunc_vi(392); }
function b842(p0) { p0 = p0|0; nullFunc_vi(393); }
function b843(p0) { p0 = p0|0; nullFunc_vi(394); }
function b844(p0) { p0 = p0|0; nullFunc_vi(395); }
function b845(p0) { p0 = p0|0; nullFunc_vi(396); }
function b846(p0) { p0 = p0|0; nullFunc_vi(397); }
function b847(p0) { p0 = p0|0; nullFunc_vi(398); }
function b848(p0) { p0 = p0|0; nullFunc_vi(399); }
function b849(p0) { p0 = p0|0; nullFunc_vi(400); }
function b850(p0) { p0 = p0|0; nullFunc_vi(401); }
function b851(p0) { p0 = p0|0; nullFunc_vi(402); }
function b852(p0) { p0 = p0|0; nullFunc_vi(403); }
function b853(p0) { p0 = p0|0; nullFunc_vi(404); }
function b854(p0) { p0 = p0|0; nullFunc_vi(405); }
function b855(p0) { p0 = p0|0; nullFunc_vi(406); }
function b856(p0) { p0 = p0|0; nullFunc_vi(407); }
function b857(p0) { p0 = p0|0; nullFunc_vi(408); }
function b858(p0) { p0 = p0|0; nullFunc_vi(409); }
function b859(p0) { p0 = p0|0; nullFunc_vi(410); }
function b860(p0) { p0 = p0|0; nullFunc_vi(411); }
function b861(p0) { p0 = p0|0; nullFunc_vi(412); }
function b862(p0) { p0 = p0|0; nullFunc_vi(413); }
function b863(p0) { p0 = p0|0; nullFunc_vi(414); }
function b864(p0) { p0 = p0|0; nullFunc_vi(415); }
function b865(p0) { p0 = p0|0; nullFunc_vi(416); }
function b866(p0) { p0 = p0|0; nullFunc_vi(417); }
function b867(p0) { p0 = p0|0; nullFunc_vi(418); }
function b868(p0) { p0 = p0|0; nullFunc_vi(419); }
function b869(p0) { p0 = p0|0; nullFunc_vi(420); }
function b870(p0) { p0 = p0|0; nullFunc_vi(421); }
function b871(p0) { p0 = p0|0; nullFunc_vi(422); }
function b872(p0) { p0 = p0|0; nullFunc_vi(423); }
function b873(p0) { p0 = p0|0; nullFunc_vi(424); }
function b874(p0) { p0 = p0|0; nullFunc_vi(425); }
function b875(p0) { p0 = p0|0; nullFunc_vi(426); }
function b876(p0) { p0 = p0|0; nullFunc_vi(427); }
function b877(p0) { p0 = p0|0; nullFunc_vi(428); }
function b878(p0) { p0 = p0|0; nullFunc_vi(429); }
function b879(p0) { p0 = p0|0; nullFunc_vi(430); }
function b880(p0) { p0 = p0|0; nullFunc_vi(431); }
function b881(p0) { p0 = p0|0; nullFunc_vi(432); }
function b882(p0) { p0 = p0|0; nullFunc_vi(433); }
function b883(p0) { p0 = p0|0; nullFunc_vi(434); }
function b884(p0) { p0 = p0|0; nullFunc_vi(435); }
function b885(p0) { p0 = p0|0; nullFunc_vi(436); }
function b886(p0) { p0 = p0|0; nullFunc_vi(437); }
function b887(p0) { p0 = p0|0; nullFunc_vi(438); }
function b888(p0) { p0 = p0|0; nullFunc_vi(439); }
function b889(p0) { p0 = p0|0; nullFunc_vi(440); }
function b890(p0) { p0 = p0|0; nullFunc_vi(441); }
function b891(p0) { p0 = p0|0; nullFunc_vi(442); }
function b892(p0) { p0 = p0|0; nullFunc_vi(443); }
function b893(p0) { p0 = p0|0; nullFunc_vi(444); }
function b894(p0) { p0 = p0|0; nullFunc_vi(445); }
function b895(p0) { p0 = p0|0; nullFunc_vi(446); }
function b896(p0) { p0 = p0|0; nullFunc_vi(447); }
function b897(p0) { p0 = p0|0; nullFunc_vi(448); }
function b898(p0) { p0 = p0|0; nullFunc_vi(449); }
function b899(p0) { p0 = p0|0; nullFunc_vi(450); }
function b900(p0) { p0 = p0|0; nullFunc_vi(451); }
function b901(p0) { p0 = p0|0; nullFunc_vi(452); }
function b902(p0) { p0 = p0|0; nullFunc_vi(453); }
function b903(p0) { p0 = p0|0; nullFunc_vi(454); }
function b904(p0) { p0 = p0|0; nullFunc_vi(455); }
function b905(p0) { p0 = p0|0; nullFunc_vi(456); }
function b906(p0) { p0 = p0|0; nullFunc_vi(457); }
function b907(p0) { p0 = p0|0; nullFunc_vi(458); }
function b908(p0) { p0 = p0|0; nullFunc_vi(459); }
function b909(p0) { p0 = p0|0; nullFunc_vi(460); }
function b910(p0) { p0 = p0|0; nullFunc_vi(461); }
function b911(p0) { p0 = p0|0; nullFunc_vi(462); }
function b912(p0) { p0 = p0|0; nullFunc_vi(463); }
function b913(p0) { p0 = p0|0; nullFunc_vi(464); }
function b914(p0) { p0 = p0|0; nullFunc_vi(465); }
function b915(p0) { p0 = p0|0; nullFunc_vi(466); }
function b916(p0) { p0 = p0|0; nullFunc_vi(467); }
function b917(p0) { p0 = p0|0; nullFunc_vi(468); }
function b918(p0) { p0 = p0|0; nullFunc_vi(469); }
function b919(p0) { p0 = p0|0; nullFunc_vi(470); }
function b920(p0) { p0 = p0|0; nullFunc_vi(471); }
function b921(p0) { p0 = p0|0; nullFunc_vi(472); }
function b922(p0) { p0 = p0|0; nullFunc_vi(473); }
function b923(p0) { p0 = p0|0; nullFunc_vi(474); }
function b924(p0) { p0 = p0|0; nullFunc_vi(475); }
function b925(p0) { p0 = p0|0; nullFunc_vi(476); }
function b926(p0) { p0 = p0|0; nullFunc_vi(477); }
function b927(p0) { p0 = p0|0; nullFunc_vi(478); }
function b928(p0) { p0 = p0|0; nullFunc_vi(479); }
function b929(p0) { p0 = p0|0; nullFunc_vi(480); }
function b930(p0) { p0 = p0|0; nullFunc_vi(481); }
function b931(p0) { p0 = p0|0; nullFunc_vi(482); }
function b932(p0) { p0 = p0|0; nullFunc_vi(483); }
function b933(p0) { p0 = p0|0; nullFunc_vi(484); }
function b934(p0) { p0 = p0|0; nullFunc_vi(485); }
function b935(p0) { p0 = p0|0; nullFunc_vi(486); }
function b936(p0) { p0 = p0|0; nullFunc_vi(487); }
function b937(p0) { p0 = p0|0; nullFunc_vi(488); }
function b938(p0) { p0 = p0|0; nullFunc_vi(489); }
function b939(p0) { p0 = p0|0; nullFunc_vi(490); }
function b940(p0) { p0 = p0|0; nullFunc_vi(491); }
function b941(p0) { p0 = p0|0; nullFunc_vi(492); }
function b942(p0) { p0 = p0|0; nullFunc_vi(493); }
function b943(p0) { p0 = p0|0; nullFunc_vi(494); }
function b944(p0) { p0 = p0|0; nullFunc_vi(495); }
function b945(p0) { p0 = p0|0; nullFunc_vi(496); }
function b946(p0) { p0 = p0|0; nullFunc_vi(497); }
function b947(p0) { p0 = p0|0; nullFunc_vi(498); }
function b948(p0) { p0 = p0|0; nullFunc_vi(499); }
function b949(p0) { p0 = p0|0; nullFunc_vi(500); }
function b950(p0) { p0 = p0|0; nullFunc_vi(501); }
function b951(p0) { p0 = p0|0; nullFunc_vi(502); }
function b952(p0) { p0 = p0|0; nullFunc_vi(503); }
function b953(p0) { p0 = p0|0; nullFunc_vi(504); }
function b954(p0) { p0 = p0|0; nullFunc_vi(505); }
function b955(p0) { p0 = p0|0; nullFunc_vi(506); }
function b956(p0) { p0 = p0|0; nullFunc_vi(507); }
function b957(p0) { p0 = p0|0; nullFunc_vi(508); }
function b958(p0) { p0 = p0|0; nullFunc_vi(509); }
function b959(p0) { p0 = p0|0; nullFunc_vi(510); }
function b960(p0) { p0 = p0|0; nullFunc_vi(511); }
function b962(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(0); }
function b963(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(1); }
function b964(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(2); }
function b965(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(3); }
function b966(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(4); }
function b967(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(5); }
function b968(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(6); }
function b969(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(7); }
function b970(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(8); }
function b971(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(9); }
function b972(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(10); }
function b973(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(11); }
function b974(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(12); }
function b975(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(13); }
function b976(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(14); }
function b977(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(15); }
function b978(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(16); }
function b979(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(17); }
function b980(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(18); }
function b981(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(19); }
function b982(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(20); }
function b983(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(21); }
function b984(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(22); }
function b985(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(23); }
function b986(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(24); }
function b987(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(25); }
function b988(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(26); }
function b989(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(27); }
function b990(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(28); }
function b991(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(29); }
function b992(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(30); }
function b993(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(31); }
function b994(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(32); }
function b995(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(33); }
function b996(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(34); }
function b997(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(35); }
function b998(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(36); }
function b999(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(37); }
function b1000(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(38); }
function b1001(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(39); }
function b1002(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(40); }
function b1003(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(41); }
function b1004(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(42); }
function b1005(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(43); }
function b1006(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(44); }
function b1007(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(45); }
function b1008(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(46); }
function b1009(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(47); }
function b1010(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(48); }
function b1011(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(49); }
function b1012(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(50); }
function b1013(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(51); }
function b1014(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(52); }
function b1015(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(53); }
function b1016(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(54); }
function b1017(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(55); }
function b1018(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(56); }
function b1019(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(57); }
function b1020(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(58); }
function b1021(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(59); }
function b1022(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(60); }
function b1023(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(61); }
function b1024(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(62); }
function b1025(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(63); }
function b1026(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(64); }
function b1027(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(65); }
function b1028(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(66); }
function b1029(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(67); }
function b1030(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(68); }
function b1031(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(69); }
function b1032(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(70); }
function b1033(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(71); }
function b1034(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(72); }
function b1035(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(73); }
function b1036(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(74); }
function b1037(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(75); }
function b1038(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(76); }
function b1039(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(77); }
function b1040(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(78); }
function b1041(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(79); }
function b1042(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(80); }
function b1043(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(81); }
function b1044(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(82); }
function b1045(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(83); }
function b1046(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(84); }
function b1047(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(85); }
function b1048(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(86); }
function b1049(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(87); }
function b1050(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(88); }
function b1051(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(89); }
function b1052(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(90); }
function b1053(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(91); }
function b1054(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(92); }
function b1055(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(93); }
function b1056(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(94); }
function b1057(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(95); }
function b1058(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(96); }
function b1059(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(97); }
function b1060(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(98); }
function b1061(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(99); }
function b1062(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(100); }
function b1063(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(101); }
function b1064(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(102); }
function b1065(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(103); }
function b1066(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(104); }
function b1067(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(105); }
function b1068(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(106); }
function b1069(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(107); }
function b1070(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(108); }
function b1071(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(109); }
function b1072(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(110); }
function b1073(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(111); }
function b1074(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(112); }
function b1075(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(113); }
function b1076(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(114); }
function b1077(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(115); }
function b1078(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(116); }
function b1079(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(117); }
function b1080(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(118); }
function b1081(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(119); }
function b1082(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(120); }
function b1083(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(121); }
function b1084(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(122); }
function b1085(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(123); }
function b1086(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(124); }
function b1087(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(125); }
function b1088(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(126); }
function b1089(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(127); }
function b1090(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(128); }
function b1091(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(129); }
function b1092(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(130); }
function b1093(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(131); }
function b1094(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(132); }
function b1095(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(133); }
function b1096(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(134); }
function b1097(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(135); }
function b1098(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(136); }
function b1099(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(137); }
function b1100(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(138); }
function b1101(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(139); }
function b1102(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(140); }
function b1103(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(141); }
function b1104(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(142); }
function b1105(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(143); }
function b1106(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(144); }
function b1107(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(145); }
function b1108(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(146); }
function b1109(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(147); }
function b1110(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(148); }
function b1111(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(149); }
function b1112(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(150); }
function b1113(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(151); }
function b1114(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(152); }
function b1115(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(153); }
function b1116(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(154); }
function b1117(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(155); }
function b1118(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(156); }
function b1119(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(157); }
function b1120(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(158); }
function b1121(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(159); }
function b1122(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(160); }
function b1123(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(161); }
function b1124(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(162); }
function b1125(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(163); }
function b1126(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(164); }
function b1127(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(165); }
function b1128(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(166); }
function b1129(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(167); }
function b1130(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(168); }
function b1131(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(169); }
function b1132(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(170); }
function b1133(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(171); }
function b1134(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(172); }
function b1135(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(173); }
function b1136(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(174); }
function b1137(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(175); }
function b1138(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(176); }
function b1139(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(177); }
function b1140(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(178); }
function b1141(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(179); }
function b1142(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(180); }
function b1143(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(181); }
function b1144(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(182); }
function b1145(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(183); }
function b1146(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(184); }
function b1147(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(185); }
function b1148(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(186); }
function b1149(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(187); }
function b1150(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(188); }
function b1151(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(189); }
function b1152(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(190); }
function b1153(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(191); }
function b1154(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(192); }
function b1155(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(193); }
function b1156(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(194); }
function b1157(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(195); }
function b1158(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(196); }
function b1159(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(197); }
function b1160(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(198); }
function b1161(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(199); }
function b1162(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(200); }
function b1163(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(201); }
function b1164(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(202); }
function b1165(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(203); }
function b1166(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(204); }
function b1167(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(205); }
function b1168(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(206); }
function b1169(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(207); }
function b1170(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(208); }
function b1171(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(209); }
function b1172(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(210); }
function b1173(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(211); }
function b1174(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(212); }
function b1175(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(213); }
function b1176(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(214); }
function b1177(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(215); }
function b1178(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(216); }
function b1179(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(217); }
function b1180(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(218); }
function b1181(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(219); }
function b1182(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(220); }
function b1183(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(221); }
function b1184(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(222); }
function b1185(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(223); }
function b1186(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(224); }
function b1187(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(225); }
function b1188(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(226); }
function b1189(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(227); }
function b1190(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(228); }
function b1191(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(229); }
function b1192(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(230); }
function b1193(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(231); }
function b1194(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(232); }
function b1195(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(233); }
function b1196(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(234); }
function b1197(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(235); }
function b1198(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(236); }
function b1199(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(237); }
function b1200(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(238); }
function b1201(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(239); }
function b1202(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(240); }
function b1203(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(241); }
function b1204(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(242); }
function b1205(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(243); }
function b1206(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(244); }
function b1207(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(245); }
function b1208(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(246); }
function b1209(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(247); }
function b1210(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(248); }
function b1211(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(249); }
function b1212(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(250); }
function b1213(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(251); }
function b1214(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(252); }
function b1215(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(253); }
function b1216(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(254); }
function b1217(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(255); }
function b1218(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(256); }
function b1219(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(257); }
function b1220(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(258); }
function b1221(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(259); }
function b1222(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(260); }
function b1223(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(261); }
function b1224(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(262); }
function b1225(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(263); }
function b1226(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(264); }
function b1227(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(265); }
function b1228(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(266); }
function b1229(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(267); }
function b1230(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(268); }
function b1231(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(269); }
function b1232(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(270); }
function b1233(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(271); }
function b1234(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(272); }
function b1235(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(273); }
function b1236(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(274); }
function b1237(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(275); }
function b1238(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(276); }
function b1239(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(277); }
function b1240(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(278); }
function b1241(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(279); }
function b1242(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(280); }
function b1243(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(281); }
function b1244(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(282); }
function b1245(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(283); }
function b1246(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(284); }
function b1247(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(285); }
function b1248(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(286); }
function b1249(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(287); }
function b1250(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(288); }
function b1251(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(289); }
function b1252(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(290); }
function b1253(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(291); }
function b1254(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(292); }
function b1255(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(293); }
function b1256(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(294); }
function b1257(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(295); }
function b1258(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(296); }
function b1259(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(297); }
function b1260(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(298); }
function b1261(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(299); }
function b1262(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(300); }
function b1263(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(301); }
function b1264(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(302); }
function b1265(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(303); }
function b1266(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(304); }
function b1267(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(305); }
function b1268(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(306); }
function b1269(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(307); }
function b1270(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(308); }
function b1271(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(309); }
function b1272(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(310); }
function b1273(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(311); }
function b1274(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(312); }
function b1275(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(313); }
function b1276(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(314); }
function b1277(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(315); }
function b1278(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(316); }
function b1279(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(317); }
function b1280(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(318); }
function b1281(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(319); }
function b1282(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(320); }
function b1283(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(321); }
function b1284(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(322); }
function b1285(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(323); }
function b1286(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(324); }
function b1287(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(325); }
function b1288(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(326); }
function b1289(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(327); }
function b1290(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(328); }
function b1291(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(329); }
function b1292(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(330); }
function b1293(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(331); }
function b1294(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(332); }
function b1295(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(333); }
function b1296(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(334); }
function b1297(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(335); }
function b1298(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(336); }
function b1299(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(337); }
function b1300(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(338); }
function b1301(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(339); }
function b1302(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(340); }
function b1303(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(341); }
function b1304(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(342); }
function b1305(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(343); }
function b1306(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(344); }
function b1307(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(345); }
function b1308(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(350); }
function b1309(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(351); }
function b1310(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(352); }
function b1311(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(353); }
function b1312(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(354); }
function b1313(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(355); }
function b1314(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(356); }
function b1315(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(357); }
function b1316(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(358); }
function b1317(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(359); }
function b1318(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(360); }
function b1319(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(361); }
function b1320(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(362); }
function b1321(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(363); }
function b1322(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(364); }
function b1323(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(365); }
function b1324(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(377); }
function b1325(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(378); }
function b1326(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(379); }
function b1327(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(380); }
function b1328(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(381); }
function b1329(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(382); }
function b1330(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(383); }
function b1331(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(384); }
function b1332(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(385); }
function b1333(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(386); }
function b1334(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(387); }
function b1335(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(394); }
function b1336(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(395); }
function b1337(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(396); }
function b1338(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(397); }
function b1339(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(398); }
function b1340(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(399); }
function b1341(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(400); }
function b1342(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(401); }
function b1343(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(402); }
function b1344(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(403); }
function b1345(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(404); }
function b1346(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(405); }
function b1347(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(406); }
function b1348(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(407); }
function b1349(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(408); }
function b1350(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(409); }
function b1351(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(410); }
function b1352(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(411); }
function b1353(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(412); }
function b1354(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(413); }
function b1355(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(414); }
function b1356(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(415); }
function b1357(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(416); }
function b1358(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(417); }
function b1359(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(418); }
function b1360(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(419); }
function b1361(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(420); }
function b1362(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(421); }
function b1363(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(422); }
function b1364(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(423); }
function b1365(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(424); }
function b1366(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(425); }
function b1367(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(426); }
function b1368(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(427); }
function b1369(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(428); }
function b1370(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(429); }
function b1371(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(430); }
function b1372(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(431); }
function b1373(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(432); }
function b1374(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(433); }
function b1375(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(434); }
function b1376(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(435); }
function b1377(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(436); }
function b1378(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(437); }
function b1379(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(438); }
function b1380(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(439); }
function b1381(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(440); }
function b1382(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(441); }
function b1383(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(442); }
function b1384(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(443); }
function b1385(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(444); }
function b1386(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(445); }
function b1387(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(446); }
function b1388(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(447); }
function b1389(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(448); }
function b1390(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(449); }
function b1391(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(450); }
function b1392(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(451); }
function b1393(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(452); }
function b1394(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(453); }
function b1395(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(454); }
function b1396(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(455); }
function b1397(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(456); }
function b1398(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(457); }
function b1399(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(458); }
function b1400(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(459); }
function b1401(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(460); }
function b1402(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(461); }
function b1403(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(462); }
function b1404(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(463); }
function b1405(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(464); }
function b1406(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(465); }
function b1407(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(466); }
function b1408(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(467); }
function b1409(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(468); }
function b1410(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(469); }
function b1411(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(470); }
function b1412(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(471); }
function b1413(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(472); }
function b1414(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(473); }
function b1415(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(474); }
function b1416(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(475); }
function b1417(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(476); }
function b1418(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(477); }
function b1419(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(478); }
function b1420(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(479); }
function b1421(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(480); }
function b1422(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(481); }
function b1423(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(482); }
function b1424(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(483); }
function b1425(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(484); }
function b1426(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(485); }
function b1427(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(486); }
function b1428(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(487); }
function b1429(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(488); }
function b1430(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(489); }
function b1431(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(490); }
function b1432(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(491); }
function b1433(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(492); }
function b1434(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(493); }
function b1435(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(494); }
function b1436(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(495); }
function b1437(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(496); }
function b1438(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(497); }
function b1439(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(498); }
function b1440(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(499); }
function b1441(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(500); }
function b1442(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(501); }
function b1443(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(502); }
function b1444(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(503); }
function b1445(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(504); }
function b1446(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(505); }
function b1447(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(506); }
function b1448(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(507); }
function b1449(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(508); }
function b1450(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(509); }
function b1451(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(510); }
function b1452(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(511); }
function b1454(p0) { p0 = p0|0; nullFunc_ii(0);return 0; }
function b1455(p0) { p0 = p0|0; nullFunc_ii(1);return 0; }
function b1456(p0) { p0 = p0|0; nullFunc_ii(2);return 0; }
function b1457(p0) { p0 = p0|0; nullFunc_ii(3);return 0; }
function b1458(p0) { p0 = p0|0; nullFunc_ii(4);return 0; }
function b1459(p0) { p0 = p0|0; nullFunc_ii(5);return 0; }
function b1460(p0) { p0 = p0|0; nullFunc_ii(6);return 0; }
function b1461(p0) { p0 = p0|0; nullFunc_ii(7);return 0; }
function b1462(p0) { p0 = p0|0; nullFunc_ii(8);return 0; }
function b1463(p0) { p0 = p0|0; nullFunc_ii(9);return 0; }
function b1464(p0) { p0 = p0|0; nullFunc_ii(10);return 0; }
function b1465(p0) { p0 = p0|0; nullFunc_ii(11);return 0; }
function b1466(p0) { p0 = p0|0; nullFunc_ii(12);return 0; }
function b1467(p0) { p0 = p0|0; nullFunc_ii(13);return 0; }
function b1468(p0) { p0 = p0|0; nullFunc_ii(14);return 0; }
function b1469(p0) { p0 = p0|0; nullFunc_ii(15);return 0; }
function b1470(p0) { p0 = p0|0; nullFunc_ii(16);return 0; }
function b1471(p0) { p0 = p0|0; nullFunc_ii(17);return 0; }
function b1472(p0) { p0 = p0|0; nullFunc_ii(18);return 0; }
function b1473(p0) { p0 = p0|0; nullFunc_ii(19);return 0; }
function b1474(p0) { p0 = p0|0; nullFunc_ii(20);return 0; }
function b1475(p0) { p0 = p0|0; nullFunc_ii(21);return 0; }
function b1476(p0) { p0 = p0|0; nullFunc_ii(22);return 0; }
function b1477(p0) { p0 = p0|0; nullFunc_ii(23);return 0; }
function b1478(p0) { p0 = p0|0; nullFunc_ii(24);return 0; }
function b1479(p0) { p0 = p0|0; nullFunc_ii(25);return 0; }
function b1480(p0) { p0 = p0|0; nullFunc_ii(26);return 0; }
function b1481(p0) { p0 = p0|0; nullFunc_ii(27);return 0; }
function b1482(p0) { p0 = p0|0; nullFunc_ii(28);return 0; }
function b1483(p0) { p0 = p0|0; nullFunc_ii(30);return 0; }
function b1484(p0) { p0 = p0|0; nullFunc_ii(31);return 0; }
function b1485(p0) { p0 = p0|0; nullFunc_ii(33);return 0; }
function b1486(p0) { p0 = p0|0; nullFunc_ii(35);return 0; }
function b1487(p0) { p0 = p0|0; nullFunc_ii(37);return 0; }
function b1488(p0) { p0 = p0|0; nullFunc_ii(38);return 0; }
function b1489(p0) { p0 = p0|0; nullFunc_ii(40);return 0; }
function b1490(p0) { p0 = p0|0; nullFunc_ii(42);return 0; }
function b1491(p0) { p0 = p0|0; nullFunc_ii(44);return 0; }
function b1492(p0) { p0 = p0|0; nullFunc_ii(46);return 0; }
function b1493(p0) { p0 = p0|0; nullFunc_ii(47);return 0; }
function b1494(p0) { p0 = p0|0; nullFunc_ii(49);return 0; }
function b1495(p0) { p0 = p0|0; nullFunc_ii(51);return 0; }
function b1496(p0) { p0 = p0|0; nullFunc_ii(53);return 0; }
function b1497(p0) { p0 = p0|0; nullFunc_ii(55);return 0; }
function b1498(p0) { p0 = p0|0; nullFunc_ii(57);return 0; }
function b1499(p0) { p0 = p0|0; nullFunc_ii(59);return 0; }
function b1500(p0) { p0 = p0|0; nullFunc_ii(60);return 0; }
function b1501(p0) { p0 = p0|0; nullFunc_ii(62);return 0; }
function b1502(p0) { p0 = p0|0; nullFunc_ii(65);return 0; }
function b1503(p0) { p0 = p0|0; nullFunc_ii(67);return 0; }
function b1504(p0) { p0 = p0|0; nullFunc_ii(68);return 0; }
function b1505(p0) { p0 = p0|0; nullFunc_ii(70);return 0; }
function b1506(p0) { p0 = p0|0; nullFunc_ii(72);return 0; }
function b1507(p0) { p0 = p0|0; nullFunc_ii(76);return 0; }
function b1508(p0) { p0 = p0|0; nullFunc_ii(78);return 0; }
function b1509(p0) { p0 = p0|0; nullFunc_ii(80);return 0; }
function b1510(p0) { p0 = p0|0; nullFunc_ii(82);return 0; }
function b1511(p0) { p0 = p0|0; nullFunc_ii(83);return 0; }
function b1512(p0) { p0 = p0|0; nullFunc_ii(84);return 0; }
function b1513(p0) { p0 = p0|0; nullFunc_ii(86);return 0; }
function b1514(p0) { p0 = p0|0; nullFunc_ii(88);return 0; }
function b1515(p0) { p0 = p0|0; nullFunc_ii(90);return 0; }
function b1516(p0) { p0 = p0|0; nullFunc_ii(92);return 0; }
function b1517(p0) { p0 = p0|0; nullFunc_ii(94);return 0; }
function b1518(p0) { p0 = p0|0; nullFunc_ii(96);return 0; }
function b1519(p0) { p0 = p0|0; nullFunc_ii(98);return 0; }
function b1520(p0) { p0 = p0|0; nullFunc_ii(100);return 0; }
function b1521(p0) { p0 = p0|0; nullFunc_ii(102);return 0; }
function b1522(p0) { p0 = p0|0; nullFunc_ii(103);return 0; }
function b1523(p0) { p0 = p0|0; nullFunc_ii(105);return 0; }
function b1524(p0) { p0 = p0|0; nullFunc_ii(108);return 0; }
function b1525(p0) { p0 = p0|0; nullFunc_ii(110);return 0; }
function b1526(p0) { p0 = p0|0; nullFunc_ii(112);return 0; }
function b1527(p0) { p0 = p0|0; nullFunc_ii(113);return 0; }
function b1528(p0) { p0 = p0|0; nullFunc_ii(114);return 0; }
function b1529(p0) { p0 = p0|0; nullFunc_ii(115);return 0; }
function b1530(p0) { p0 = p0|0; nullFunc_ii(116);return 0; }
function b1531(p0) { p0 = p0|0; nullFunc_ii(118);return 0; }
function b1532(p0) { p0 = p0|0; nullFunc_ii(120);return 0; }
function b1533(p0) { p0 = p0|0; nullFunc_ii(121);return 0; }
function b1534(p0) { p0 = p0|0; nullFunc_ii(124);return 0; }
function b1535(p0) { p0 = p0|0; nullFunc_ii(126);return 0; }
function b1536(p0) { p0 = p0|0; nullFunc_ii(127);return 0; }
function b1537(p0) { p0 = p0|0; nullFunc_ii(128);return 0; }
function b1538(p0) { p0 = p0|0; nullFunc_ii(131);return 0; }
function b1539(p0) { p0 = p0|0; nullFunc_ii(134);return 0; }
function b1540(p0) { p0 = p0|0; nullFunc_ii(135);return 0; }
function b1541(p0) { p0 = p0|0; nullFunc_ii(136);return 0; }
function b1542(p0) { p0 = p0|0; nullFunc_ii(138);return 0; }
function b1543(p0) { p0 = p0|0; nullFunc_ii(141);return 0; }
function b1544(p0) { p0 = p0|0; nullFunc_ii(143);return 0; }
function b1545(p0) { p0 = p0|0; nullFunc_ii(145);return 0; }
function b1546(p0) { p0 = p0|0; nullFunc_ii(147);return 0; }
function b1547(p0) { p0 = p0|0; nullFunc_ii(148);return 0; }
function b1548(p0) { p0 = p0|0; nullFunc_ii(149);return 0; }
function b1549(p0) { p0 = p0|0; nullFunc_ii(150);return 0; }
function b1550(p0) { p0 = p0|0; nullFunc_ii(151);return 0; }
function b1551(p0) { p0 = p0|0; nullFunc_ii(153);return 0; }
function b1552(p0) { p0 = p0|0; nullFunc_ii(156);return 0; }
function b1553(p0) { p0 = p0|0; nullFunc_ii(158);return 0; }
function b1554(p0) { p0 = p0|0; nullFunc_ii(159);return 0; }
function b1555(p0) { p0 = p0|0; nullFunc_ii(161);return 0; }
function b1556(p0) { p0 = p0|0; nullFunc_ii(162);return 0; }
function b1557(p0) { p0 = p0|0; nullFunc_ii(165);return 0; }
function b1558(p0) { p0 = p0|0; nullFunc_ii(167);return 0; }
function b1559(p0) { p0 = p0|0; nullFunc_ii(169);return 0; }
function b1560(p0) { p0 = p0|0; nullFunc_ii(171);return 0; }
function b1561(p0) { p0 = p0|0; nullFunc_ii(173);return 0; }
function b1562(p0) { p0 = p0|0; nullFunc_ii(175);return 0; }
function b1563(p0) { p0 = p0|0; nullFunc_ii(176);return 0; }
function b1564(p0) { p0 = p0|0; nullFunc_ii(177);return 0; }
function b1565(p0) { p0 = p0|0; nullFunc_ii(178);return 0; }
function b1566(p0) { p0 = p0|0; nullFunc_ii(179);return 0; }
function b1567(p0) { p0 = p0|0; nullFunc_ii(180);return 0; }
function b1568(p0) { p0 = p0|0; nullFunc_ii(181);return 0; }
function b1569(p0) { p0 = p0|0; nullFunc_ii(182);return 0; }
function b1570(p0) { p0 = p0|0; nullFunc_ii(183);return 0; }
function b1571(p0) { p0 = p0|0; nullFunc_ii(184);return 0; }
function b1572(p0) { p0 = p0|0; nullFunc_ii(185);return 0; }
function b1573(p0) { p0 = p0|0; nullFunc_ii(186);return 0; }
function b1574(p0) { p0 = p0|0; nullFunc_ii(187);return 0; }
function b1575(p0) { p0 = p0|0; nullFunc_ii(188);return 0; }
function b1576(p0) { p0 = p0|0; nullFunc_ii(189);return 0; }
function b1577(p0) { p0 = p0|0; nullFunc_ii(190);return 0; }
function b1578(p0) { p0 = p0|0; nullFunc_ii(191);return 0; }
function b1579(p0) { p0 = p0|0; nullFunc_ii(192);return 0; }
function b1580(p0) { p0 = p0|0; nullFunc_ii(193);return 0; }
function b1581(p0) { p0 = p0|0; nullFunc_ii(194);return 0; }
function b1582(p0) { p0 = p0|0; nullFunc_ii(195);return 0; }
function b1583(p0) { p0 = p0|0; nullFunc_ii(196);return 0; }
function b1584(p0) { p0 = p0|0; nullFunc_ii(197);return 0; }
function b1585(p0) { p0 = p0|0; nullFunc_ii(198);return 0; }
function b1586(p0) { p0 = p0|0; nullFunc_ii(199);return 0; }
function b1587(p0) { p0 = p0|0; nullFunc_ii(200);return 0; }
function b1588(p0) { p0 = p0|0; nullFunc_ii(201);return 0; }
function b1589(p0) { p0 = p0|0; nullFunc_ii(202);return 0; }
function b1590(p0) { p0 = p0|0; nullFunc_ii(203);return 0; }
function b1591(p0) { p0 = p0|0; nullFunc_ii(204);return 0; }
function b1592(p0) { p0 = p0|0; nullFunc_ii(205);return 0; }
function b1593(p0) { p0 = p0|0; nullFunc_ii(206);return 0; }
function b1594(p0) { p0 = p0|0; nullFunc_ii(207);return 0; }
function b1595(p0) { p0 = p0|0; nullFunc_ii(208);return 0; }
function b1596(p0) { p0 = p0|0; nullFunc_ii(209);return 0; }
function b1597(p0) { p0 = p0|0; nullFunc_ii(210);return 0; }
function b1598(p0) { p0 = p0|0; nullFunc_ii(211);return 0; }
function b1599(p0) { p0 = p0|0; nullFunc_ii(212);return 0; }
function b1600(p0) { p0 = p0|0; nullFunc_ii(213);return 0; }
function b1601(p0) { p0 = p0|0; nullFunc_ii(214);return 0; }
function b1602(p0) { p0 = p0|0; nullFunc_ii(215);return 0; }
function b1603(p0) { p0 = p0|0; nullFunc_ii(216);return 0; }
function b1604(p0) { p0 = p0|0; nullFunc_ii(217);return 0; }
function b1605(p0) { p0 = p0|0; nullFunc_ii(218);return 0; }
function b1606(p0) { p0 = p0|0; nullFunc_ii(219);return 0; }
function b1607(p0) { p0 = p0|0; nullFunc_ii(220);return 0; }
function b1608(p0) { p0 = p0|0; nullFunc_ii(221);return 0; }
function b1609(p0) { p0 = p0|0; nullFunc_ii(222);return 0; }
function b1610(p0) { p0 = p0|0; nullFunc_ii(223);return 0; }
function b1611(p0) { p0 = p0|0; nullFunc_ii(224);return 0; }
function b1612(p0) { p0 = p0|0; nullFunc_ii(225);return 0; }
function b1613(p0) { p0 = p0|0; nullFunc_ii(226);return 0; }
function b1614(p0) { p0 = p0|0; nullFunc_ii(227);return 0; }
function b1615(p0) { p0 = p0|0; nullFunc_ii(228);return 0; }
function b1616(p0) { p0 = p0|0; nullFunc_ii(229);return 0; }
function b1617(p0) { p0 = p0|0; nullFunc_ii(230);return 0; }
function b1618(p0) { p0 = p0|0; nullFunc_ii(231);return 0; }
function b1619(p0) { p0 = p0|0; nullFunc_ii(232);return 0; }
function b1620(p0) { p0 = p0|0; nullFunc_ii(233);return 0; }
function b1621(p0) { p0 = p0|0; nullFunc_ii(234);return 0; }
function b1622(p0) { p0 = p0|0; nullFunc_ii(235);return 0; }
function b1623(p0) { p0 = p0|0; nullFunc_ii(236);return 0; }
function b1624(p0) { p0 = p0|0; nullFunc_ii(237);return 0; }
function b1625(p0) { p0 = p0|0; nullFunc_ii(238);return 0; }
function b1626(p0) { p0 = p0|0; nullFunc_ii(239);return 0; }
function b1627(p0) { p0 = p0|0; nullFunc_ii(240);return 0; }
function b1628(p0) { p0 = p0|0; nullFunc_ii(241);return 0; }
function b1629(p0) { p0 = p0|0; nullFunc_ii(242);return 0; }
function b1630(p0) { p0 = p0|0; nullFunc_ii(243);return 0; }
function b1631(p0) { p0 = p0|0; nullFunc_ii(244);return 0; }
function b1632(p0) { p0 = p0|0; nullFunc_ii(245);return 0; }
function b1633(p0) { p0 = p0|0; nullFunc_ii(246);return 0; }
function b1634(p0) { p0 = p0|0; nullFunc_ii(247);return 0; }
function b1635(p0) { p0 = p0|0; nullFunc_ii(252);return 0; }
function b1636(p0) { p0 = p0|0; nullFunc_ii(253);return 0; }
function b1637(p0) { p0 = p0|0; nullFunc_ii(254);return 0; }
function b1638(p0) { p0 = p0|0; nullFunc_ii(255);return 0; }
function b1639(p0) { p0 = p0|0; nullFunc_ii(256);return 0; }
function b1640(p0) { p0 = p0|0; nullFunc_ii(257);return 0; }
function b1641(p0) { p0 = p0|0; nullFunc_ii(258);return 0; }
function b1642(p0) { p0 = p0|0; nullFunc_ii(259);return 0; }
function b1643(p0) { p0 = p0|0; nullFunc_ii(260);return 0; }
function b1644(p0) { p0 = p0|0; nullFunc_ii(261);return 0; }
function b1645(p0) { p0 = p0|0; nullFunc_ii(262);return 0; }
function b1646(p0) { p0 = p0|0; nullFunc_ii(263);return 0; }
function b1647(p0) { p0 = p0|0; nullFunc_ii(264);return 0; }
function b1648(p0) { p0 = p0|0; nullFunc_ii(265);return 0; }
function b1649(p0) { p0 = p0|0; nullFunc_ii(266);return 0; }
function b1650(p0) { p0 = p0|0; nullFunc_ii(267);return 0; }
function b1651(p0) { p0 = p0|0; nullFunc_ii(268);return 0; }
function b1652(p0) { p0 = p0|0; nullFunc_ii(269);return 0; }
function b1653(p0) { p0 = p0|0; nullFunc_ii(270);return 0; }
function b1654(p0) { p0 = p0|0; nullFunc_ii(271);return 0; }
function b1655(p0) { p0 = p0|0; nullFunc_ii(272);return 0; }
function b1656(p0) { p0 = p0|0; nullFunc_ii(273);return 0; }
function b1657(p0) { p0 = p0|0; nullFunc_ii(274);return 0; }
function b1658(p0) { p0 = p0|0; nullFunc_ii(275);return 0; }
function b1659(p0) { p0 = p0|0; nullFunc_ii(276);return 0; }
function b1660(p0) { p0 = p0|0; nullFunc_ii(277);return 0; }
function b1661(p0) { p0 = p0|0; nullFunc_ii(278);return 0; }
function b1662(p0) { p0 = p0|0; nullFunc_ii(279);return 0; }
function b1663(p0) { p0 = p0|0; nullFunc_ii(280);return 0; }
function b1664(p0) { p0 = p0|0; nullFunc_ii(281);return 0; }
function b1665(p0) { p0 = p0|0; nullFunc_ii(282);return 0; }
function b1666(p0) { p0 = p0|0; nullFunc_ii(283);return 0; }
function b1667(p0) { p0 = p0|0; nullFunc_ii(284);return 0; }
function b1668(p0) { p0 = p0|0; nullFunc_ii(285);return 0; }
function b1669(p0) { p0 = p0|0; nullFunc_ii(286);return 0; }
function b1670(p0) { p0 = p0|0; nullFunc_ii(287);return 0; }
function b1671(p0) { p0 = p0|0; nullFunc_ii(288);return 0; }
function b1672(p0) { p0 = p0|0; nullFunc_ii(289);return 0; }
function b1673(p0) { p0 = p0|0; nullFunc_ii(290);return 0; }
function b1674(p0) { p0 = p0|0; nullFunc_ii(291);return 0; }
function b1675(p0) { p0 = p0|0; nullFunc_ii(292);return 0; }
function b1676(p0) { p0 = p0|0; nullFunc_ii(293);return 0; }
function b1677(p0) { p0 = p0|0; nullFunc_ii(294);return 0; }
function b1678(p0) { p0 = p0|0; nullFunc_ii(295);return 0; }
function b1679(p0) { p0 = p0|0; nullFunc_ii(296);return 0; }
function b1680(p0) { p0 = p0|0; nullFunc_ii(297);return 0; }
function b1681(p0) { p0 = p0|0; nullFunc_ii(298);return 0; }
function b1682(p0) { p0 = p0|0; nullFunc_ii(300);return 0; }
function b1683(p0) { p0 = p0|0; nullFunc_ii(301);return 0; }
function b1684(p0) { p0 = p0|0; nullFunc_ii(302);return 0; }
function b1685(p0) { p0 = p0|0; nullFunc_ii(303);return 0; }
function b1686(p0) { p0 = p0|0; nullFunc_ii(304);return 0; }
function b1687(p0) { p0 = p0|0; nullFunc_ii(305);return 0; }
function b1688(p0) { p0 = p0|0; nullFunc_ii(306);return 0; }
function b1689(p0) { p0 = p0|0; nullFunc_ii(307);return 0; }
function b1690(p0) { p0 = p0|0; nullFunc_ii(308);return 0; }
function b1691(p0) { p0 = p0|0; nullFunc_ii(309);return 0; }
function b1692(p0) { p0 = p0|0; nullFunc_ii(310);return 0; }
function b1693(p0) { p0 = p0|0; nullFunc_ii(311);return 0; }
function b1694(p0) { p0 = p0|0; nullFunc_ii(312);return 0; }
function b1695(p0) { p0 = p0|0; nullFunc_ii(313);return 0; }
function b1696(p0) { p0 = p0|0; nullFunc_ii(314);return 0; }
function b1697(p0) { p0 = p0|0; nullFunc_ii(315);return 0; }
function b1698(p0) { p0 = p0|0; nullFunc_ii(316);return 0; }
function b1699(p0) { p0 = p0|0; nullFunc_ii(317);return 0; }
function b1700(p0) { p0 = p0|0; nullFunc_ii(318);return 0; }
function b1701(p0) { p0 = p0|0; nullFunc_ii(319);return 0; }
function b1702(p0) { p0 = p0|0; nullFunc_ii(320);return 0; }
function b1703(p0) { p0 = p0|0; nullFunc_ii(321);return 0; }
function b1704(p0) { p0 = p0|0; nullFunc_ii(322);return 0; }
function b1705(p0) { p0 = p0|0; nullFunc_ii(323);return 0; }
function b1706(p0) { p0 = p0|0; nullFunc_ii(324);return 0; }
function b1707(p0) { p0 = p0|0; nullFunc_ii(325);return 0; }
function b1708(p0) { p0 = p0|0; nullFunc_ii(326);return 0; }
function b1709(p0) { p0 = p0|0; nullFunc_ii(327);return 0; }
function b1710(p0) { p0 = p0|0; nullFunc_ii(328);return 0; }
function b1711(p0) { p0 = p0|0; nullFunc_ii(329);return 0; }
function b1712(p0) { p0 = p0|0; nullFunc_ii(330);return 0; }
function b1713(p0) { p0 = p0|0; nullFunc_ii(331);return 0; }
function b1714(p0) { p0 = p0|0; nullFunc_ii(332);return 0; }
function b1715(p0) { p0 = p0|0; nullFunc_ii(333);return 0; }
function b1716(p0) { p0 = p0|0; nullFunc_ii(334);return 0; }
function b1717(p0) { p0 = p0|0; nullFunc_ii(335);return 0; }
function b1718(p0) { p0 = p0|0; nullFunc_ii(336);return 0; }
function b1719(p0) { p0 = p0|0; nullFunc_ii(337);return 0; }
function b1720(p0) { p0 = p0|0; nullFunc_ii(338);return 0; }
function b1721(p0) { p0 = p0|0; nullFunc_ii(339);return 0; }
function b1722(p0) { p0 = p0|0; nullFunc_ii(340);return 0; }
function b1723(p0) { p0 = p0|0; nullFunc_ii(341);return 0; }
function b1724(p0) { p0 = p0|0; nullFunc_ii(342);return 0; }
function b1725(p0) { p0 = p0|0; nullFunc_ii(343);return 0; }
function b1726(p0) { p0 = p0|0; nullFunc_ii(346);return 0; }
function b1727(p0) { p0 = p0|0; nullFunc_ii(347);return 0; }
function b1728(p0) { p0 = p0|0; nullFunc_ii(348);return 0; }
function b1729(p0) { p0 = p0|0; nullFunc_ii(349);return 0; }
function b1730(p0) { p0 = p0|0; nullFunc_ii(351);return 0; }
function b1731(p0) { p0 = p0|0; nullFunc_ii(352);return 0; }
function b1732(p0) { p0 = p0|0; nullFunc_ii(353);return 0; }
function b1733(p0) { p0 = p0|0; nullFunc_ii(358);return 0; }
function b1734(p0) { p0 = p0|0; nullFunc_ii(359);return 0; }
function b1735(p0) { p0 = p0|0; nullFunc_ii(360);return 0; }
function b1736(p0) { p0 = p0|0; nullFunc_ii(361);return 0; }
function b1737(p0) { p0 = p0|0; nullFunc_ii(362);return 0; }
function b1738(p0) { p0 = p0|0; nullFunc_ii(363);return 0; }
function b1739(p0) { p0 = p0|0; nullFunc_ii(364);return 0; }
function b1740(p0) { p0 = p0|0; nullFunc_ii(365);return 0; }
function b1741(p0) { p0 = p0|0; nullFunc_ii(366);return 0; }
function b1742(p0) { p0 = p0|0; nullFunc_ii(367);return 0; }
function b1743(p0) { p0 = p0|0; nullFunc_ii(368);return 0; }
function b1744(p0) { p0 = p0|0; nullFunc_ii(369);return 0; }
function b1745(p0) { p0 = p0|0; nullFunc_ii(370);return 0; }
function b1746(p0) { p0 = p0|0; nullFunc_ii(371);return 0; }
function b1747(p0) { p0 = p0|0; nullFunc_ii(372);return 0; }
function b1748(p0) { p0 = p0|0; nullFunc_ii(373);return 0; }
function b1749(p0) { p0 = p0|0; nullFunc_ii(374);return 0; }
function b1750(p0) { p0 = p0|0; nullFunc_ii(375);return 0; }
function b1751(p0) { p0 = p0|0; nullFunc_ii(376);return 0; }
function b1752(p0) { p0 = p0|0; nullFunc_ii(377);return 0; }
function b1753(p0) { p0 = p0|0; nullFunc_ii(378);return 0; }
function b1754(p0) { p0 = p0|0; nullFunc_ii(379);return 0; }
function b1755(p0) { p0 = p0|0; nullFunc_ii(380);return 0; }
function b1756(p0) { p0 = p0|0; nullFunc_ii(381);return 0; }
function b1757(p0) { p0 = p0|0; nullFunc_ii(382);return 0; }
function b1758(p0) { p0 = p0|0; nullFunc_ii(383);return 0; }
function b1759(p0) { p0 = p0|0; nullFunc_ii(384);return 0; }
function b1760(p0) { p0 = p0|0; nullFunc_ii(385);return 0; }
function b1761(p0) { p0 = p0|0; nullFunc_ii(386);return 0; }
function b1762(p0) { p0 = p0|0; nullFunc_ii(387);return 0; }
function b1763(p0) { p0 = p0|0; nullFunc_ii(388);return 0; }
function b1764(p0) { p0 = p0|0; nullFunc_ii(389);return 0; }
function b1765(p0) { p0 = p0|0; nullFunc_ii(390);return 0; }
function b1766(p0) { p0 = p0|0; nullFunc_ii(391);return 0; }
function b1767(p0) { p0 = p0|0; nullFunc_ii(392);return 0; }
function b1768(p0) { p0 = p0|0; nullFunc_ii(393);return 0; }
function b1769(p0) { p0 = p0|0; nullFunc_ii(395);return 0; }
function b1770(p0) { p0 = p0|0; nullFunc_ii(396);return 0; }
function b1771(p0) { p0 = p0|0; nullFunc_ii(399);return 0; }
function b1772(p0) { p0 = p0|0; nullFunc_ii(400);return 0; }
function b1773(p0) { p0 = p0|0; nullFunc_ii(401);return 0; }
function b1774(p0) { p0 = p0|0; nullFunc_ii(402);return 0; }
function b1775(p0) { p0 = p0|0; nullFunc_ii(403);return 0; }
function b1776(p0) { p0 = p0|0; nullFunc_ii(407);return 0; }
function b1777(p0) { p0 = p0|0; nullFunc_ii(409);return 0; }
function b1778(p0) { p0 = p0|0; nullFunc_ii(411);return 0; }
function b1779(p0) { p0 = p0|0; nullFunc_ii(413);return 0; }
function b1780(p0) { p0 = p0|0; nullFunc_ii(417);return 0; }
function b1781(p0) { p0 = p0|0; nullFunc_ii(418);return 0; }
function b1782(p0) { p0 = p0|0; nullFunc_ii(421);return 0; }
function b1783(p0) { p0 = p0|0; nullFunc_ii(423);return 0; }
function b1784(p0) { p0 = p0|0; nullFunc_ii(426);return 0; }
function b1785(p0) { p0 = p0|0; nullFunc_ii(428);return 0; }
function b1786(p0) { p0 = p0|0; nullFunc_ii(430);return 0; }
function b1787(p0) { p0 = p0|0; nullFunc_ii(432);return 0; }
function b1788(p0) { p0 = p0|0; nullFunc_ii(433);return 0; }
function b1789(p0) { p0 = p0|0; nullFunc_ii(438);return 0; }
function b1790(p0) { p0 = p0|0; nullFunc_ii(450);return 0; }
function b1791(p0) { p0 = p0|0; nullFunc_ii(477);return 0; }
function b1792(p0) { p0 = p0|0; nullFunc_ii(478);return 0; }
function b1793(p0) { p0 = p0|0; nullFunc_ii(479);return 0; }
function b1794(p0) { p0 = p0|0; nullFunc_ii(480);return 0; }
function b1795(p0) { p0 = p0|0; nullFunc_ii(481);return 0; }
function b1796(p0) { p0 = p0|0; nullFunc_ii(482);return 0; }
function b1797(p0) { p0 = p0|0; nullFunc_ii(483);return 0; }
function b1798(p0) { p0 = p0|0; nullFunc_ii(484);return 0; }
function b1799(p0) { p0 = p0|0; nullFunc_ii(485);return 0; }
function b1800(p0) { p0 = p0|0; nullFunc_ii(486);return 0; }
function b1801(p0) { p0 = p0|0; nullFunc_ii(487);return 0; }
function b1802(p0) { p0 = p0|0; nullFunc_ii(488);return 0; }
function b1803(p0) { p0 = p0|0; nullFunc_ii(489);return 0; }
function b1804(p0) { p0 = p0|0; nullFunc_ii(490);return 0; }
function b1805(p0) { p0 = p0|0; nullFunc_ii(491);return 0; }
function b1806(p0) { p0 = p0|0; nullFunc_ii(492);return 0; }
function b1807(p0) { p0 = p0|0; nullFunc_ii(493);return 0; }
function b1808(p0) { p0 = p0|0; nullFunc_ii(494);return 0; }
function b1809(p0) { p0 = p0|0; nullFunc_ii(495);return 0; }
function b1810(p0) { p0 = p0|0; nullFunc_ii(496);return 0; }
function b1811(p0) { p0 = p0|0; nullFunc_ii(497);return 0; }
function b1812(p0) { p0 = p0|0; nullFunc_ii(498);return 0; }
function b1813(p0) { p0 = p0|0; nullFunc_ii(499);return 0; }
function b1814(p0) { p0 = p0|0; nullFunc_ii(500);return 0; }
function b1815(p0) { p0 = p0|0; nullFunc_ii(501);return 0; }
function b1816(p0) { p0 = p0|0; nullFunc_ii(502);return 0; }
function b1817(p0) { p0 = p0|0; nullFunc_ii(503);return 0; }
function b1818(p0) { p0 = p0|0; nullFunc_ii(504);return 0; }
function b1819(p0) { p0 = p0|0; nullFunc_ii(505);return 0; }
function b1820(p0) { p0 = p0|0; nullFunc_ii(506);return 0; }
function b1821(p0) { p0 = p0|0; nullFunc_ii(507);return 0; }
function b1822(p0) { p0 = p0|0; nullFunc_ii(508);return 0; }
function b1823(p0) { p0 = p0|0; nullFunc_ii(509);return 0; }
function b1824(p0) { p0 = p0|0; nullFunc_ii(510);return 0; }
function b1825(p0) { p0 = p0|0; nullFunc_ii(511);return 0; }
function b1827(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(0); }
function b1828(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(1); }
function b1829(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(2); }
function b1830(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(3); }
function b1831(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(4); }
function b1832(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(5); }
function b1833(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(6); }
function b1834(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(7); }
function b1835(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(8); }
function b1836(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(9); }
function b1837(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(10); }
function b1838(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(11); }
function b1839(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(12); }
function b1840(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(13); }
function b1841(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(14); }
function b1842(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(15); }
function b1843(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(16); }
function b1844(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(17); }
function b1845(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(18); }
function b1846(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(19); }
function b1847(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(20); }
function b1848(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(21); }
function b1849(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(22); }
function b1850(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(23); }
function b1851(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(24); }
function b1852(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(25); }
function b1853(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(26); }
function b1854(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(27); }
function b1855(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(28); }
function b1856(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(29); }
function b1857(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(30); }
function b1858(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(31); }
function b1859(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(32); }
function b1860(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(33); }
function b1861(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(34); }
function b1862(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(35); }
function b1863(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(36); }
function b1864(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(37); }
function b1865(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(38); }
function b1866(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(39); }
function b1867(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(40); }
function b1868(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(41); }
function b1869(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(42); }
function b1870(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(43); }
function b1871(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(44); }
function b1872(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(45); }
function b1873(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(46); }
function b1874(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(47); }
function b1875(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(48); }
function b1876(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(49); }
function b1877(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(50); }
function b1878(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(51); }
function b1879(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(52); }
function b1880(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(53); }
function b1881(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(54); }
function b1882(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(55); }
function b1883(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(56); }
function b1884(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(57); }
function b1885(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(58); }
function b1886(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(59); }
function b1887(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(60); }
function b1888(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(61); }
function b1889(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(62); }
function b1890(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(63); }
function b1891(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(64); }
function b1892(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(65); }
function b1893(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(66); }
function b1894(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(67); }
function b1895(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(68); }
function b1896(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(69); }
function b1897(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(70); }
function b1898(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(71); }
function b1899(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(72); }
function b1900(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(73); }
function b1901(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(74); }
function b1902(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(75); }
function b1903(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(76); }
function b1904(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(77); }
function b1905(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(78); }
function b1906(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(79); }
function b1907(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(80); }
function b1908(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(81); }
function b1909(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(82); }
function b1910(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(83); }
function b1911(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(84); }
function b1912(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(85); }
function b1913(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(86); }
function b1914(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(87); }
function b1915(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(88); }
function b1916(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(89); }
function b1917(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(90); }
function b1918(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(91); }
function b1919(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(92); }
function b1920(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(93); }
function b1921(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(94); }
function b1922(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(95); }
function b1923(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(96); }
function b1924(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(97); }
function b1925(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(98); }
function b1926(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(99); }
function b1927(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(100); }
function b1928(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(101); }
function b1929(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(102); }
function b1930(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(103); }
function b1931(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(104); }
function b1932(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(105); }
function b1933(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(106); }
function b1934(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(107); }
function b1935(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(108); }
function b1936(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(109); }
function b1937(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(110); }
function b1938(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(111); }
function b1939(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(112); }
function b1940(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(113); }
function b1941(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(114); }
function b1942(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(115); }
function b1943(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(116); }
function b1944(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(117); }
function b1945(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(118); }
function b1946(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(119); }
function b1947(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(120); }
function b1948(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(121); }
function b1949(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(122); }
function b1950(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(123); }
function b1951(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(124); }
function b1952(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(125); }
function b1953(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(126); }
function b1954(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(127); }
function b1955(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(128); }
function b1956(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(129); }
function b1957(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(130); }
function b1958(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(131); }
function b1959(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(132); }
function b1960(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(133); }
function b1961(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(134); }
function b1962(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(135); }
function b1963(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(136); }
function b1964(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(137); }
function b1965(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(138); }
function b1966(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(139); }
function b1967(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(140); }
function b1968(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(141); }
function b1969(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(142); }
function b1970(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(143); }
function b1971(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(144); }
function b1972(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(145); }
function b1973(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(146); }
function b1974(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(147); }
function b1975(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(148); }
function b1976(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(149); }
function b1977(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(150); }
function b1978(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(151); }
function b1979(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(152); }
function b1980(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(153); }
function b1981(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(154); }
function b1982(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(155); }
function b1983(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(156); }
function b1984(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(157); }
function b1985(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(158); }
function b1986(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(159); }
function b1987(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(160); }
function b1988(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(161); }
function b1989(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(162); }
function b1990(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(163); }
function b1991(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(164); }
function b1992(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(165); }
function b1993(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(166); }
function b1994(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(167); }
function b1995(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(168); }
function b1996(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(169); }
function b1997(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(170); }
function b1998(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(171); }
function b1999(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(172); }
function b2000(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(173); }
function b2001(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(174); }
function b2002(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(175); }
function b2003(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(234); }
function b2004(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(235); }
function b2005(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(236); }
function b2006(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(237); }
function b2007(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(238); }
function b2008(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(239); }
function b2009(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(240); }
function b2010(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(241); }
function b2011(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(242); }
function b2012(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(243); }
function b2013(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(244); }
function b2014(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(245); }
function b2015(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(246); }
function b2016(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(247); }
function b2017(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(248); }
function b2018(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(249); }
function b2019(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(250); }
function b2020(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(251); }
function b2021(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(252); }
function b2022(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(253); }
function b2023(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(254); }
function b2024(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(255); }
function b2025(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(256); }
function b2026(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(257); }
function b2027(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(258); }
function b2028(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(259); }
function b2029(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(260); }
function b2030(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(261); }
function b2031(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(262); }
function b2032(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(263); }
function b2033(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(264); }
function b2034(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(265); }
function b2035(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(266); }
function b2036(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(267); }
function b2037(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(268); }
function b2038(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(269); }
function b2039(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(270); }
function b2040(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(271); }
function b2041(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(272); }
function b2042(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(273); }
function b2043(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(274); }
function b2044(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(275); }
function b2045(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(276); }
function b2046(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(277); }
function b2047(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(278); }
function b2048(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(279); }
function b2049(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(280); }
function b2050(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(281); }
function b2051(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(282); }
function b2052(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(283); }
function b2053(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(284); }
function b2054(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(285); }
function b2055(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(286); }
function b2056(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(287); }
function b2057(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(288); }
function b2058(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(289); }
function b2059(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(290); }
function b2060(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(291); }
function b2061(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(292); }
function b2062(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(293); }
function b2063(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(294); }
function b2064(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(295); }
function b2065(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(296); }
function b2066(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(297); }
function b2067(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(298); }
function b2068(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(299); }
function b2069(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(300); }
function b2070(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(301); }
function b2071(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(302); }
function b2072(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(303); }
function b2073(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(304); }
function b2074(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(305); }
function b2075(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(306); }
function b2076(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(307); }
function b2077(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(308); }
function b2078(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(309); }
function b2079(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(310); }
function b2080(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(311); }
function b2081(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(312); }
function b2082(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(313); }
function b2083(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(314); }
function b2084(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(315); }
function b2085(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(316); }
function b2086(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(317); }
function b2087(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(318); }
function b2088(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(319); }
function b2089(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(320); }
function b2090(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(321); }
function b2091(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(322); }
function b2092(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(323); }
function b2093(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(324); }
function b2094(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(325); }
function b2095(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(326); }
function b2096(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(327); }
function b2097(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(328); }
function b2098(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(329); }
function b2099(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(330); }
function b2100(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(331); }
function b2101(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(332); }
function b2102(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(333); }
function b2103(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(334); }
function b2104(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(335); }
function b2105(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(336); }
function b2106(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(337); }
function b2107(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(338); }
function b2108(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(339); }
function b2109(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(340); }
function b2110(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(341); }
function b2111(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(342); }
function b2112(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(343); }
function b2113(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(344); }
function b2114(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(345); }
function b2115(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(346); }
function b2116(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(347); }
function b2117(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(348); }
function b2118(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(349); }
function b2119(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(350); }
function b2120(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(351); }
function b2121(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(352); }
function b2122(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(353); }
function b2123(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(354); }
function b2124(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(355); }
function b2125(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(356); }
function b2126(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(357); }
function b2127(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(366); }
function b2128(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(367); }
function b2129(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(368); }
function b2130(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(369); }
function b2131(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(370); }
function b2132(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(371); }
function b2133(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(372); }
function b2134(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(373); }
function b2135(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(374); }
function b2136(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(375); }
function b2137(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(376); }
function b2138(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(377); }
function b2139(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(378); }
function b2140(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(379); }
function b2141(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(380); }
function b2142(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(381); }
function b2143(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(382); }
function b2144(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(383); }
function b2145(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(384); }
function b2146(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(385); }
function b2147(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(386); }
function b2148(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(387); }
function b2149(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(388); }
function b2150(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(389); }
function b2151(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(390); }
function b2152(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(391); }
function b2153(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(392); }
function b2154(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(393); }
function b2155(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(394); }
function b2156(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(395); }
function b2157(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(396); }
function b2158(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(397); }
function b2159(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(398); }
function b2160(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(399); }
function b2161(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(400); }
function b2162(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(401); }
function b2163(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(402); }
function b2164(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(403); }
function b2165(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(404); }
function b2166(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(405); }
function b2167(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(406); }
function b2168(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(407); }
function b2169(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(408); }
function b2170(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(409); }
function b2171(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(410); }
function b2172(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(411); }
function b2173(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(412); }
function b2174(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(413); }
function b2175(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(414); }
function b2176(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(415); }
function b2177(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(416); }
function b2178(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(417); }
function b2179(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(418); }
function b2180(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(419); }
function b2181(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(420); }
function b2182(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(421); }
function b2183(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(422); }
function b2184(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(423); }
function b2185(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(424); }
function b2186(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(425); }
function b2187(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(426); }
function b2188(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(427); }
function b2189(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(428); }
function b2190(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(429); }
function b2191(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(430); }
function b2192(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(431); }
function b2193(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(432); }
function b2194(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(433); }
function b2195(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(434); }
function b2196(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(435); }
function b2197(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(436); }
function b2198(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(437); }
function b2199(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(438); }
function b2200(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(439); }
function b2201(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(440); }
function b2202(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(441); }
function b2203(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(442); }
function b2204(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(443); }
function b2205(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(444); }
function b2206(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(445); }
function b2207(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(446); }
function b2208(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(447); }
function b2209(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(448); }
function b2210(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(449); }
function b2211(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(450); }
function b2212(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(451); }
function b2213(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(452); }
function b2214(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(453); }
function b2215(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(454); }
function b2216(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(455); }
function b2217(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(456); }
function b2218(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(457); }
function b2219(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(458); }
function b2220(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(459); }
function b2221(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(460); }
function b2222(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(461); }
function b2223(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(462); }
function b2224(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(463); }
function b2225(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(464); }
function b2226(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(465); }
function b2227(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(466); }
function b2228(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(467); }
function b2229(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(468); }
function b2230(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(469); }
function b2231(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(470); }
function b2232(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(471); }
function b2233(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(472); }
function b2234(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(473); }
function b2235(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(474); }
function b2236(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(475); }
function b2237(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(476); }
function b2238(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(477); }
function b2239(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(478); }
function b2240(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(479); }
function b2241(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(480); }
function b2242(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(481); }
function b2243(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(482); }
function b2244(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(483); }
function b2245(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(484); }
function b2246(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(485); }
function b2247(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(486); }
function b2248(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(487); }
function b2249(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(488); }
function b2250(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(489); }
function b2251(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(490); }
function b2252(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(491); }
function b2253(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(492); }
function b2254(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(493); }
function b2255(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(494); }
function b2256(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(495); }
function b2257(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(496); }
function b2258(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(497); }
function b2259(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(498); }
function b2260(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(499); }
function b2261(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(500); }
function b2262(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(501); }
function b2263(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(502); }
function b2264(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(503); }
function b2265(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(504); }
function b2266(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(505); }
function b2267(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(506); }
function b2268(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(507); }
function b2269(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(508); }
function b2270(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(509); }
function b2271(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(510); }
function b2272(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(511); }
function b2274(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(0);return 0; }
function b2275(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(1);return 0; }
function b2276(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(2);return 0; }
function b2277(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(3);return 0; }
function b2278(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(4);return 0; }
function b2279(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(5);return 0; }
function b2280(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(6);return 0; }
function b2281(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(7);return 0; }
function b2282(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(8);return 0; }
function b2283(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(9);return 0; }
function b2284(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(10);return 0; }
function b2285(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(11);return 0; }
function b2286(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(12);return 0; }
function b2287(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(13);return 0; }
function b2288(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(14);return 0; }
function b2289(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(15);return 0; }
function b2290(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(16);return 0; }
function b2291(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(17);return 0; }
function b2292(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(18);return 0; }
function b2293(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(19);return 0; }
function b2294(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(20);return 0; }
function b2295(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(21);return 0; }
function b2296(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(22);return 0; }
function b2297(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(23);return 0; }
function b2298(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(24);return 0; }
function b2299(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(25);return 0; }
function b2300(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(26);return 0; }
function b2301(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(27);return 0; }
function b2302(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(28);return 0; }
function b2303(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(29);return 0; }
function b2304(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(32);return 0; }
function b2305(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(34);return 0; }
function b2306(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(36);return 0; }
function b2307(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(39);return 0; }
function b2308(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(41);return 0; }
function b2309(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(43);return 0; }
function b2310(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(45);return 0; }
function b2311(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(48);return 0; }
function b2312(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(50);return 0; }
function b2313(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(52);return 0; }
function b2314(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(54);return 0; }
function b2315(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(56);return 0; }
function b2316(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(58);return 0; }
function b2317(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(61);return 0; }
function b2318(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(63);return 0; }
function b2319(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(64);return 0; }
function b2320(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(66);return 0; }
function b2321(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(69);return 0; }
function b2322(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(71);return 0; }
function b2323(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(73);return 0; }
function b2324(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(74);return 0; }
function b2325(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(75);return 0; }
function b2326(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(77);return 0; }
function b2327(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(79);return 0; }
function b2328(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(81);return 0; }
function b2329(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(84);return 0; }
function b2330(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(85);return 0; }
function b2331(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(87);return 0; }
function b2332(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(89);return 0; }
function b2333(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(91);return 0; }
function b2334(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(93);return 0; }
function b2335(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(95);return 0; }
function b2336(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(97);return 0; }
function b2337(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(99);return 0; }
function b2338(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(101);return 0; }
function b2339(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(104);return 0; }
function b2340(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(106);return 0; }
function b2341(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(107);return 0; }
function b2342(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(109);return 0; }
function b2343(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(111);return 0; }
function b2344(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(117);return 0; }
function b2345(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(119);return 0; }
function b2346(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(122);return 0; }
function b2347(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(123);return 0; }
function b2348(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(125);return 0; }
function b2349(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(129);return 0; }
function b2350(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(130);return 0; }
function b2351(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(132);return 0; }
function b2352(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(133);return 0; }
function b2353(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(137);return 0; }
function b2354(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(139);return 0; }
function b2355(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(140);return 0; }
function b2356(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(142);return 0; }
function b2357(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(144);return 0; }
function b2358(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(146);return 0; }
function b2359(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(152);return 0; }
function b2360(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(154);return 0; }
function b2361(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(155);return 0; }
function b2362(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(157);return 0; }
function b2363(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(160);return 0; }
function b2364(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(163);return 0; }
function b2365(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(164);return 0; }
function b2366(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(166);return 0; }
function b2367(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(168);return 0; }
function b2368(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(170);return 0; }
function b2369(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(172);return 0; }
function b2370(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(174);return 0; }
function b2371(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(176);return 0; }
function b2372(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(177);return 0; }
function b2373(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(178);return 0; }
function b2374(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(179);return 0; }
function b2375(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(180);return 0; }
function b2376(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(181);return 0; }
function b2377(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(182);return 0; }
function b2378(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(183);return 0; }
function b2379(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(184);return 0; }
function b2380(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(185);return 0; }
function b2381(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(186);return 0; }
function b2382(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(187);return 0; }
function b2383(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(188);return 0; }
function b2384(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(189);return 0; }
function b2385(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(190);return 0; }
function b2386(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(191);return 0; }
function b2387(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(192);return 0; }
function b2388(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(193);return 0; }
function b2389(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(194);return 0; }
function b2390(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(195);return 0; }
function b2391(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(196);return 0; }
function b2392(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(197);return 0; }
function b2393(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(198);return 0; }
function b2394(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(199);return 0; }
function b2395(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(200);return 0; }
function b2396(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(201);return 0; }
function b2397(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(202);return 0; }
function b2398(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(203);return 0; }
function b2399(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(204);return 0; }
function b2400(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(205);return 0; }
function b2401(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(206);return 0; }
function b2402(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(207);return 0; }
function b2403(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(208);return 0; }
function b2404(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(209);return 0; }
function b2405(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(210);return 0; }
function b2406(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(211);return 0; }
function b2407(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(212);return 0; }
function b2408(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(213);return 0; }
function b2409(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(214);return 0; }
function b2410(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(215);return 0; }
function b2411(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(216);return 0; }
function b2412(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(217);return 0; }
function b2413(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(218);return 0; }
function b2414(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(219);return 0; }
function b2415(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(220);return 0; }
function b2416(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(221);return 0; }
function b2417(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(222);return 0; }
function b2418(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(223);return 0; }
function b2419(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(224);return 0; }
function b2420(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(225);return 0; }
function b2421(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(226);return 0; }
function b2422(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(227);return 0; }
function b2423(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(228);return 0; }
function b2424(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(229);return 0; }
function b2425(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(230);return 0; }
function b2426(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(231);return 0; }
function b2427(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(232);return 0; }
function b2428(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(233);return 0; }
function b2429(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(234);return 0; }
function b2430(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(237);return 0; }
function b2431(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(240);return 0; }
function b2432(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(243);return 0; }
function b2433(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(245);return 0; }
function b2434(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(247);return 0; }
function b2435(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(248);return 0; }
function b2436(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(249);return 0; }
function b2437(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(250);return 0; }
function b2438(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(251);return 0; }
function b2439(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(253);return 0; }
function b2440(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(256);return 0; }
function b2441(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(259);return 0; }
function b2442(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(266);return 0; }
function b2443(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(268);return 0; }
function b2444(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(269);return 0; }
function b2445(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(271);return 0; }
function b2446(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(273);return 0; }
function b2447(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(275);return 0; }
function b2448(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(278);return 0; }
function b2449(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(281);return 0; }
function b2450(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(284);return 0; }
function b2451(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(288);return 0; }
function b2452(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(290);return 0; }
function b2453(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(293);return 0; }
function b2454(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(295);return 0; }
function b2455(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(296);return 0; }
function b2456(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(299);return 0; }
function b2457(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(301);return 0; }
function b2458(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(304);return 0; }
function b2459(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(307);return 0; }
function b2460(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(308);return 0; }
function b2461(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(310);return 0; }
function b2462(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(312);return 0; }
function b2463(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(315);return 0; }
function b2464(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(318);return 0; }
function b2465(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(319);return 0; }
function b2466(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(320);return 0; }
function b2467(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(322);return 0; }
function b2468(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(324);return 0; }
function b2469(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(326);return 0; }
function b2470(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(328);return 0; }
function b2471(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(329);return 0; }
function b2472(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(330);return 0; }
function b2473(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(331);return 0; }
function b2474(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(332);return 0; }
function b2475(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(333);return 0; }
function b2476(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(336);return 0; }
function b2477(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(339);return 0; }
function b2478(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(342);return 0; }
function b2479(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(343);return 0; }
function b2480(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(344);return 0; }
function b2481(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(345);return 0; }
function b2482(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(346);return 0; }
function b2483(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(347);return 0; }
function b2484(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(348);return 0; }
function b2485(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(349);return 0; }
function b2486(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(350);return 0; }
function b2487(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(351);return 0; }
function b2488(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(354);return 0; }
function b2489(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(355);return 0; }
function b2490(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(356);return 0; }
function b2491(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(357);return 0; }
function b2492(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(358);return 0; }
function b2493(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(359);return 0; }
function b2494(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(360);return 0; }
function b2495(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(361);return 0; }
function b2496(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(362);return 0; }
function b2497(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(363);return 0; }
function b2498(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(364);return 0; }
function b2499(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(365);return 0; }
function b2500(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(366);return 0; }
function b2501(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(367);return 0; }
function b2502(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(368);return 0; }
function b2503(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(369);return 0; }
function b2504(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(370);return 0; }
function b2505(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(371);return 0; }
function b2506(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(372);return 0; }
function b2507(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(373);return 0; }
function b2508(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(374);return 0; }
function b2509(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(375);return 0; }
function b2510(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(376);return 0; }
function b2511(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(381);return 0; }
function b2512(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(382);return 0; }
function b2513(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(385);return 0; }
function b2514(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(387);return 0; }
function b2515(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(388);return 0; }
function b2516(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(389);return 0; }
function b2517(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(390);return 0; }
function b2518(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(391);return 0; }
function b2519(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(392);return 0; }
function b2520(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(393);return 0; }
function b2521(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(394);return 0; }
function b2522(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(397);return 0; }
function b2523(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(398);return 0; }
function b2524(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(401);return 0; }
function b2525(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(402);return 0; }
function b2526(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(403);return 0; }
function b2527(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(404);return 0; }
function b2528(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(405);return 0; }
function b2529(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(406);return 0; }
function b2530(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(408);return 0; }
function b2531(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(410);return 0; }
function b2532(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(412);return 0; }
function b2533(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(414);return 0; }
function b2534(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(415);return 0; }
function b2535(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(416);return 0; }
function b2536(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(419);return 0; }
function b2537(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(420);return 0; }
function b2538(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(422);return 0; }
function b2539(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(424);return 0; }
function b2540(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(425);return 0; }
function b2541(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(427);return 0; }
function b2542(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(429);return 0; }
function b2543(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(431);return 0; }
function b2544(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(434);return 0; }
function b2545(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(435);return 0; }
function b2546(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(436);return 0; }
function b2547(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(437);return 0; }
function b2548(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(439);return 0; }
function b2549(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(440);return 0; }
function b2550(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(441);return 0; }
function b2551(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(442);return 0; }
function b2552(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(443);return 0; }
function b2553(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(444);return 0; }
function b2554(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(445);return 0; }
function b2555(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(446);return 0; }
function b2556(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(447);return 0; }
function b2557(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(448);return 0; }
function b2558(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(449);return 0; }
function b2559(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(451);return 0; }
function b2560(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(452);return 0; }
function b2561(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(453);return 0; }
function b2562(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(454);return 0; }
function b2563(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(455);return 0; }
function b2564(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(456);return 0; }
function b2565(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(457);return 0; }
function b2566(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(458);return 0; }
function b2567(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(459);return 0; }
function b2568(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(460);return 0; }
function b2569(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(461);return 0; }
function b2570(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(462);return 0; }
function b2571(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(463);return 0; }
function b2572(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(464);return 0; }
function b2573(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(465);return 0; }
function b2574(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(466);return 0; }
function b2575(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(467);return 0; }
function b2576(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(468);return 0; }
function b2577(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(469);return 0; }
function b2578(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(470);return 0; }
function b2579(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(471);return 0; }
function b2580(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(472);return 0; }
function b2581(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(473);return 0; }
function b2582(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(474);return 0; }
function b2583(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(475);return 0; }
function b2584(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(476);return 0; }
function b2585(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(477);return 0; }
function b2586(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(478);return 0; }
function b2587(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(479);return 0; }
function b2588(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(480);return 0; }
function b2589(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(481);return 0; }
function b2590(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(482);return 0; }
function b2591(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(483);return 0; }
function b2592(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(484);return 0; }
function b2593(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(485);return 0; }
function b2594(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(486);return 0; }
function b2595(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(487);return 0; }
function b2596(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(488);return 0; }
function b2597(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(489);return 0; }
function b2598(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(490);return 0; }
function b2599(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(491);return 0; }
function b2600(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(492);return 0; }
function b2601(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(493);return 0; }
function b2602(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(494);return 0; }
function b2603(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(495);return 0; }
function b2604(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(496);return 0; }
function b2605(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(497);return 0; }
function b2606(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(498);return 0; }
function b2607(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(499);return 0; }
function b2608(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(500);return 0; }
function b2609(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(501);return 0; }
function b2610(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(502);return 0; }
function b2611(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(503);return 0; }
function b2612(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(504);return 0; }
function b2613(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(505);return 0; }
function b2614(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(506);return 0; }
function b2615(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(507);return 0; }
function b2616(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(508);return 0; }
function b2617(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(509);return 0; }
function b2618(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(510);return 0; }
function b2619(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(511);return 0; }
function b2621(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(0); }
function b2622(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(1); }
function b2623(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(4); }
function b2624(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(7); }
function b2625(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(10); }
function b2626(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(13); }
function b2627(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(16); }
function b2628(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(19); }
function b2629(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(22); }
function b2630(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(25); }
function b2631(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(27); }
function b2632(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(29); }
function b2633(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(30); }
function b2634(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(31); }
var FUNCTION_TABLE_iiii = [b1,asm['_monad'],b2,b3,asm['_dyad'],b4,b5,asm['_adv'],b6,b7,asm['_conj978'],b8,b9,asm['_forkv'],b10,b11,asm['_hookv'],b12,b13,asm['_formo'],b14,b15,asm['_curry'],b16,b17,asm['_is'],b18,asm['_punc'],b19
,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38,b39,b40,b41,b42,b43,b44,b45,b46,b47,b48,b49
,b50,b51,b52,b53,b54,b55,b56,b57,b58,b59,b60,b61,b62,b63,b64,b65,b66,b67,b68,b69,b70,b71,b72,b73,b74,asm['_num2'],b75,b76,b77,b78
,b79,b80,b81,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91,b92,b93,b94,b95,b96,b97,b98,b99,b100,b101,b102,b103,b104,b105,b106,b107,b108
,b109,b110,b111,b112,b113,b114,b115,b116,b117,b118,b119,b120,b121,b122,b123,b124,b125,b126,b127,b128,b129,b130,b131,b132,b133,b134,b135,b136,b137,b138
,b139,b140,b141,b142,b143,b144,b145,b146,b147,b148,b149,b150,b151,b152,b153,b154,b155,b156,b157,b158,b159,b160,b161,b162,b163,b164,b165,b166,b167,b168
,b169,b170,b171,b172,b173,b174,b175,b176,b177,b178,b179,b180,b181,b182,b183,b184,b185,b186,b187,b188,b189,b190,b191,b192,b193,b194,b195,b196,b197,b198
,b199,b200,b201,b202,b203,b204,b205,b206,b207,b208,b209,b210,b211,b212,b213,b214,b215,b216,b217,b218,b219,b220,b221,b222,b223,asm['_sn_write'],b224,b225,asm['_bool2'],b226
,b227,asm['_oprod'],b228,b229,asm['_merge2'],b230,asm['_swap2'],b231,asm['_unquo2'],b232,b233,b234,b235,b236,asm['_key'],b237,b238,asm['_infix'],b239,b240,asm['_outfix'],b241,b242,b243,b244,b245,b246,asm['_on2'],b247,asm['_under2']
,asm['_upon2'],b248,asm['_obv2'],b249,asm['_ad2'],b250,asm['_dotprod'],b251,b252,asm['_cut02'],b253,b254,asm['_cut2'],b255,b256,asm['_deriv2'],b257,b258,b259,asm['_fitct2'],b260,asm['_fitctv'],b261,b262,asm['_shift2'],b263,asm['_fitexp2'],asm['_fitfill'],b264,b265
,b266,b267,asm['_con2'],b268,b269,asm['_case2'],b270,b271,asm['_gcr2'],asm['_gcl2'],b272,asm['_gav2'],b273,asm['_ply2'],b274,b275,asm['_powv2'],b276,b277,asm['_rank2'],asm['_rank2a'],asm['_cons2'],b278,asm['_cons2a'],b279,asm['_fork2'],b280,asm['_hook2'],b281,asm['_taca']
,asm['_tacc'],asm['_tcaa'],asm['_tcca'],asm['_tccc'],asm['_tcvc'],b282,b283,asm['_tca'],b284,b285,asm['_xconj'],b286,b287,asm['_xv2'],asm['_xn2'],b288,b289,b290,b291,b292,b293,b294,b295,b296,b297,b298,b299,b300,b301,b302
,b303,b304,b305,b306,b307,b308,b309,b310,b311,b312,b313,b314,b315,b316,b317,b318,b319,b320,b321,b322,b323,b324,asm['_eqx'],asm['_eqj'],b325,b326,asm['_eqa'],b327,asm['_eqd'],b328
,b329,b330,b331,b332,b333,b334,b335,b336,b337,b338,b339,b340,asm['_numd'],asm['_numj'],asm['_numbpx'],b341,b342,b343,b344,b345,b346,b347,b348,b349,b350,b351,b352,b353,b354,b355
,b356,b357,b358,b359,b360,b361,b362,b363,b364,b365,b366,b367,b368,b369,b370,b371,b372,b373,b374,b375,b376,b377,b378,b379,b380,b381,b382,b383,b384,b385
,b386,b387,b388,b389,b390,b391,b392,b393,b394,b395,b396,b397,b398,b399,b400,b401,b402,b403,b404,b405,b406,b407,b408,b409,b410,b411,b412,b413,b414,b415
,b416,b417,b418,b419,b420,b421,b422,b423,b424,b425,b426,b427,b428,b429,b430,b431,b432,b433,b434,b435,b436,b437,b438,b439,b440,b441,b442,b443,b444,b445
,b446,b447,b448];
var FUNCTION_TABLE_vi = [b450,b451,b452,b453,b454,b455,b456,b457,b458,b459,b460,b461,b462,b463,b464,b465,b466,b467,b468,b469,b470,b471,b472,b473,b474,b475,b476,b477,b478
,b479,b480,b481,b482,b483,b484,b485,b486,b487,b488,b489,b490,b491,b492,b493,b494,b495,b496,b497,b498,b499,b500,b501,b502,b503,b504,b505,b506,b507,b508
,b509,b510,b511,b512,b513,b514,b515,b516,b517,b518,b519,b520,b521,b522,b523,b524,b525,b526,b527,b528,b529,b530,b531,b532,b533,b534,b535,b536,b537,b538
,b539,b540,b541,b542,b543,b544,b545,b546,b547,b548,b549,b550,b551,b552,b553,b554,b555,b556,b557,b558,b559,b560,b561,b562,b563,b564,b565,b566,b567,b568
,b569,b570,b571,b572,b573,b574,b575,b576,b577,b578,b579,b580,b581,b582,b583,b584,b585,b586,b587,b588,b589,b590,b591,b592,b593,b594,b595,b596,b597,b598
,b599,b600,b601,b602,b603,b604,b605,b606,b607,b608,b609,b610,b611,b612,b613,b614,b615,b616,b617,b618,b619,b620,b621,b622,b623,b624,b625,b626,b627,b628
,b629,b630,b631,b632,b633,b634,b635,b636,b637,b638,b639,b640,b641,b642,b643,b644,b645,b646,b647,b648,b649,b650,b651,b652,b653,b654,b655,b656,b657,b658
,b659,b660,b661,b662,b663,b664,b665,b666,b667,b668,b669,b670,b671,b672,b673,b674,b675,b676,b677,b678,b679,b680,b681,b682,b683,b684,b685,b686,b687,b688
,b689,b690,b691,b692,b693,b694,b695,b696,b697,b698,b699,b700,b701,b702,b703,b704,b705,b706,b707,b708,b709,b710,b711,b712,b713,b714,b715,b716,b717,b718
,b719,b720,b721,b722,b723,b724,b725,b726,b727,b728,b729,b730,b731,b732,b733,b734,b735,b736,b737,b738,b739,b740,b741,b742,b743,b744,b745,b746,b747,b748
,b749,b750,b751,b752,b753,b754,b755,b756,b757,b758,b759,b760,b761,b762,b763,b764,b765,b766,b767,b768,b769,b770,b771,b772,b773,b774,b775,b776,b777,b778
,b779,b780,b781,b782,b783,b784,b785,b786,b787,b788,b789,b790,b791,b792,b793,b794,b795,b796,b797,b798,b799,b800,asm['_sigint'],b801,b802,b803,b804,b805,b806,b807
,b808,b809,b810,b811,b812,b813,b814,b815,b816,b817,b818,b819,b820,b821,b822,b823,b824,b825,b826,b827,b828,b829,b830,b831,b832,b833,b834,b835,b836,b837
,b838,b839,b840,b841,b842,b843,b844,b845,b846,b847,b848,b849,b850,b851,b852,b853,b854,b855,b856,b857,b858,b859,b860,b861,b862,b863,b864,b865,b866,b867
,b868,b869,b870,b871,b872,b873,b874,b875,b876,b877,b878,b879,b880,b881,b882,b883,b884,b885,b886,b887,b888,b889,b890,b891,b892,b893,b894,b895,b896,b897
,b898,b899,b900,b901,b902,b903,b904,b905,b906,b907,b908,b909,b910,b911,b912,b913,b914,b915,b916,b917,b918,b919,b920,b921,b922,b923,b924,b925,b926,b927
,b928,b929,b930,b931,b932,b933,b934,b935,b936,b937,b938,b939,b940,b941,b942,b943,b944,b945,b946,b947,b948,b949,b950,b951,b952,b953,b954,b955,b956,b957
,b958,b959,b960];
var FUNCTION_TABLE_vii = [b962,b963,b964,b965,b966,b967,b968,b969,b970,b971,b972,b973,b974,b975,b976,b977,b978,b979,b980,b981,b982,b983,b984,b985,b986,b987,b988,b989,b990
,b991,b992,b993,b994,b995,b996,b997,b998,b999,b1000,b1001,b1002,b1003,b1004,b1005,b1006,b1007,b1008,b1009,b1010,b1011,b1012,b1013,b1014,b1015,b1016,b1017,b1018,b1019,b1020
,b1021,b1022,b1023,b1024,b1025,b1026,b1027,b1028,b1029,b1030,b1031,b1032,b1033,b1034,b1035,b1036,b1037,b1038,b1039,b1040,b1041,b1042,b1043,b1044,b1045,b1046,b1047,b1048,b1049,b1050
,b1051,b1052,b1053,b1054,b1055,b1056,b1057,b1058,b1059,b1060,b1061,b1062,b1063,b1064,b1065,b1066,b1067,b1068,b1069,b1070,b1071,b1072,b1073,b1074,b1075,b1076,b1077,b1078,b1079,b1080
,b1081,b1082,b1083,b1084,b1085,b1086,b1087,b1088,b1089,b1090,b1091,b1092,b1093,b1094,b1095,b1096,b1097,b1098,b1099,b1100,b1101,b1102,b1103,b1104,b1105,b1106,b1107,b1108,b1109,b1110
,b1111,b1112,b1113,b1114,b1115,b1116,b1117,b1118,b1119,b1120,b1121,b1122,b1123,b1124,b1125,b1126,b1127,b1128,b1129,b1130,b1131,b1132,b1133,b1134,b1135,b1136,b1137,b1138,b1139,b1140
,b1141,b1142,b1143,b1144,b1145,b1146,b1147,b1148,b1149,b1150,b1151,b1152,b1153,b1154,b1155,b1156,b1157,b1158,b1159,b1160,b1161,b1162,b1163,b1164,b1165,b1166,b1167,b1168,b1169,b1170
,b1171,b1172,b1173,b1174,b1175,b1176,b1177,b1178,b1179,b1180,b1181,b1182,b1183,b1184,b1185,b1186,b1187,b1188,b1189,b1190,b1191,b1192,b1193,b1194,b1195,b1196,b1197,b1198,b1199,b1200
,b1201,b1202,b1203,b1204,b1205,b1206,b1207,b1208,b1209,b1210,b1211,b1212,b1213,b1214,b1215,b1216,b1217,b1218,b1219,b1220,b1221,b1222,b1223,b1224,b1225,b1226,b1227,b1228,b1229,b1230
,b1231,b1232,b1233,b1234,b1235,b1236,b1237,b1238,b1239,b1240,b1241,b1242,b1243,b1244,b1245,b1246,b1247,b1248,b1249,b1250,b1251,b1252,b1253,b1254,b1255,b1256,b1257,b1258,b1259,b1260
,b1261,b1262,b1263,b1264,b1265,b1266,b1267,b1268,b1269,b1270,b1271,b1272,b1273,b1274,b1275,b1276,b1277,b1278,b1279,b1280,b1281,b1282,b1283,b1284,b1285,b1286,b1287,b1288,b1289,b1290
,b1291,b1292,b1293,b1294,b1295,b1296,b1297,b1298,b1299,b1300,b1301,b1302,b1303,b1304,b1305,b1306,b1307,asm['_fmtB'],asm['_fmtI'],asm['_fmtD'],asm['_fmtZ'],b1308,b1309,b1310,b1311,b1312,b1313,b1314,b1315,b1316
,b1317,b1318,b1319,b1320,b1321,b1322,b1323,asm['_jconjug'],asm['_isignum'],asm['_dsignum'],asm['_jsignum'],asm['_dmag'],asm['_imag'],asm['_jmag'],asm['_dfloor'],asm['_jfloor'],asm['_dceil'],asm['_jceil'],b1324,b1325,b1326,b1327,b1328,b1329,b1330,b1331,b1332,b1333,b1334,asm['_dexp']
,asm['_jexp'],asm['_jlog'],asm['_jsqrt'],asm['_dfact'],asm['_znonce1'],b1335,b1336,b1337,b1338,b1339,b1340,b1341,b1342,b1343,b1344,b1345,b1346,b1347,b1348,b1349,b1350,b1351,b1352,b1353,b1354,b1355,b1356,b1357,b1358,b1359
,b1360,b1361,b1362,b1363,b1364,b1365,b1366,b1367,b1368,b1369,b1370,b1371,b1372,b1373,b1374,b1375,b1376,b1377,b1378,b1379,b1380,b1381,b1382,b1383,b1384,b1385,b1386,b1387,b1388,b1389
,b1390,b1391,b1392,b1393,b1394,b1395,b1396,b1397,b1398,b1399,b1400,b1401,b1402,b1403,b1404,b1405,b1406,b1407,b1408,b1409,b1410,b1411,b1412,b1413,b1414,b1415,b1416,b1417,b1418,b1419
,b1420,b1421,b1422,b1423,b1424,b1425,b1426,b1427,b1428,b1429,b1430,b1431,b1432,b1433,b1434,b1435,b1436,b1437,b1438,b1439,b1440,b1441,b1442,b1443,b1444,b1445,b1446,b1447,b1448,b1449
,b1450,b1451,b1452];
var FUNCTION_TABLE_ii = [b1454,b1455,b1456,b1457,b1458,b1459,b1460,b1461,b1462,b1463,b1464,b1465,b1466,b1467,b1468,b1469,b1470,b1471,b1472,b1473,b1474,b1475,b1476,b1477,b1478,b1479,b1480,b1481,b1482
,asm['_fact'],b1483,b1484,asm['_tally'],b1485,asm['_shape'],b1486,asm['_recip'],b1487,b1488,asm['_signum'],b1489,asm['_conjug'],b1490,asm['_ravel'],b1491,asm['_negate'],b1492,b1493,asm['_slash'],b1494,asm['_raze'],b1495,asm['_box'],b1496,asm['_sclass'],b1497,asm['_ope'],b1498,asm['_roll']
,b1499,b1500,asm['_left1'],b1501,asm['_bslash'],asm['_right1'],b1502,asm['_expn1'],b1503,b1504,asm['_catalog'],b1505,asm['_mag'],b1506,asm['_rbrace'],asm['_swap'],asm['_floor1'],b1507,asm['_decrem'],b1508,asm['_ceil1'],b1509,asm['_increm'],b1510,b1511,b1512,asm['_rect'],b1513,asm['_duble'],b1514
,asm['_polar'],b1515,asm['_square'],b1516,asm['_not'],b1517,asm['_halve'],b1518,asm['_minv'],b1519,asm['_sqroot'],b1520,asm['_logar1'],b1521,b1522,asm['_self1'],b1523,asm['_nub'],asm['_nubsieve'],b1524,asm['_reverse'],b1525,asm['_cant1'],b1526,b1527,b1528,b1529,b1530,asm['_table'],b1531
,asm['_lamin1'],b1532,b1533,asm['_words'],asm['_base1'],b1534,asm['_abase1'],b1535,b1536,b1537,asm['_sldot'],asm['_grade1'],b1538,asm['_bsdot'],asm['_dgrade1'],b1539,b1540,b1541,asm['_head'],b1542,asm['_tail'],asm['_behead'],b1543,asm['_curtail'],b1544,asm['_exec1'],b1545,asm['_thorn1'],b1546,b1547
,b1548,b1549,b1550,asm['_adot1'],b1551,asm['_bool'],asm['_eig1'],b1552,asm['_cdot1'],b1553,b1554,asm['_razein'],b1555,b1556,asm['_fix'],asm['_iota'],b1557,asm['_jdot1'],b1558,asm['_pix'],b1559,asm['_poly1'],b1560,asm['_rdot1'],b1561,asm['_taylor'],b1562,b1563,b1564,b1565
,b1566,b1567,b1568,b1569,b1570,b1571,b1572,b1573,b1574,b1575,b1576,b1577,b1578,b1579,b1580,b1581,b1582,b1583,b1584,b1585,b1586,b1587,b1588,b1589,b1590,b1591,b1592,b1593,b1594,b1595
,b1596,b1597,b1598,b1599,b1600,b1601,b1602,b1603,b1604,b1605,b1606,b1607,b1608,b1609,b1610,b1611,b1612,b1613,b1614,b1615,b1616,b1617,b1618,b1619,b1620,b1621,b1622,b1623,b1624,b1625
,b1626,b1627,b1628,b1629,b1630,b1631,b1632,b1633,b1634,asm['_fixa'],asm['_aro'],asm['_shr'],asm['_shl'],b1635,b1636,b1637,b1638,b1639,b1640,b1641,b1642,b1643,b1644,b1645,b1646,b1647,b1648,b1649,b1650,b1651
,b1652,b1653,b1654,b1655,b1656,b1657,b1658,b1659,b1660,b1661,b1662,b1663,b1664,b1665,b1666,b1667,b1668,b1669,b1670,b1671,b1672,b1673,b1674,b1675,b1676,b1677,b1678,b1679,b1680,b1681
,asm['_fx'],b1682,b1683,b1684,b1685,b1686,b1687,b1688,b1689,b1690,b1691,b1692,b1693,b1694,b1695,b1696,b1697,b1698,b1699,b1700,b1701,b1702,b1703,b1704,b1705,b1706,b1707,b1708,b1709,b1710
,b1711,b1712,b1713,b1714,b1715,b1716,b1717,b1718,b1719,b1720,b1721,b1722,b1723,b1724,b1725,asm['_tokens'],asm['_label'],b1726,b1727,b1728,b1729,asm['_matth1'],b1730,b1731,b1732,asm['_sr1'],asm['_drr'],asm['_trr'],asm['_ncx'],b1733
,b1734,b1735,b1736,b1737,b1738,b1739,b1740,b1741,b1742,b1743,b1744,b1745,b1746,b1747,b1748,b1749,b1750,b1751,b1752,b1753,b1754,b1755,b1756,b1757,b1758,b1759,b1760,b1761,b1762,b1763
,b1764,b1765,b1766,b1767,b1768,asm['_pinv'],b1769,b1770,asm['_rfd'],asm['_dfr'],b1771,b1772,b1773,b1774,b1775,asm['_host'],asm['_hostne'],asm['_script1'],b1776,asm['_sscript1'],b1777,asm['_line1'],b1778,asm['_sline1'],b1779,asm['_joff'],asm['_jfdir'],asm['_jfread'],b1780,b1781
,asm['_jfsize'],asm['_jiread'],b1782,asm['_jferase'],b1783,asm['_wnl'],asm['_save1'],b1784,asm['_psave1'],b1785,asm['_copy1'],b1786,asm['_pcopy1'],b1787,b1788,asm['_stype'],asm['_ir'],asm['_ri'],asm['_nl1'],b1789,asm['_ex55'],asm['_ex56'],asm['_fxx'],asm['_arx'],asm['_drx'],asm['_srx'],asm['_trx'],asm['_lrx'],asm['_ts'],asm['_tss']
,asm['_tsit1'],b1790,asm['_dl'],asm['_sp'],asm['_sps'],asm['_spit'],asm['_rlq'],asm['_rls'],asm['_dispq'],asm['_disps'],asm['_promptq'],asm['_prompts'],asm['_boxq'],asm['_boxs'],asm['_evmq'],asm['_evms'],asm['_dbr'],asm['_dbs'],asm['_dbsq'],asm['_dbss'],asm['_dbrun'],asm['_dbnxt'],asm['_dbret'],asm['_dbpop'],asm['_qr'],asm['_rinv'],asm['_rankle'],asm['_catsp'],b1791,b1792
,b1793,b1794,b1795,b1796,b1797,b1798,b1799,b1800,b1801,b1802,b1803,b1804,b1805,b1806,b1807,b1808,b1809,b1810,b1811,b1812,b1813,b1814,b1815,b1816,b1817,b1818,b1819,b1820,b1821,b1822
,b1823,b1824,b1825];
var FUNCTION_TABLE_viii = [b1827,b1828,b1829,b1830,b1831,b1832,b1833,b1834,b1835,b1836,b1837,b1838,b1839,b1840,b1841,b1842,b1843,b1844,b1845,b1846,b1847,b1848,b1849,b1850,b1851,b1852,b1853,b1854,b1855
,b1856,b1857,b1858,b1859,b1860,b1861,b1862,b1863,b1864,b1865,b1866,b1867,b1868,b1869,b1870,b1871,b1872,b1873,b1874,b1875,b1876,b1877,b1878,b1879,b1880,b1881,b1882,b1883,b1884,b1885
,b1886,b1887,b1888,b1889,b1890,b1891,b1892,b1893,b1894,b1895,b1896,b1897,b1898,b1899,b1900,b1901,b1902,b1903,b1904,b1905,b1906,b1907,b1908,b1909,b1910,b1911,b1912,b1913,b1914,b1915
,b1916,b1917,b1918,b1919,b1920,b1921,b1922,b1923,b1924,b1925,b1926,b1927,b1928,b1929,b1930,b1931,b1932,b1933,b1934,b1935,b1936,b1937,b1938,b1939,b1940,b1941,b1942,b1943,b1944,b1945
,b1946,b1947,b1948,b1949,b1950,b1951,b1952,b1953,b1954,b1955,b1956,b1957,b1958,b1959,b1960,b1961,b1962,b1963,b1964,b1965,b1966,b1967,b1968,b1969,b1970,b1971,b1972,b1973,b1974,b1975
,b1976,b1977,b1978,b1979,b1980,b1981,b1982,b1983,b1984,b1985,b1986,b1987,b1988,b1989,b1990,b1991,b1992,b1993,b1994,b1995,b1996,b1997,b1998,b1999,b2000,b2001,b2002,asm['_ble'],asm['_dbin'],asm['_jbin']
,asm['_ddiv'],asm['_jdiv'],asm['_bdiv'],asm['_idiv'],asm['_band'],asm['_dtymes'],asm['_jtymes'],asm['_itymes'],asm['_bplus'],asm['_dplus'],asm['_jplus'],asm['_bplus2'],asm['_iplus'],asm['_bminus'],asm['_dminus'],asm['_jminus'],asm['_bminus2'],asm['_iminus'],asm['_blt'],asm['_ilt'],asm['_dlt'],asm['_beq'],asm['_ieq'],asm['_deq'],asm['_jeq'],asm['_bgt'],asm['_igt'],asm['_dgt'],asm['_bge'],asm['_jpow']
,asm['_irem'],asm['_dren'],asm['_jrem'],asm['_imin'],asm['_dmin'],asm['_ile'],asm['_dle'],asm['_bor'],asm['_imax'],asm['_dmax'],asm['_ige'],asm['_dge'],asm['_igcd'],asm['_dgcd'],asm['_jgcd'],asm['_bnor'],asm['_dlcm'],asm['_jlcm'],asm['_ilcm'],asm['_bnand'],asm['_bne'],asm['_ine'],asm['_dne'],asm['_jne'],asm['_jcir'],b2003,b2004,b2005,b2006,b2007
,b2008,b2009,b2010,b2011,b2012,b2013,b2014,b2015,b2016,b2017,b2018,b2019,b2020,b2021,b2022,b2023,b2024,b2025,b2026,b2027,b2028,b2029,b2030,b2031,b2032,b2033,b2034,b2035,b2036,b2037
,b2038,b2039,b2040,b2041,b2042,b2043,b2044,b2045,b2046,b2047,b2048,b2049,b2050,b2051,b2052,b2053,b2054,b2055,b2056,b2057,b2058,b2059,b2060,b2061,b2062,b2063,b2064,b2065,b2066,b2067
,b2068,b2069,b2070,b2071,b2072,b2073,b2074,b2075,b2076,b2077,b2078,b2079,b2080,b2081,b2082,b2083,b2084,b2085,b2086,b2087,b2088,b2089,b2090,b2091,b2092,b2093,b2094,b2095,b2096,b2097
,b2098,b2099,b2100,b2101,b2102,b2103,b2104,b2105,b2106,b2107,b2108,b2109,b2110,b2111,b2112,b2113,b2114,b2115,b2116,b2117,b2118,b2119,b2120,b2121,b2122,b2123,b2124,b2125,b2126,asm['_nne']
,asm['_neq'],asm['_keq'],asm['_aeq'],asm['_kne'],asm['_ane'],asm['_ceq'],asm['_cne'],b2127,b2128,b2129,b2130,b2131,b2132,b2133,b2134,b2135,b2136,b2137,b2138,b2139,b2140,b2141,b2142,b2143,b2144,b2145,b2146,b2147,b2148,b2149
,b2150,b2151,b2152,b2153,b2154,b2155,b2156,b2157,b2158,b2159,b2160,b2161,b2162,b2163,b2164,b2165,b2166,b2167,b2168,b2169,b2170,b2171,b2172,b2173,b2174,b2175,b2176,b2177,b2178,b2179
,b2180,b2181,b2182,b2183,b2184,b2185,b2186,b2187,b2188,b2189,b2190,b2191,b2192,b2193,b2194,b2195,b2196,b2197,b2198,b2199,b2200,b2201,b2202,b2203,b2204,b2205,b2206,b2207,b2208,b2209
,b2210,b2211,b2212,b2213,b2214,b2215,b2216,b2217,b2218,b2219,b2220,b2221,b2222,b2223,b2224,b2225,b2226,b2227,b2228,b2229,b2230,b2231,b2232,b2233,b2234,b2235,b2236,b2237,b2238,b2239
,b2240,b2241,b2242,b2243,b2244,b2245,b2246,b2247,b2248,b2249,b2250,b2251,b2252,b2253,b2254,b2255,b2256,b2257,b2258,b2259,b2260,b2261,b2262,b2263,b2264,b2265,b2266,b2267,b2268,b2269
,b2270,b2271,b2272];
var FUNCTION_TABLE_iii = [b2274,b2275,b2276,b2277,b2278,b2279,b2280,b2281,b2282,b2283,b2284,b2285,b2286,b2287,b2288,b2289,b2290,b2291,b2292,b2293,b2294,b2295,b2296,b2297,b2298,b2299,b2300,b2301,b2302
,b2303,asm['_outof'],asm['_qq'],b2304,asm['_repeat'],b2305,asm['_reitem'],b2306,asm['_divide'],asm['_amp'],b2307,asm['_tymes'],b2308,asm['_plus'],b2309,asm['_over'],b2310,asm['_minus'],asm['_dot'],b2311,asm['_colon'],b2312,asm['_link'],b2313,asm['_lt'],b2314,asm['_eq'],b2315,asm['_gt'],b2316
,asm['_deal'],asm['_atop'],b2317,asm['_left2'],b2318,b2319,asm['_right2'],b2320,asm['_expn2'],asm['_tie'],b2321,asm['_from'],b2322,asm['_residue'],b2323,b2324,b2325,asm['_minimum'],b2326,asm['_le'],b2327,asm['_maximum'],b2328,asm['_ge'],asm['_num1'],b2329,b2330,asm['_gcd'],b2331,asm['_nor']
,b2332,asm['_lcm'],b2333,asm['_nand'],b2334,asm['_less'],b2335,asm['_match'],b2336,asm['_mdiv'],b2337,asm['_root'],b2338,asm['_logar2'],asm['_powop'],b2339,asm['_self2'],b2340,b2341,asm['_ne'],b2342,asm['_rotate'],b2343,asm['_cant2'],asm['_even'],asm['_odd'],asm['_obverse'],asm['_adverse'],b2344,asm['_overr']
,b2345,asm['_lamin2'],asm['_cut'],b2346,b2347,asm['_base2'],b2348,asm['_abase2'],asm['_agenda'],asm['_atco'],b2349,b2350,asm['_grade2'],b2351,b2352,asm['_dgrade2'],asm['_lev'],asm['_dex'],b2353,asm['_take'],b2354,b2355,asm['_drop'],b2356,asm['_evger'],b2357,asm['_exec2'],b2358,asm['_thorn2'],asm['_under']
,asm['_ampco'],asm['_fit'],asm['_foreign'],b2359,asm['_adot2'],b2360,b2361,asm['_eig2'],b2362,asm['_cdot2'],asm['_ddot'],b2363,asm['_eps'],asm['_ebar'],b2364,b2365,asm['_indexof'],b2366,asm['_jdot2'],b2367,asm['_circle'],b2368,asm['_poly2'],b2369,asm['_rdot2'],b2370,asm['_tayn'],b2371,b2372,b2373
,b2374,b2375,b2376,b2377,b2378,b2379,b2380,b2381,b2382,b2383,b2384,b2385,b2386,b2387,b2388,b2389,b2390,b2391,b2392,b2393,b2394,b2395,b2396,b2397,b2398,b2399,b2400,b2401,b2402,b2403
,b2404,b2405,b2406,b2407,b2408,b2409,b2410,b2411,b2412,b2413,b2414,b2415,b2416,b2417,b2418,b2419,b2420,b2421,b2422,b2423,b2424,b2425,b2426,b2427,b2428,b2429,asm['_basis1'],asm['_bool1'],b2430,asm['_reduce']
,asm['_areduce'],b2431,asm['_catred'],asm['_merge1'],b2432,asm['_swap1'],b2433,asm['_unquo1'],b2434,b2435,b2436,b2437,b2438,asm['_oblique'],b2439,asm['_prefix'],asm['_pscan'],b2440,asm['_suffix'],asm['_sscan'],b2441,asm['_osub'],asm['_seg'],asm['_domerr'],asm['_withl'],asm['_withr'],asm['_on1'],b2442,asm['_under1'],b2443
,b2444,asm['_obv1'],b2445,asm['_ad1'],b2446,asm['_pdt'],b2447,asm['_det'],asm['_cut01'],b2448,asm['_cut1'],asm['_cut1x'],b2449,asm['_pind'],asm['_deriv1'],b2450,asm['_taylor1'],asm['_tayn1'],asm['_fitct1'],b2451,asm['_fitope'],b2452,asm['_fitbox'],asm['_shift1'],b2453,asm['_fitexp1'],b2454,b2455,asm['_fitpp1'],asm['_reshape']
,b2456,asm['_con1'],b2457,asm['_insert'],asm['_case1'],b2458,asm['_gcr1'],asm['_gcl1'],b2459,b2460,asm['_gav1'],b2461,asm['_ply1'],b2462,asm['_inv1'],asm['_powv1'],b2463,asm['_rank1'],asm['_cons1'],b2464,b2465,b2466,asm['_cons1a'],b2467,asm['_fork1'],b2468,asm['_hook1'],b2469,asm['_taaa'],b2470
,b2471,b2472,b2473,b2474,b2475,asm['_taa'],asm['_tac'],b2476,asm['_aform'],asm['_xadv'],b2477,asm['_xv1'],asm['_xn1'],b2478,b2479,b2480,b2481,b2482,b2483,b2484,b2485,b2486,b2487,asm['_isg'],asm['_isl'],b2488,b2489,b2490,b2491,b2492
,b2493,b2494,b2495,b2496,b2497,b2498,b2499,b2500,b2501,b2502,b2503,b2504,b2505,b2506,b2507,b2508,b2509,b2510,asm['_wt'],asm['_compD'],asm['_compI'],asm['_compUC'],b2511,b2512,asm['_hix'],asm['_hid'],b2513,asm['_hia'],b2514,b2515
,b2516,b2517,b2518,b2519,b2520,b2521,asm['_pfill'],asm['_dfc'],b2522,b2523,asm['_afrom'],asm['_afi'],b2524,b2525,b2526,b2527,b2528,b2529,asm['_script2'],b2530,asm['_sscript2'],b2531,asm['_line2'],b2532,asm['_sline2'],b2533,b2534,b2535,asm['_jfwrite'],asm['_jfappend']
,b2536,b2537,asm['_jiwrite'],b2538,asm['_wnc'],b2539,b2540,asm['_save2'],b2541,asm['_psave2'],b2542,asm['_copy2'],b2543,asm['_pcopy2'],asm['_wex'],b2544,b2545,b2546,b2547,asm['_nl2'],b2548,b2549,b2550,b2551,b2552,b2553,b2554,b2555,b2556,b2557
,b2558,asm['_tsit2'],b2559,b2560,b2561,b2562,b2563,b2564,b2565,b2566,b2567,b2568,b2569,b2570,b2571,b2572,b2573,b2574,b2575,b2576,b2577,b2578,b2579,b2580,b2581,b2582,b2583,b2584,b2585,b2586
,b2587,b2588,b2589,b2590,b2591,b2592,b2593,b2594,b2595,b2596,b2597,b2598,b2599,b2600,b2601,b2602,b2603,b2604,b2605,b2606,b2607,b2608,b2609,b2610,b2611,b2612,b2613,b2614,b2615,b2616
,b2617,b2618,b2619];
var FUNCTION_TABLE_viiii = [b2621,b2622,asm['_vmonad'],asm['_cmonad'],b2623,asm['_vdyad'],asm['_cdyad'],b2624,asm['_vadv'],asm['_cadv'],b2625,asm['_vconj'],asm['_cconj'],b2626,asm['_vforkv'],asm['_cforkv'],b2627,asm['_vhookv'],asm['_chookv'],b2628,asm['_vformo'],asm['_cformo'],b2629,asm['_vcurry'],asm['_ccurry'],b2630,asm['_vis'],b2631,asm['_vpunc']
,b2632,b2633,b2634];
Module["dynCall_iiii"] = dynCall_iiii
Module["dynCall_vi"] = dynCall_vi
Module["dynCall_vii"] = dynCall_vii
Module["dynCall_ii"] = dynCall_ii
Module["dynCall_viii"] = dynCall_viii
Module["dynCall_iii"] = dynCall_iii
Module["dynCall_viiii"] = dynCall_viiii
Module["FUNCTION_TABLE_iiii"] = FUNCTION_TABLE_iiii;
Module["FUNCTION_TABLE_vi"] = FUNCTION_TABLE_vi;
Module["FUNCTION_TABLE_vii"] = FUNCTION_TABLE_vii;
Module["FUNCTION_TABLE_ii"] = FUNCTION_TABLE_ii;
Module["FUNCTION_TABLE_viii"] = FUNCTION_TABLE_viii;
Module["FUNCTION_TABLE_iii"] = FUNCTION_TABLE_iii;
Module["FUNCTION_TABLE_viiii"] = FUNCTION_TABLE_viiii;
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }
    var request = Module['memoryInitializerRequest'];
    if (request) {
      // a network request has already been created, just use that
      if (request.response) {
        setTimeout(function() {
          applyMemoryInitializer(request.response);
        }, 0); // it's already here; but, apply it asynchronously
      } else {
        request.addEventListener('load', function() { // wait for it
          if (request.status !== 200 && request.status !== 0) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status);
          }
          if (!request.response || typeof request.response !== 'object' || !request.response.byteLength) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest response (expected ArrayBuffer): ' + request.response);
          }
          applyMemoryInitializer(request.response);
        });
      }
    } else {
      // fetch it from the network ourselves
      Browser.asyncLoad(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {
    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}





// cat a.out.patch >> a.out.js
function ftCall_iiii(x, a0, a1, a2) {
    if (debug_table_iiii[x] != 0) {
	return FUNCTION_TABLE_iiii[x](a0, a1,a2);
    } else if (debug_table_iii[x] != 0) {
	return FUNCTION_TABLE_iii[x](a0, a1);
    } 
    return FUNCTION_TABLE_iiii[x](a0, a1, a2);
}

function ftCall_iiiii(x, a0, a1, a2, a3) {
    if (debug_table_iiiii[x] != 0) {
	return FUNCTION_TABLE_iiiii[x](a0, a1,a2, a3);
    } else if (debug_table_iiii[x] != 0) {
	return FUNCTION_TABLE_iiii[x](a0, a1, a2);
    } 
    return FUNCTION_TABLE_iiiii[x](a0, a1,a2, a3);
}

var _jtmonadO = _jtmonad;

function _jtmonad($jt,$b,$e,$stack) {
console.log(arguments);
return _jtmonad($jt, $b, $e, $stack);
}

